// Generated by Haxe 4.0.0 (git build nightly-travis @ 212f0cd)
(function ($hx_exports, $global) { "use strict";
$hx_exports["openfl"] = $hx_exports["openfl"] || {};
$hx_exports["openfl"]["ui"] = $hx_exports["openfl"]["ui"] || {};
;$hx_exports["openfl"]["system"] = $hx_exports["openfl"]["system"] || {};
;$hx_exports["openfl"]["sensors"] = $hx_exports["openfl"]["sensors"] || {};
;$hx_exports["openfl"]["profiler"] = $hx_exports["openfl"]["profiler"] || {};
;$hx_exports["openfl"]["printing"] = $hx_exports["openfl"]["printing"] || {};
;$hx_exports["openfl"]["net"] = $hx_exports["openfl"]["net"] || {};
;$hx_exports["openfl"]["media"] = $hx_exports["openfl"]["media"] || {};
;$hx_exports["openfl"]["filters"] = $hx_exports["openfl"]["filters"] || {};
;$hx_exports["openfl"]["external"] = $hx_exports["openfl"]["external"] || {};
;$hx_exports["openfl"]["errors"] = $hx_exports["openfl"]["errors"] || {};
;$hx_exports["openfl"]["display3D"] = $hx_exports["openfl"]["display3D"] || {};
$hx_exports["openfl"]["display3D"]["textures"] = $hx_exports["openfl"]["display3D"]["textures"] || {};
;$hx_exports["openfl"]["text"] = $hx_exports["openfl"]["text"] || {};
;$hx_exports["openfl"]["events"] = $hx_exports["openfl"]["events"] || {};
$hx_exports["openfl"]["events"]["_EventDispatcher"] = $hx_exports["openfl"]["events"]["_EventDispatcher"] || {};
;$hx_exports["openfl"]["desktop"] = $hx_exports["openfl"]["desktop"] || {};
;$hx_exports["openfl"]["utils"] = $hx_exports["openfl"]["utils"] || {};
;$hx_exports["openfl"]["display"] = $hx_exports["openfl"]["display"] || {};
;$hx_exports["openfl"]["geom"] = $hx_exports["openfl"]["geom"] || {};
;$hx_exports["openfl"]["_internal"] = $hx_exports["openfl"]["_internal"] || {};
$hx_exports["openfl"]["_internal"]["utils"] = $hx_exports["openfl"]["_internal"]["utils"] || {};
;$hx_exports["openfl"]["_internal"]["timeline"] = $hx_exports["openfl"]["_internal"]["timeline"] || {};
;$hx_exports["openfl"]["_internal"]["text"] = $hx_exports["openfl"]["_internal"]["text"] || {};
;$hx_exports["openfl"]["_internal"]["symbols"] = $hx_exports["openfl"]["_internal"]["symbols"] || {};
;$hx_exports["openfl"]["_internal"]["swf"] = $hx_exports["openfl"]["_internal"]["swf"] || {};
;$hx_exports["openfl"]["_internal"]["stage3D"] = $hx_exports["openfl"]["_internal"]["stage3D"] || {};
$hx_exports["openfl"]["_internal"]["stage3D"]["opengl"] = $hx_exports["openfl"]["_internal"]["stage3D"]["opengl"] || {};
;$hx_exports["openfl"]["_internal"]["stage3D"]["atf"] = $hx_exports["openfl"]["_internal"]["stage3D"]["atf"] || {};
;$hx_exports["openfl"]["_internal"]["stage3D"]["assembler"] = $hx_exports["openfl"]["_internal"]["stage3D"]["assembler"] || {};
;$hx_exports["openfl"]["_internal"]["stage3D"]["_AGALConverter"] = $hx_exports["openfl"]["_internal"]["stage3D"]["_AGALConverter"] || {};
;$hx_exports["openfl"]["_internal"]["renderer"] = $hx_exports["openfl"]["_internal"]["renderer"] || {};
$hx_exports["openfl"]["_internal"]["renderer"]["opengl"] = $hx_exports["openfl"]["_internal"]["renderer"]["opengl"] || {};
$hx_exports["openfl"]["_internal"]["renderer"]["opengl"]["stats"] = $hx_exports["openfl"]["_internal"]["renderer"]["opengl"]["stats"] || {};
;$hx_exports["openfl"]["_internal"]["renderer"]["flash"] = $hx_exports["openfl"]["_internal"]["renderer"]["flash"] || {};
;$hx_exports["openfl"]["_internal"]["renderer"]["dom"] = $hx_exports["openfl"]["_internal"]["renderer"]["dom"] || {};
;$hx_exports["openfl"]["_internal"]["renderer"]["console"] = $hx_exports["openfl"]["_internal"]["renderer"]["console"] || {};
;$hx_exports["openfl"]["_internal"]["renderer"]["canvas"] = $hx_exports["openfl"]["_internal"]["renderer"]["canvas"] || {};
;$hx_exports["openfl"]["_internal"]["renderer"]["cairo"] = $hx_exports["openfl"]["_internal"]["renderer"]["cairo"] || {};
;$hx_exports["openfl"]["_Vector"] = $hx_exports["openfl"]["_Vector"] || {};
$hx_exports["lime"] = $hx_exports["lime"] || {};
if (!$hx_exports.$hxClasses) $hx_exports.$hxClasses = {};
var $hxClasses = $hx_exports.$hxClasses,$estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var IntIterator = function(min,max) {
	this.min = min;
	this.max = max;
};
$hxClasses["IntIterator"] = IntIterator;
IntIterator.__name__ = ["IntIterator"];
IntIterator.prototype = {
	min: null
	,max: null
	,hasNext: function() {
		return this.min < this.max;
	}
	,next: function() {
		return this.min++;
	}
	,__class__: IntIterator
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = ["Lambda"];
Lambda.array = function(it) {
	var a = [];
	var i = $iterator(it)();
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
Lambda.list = function(it) {
	var l = new $hx_exports.List();
	var i = $iterator(it)();
	while(i.hasNext()) {
		var i1 = i.next();
		l.add(i1);
	}
	return l;
};
Lambda.map = function(it,f) {
	var l = new $hx_exports.List();
	var x = $iterator(it)();
	while(x.hasNext()) {
		var x1 = x.next();
		l.add(f(x1));
	}
	return l;
};
Lambda.mapi = function(it,f) {
	var l = new $hx_exports.List();
	var i = 0;
	var x = $iterator(it)();
	while(x.hasNext()) {
		var x1 = x.next();
		l.add(f(i++,x1));
	}
	return l;
};
Lambda.flatten = function(it) {
	var l = new $hx_exports.List();
	var e = $iterator(it)();
	while(e.hasNext()) {
		var e1 = e.next();
		var x = $iterator(e1)();
		while(x.hasNext()) {
			var x1 = x.next();
			l.add(x1);
		}
	}
	return l;
};
Lambda.flatMap = function(it,f) {
	return Lambda.flatten(Lambda.map(it,f));
};
Lambda.has = function(it,elt) {
	var x = $iterator(it)();
	while(x.hasNext()) {
		var x1 = x.next();
		if(x1 == elt) {
			return true;
		}
	}
	return false;
};
Lambda.exists = function(it,f) {
	var x = $iterator(it)();
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			return true;
		}
	}
	return false;
};
Lambda.foreach = function(it,f) {
	var x = $iterator(it)();
	while(x.hasNext()) {
		var x1 = x.next();
		if(!f(x1)) {
			return false;
		}
	}
	return true;
};
Lambda.iter = function(it,f) {
	var x = $iterator(it)();
	while(x.hasNext()) {
		var x1 = x.next();
		f(x1);
	}
};
Lambda.filter = function(it,f) {
	var l = new $hx_exports.List();
	var x = $iterator(it)();
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			l.add(x1);
		}
	}
	return l;
};
Lambda.fold = function(it,f,first) {
	var x = $iterator(it)();
	while(x.hasNext()) {
		var x1 = x.next();
		first = f(x1,first);
	}
	return first;
};
Lambda.count = function(it,pred) {
	var n = 0;
	if(pred == null) {
		var _ = $iterator(it)();
		while(_.hasNext()) {
			var _1 = _.next();
			++n;
		}
	} else {
		var x = $iterator(it)();
		while(x.hasNext()) {
			var x1 = x.next();
			if(pred(x1)) {
				++n;
			}
		}
	}
	return n;
};
Lambda.empty = function(it) {
	return !$iterator(it)().hasNext();
};
Lambda.indexOf = function(it,v) {
	var i = 0;
	var v2 = $iterator(it)();
	while(v2.hasNext()) {
		var v21 = v2.next();
		if(v == v21) {
			return i;
		}
		++i;
	}
	return -1;
};
Lambda.find = function(it,f) {
	var v = $iterator(it)();
	while(v.hasNext()) {
		var v1 = v.next();
		if(f(v1)) {
			return v1;
		}
	}
	return null;
};
Lambda.concat = function(a,b) {
	var l = new $hx_exports.List();
	var x = $iterator(a)();
	while(x.hasNext()) {
		var x1 = x.next();
		l.add(x1);
	}
	var x2 = $iterator(b)();
	while(x2.hasNext()) {
		var x3 = x2.next();
		l.add(x3);
	}
	return l;
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["_List.ListNode"] = _$List_ListNode;
_$List_ListNode.__name__ = ["_List","ListNode"];
_$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: _$List_ListNode
};
var _$Map_Map_$Impl_$ = {};
$hxClasses["_Map.Map_Impl_"] = _$Map_Map_$Impl_$;
_$Map_Map_$Impl_$.__name__ = ["_Map","Map_Impl_"];
_$Map_Map_$Impl_$.set = function(this1,key,value) {
	this1.set(key,value);
};
_$Map_Map_$Impl_$.get = function(this1,key) {
	return this1.get(key);
};
_$Map_Map_$Impl_$.exists = function(this1,key) {
	return this1.exists(key);
};
_$Map_Map_$Impl_$.remove = function(this1,key) {
	return this1.remove(key);
};
_$Map_Map_$Impl_$.keys = function(this1) {
	return this1.keys();
};
_$Map_Map_$Impl_$.iterator = function(this1) {
	return this1.iterator();
};
_$Map_Map_$Impl_$.copy = function(this1) {
	return this1.copy();
};
_$Map_Map_$Impl_$.toString = function(this1) {
	return this1.toString();
};
_$Map_Map_$Impl_$.arrayWrite = function(this1,k,v) {
	this1.set(k,v);
	return v;
};
_$Map_Map_$Impl_$.toStringMap = function(t) {
	return new haxe_ds_StringMap();
};
_$Map_Map_$Impl_$.toIntMap = function(t) {
	return new $hx_exports.haxe.ds.IntMap();
};
_$Map_Map_$Impl_$.toEnumValueMapMap = function(t) {
	return new $hx_exports.haxe.ds.EnumValueMap();
};
_$Map_Map_$Impl_$.toObjectMap = function(t) {
	return new $hx_exports.haxe.ds.ObjectMap();
};
_$Map_Map_$Impl_$.fromStringMap = function(map) {
	return map;
};
_$Map_Map_$Impl_$.fromIntMap = function(map) {
	return map;
};
_$Map_Map_$Impl_$.fromObjectMap = function(map) {
	return map;
};
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.hasField = function(o,field) {
	return Object.prototype.hasOwnProperty.call(o,field);
};
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.setField = function(o,field,value) {
	o[field] = value;
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.callMethod = function(o,func,args) {
	return func.apply(o,args);
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(js_Boot.isClass(f) || js_Boot.isEnum(f));
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.isObject = function(v) {
	if(v == null) {
		return false;
	}
	var t = typeof(v);
	if(!(t == "string" || t == "object" && v.__enum__ == null)) {
		if(t == "function") {
			return (js_Boot.isClass(v) || js_Boot.isEnum(v)) != null;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Reflect.hasField(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
Reflect.copy = function(o) {
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		Reflect.setField(o2,f,Reflect.field(o,f));
	}
	return o2;
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice.call(arguments);
		return f(a);
	};
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std.is = function(v,t) {
	return js_Boot.__instanceof(v,t);
};
Std.instance = function(value,c) {
	if((value instanceof c)) {
		return value;
	} else {
		return null;
	}
};
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.int = function(x) {
	return x | 0;
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && ($hx_exports.HxOverrides.cca(x,1) == 120 || $hx_exports.HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
Std.parseFloat = function(x) {
	return parseFloat(x);
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return $hx_exports.Math.floor($hx_exports.Math.random() * x);
	}
};
var ValueType = $hxClasses["ValueType"] = { __ename__ : ["ValueType"], __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"] };
ValueType.TNull = ["TNull",0];
ValueType.TNull.toString = $estr;
ValueType.TNull.__enum__ = ValueType;
ValueType.TInt = ["TInt",1];
ValueType.TInt.toString = $estr;
ValueType.TInt.__enum__ = ValueType;
ValueType.TFloat = ["TFloat",2];
ValueType.TFloat.toString = $estr;
ValueType.TFloat.__enum__ = ValueType;
ValueType.TBool = ["TBool",3];
ValueType.TBool.toString = $estr;
ValueType.TBool.__enum__ = ValueType;
ValueType.TObject = ["TObject",4];
ValueType.TObject.toString = $estr;
ValueType.TObject.__enum__ = ValueType;
ValueType.TFunction = ["TFunction",5];
ValueType.TFunction.toString = $estr;
ValueType.TFunction.__enum__ = ValueType;
ValueType.TClass = function(c) { var $x = ["TClass",6,c]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TEnum = function(e) { var $x = ["TEnum",7,e]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TUnknown = ["TUnknown",8];
ValueType.TUnknown.toString = $estr;
ValueType.TUnknown.__enum__ = ValueType;
ValueType.__empty_constructs__ = [ValueType.TNull,ValueType.TInt,ValueType.TFloat,ValueType.TBool,ValueType.TObject,ValueType.TFunction,ValueType.TUnknown];
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getClass = function(o) {
	if(o == null) {
		return null;
	} else {
		return js_Boot.getClass(o);
	}
};
Type.getEnum = function(o) {
	if(o == null) {
		return null;
	}
	return o.__enum__;
};
Type.getSuperClass = function(c) {
	return c.__super__;
};
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
Type.getEnumName = function(e) {
	var a = e.__ename__;
	return a.join(".");
};
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !js_Boot.isClass(cl)) {
		return null;
	}
	return cl;
};
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !js_Boot.isEnum(e)) {
		return null;
	}
	return e;
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	case 9:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8]);
	case 10:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9]);
	case 11:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10]);
	case 12:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11]);
	case 13:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12]);
	case 14:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12],args[13]);
	default:
		throw new js__$Boot_HaxeError("Too many arguments");
	}
};
Type.createEmptyInstance = function(cl) {
	return Object.create(cl.prototype);
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw new js__$Boot_HaxeError("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		}
		return Reflect.callMethod(e,f,params);
	}
	if(params != null && params.length != 0) {
		throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.createEnumIndex = function(e,index,params) {
	var c = e.__constructs__[index];
	if(c == null) {
		throw new js__$Boot_HaxeError(index + " is not a valid enum constructor index");
	}
	return Type.createEnum(e,c,params);
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	$hx_exports.HxOverrides.remove(a,"__class__");
	$hx_exports.HxOverrides.remove(a,"__properties__");
	return a;
};
Type.getClassFields = function(c) {
	var a = Reflect.fields(c);
	$hx_exports.HxOverrides.remove(a,"__name__");
	$hx_exports.HxOverrides.remove(a,"__interfaces__");
	$hx_exports.HxOverrides.remove(a,"__properties__");
	$hx_exports.HxOverrides.remove(a,"__super__");
	$hx_exports.HxOverrides.remove(a,"__meta__");
	$hx_exports.HxOverrides.remove(a,"prototype");
	return a;
};
Type.getEnumConstructs = function(e) {
	return e.__constructs__.slice();
};
Type["typeof"] = function(v) {
	var _g = typeof(v);
	switch(_g) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(js_Boot.isClass(v) || js_Boot.isEnum(v)) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if($hx_exports.Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum(e);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		if(a[0] != b[0]) {
			return false;
		}
		var _g1 = 2;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(!Type.enumEq(a[i],b[i])) {
				return false;
			}
		}
		var e = a.__enum__;
		if(e != b.__enum__ || e == null) {
			return false;
		}
	} catch( e1 ) {
		return false;
	}
	return true;
};
Type.enumConstructor = function(e) {
	return e[0];
};
Type.enumParameters = function(e) {
	return e.slice(2);
};
Type.enumIndex = function(e) {
	return e[1];
};
Type.allEnums = function(e) {
	return e.__empty_constructs__;
};
var _$UInt_UInt_$Impl_$ = {};
$hxClasses["_UInt.UInt_Impl_"] = _$UInt_UInt_$Impl_$;
_$UInt_UInt_$Impl_$.__name__ = ["_UInt","UInt_Impl_"];
_$UInt_UInt_$Impl_$.add = function(a,b) {
	return a + b;
};
_$UInt_UInt_$Impl_$.div = function(a,b) {
	return _$UInt_UInt_$Impl_$.toFloat(a) / _$UInt_UInt_$Impl_$.toFloat(b);
};
_$UInt_UInt_$Impl_$.mul = function(a,b) {
	return a * b;
};
_$UInt_UInt_$Impl_$.sub = function(a,b) {
	return a - b;
};
_$UInt_UInt_$Impl_$.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a > b;
	}
};
_$UInt_UInt_$Impl_$.gte = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a >= b;
	}
};
_$UInt_UInt_$Impl_$.lt = function(a,b) {
	return _$UInt_UInt_$Impl_$.gt(b,a);
};
_$UInt_UInt_$Impl_$.lte = function(a,b) {
	return _$UInt_UInt_$Impl_$.gte(b,a);
};
_$UInt_UInt_$Impl_$.and = function(a,b) {
	return a & b;
};
_$UInt_UInt_$Impl_$.or = function(a,b) {
	return a | b;
};
_$UInt_UInt_$Impl_$.xor = function(a,b) {
	return a ^ b;
};
_$UInt_UInt_$Impl_$.shl = function(a,b) {
	return a << b;
};
_$UInt_UInt_$Impl_$.shr = function(a,b) {
	return a >>> b;
};
_$UInt_UInt_$Impl_$.ushr = function(a,b) {
	return a >>> b;
};
_$UInt_UInt_$Impl_$.mod = function(a,b) {
	return Std.int(_$UInt_UInt_$Impl_$.toFloat(a) % _$UInt_UInt_$Impl_$.toFloat(b));
};
_$UInt_UInt_$Impl_$.addWithFloat = function(a,b) {
	return _$UInt_UInt_$Impl_$.toFloat(a) + b;
};
_$UInt_UInt_$Impl_$.mulWithFloat = function(a,b) {
	return _$UInt_UInt_$Impl_$.toFloat(a) * b;
};
_$UInt_UInt_$Impl_$.divFloat = function(a,b) {
	return _$UInt_UInt_$Impl_$.toFloat(a) / b;
};
_$UInt_UInt_$Impl_$.floatDiv = function(a,b) {
	return a / _$UInt_UInt_$Impl_$.toFloat(b);
};
_$UInt_UInt_$Impl_$.subFloat = function(a,b) {
	return _$UInt_UInt_$Impl_$.toFloat(a) - b;
};
_$UInt_UInt_$Impl_$.floatSub = function(a,b) {
	return a - _$UInt_UInt_$Impl_$.toFloat(b);
};
_$UInt_UInt_$Impl_$.gtFloat = function(a,b) {
	return _$UInt_UInt_$Impl_$.toFloat(a) > b;
};
_$UInt_UInt_$Impl_$.equalsInt = function(a,b) {
	return a == b;
};
_$UInt_UInt_$Impl_$.notEqualsInt = function(a,b) {
	return a != b;
};
_$UInt_UInt_$Impl_$.equalsFloat = function(a,b) {
	return _$UInt_UInt_$Impl_$.toFloat(a) == b;
};
_$UInt_UInt_$Impl_$.notEqualsFloat = function(a,b) {
	return _$UInt_UInt_$Impl_$.toFloat(a) != b;
};
_$UInt_UInt_$Impl_$.gteFloat = function(a,b) {
	return _$UInt_UInt_$Impl_$.toFloat(a) >= b;
};
_$UInt_UInt_$Impl_$.floatGt = function(a,b) {
	return a > _$UInt_UInt_$Impl_$.toFloat(b);
};
_$UInt_UInt_$Impl_$.floatGte = function(a,b) {
	return a >= _$UInt_UInt_$Impl_$.toFloat(b);
};
_$UInt_UInt_$Impl_$.ltFloat = function(a,b) {
	return _$UInt_UInt_$Impl_$.toFloat(a) < b;
};
_$UInt_UInt_$Impl_$.lteFloat = function(a,b) {
	return _$UInt_UInt_$Impl_$.toFloat(a) <= b;
};
_$UInt_UInt_$Impl_$.floatLt = function(a,b) {
	return a < _$UInt_UInt_$Impl_$.toFloat(b);
};
_$UInt_UInt_$Impl_$.floatLte = function(a,b) {
	return a <= _$UInt_UInt_$Impl_$.toFloat(b);
};
_$UInt_UInt_$Impl_$.modFloat = function(a,b) {
	return _$UInt_UInt_$Impl_$.toFloat(a) % b;
};
_$UInt_UInt_$Impl_$.floatMod = function(a,b) {
	return a % _$UInt_UInt_$Impl_$.toFloat(b);
};
_$UInt_UInt_$Impl_$.negBits = function(this1) {
	return ~this1;
};
_$UInt_UInt_$Impl_$.prefixIncrement = function(this1) {
	return ++this1;
};
_$UInt_UInt_$Impl_$.postfixIncrement = function(this1) {
	return this1++;
};
_$UInt_UInt_$Impl_$.prefixDecrement = function(this1) {
	return --this1;
};
_$UInt_UInt_$Impl_$.postfixDecrement = function(this1) {
	return this1--;
};
_$UInt_UInt_$Impl_$.toString = function(this1,radix) {
	return Std.string(_$UInt_UInt_$Impl_$.toFloat(this1));
};
_$UInt_UInt_$Impl_$.toInt = function(this1) {
	return this1;
};
_$UInt_UInt_$Impl_$.toFloat = function(this1) {
	var int = this1;
	if(int < 0) {
		return 4294967296.0 + int;
	} else {
		return int + 0.0;
	}
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = ["haxe","IMap"];
haxe_IMap.prototype = {
	get: null
	,set: null
	,exists: null
	,remove: null
	,keys: null
	,iterator: null
	,copy: null
	,toString: null
	,__class__: haxe_IMap
};
var haxe__$DynamicAccess_DynamicAccess_$Impl_$ = {};
$hxClasses["haxe._DynamicAccess.DynamicAccess_Impl_"] = haxe__$DynamicAccess_DynamicAccess_$Impl_$;
haxe__$DynamicAccess_DynamicAccess_$Impl_$.__name__ = ["haxe","_DynamicAccess","DynamicAccess_Impl_"];
haxe__$DynamicAccess_DynamicAccess_$Impl_$._new = function() {
	var this1 = { };
	return this1;
};
haxe__$DynamicAccess_DynamicAccess_$Impl_$.get = function(this1,key) {
	return this1[key];
};
haxe__$DynamicAccess_DynamicAccess_$Impl_$.set = function(this1,key,value) {
	return this1[key] = value;
};
haxe__$DynamicAccess_DynamicAccess_$Impl_$.exists = function(this1,key) {
	return Reflect.hasField(this1,key);
};
haxe__$DynamicAccess_DynamicAccess_$Impl_$.remove = function(this1,key) {
	return Reflect.deleteField(this1,key);
};
haxe__$DynamicAccess_DynamicAccess_$Impl_$.keys = function(this1) {
	return Reflect.fields(this1);
};
haxe__$DynamicAccess_DynamicAccess_$Impl_$.copy = function(this1) {
	return Reflect.copy(this1);
};
var haxe__$EnumFlags_EnumFlags_$Impl_$ = {};
$hxClasses["haxe._EnumFlags.EnumFlags_Impl_"] = haxe__$EnumFlags_EnumFlags_$Impl_$;
haxe__$EnumFlags_EnumFlags_$Impl_$.__name__ = ["haxe","_EnumFlags","EnumFlags_Impl_"];
haxe__$EnumFlags_EnumFlags_$Impl_$._new = function(i) {
	if(i == null) {
		i = 0;
	}
	var this1 = i;
	return this1;
};
haxe__$EnumFlags_EnumFlags_$Impl_$.has = function(this1,v) {
	return (this1 & 1 << Type.enumIndex(v)) != 0;
};
haxe__$EnumFlags_EnumFlags_$Impl_$.set = function(this1,v) {
	this1 |= 1 << Type.enumIndex(v);
};
haxe__$EnumFlags_EnumFlags_$Impl_$.unset = function(this1,v) {
	this1 &= -1 - (1 << Type.enumIndex(v));
};
haxe__$EnumFlags_EnumFlags_$Impl_$.ofInt = function(i) {
	var this1 = i;
	return this1;
};
haxe__$EnumFlags_EnumFlags_$Impl_$.toInt = function(this1) {
	return this1;
};
var haxe__$Int32_Int32_$Impl_$ = {};
$hxClasses["haxe._Int32.Int32_Impl_"] = haxe__$Int32_Int32_$Impl_$;
haxe__$Int32_Int32_$Impl_$.__name__ = ["haxe","_Int32","Int32_Impl_"];
haxe__$Int32_Int32_$Impl_$.preIncrement = function(this1) {
	this1 = ++this1 | 0;
	return this1;
};
haxe__$Int32_Int32_$Impl_$.postIncrement = function(this1) {
	var ret = this1++;
	this1 |= 0;
	return ret;
};
haxe__$Int32_Int32_$Impl_$.preDecrement = function(this1) {
	this1 = --this1 | 0;
	return this1;
};
haxe__$Int32_Int32_$Impl_$.postDecrement = function(this1) {
	var ret = this1--;
	this1 |= 0;
	return ret;
};
haxe__$Int32_Int32_$Impl_$.add = function(a,b) {
	return a + b | 0;
};
haxe__$Int32_Int32_$Impl_$.addInt = function(a,b) {
	return a + b | 0;
};
haxe__$Int32_Int32_$Impl_$.sub = function(a,b) {
	return a - b | 0;
};
haxe__$Int32_Int32_$Impl_$.subInt = function(a,b) {
	return a - b | 0;
};
haxe__$Int32_Int32_$Impl_$.intSub = function(a,b) {
	return a - b | 0;
};
haxe__$Int32_Int32_$Impl_$.mul = function(a,b) {
	return haxe__$Int32_Int32_$Impl_$._mul(a,b);
};
haxe__$Int32_Int32_$Impl_$.mulInt = function(a,b) {
	return haxe__$Int32_Int32_$Impl_$._mul(a,b);
};
haxe__$Int32_Int32_$Impl_$.toFloat = function(this1) {
	return this1;
};
haxe__$Int32_Int32_$Impl_$.ucompare = function(a,b) {
	if(a < 0) {
		if(b < 0) {
			return ~b - ~a | 0;
		} else {
			return 1;
		}
	}
	if(b < 0) {
		return -1;
	} else {
		return a - b | 0;
	}
};
haxe__$Int32_Int32_$Impl_$.clamp = function(x) {
	return x | 0;
};
var haxe__$Int64_Int64_$Impl_$ = {};
$hxClasses["haxe._Int64.Int64_Impl_"] = haxe__$Int64_Int64_$Impl_$;
haxe__$Int64_Int64_$Impl_$.__name__ = ["haxe","_Int64","Int64_Impl_"];
haxe__$Int64_Int64_$Impl_$.__properties__ = {get_low:"get_low",get_high:"get_high"};
haxe__$Int64_Int64_$Impl_$._new = function(x) {
	var this1 = x;
	return this1;
};
haxe__$Int64_Int64_$Impl_$.copy = function(this1) {
	var this2 = new $hx_exports.haxe._Int64.___Int64(this1.high,this1.low);
	return this2;
};
haxe__$Int64_Int64_$Impl_$.make = function(high,low) {
	var this1 = new $hx_exports.haxe._Int64.___Int64(high,low);
	return this1;
};
haxe__$Int64_Int64_$Impl_$.ofInt = function(x) {
	var this1 = new $hx_exports.haxe._Int64.___Int64(x >> 31,x);
	return this1;
};
haxe__$Int64_Int64_$Impl_$.toInt = function(x) {
	if(x.high != x.low >> 31) {
		throw new js__$Boot_HaxeError("Overflow");
	}
	return x.low;
};
haxe__$Int64_Int64_$Impl_$.is = function(val) {
	return Std.is(val,$hx_exports.haxe._Int64.___Int64);
};
haxe__$Int64_Int64_$Impl_$.getHigh = function(x) {
	return x.high;
};
haxe__$Int64_Int64_$Impl_$.getLow = function(x) {
	return x.low;
};
haxe__$Int64_Int64_$Impl_$.isNeg = function(x) {
	return x.high < 0;
};
haxe__$Int64_Int64_$Impl_$.isZero = function(x) {
	var this1 = new $hx_exports.haxe._Int64.___Int64(0,0);
	var b = this1;
	if(x.high == b.high) {
		return x.low == b.low;
	} else {
		return false;
	}
};
haxe__$Int64_Int64_$Impl_$.compare = function(a,b) {
	var v = a.high - b.high | 0;
	v = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b.low);
	if(a.high < 0) {
		if(b.high < 0) {
			return v;
		} else {
			return -1;
		}
	} else if(b.high >= 0) {
		return v;
	} else {
		return 1;
	}
};
haxe__$Int64_Int64_$Impl_$.ucompare = function(a,b) {
	var v = haxe__$Int32_Int32_$Impl_$.ucompare(a.high,b.high);
	if(v != 0) {
		return v;
	} else {
		return haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b.low);
	}
};
haxe__$Int64_Int64_$Impl_$.toStr = function(x) {
	return haxe__$Int64_Int64_$Impl_$.toString(x);
};
haxe__$Int64_Int64_$Impl_$.toString = function(this1) {
	var i = this1;
	var this2 = new $hx_exports.haxe._Int64.___Int64(0,0);
	var b = this2;
	if(i.high == b.high && i.low == b.low) {
		return "0";
	}
	var str = "";
	var neg = false;
	if(i.high < 0) {
		neg = true;
	}
	var this3 = new $hx_exports.haxe._Int64.___Int64(0,10);
	var ten = this3;
	while(true) {
		var this4 = new $hx_exports.haxe._Int64.___Int64(0,0);
		var b1 = this4;
		if(!(i.high != b1.high || i.low != b1.low)) {
			break;
		}
		var r = haxe__$Int64_Int64_$Impl_$.divMod(i,ten);
		if(r.modulus.high < 0) {
			var x = r.modulus;
			var high = ~x.high;
			var low = -x.low;
			if(low == 0) {
				var ret = high++;
				high = high | 0;
			}
			var this5 = new $hx_exports.haxe._Int64.___Int64(high,low);
			str = this5.low + str;
			var x1 = r.quotient;
			var high1 = ~x1.high;
			var low1 = -x1.low;
			if(low1 == 0) {
				var ret1 = high1++;
				high1 = high1 | 0;
			}
			var this6 = new $hx_exports.haxe._Int64.___Int64(high1,low1);
			i = this6;
		} else {
			str = r.modulus.low + str;
			i = r.quotient;
		}
	}
	if(neg) {
		str = "-" + str;
	}
	return str;
};
haxe__$Int64_Int64_$Impl_$.parseString = function(sParam) {
	return haxe_Int64Helper.parseString(sParam);
};
haxe__$Int64_Int64_$Impl_$.fromFloat = function(f) {
	return haxe_Int64Helper.fromFloat(f);
};
haxe__$Int64_Int64_$Impl_$.divMod = function(dividend,divisor) {
	if(divisor.high == 0) {
		var _g = divisor.low;
		switch(_g) {
		case 0:
			throw new js__$Boot_HaxeError("divide by zero");
		case 1:
			var this1 = new $hx_exports.haxe._Int64.___Int64(dividend.high,dividend.low);
			var this2 = new $hx_exports.haxe._Int64.___Int64(0,0);
			return { quotient : this1, modulus : this2};
		}
	}
	var divSign = dividend.high < 0 != divisor.high < 0;
	var modulus;
	if(dividend.high < 0) {
		var high = ~dividend.high;
		var low = -dividend.low;
		if(low == 0) {
			var ret = high++;
			high = high | 0;
		}
		var this3 = new $hx_exports.haxe._Int64.___Int64(high,low);
		modulus = this3;
	} else {
		var this4 = new $hx_exports.haxe._Int64.___Int64(dividend.high,dividend.low);
		modulus = this4;
	}
	if(divisor.high < 0) {
		var high1 = ~divisor.high;
		var low1 = -divisor.low;
		if(low1 == 0) {
			var ret1 = high1++;
			high1 = high1 | 0;
		}
		var this5 = new $hx_exports.haxe._Int64.___Int64(high1,low1);
		divisor = this5;
	} else {
		divisor = divisor;
	}
	var this6 = new $hx_exports.haxe._Int64.___Int64(0,0);
	var quotient = this6;
	var this7 = new $hx_exports.haxe._Int64.___Int64(0,1);
	var mask = this7;
	while(!(divisor.high < 0)) {
		var v = haxe__$Int32_Int32_$Impl_$.ucompare(divisor.high,modulus.high);
		var cmp = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(divisor.low,modulus.low);
		var b = 1;
		b &= 63;
		if(b == 0) {
			var this8 = new $hx_exports.haxe._Int64.___Int64(divisor.high,divisor.low);
			divisor = this8;
		} else if(b < 32) {
			var this9 = new $hx_exports.haxe._Int64.___Int64(divisor.high << b | divisor.low >>> 32 - b,divisor.low << b);
			divisor = this9;
		} else {
			var this10 = new $hx_exports.haxe._Int64.___Int64(divisor.low << b - 32,0);
			divisor = this10;
		}
		var b1 = 1;
		b1 &= 63;
		if(b1 == 0) {
			var this11 = new $hx_exports.haxe._Int64.___Int64(mask.high,mask.low);
			mask = this11;
		} else if(b1 < 32) {
			var this12 = new $hx_exports.haxe._Int64.___Int64(mask.high << b1 | mask.low >>> 32 - b1,mask.low << b1);
			mask = this12;
		} else {
			var this13 = new $hx_exports.haxe._Int64.___Int64(mask.low << b1 - 32,0);
			mask = this13;
		}
		if(cmp >= 0) {
			break;
		}
	}
	while(true) {
		var this14 = new $hx_exports.haxe._Int64.___Int64(0,0);
		var b2 = this14;
		if(!(mask.high != b2.high || mask.low != b2.low)) {
			break;
		}
		var v1 = haxe__$Int32_Int32_$Impl_$.ucompare(modulus.high,divisor.high);
		if((v1 != 0 ? v1 : haxe__$Int32_Int32_$Impl_$.ucompare(modulus.low,divisor.low)) >= 0) {
			var this15 = new $hx_exports.haxe._Int64.___Int64(quotient.high | mask.high,quotient.low | mask.low);
			quotient = this15;
			var high2 = modulus.high - divisor.high | 0;
			var low2 = modulus.low - divisor.low | 0;
			if(haxe__$Int32_Int32_$Impl_$.ucompare(modulus.low,divisor.low) < 0) {
				var ret2 = high2--;
				high2 = high2 | 0;
			}
			var this16 = new $hx_exports.haxe._Int64.___Int64(high2,low2);
			modulus = this16;
		}
		var b3 = 1;
		b3 &= 63;
		if(b3 == 0) {
			var this17 = new $hx_exports.haxe._Int64.___Int64(mask.high,mask.low);
			mask = this17;
		} else if(b3 < 32) {
			var this18 = new $hx_exports.haxe._Int64.___Int64(mask.high >>> b3,mask.high << 32 - b3 | mask.low >>> b3);
			mask = this18;
		} else {
			var this19 = new $hx_exports.haxe._Int64.___Int64(0,mask.high >>> b3 - 32);
			mask = this19;
		}
		var b4 = 1;
		b4 &= 63;
		if(b4 == 0) {
			var this20 = new $hx_exports.haxe._Int64.___Int64(divisor.high,divisor.low);
			divisor = this20;
		} else if(b4 < 32) {
			var this21 = new $hx_exports.haxe._Int64.___Int64(divisor.high >>> b4,divisor.high << 32 - b4 | divisor.low >>> b4);
			divisor = this21;
		} else {
			var this22 = new $hx_exports.haxe._Int64.___Int64(0,divisor.high >>> b4 - 32);
			divisor = this22;
		}
	}
	if(divSign) {
		var high3 = ~quotient.high;
		var low3 = -quotient.low;
		if(low3 == 0) {
			var ret3 = high3++;
			high3 = high3 | 0;
		}
		var this23 = new $hx_exports.haxe._Int64.___Int64(high3,low3);
		quotient = this23;
	}
	if(dividend.high < 0) {
		var high4 = ~modulus.high;
		var low4 = -modulus.low;
		if(low4 == 0) {
			var ret4 = high4++;
			high4 = high4 | 0;
		}
		var this24 = new $hx_exports.haxe._Int64.___Int64(high4,low4);
		modulus = this24;
	}
	return { quotient : quotient, modulus : modulus};
};
haxe__$Int64_Int64_$Impl_$.neg = function(x) {
	var high = ~x.high;
	var low = -x.low;
	if(low == 0) {
		var ret = high++;
		high = high | 0;
	}
	var this1 = new $hx_exports.haxe._Int64.___Int64(high,low);
	return this1;
};
haxe__$Int64_Int64_$Impl_$.preIncrement = function(this1) {
	var this2 = new $hx_exports.haxe._Int64.___Int64(this1.high,this1.low);
	this1 = this2;
	var ret = this1.low++;
	this1.low = this1.low | 0;
	if(this1.low == 0) {
		var ret1 = this1.high++;
		this1.high = this1.high | 0;
	}
	return this1;
};
haxe__$Int64_Int64_$Impl_$.postIncrement = function(this1) {
	var ret = this1;
	var this2 = new $hx_exports.haxe._Int64.___Int64(this1.high,this1.low);
	this1 = this2;
	var ret1 = this1.low++;
	this1.low = this1.low | 0;
	if(this1.low == 0) {
		var ret2 = this1.high++;
		this1.high = this1.high | 0;
	}
	return ret;
};
haxe__$Int64_Int64_$Impl_$.preDecrement = function(this1) {
	var this2 = new $hx_exports.haxe._Int64.___Int64(this1.high,this1.low);
	this1 = this2;
	if(this1.low == 0) {
		var ret = this1.high--;
		this1.high = this1.high | 0;
	}
	var ret1 = this1.low--;
	this1.low = this1.low | 0;
	return this1;
};
haxe__$Int64_Int64_$Impl_$.postDecrement = function(this1) {
	var ret = this1;
	var this2 = new $hx_exports.haxe._Int64.___Int64(this1.high,this1.low);
	this1 = this2;
	if(this1.low == 0) {
		var ret1 = this1.high--;
		this1.high = this1.high | 0;
	}
	var ret2 = this1.low--;
	this1.low = this1.low | 0;
	return ret;
};
haxe__$Int64_Int64_$Impl_$.add = function(a,b) {
	var high = a.high + b.high | 0;
	var low = a.low + b.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,a.low) < 0) {
		var ret = high++;
		high = high | 0;
	}
	var this1 = new $hx_exports.haxe._Int64.___Int64(high,low);
	return this1;
};
haxe__$Int64_Int64_$Impl_$.addInt = function(a,b) {
	var this1 = new $hx_exports.haxe._Int64.___Int64(b >> 31,b);
	var b1 = this1;
	var high = a.high + b1.high | 0;
	var low = a.low + b1.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,a.low) < 0) {
		var ret = high++;
		high = high | 0;
	}
	var this2 = new $hx_exports.haxe._Int64.___Int64(high,low);
	return this2;
};
haxe__$Int64_Int64_$Impl_$.sub = function(a,b) {
	var high = a.high - b.high | 0;
	var low = a.low - b.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b.low) < 0) {
		var ret = high--;
		high = high | 0;
	}
	var this1 = new $hx_exports.haxe._Int64.___Int64(high,low);
	return this1;
};
haxe__$Int64_Int64_$Impl_$.subInt = function(a,b) {
	var this1 = new $hx_exports.haxe._Int64.___Int64(b >> 31,b);
	var b1 = this1;
	var high = a.high - b1.high | 0;
	var low = a.low - b1.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b1.low) < 0) {
		var ret = high--;
		high = high | 0;
	}
	var this2 = new $hx_exports.haxe._Int64.___Int64(high,low);
	return this2;
};
haxe__$Int64_Int64_$Impl_$.intSub = function(a,b) {
	var this1 = new $hx_exports.haxe._Int64.___Int64(a >> 31,a);
	var a1 = this1;
	var high = a1.high - b.high | 0;
	var low = a1.low - b.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(a1.low,b.low) < 0) {
		var ret = high--;
		high = high | 0;
	}
	var this2 = new $hx_exports.haxe._Int64.___Int64(high,low);
	return this2;
};
haxe__$Int64_Int64_$Impl_$.mul = function(a,b) {
	var mask = 65535;
	var al = a.low & mask;
	var ah = a.low >>> 16;
	var bl = b.low & mask;
	var bh = b.low >>> 16;
	var p00 = haxe__$Int32_Int32_$Impl_$._mul(al,bl);
	var p10 = haxe__$Int32_Int32_$Impl_$._mul(ah,bl);
	var p01 = haxe__$Int32_Int32_$Impl_$._mul(al,bh);
	var p11 = haxe__$Int32_Int32_$Impl_$._mul(ah,bh);
	var low = p00;
	var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
	p01 = p01 << 16;
	low = low + p01 | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p01) < 0) {
		var ret = high++;
		high = high | 0;
	}
	p10 = p10 << 16;
	low = low + p10 | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p10) < 0) {
		var ret1 = high++;
		high = high | 0;
	}
	high = high + (haxe__$Int32_Int32_$Impl_$._mul(a.low,b.high) + haxe__$Int32_Int32_$Impl_$._mul(a.high,b.low) | 0) | 0;
	var this1 = new $hx_exports.haxe._Int64.___Int64(high,low);
	return this1;
};
haxe__$Int64_Int64_$Impl_$.mulInt = function(a,b) {
	var this1 = new $hx_exports.haxe._Int64.___Int64(b >> 31,b);
	var b1 = this1;
	var mask = 65535;
	var al = a.low & mask;
	var ah = a.low >>> 16;
	var bl = b1.low & mask;
	var bh = b1.low >>> 16;
	var p00 = haxe__$Int32_Int32_$Impl_$._mul(al,bl);
	var p10 = haxe__$Int32_Int32_$Impl_$._mul(ah,bl);
	var p01 = haxe__$Int32_Int32_$Impl_$._mul(al,bh);
	var p11 = haxe__$Int32_Int32_$Impl_$._mul(ah,bh);
	var low = p00;
	var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
	p01 = p01 << 16;
	low = low + p01 | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p01) < 0) {
		var ret = high++;
		high = high | 0;
	}
	p10 = p10 << 16;
	low = low + p10 | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p10) < 0) {
		var ret1 = high++;
		high = high | 0;
	}
	high = high + (haxe__$Int32_Int32_$Impl_$._mul(a.low,b1.high) + haxe__$Int32_Int32_$Impl_$._mul(a.high,b1.low) | 0) | 0;
	var this2 = new $hx_exports.haxe._Int64.___Int64(high,low);
	return this2;
};
haxe__$Int64_Int64_$Impl_$.div = function(a,b) {
	return haxe__$Int64_Int64_$Impl_$.divMod(a,b).quotient;
};
haxe__$Int64_Int64_$Impl_$.divInt = function(a,b) {
	var this1 = new $hx_exports.haxe._Int64.___Int64(b >> 31,b);
	return haxe__$Int64_Int64_$Impl_$.divMod(a,this1).quotient;
};
haxe__$Int64_Int64_$Impl_$.intDiv = function(a,b) {
	var this1 = new $hx_exports.haxe._Int64.___Int64(a >> 31,a);
	var x = haxe__$Int64_Int64_$Impl_$.divMod(this1,b).quotient;
	if(x.high != x.low >> 31) {
		throw new js__$Boot_HaxeError("Overflow");
	}
	var x1 = x.low;
	var this2 = new $hx_exports.haxe._Int64.___Int64(x1 >> 31,x1);
	return this2;
};
haxe__$Int64_Int64_$Impl_$.mod = function(a,b) {
	return haxe__$Int64_Int64_$Impl_$.divMod(a,b).modulus;
};
haxe__$Int64_Int64_$Impl_$.modInt = function(a,b) {
	var this1 = new $hx_exports.haxe._Int64.___Int64(b >> 31,b);
	var x = haxe__$Int64_Int64_$Impl_$.divMod(a,this1).modulus;
	if(x.high != x.low >> 31) {
		throw new js__$Boot_HaxeError("Overflow");
	}
	var x1 = x.low;
	var this2 = new $hx_exports.haxe._Int64.___Int64(x1 >> 31,x1);
	return this2;
};
haxe__$Int64_Int64_$Impl_$.intMod = function(a,b) {
	var this1 = new $hx_exports.haxe._Int64.___Int64(a >> 31,a);
	var x = haxe__$Int64_Int64_$Impl_$.divMod(this1,b).modulus;
	if(x.high != x.low >> 31) {
		throw new js__$Boot_HaxeError("Overflow");
	}
	var x1 = x.low;
	var this2 = new $hx_exports.haxe._Int64.___Int64(x1 >> 31,x1);
	return this2;
};
haxe__$Int64_Int64_$Impl_$.eq = function(a,b) {
	if(a.high == b.high) {
		return a.low == b.low;
	} else {
		return false;
	}
};
haxe__$Int64_Int64_$Impl_$.eqInt = function(a,b) {
	var this1 = new $hx_exports.haxe._Int64.___Int64(b >> 31,b);
	var b1 = this1;
	if(a.high == b1.high) {
		return a.low == b1.low;
	} else {
		return false;
	}
};
haxe__$Int64_Int64_$Impl_$.neq = function(a,b) {
	if(!(a.high != b.high)) {
		return a.low != b.low;
	} else {
		return true;
	}
};
haxe__$Int64_Int64_$Impl_$.neqInt = function(a,b) {
	var this1 = new $hx_exports.haxe._Int64.___Int64(b >> 31,b);
	var b1 = this1;
	if(!(a.high != b1.high)) {
		return a.low != b1.low;
	} else {
		return true;
	}
};
haxe__$Int64_Int64_$Impl_$.lt = function(a,b) {
	var v = a.high - b.high | 0;
	v = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b.low);
	return (a.high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) < 0;
};
haxe__$Int64_Int64_$Impl_$.ltInt = function(a,b) {
	var this1 = new $hx_exports.haxe._Int64.___Int64(b >> 31,b);
	var b1 = this1;
	var v = a.high - b1.high | 0;
	v = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b1.low);
	return (a.high < 0 ? b1.high < 0 ? v : -1 : b1.high >= 0 ? v : 1) < 0;
};
haxe__$Int64_Int64_$Impl_$.intLt = function(a,b) {
	var this1 = new $hx_exports.haxe._Int64.___Int64(a >> 31,a);
	var a1 = this1;
	var v = a1.high - b.high | 0;
	v = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(a1.low,b.low);
	return (a1.high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) < 0;
};
haxe__$Int64_Int64_$Impl_$.lte = function(a,b) {
	var v = a.high - b.high | 0;
	v = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b.low);
	return (a.high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) <= 0;
};
haxe__$Int64_Int64_$Impl_$.lteInt = function(a,b) {
	var this1 = new $hx_exports.haxe._Int64.___Int64(b >> 31,b);
	var b1 = this1;
	var v = a.high - b1.high | 0;
	v = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b1.low);
	return (a.high < 0 ? b1.high < 0 ? v : -1 : b1.high >= 0 ? v : 1) <= 0;
};
haxe__$Int64_Int64_$Impl_$.intLte = function(a,b) {
	var this1 = new $hx_exports.haxe._Int64.___Int64(a >> 31,a);
	var a1 = this1;
	var v = a1.high - b.high | 0;
	v = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(a1.low,b.low);
	return (a1.high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) <= 0;
};
haxe__$Int64_Int64_$Impl_$.gt = function(a,b) {
	var v = a.high - b.high | 0;
	v = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b.low);
	return (a.high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) > 0;
};
haxe__$Int64_Int64_$Impl_$.gtInt = function(a,b) {
	var this1 = new $hx_exports.haxe._Int64.___Int64(b >> 31,b);
	var b1 = this1;
	var v = a.high - b1.high | 0;
	v = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b1.low);
	return (a.high < 0 ? b1.high < 0 ? v : -1 : b1.high >= 0 ? v : 1) > 0;
};
haxe__$Int64_Int64_$Impl_$.intGt = function(a,b) {
	var this1 = new $hx_exports.haxe._Int64.___Int64(a >> 31,a);
	var a1 = this1;
	var v = a1.high - b.high | 0;
	v = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(a1.low,b.low);
	return (a1.high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) > 0;
};
haxe__$Int64_Int64_$Impl_$.gte = function(a,b) {
	var v = a.high - b.high | 0;
	v = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b.low);
	return (a.high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) >= 0;
};
haxe__$Int64_Int64_$Impl_$.gteInt = function(a,b) {
	var this1 = new $hx_exports.haxe._Int64.___Int64(b >> 31,b);
	var b1 = this1;
	var v = a.high - b1.high | 0;
	v = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b1.low);
	return (a.high < 0 ? b1.high < 0 ? v : -1 : b1.high >= 0 ? v : 1) >= 0;
};
haxe__$Int64_Int64_$Impl_$.intGte = function(a,b) {
	var this1 = new $hx_exports.haxe._Int64.___Int64(a >> 31,a);
	var a1 = this1;
	var v = a1.high - b.high | 0;
	v = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(a1.low,b.low);
	return (a1.high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) >= 0;
};
haxe__$Int64_Int64_$Impl_$.complement = function(a) {
	var this1 = new $hx_exports.haxe._Int64.___Int64(~a.high,~a.low);
	return this1;
};
haxe__$Int64_Int64_$Impl_$.and = function(a,b) {
	var this1 = new $hx_exports.haxe._Int64.___Int64(a.high & b.high,a.low & b.low);
	return this1;
};
haxe__$Int64_Int64_$Impl_$.or = function(a,b) {
	var this1 = new $hx_exports.haxe._Int64.___Int64(a.high | b.high,a.low | b.low);
	return this1;
};
haxe__$Int64_Int64_$Impl_$.xor = function(a,b) {
	var this1 = new $hx_exports.haxe._Int64.___Int64(a.high ^ b.high,a.low ^ b.low);
	return this1;
};
haxe__$Int64_Int64_$Impl_$.shl = function(a,b) {
	b &= 63;
	if(b == 0) {
		var this1 = new $hx_exports.haxe._Int64.___Int64(a.high,a.low);
		return this1;
	} else if(b < 32) {
		var this2 = new $hx_exports.haxe._Int64.___Int64(a.high << b | a.low >>> 32 - b,a.low << b);
		return this2;
	} else {
		var this3 = new $hx_exports.haxe._Int64.___Int64(a.low << b - 32,0);
		return this3;
	}
};
haxe__$Int64_Int64_$Impl_$.shr = function(a,b) {
	b &= 63;
	if(b == 0) {
		var this1 = new $hx_exports.haxe._Int64.___Int64(a.high,a.low);
		return this1;
	} else if(b < 32) {
		var this2 = new $hx_exports.haxe._Int64.___Int64(a.high >> b,a.high << 32 - b | a.low >>> b);
		return this2;
	} else {
		var this3 = new $hx_exports.haxe._Int64.___Int64(a.high >> 31,a.high >> b - 32);
		return this3;
	}
};
haxe__$Int64_Int64_$Impl_$.ushr = function(a,b) {
	b &= 63;
	if(b == 0) {
		var this1 = new $hx_exports.haxe._Int64.___Int64(a.high,a.low);
		return this1;
	} else if(b < 32) {
		var this2 = new $hx_exports.haxe._Int64.___Int64(a.high >>> b,a.high << 32 - b | a.low >>> b);
		return this2;
	} else {
		var this3 = new $hx_exports.haxe._Int64.___Int64(0,a.high >>> b - 32);
		return this3;
	}
};
haxe__$Int64_Int64_$Impl_$.get_high = function(this1) {
	return this1.high;
};
haxe__$Int64_Int64_$Impl_$.set_high = function(this1,x) {
	return this1.high = x;
};
haxe__$Int64_Int64_$Impl_$.get_low = function(this1) {
	return this1.low;
};
haxe__$Int64_Int64_$Impl_$.set_low = function(this1,x) {
	return this1.low = x;
};
var haxe_Int64Helper = function() { };
$hxClasses["haxe.Int64Helper"] = haxe_Int64Helper;
haxe_Int64Helper.__name__ = ["haxe","Int64Helper"];
haxe_Int64Helper.parseString = function(sParam) {
	var this1 = new $hx_exports.haxe._Int64.___Int64(0,10);
	var base = this1;
	var this2 = new $hx_exports.haxe._Int64.___Int64(0,0);
	var current = this2;
	var this3 = new $hx_exports.haxe._Int64.___Int64(0,1);
	var multiplier = this3;
	var sIsNegative = false;
	var s = $hx_exports.StringTools.trim(sParam);
	if(s.charAt(0) == "-") {
		sIsNegative = true;
		s = s.substring(1,s.length);
	}
	var len = s.length;
	var _g1 = 0;
	var _g = len;
	while(_g1 < _g) {
		var i = _g1++;
		var digitInt = $hx_exports.HxOverrides.cca(s,len - 1 - i) - 48;
		if(digitInt < 0 || digitInt > 9) {
			throw new js__$Boot_HaxeError("NumberFormatError");
		}
		var this4 = new $hx_exports.haxe._Int64.___Int64(digitInt >> 31,digitInt);
		var digit = this4;
		if(sIsNegative) {
			var mask = 65535;
			var al = multiplier.low & mask;
			var ah = multiplier.low >>> 16;
			var bl = digit.low & mask;
			var bh = digit.low >>> 16;
			var p00 = haxe__$Int32_Int32_$Impl_$._mul(al,bl);
			var p10 = haxe__$Int32_Int32_$Impl_$._mul(ah,bl);
			var p01 = haxe__$Int32_Int32_$Impl_$._mul(al,bh);
			var p11 = haxe__$Int32_Int32_$Impl_$._mul(ah,bh);
			var low = p00;
			var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
			p01 = p01 << 16;
			low = low + p01 | 0;
			if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p01) < 0) {
				var ret = high++;
				high = high | 0;
			}
			p10 = p10 << 16;
			low = low + p10 | 0;
			if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p10) < 0) {
				var ret1 = high++;
				high = high | 0;
			}
			high = high + (haxe__$Int32_Int32_$Impl_$._mul(multiplier.low,digit.high) + haxe__$Int32_Int32_$Impl_$._mul(multiplier.high,digit.low) | 0) | 0;
			var this5 = new $hx_exports.haxe._Int64.___Int64(high,low);
			var b = this5;
			var high1 = current.high - b.high | 0;
			var low1 = current.low - b.low | 0;
			if(haxe__$Int32_Int32_$Impl_$.ucompare(current.low,b.low) < 0) {
				var ret2 = high1--;
				high1 = high1 | 0;
			}
			var this6 = new $hx_exports.haxe._Int64.___Int64(high1,low1);
			current = this6;
			if(!(current.high < 0)) {
				throw new js__$Boot_HaxeError("NumberFormatError: Underflow");
			}
		} else {
			var mask1 = 65535;
			var al1 = multiplier.low & mask1;
			var ah1 = multiplier.low >>> 16;
			var bl1 = digit.low & mask1;
			var bh1 = digit.low >>> 16;
			var p001 = haxe__$Int32_Int32_$Impl_$._mul(al1,bl1);
			var p101 = haxe__$Int32_Int32_$Impl_$._mul(ah1,bl1);
			var p011 = haxe__$Int32_Int32_$Impl_$._mul(al1,bh1);
			var p111 = haxe__$Int32_Int32_$Impl_$._mul(ah1,bh1);
			var low2 = p001;
			var high2 = (p111 + (p011 >>> 16) | 0) + (p101 >>> 16) | 0;
			p011 = p011 << 16;
			low2 = low2 + p011 | 0;
			if(haxe__$Int32_Int32_$Impl_$.ucompare(low2,p011) < 0) {
				var ret3 = high2++;
				high2 = high2 | 0;
			}
			p101 = p101 << 16;
			low2 = low2 + p101 | 0;
			if(haxe__$Int32_Int32_$Impl_$.ucompare(low2,p101) < 0) {
				var ret4 = high2++;
				high2 = high2 | 0;
			}
			high2 = high2 + (haxe__$Int32_Int32_$Impl_$._mul(multiplier.low,digit.high) + haxe__$Int32_Int32_$Impl_$._mul(multiplier.high,digit.low) | 0) | 0;
			var this7 = new $hx_exports.haxe._Int64.___Int64(high2,low2);
			var b1 = this7;
			var high3 = current.high + b1.high | 0;
			var low3 = current.low + b1.low | 0;
			if(haxe__$Int32_Int32_$Impl_$.ucompare(low3,current.low) < 0) {
				var ret5 = high3++;
				high3 = high3 | 0;
			}
			var this8 = new $hx_exports.haxe._Int64.___Int64(high3,low3);
			current = this8;
			if(current.high < 0) {
				throw new js__$Boot_HaxeError("NumberFormatError: Overflow");
			}
		}
		var mask2 = 65535;
		var al2 = multiplier.low & mask2;
		var ah2 = multiplier.low >>> 16;
		var bl2 = base.low & mask2;
		var bh2 = base.low >>> 16;
		var p002 = haxe__$Int32_Int32_$Impl_$._mul(al2,bl2);
		var p102 = haxe__$Int32_Int32_$Impl_$._mul(ah2,bl2);
		var p012 = haxe__$Int32_Int32_$Impl_$._mul(al2,bh2);
		var p112 = haxe__$Int32_Int32_$Impl_$._mul(ah2,bh2);
		var low4 = p002;
		var high4 = (p112 + (p012 >>> 16) | 0) + (p102 >>> 16) | 0;
		p012 = p012 << 16;
		low4 = low4 + p012 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low4,p012) < 0) {
			var ret6 = high4++;
			high4 = high4 | 0;
		}
		p102 = p102 << 16;
		low4 = low4 + p102 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low4,p102) < 0) {
			var ret7 = high4++;
			high4 = high4 | 0;
		}
		high4 = high4 + (haxe__$Int32_Int32_$Impl_$._mul(multiplier.low,base.high) + haxe__$Int32_Int32_$Impl_$._mul(multiplier.high,base.low) | 0) | 0;
		var this9 = new $hx_exports.haxe._Int64.___Int64(high4,low4);
		multiplier = this9;
	}
	return current;
};
haxe_Int64Helper.fromFloat = function(f) {
	if(isNaN(f) || !isFinite(f)) {
		throw new js__$Boot_HaxeError("Number is NaN or Infinite");
	}
	var noFractions = f - f % 1;
	if(noFractions > 9007199254740991) {
		throw new js__$Boot_HaxeError("Conversion overflow");
	}
	if(noFractions < -9007199254740991) {
		throw new js__$Boot_HaxeError("Conversion underflow");
	}
	var this1 = new $hx_exports.haxe._Int64.___Int64(0,0);
	var result = this1;
	var neg = noFractions < 0;
	var rest = neg ? -noFractions : noFractions;
	var i = 0;
	while(rest >= 1) {
		var curr = rest % 2;
		rest /= 2;
		if(curr >= 1) {
			var this2 = new $hx_exports.haxe._Int64.___Int64(0,1);
			var a = this2;
			var b = i;
			b &= 63;
			var b1;
			if(b == 0) {
				var this3 = new $hx_exports.haxe._Int64.___Int64(a.high,a.low);
				b1 = this3;
			} else if(b < 32) {
				var this4 = new $hx_exports.haxe._Int64.___Int64(a.high << b | a.low >>> 32 - b,a.low << b);
				b1 = this4;
			} else {
				var this5 = new $hx_exports.haxe._Int64.___Int64(a.low << b - 32,0);
				b1 = this5;
			}
			var high = result.high + b1.high | 0;
			var low = result.low + b1.low | 0;
			if(haxe__$Int32_Int32_$Impl_$.ucompare(low,result.low) < 0) {
				var ret = high++;
				high = high | 0;
			}
			var this6 = new $hx_exports.haxe._Int64.___Int64(high,low);
			result = this6;
		}
		++i;
	}
	if(neg) {
		var high1 = ~result.high;
		var low1 = -result.low;
		if(low1 == 0) {
			var ret1 = high1++;
			high1 = high1 | 0;
		}
		var this7 = new $hx_exports.haxe._Int64.___Int64(high1,low1);
		result = this7;
	}
	return result;
};
var haxe_Serializer = function() {
	this.buf = new $hx_exports.StringBuf();
	this.cache = [];
	this.useCache = haxe_Serializer.USE_CACHE;
	this.useEnumIndex = haxe_Serializer.USE_ENUM_INDEX;
	this.shash = new haxe_ds_StringMap();
	this.scount = 0;
};
$hxClasses["haxe.Serializer"] = haxe_Serializer;
haxe_Serializer.__name__ = ["haxe","Serializer"];
haxe_Serializer.run = function(v) {
	var s = new haxe_Serializer();
	s.serialize(v);
	return s.toString();
};
haxe_Serializer.prototype = {
	buf: null
	,cache: null
	,shash: null
	,scount: null
	,useCache: null
	,useEnumIndex: null
	,toString: function() {
		return this.buf.toString();
	}
	,serializeString: function(s) {
		var x = this.shash.get(s);
		if(x != null) {
			this.buf.add("R");
			this.buf.add(x);
			return;
		}
		this.shash.set(s,this.scount++);
		this.buf.add("y");
		s = $hx_exports.StringTools.urlEncode(s);
		this.buf.add(s.length);
		this.buf.add(":");
		this.buf.add(s);
	}
	,serializeRef: function(v) {
		var vt = typeof(v);
		var _g1 = 0;
		var _g = this.cache.length;
		while(_g1 < _g) {
			var i = _g1++;
			var ci = this.cache[i];
			if(typeof(ci) == vt && ci == v) {
				this.buf.add("r");
				this.buf.add(i);
				return true;
			}
		}
		this.cache.push(v);
		return false;
	}
	,serializeFields: function(v) {
		var _g = 0;
		var _g1 = Reflect.fields(v);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.serializeString(f);
			this.serialize(Reflect.field(v,f));
		}
		this.buf.add("g");
	}
	,serialize: function(v) {
		var _g = Type["typeof"](v);
		switch(_g[1]) {
		case 0:
			this.buf.add("n");
			break;
		case 1:
			var v1 = v;
			if(v1 == 0) {
				this.buf.add("z");
				return;
			}
			this.buf.add("i");
			this.buf.add(v1);
			break;
		case 2:
			var v2 = v;
			if(isNaN(v2)) {
				this.buf.add("k");
			} else if(!isFinite(v2)) {
				this.buf.add(v2 < 0 ? "m" : "p");
			} else {
				this.buf.add("d");
				this.buf.add(v2);
			}
			break;
		case 3:
			this.buf.add(v ? "t" : "f");
			break;
		case 4:
			if(Std.is(v,Class)) {
				var className = Type.getClassName(v);
				this.buf.add("A");
				this.serializeString(className);
			} else if(Std.is(v,Enum)) {
				this.buf.add("B");
				this.serializeString(Type.getEnumName(v));
			} else {
				if(this.useCache && this.serializeRef(v)) {
					return;
				}
				this.buf.add("o");
				this.serializeFields(v);
			}
			break;
		case 5:
			throw new js__$Boot_HaxeError("Cannot serialize function");
		case 6:
			var c = _g[2];
			if(c == String) {
				this.serializeString(v);
				return;
			}
			if(this.useCache && this.serializeRef(v)) {
				return;
			}
			switch(c) {
			case Array:
				var ucount = 0;
				this.buf.add("a");
				var l = v["length"];
				var _g1 = 0;
				var _g2 = l;
				while(_g1 < _g2) {
					var i = _g1++;
					if(v[i] == null) {
						++ucount;
					} else {
						if(ucount > 0) {
							if(ucount == 1) {
								this.buf.add("n");
							} else {
								this.buf.add("u");
								this.buf.add(ucount);
							}
							ucount = 0;
						}
						this.serialize(v[i]);
					}
				}
				if(ucount > 0) {
					if(ucount == 1) {
						this.buf.add("n");
					} else {
						this.buf.add("u");
						this.buf.add(ucount);
					}
				}
				this.buf.add("h");
				break;
			case Date:
				var d = v;
				this.buf.add("v");
				this.buf.add(d.getTime());
				break;
			case $hx_exports.List:
				this.buf.add("l");
				var v3 = v;
				var i1 = v3.iterator();
				while(i1.hasNext()) {
					var i2 = i1.next();
					this.serialize(i2);
				}
				this.buf.add("h");
				break;
			case $hx_exports.haxe.ds.IntMap:
				this.buf.add("q");
				var v4 = v;
				var k = v4.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					this.buf.add(":");
					this.buf.add(k1);
					this.serialize(v4.get(k1));
				}
				this.buf.add("h");
				break;
			case $hx_exports.haxe.ds.ObjectMap:
				this.buf.add("M");
				var v5 = v;
				var k2 = v5.keys();
				while(k2.hasNext()) {
					var k3 = k2.next();
					var id = Reflect.field(k3,"__id__");
					Reflect.deleteField(k3,"__id__");
					this.serialize(k3);
					Reflect.setField(k3,"__id__",id);
					this.serialize(v5.get(k3));
				}
				this.buf.add("h");
				break;
			case haxe_ds_StringMap:
				this.buf.add("b");
				var v6 = v;
				var k4 = v6.keys();
				while(k4.hasNext()) {
					var k5 = k4.next();
					this.serializeString(k5);
					this.serialize(v6.get(k5));
				}
				this.buf.add("h");
				break;
			case $hx_exports.haxe.io.Bytes:
				var v7 = v;
				this.buf.add("s");
				this.buf.add($hx_exports.Math.ceil(v7.length * 8 / 6));
				this.buf.add(":");
				var i3 = 0;
				var max = v7.length - 2;
				var b64 = haxe_Serializer.BASE64_CODES;
				if(b64 == null) {
					var length = haxe_Serializer.BASE64.length;
					var this1 = new Array(length);
					b64 = this1;
					var _g11 = 0;
					var _g3 = haxe_Serializer.BASE64.length;
					while(_g11 < _g3) {
						var i4 = _g11++;
						b64[i4] = $hx_exports.HxOverrides.cca(haxe_Serializer.BASE64,i4);
					}
					haxe_Serializer.BASE64_CODES = b64;
				}
				while(i3 < max) {
					var b1 = v7.get(i3++);
					var b2 = v7.get(i3++);
					var b3 = v7.get(i3++);
					this.buf.addChar(b64[b1 >> 2]);
					this.buf.addChar(b64[(b1 << 4 | b2 >> 4) & 63]);
					this.buf.addChar(b64[(b2 << 2 | b3 >> 6) & 63]);
					this.buf.addChar(b64[b3 & 63]);
				}
				if(i3 == max) {
					var b11 = v7.get(i3++);
					var b21 = v7.get(i3++);
					this.buf.addChar(b64[b11 >> 2]);
					this.buf.addChar(b64[(b11 << 4 | b21 >> 4) & 63]);
					this.buf.addChar(b64[b21 << 2 & 63]);
				} else if(i3 == max + 1) {
					var b12 = v7.get(i3++);
					this.buf.addChar(b64[b12 >> 2]);
					this.buf.addChar(b64[b12 << 4 & 63]);
				}
				break;
			default:
				if(this.useCache) {
					this.cache.pop();
				}
				if(v.hxSerialize != null) {
					this.buf.add("C");
					this.serializeString(Type.getClassName(c));
					if(this.useCache) {
						this.cache.push(v);
					}
					v.hxSerialize(this);
					this.buf.add("g");
				} else {
					this.buf.add("c");
					this.serializeString(Type.getClassName(c));
					if(this.useCache) {
						this.cache.push(v);
					}
					this.serializeFields(v);
				}
			}
			break;
		case 7:
			var e = _g[2];
			if(this.useCache) {
				if(this.serializeRef(v)) {
					return;
				}
				this.cache.pop();
			}
			this.buf.add(this.useEnumIndex ? "j" : "w");
			this.serializeString(Type.getEnumName(e));
			if(this.useEnumIndex) {
				this.buf.add(":");
				this.buf.add(v[1]);
			} else {
				this.serializeString(v[0]);
			}
			this.buf.add(":");
			var l1 = v["length"];
			this.buf.add(l1 - 2);
			var _g12 = 2;
			var _g4 = l1;
			while(_g12 < _g4) {
				var i5 = _g12++;
				this.serialize(v[i5]);
			}
			if(this.useCache) {
				this.cache.push(v);
			}
			break;
		default:
			throw new js__$Boot_HaxeError("Cannot serialize " + Std.string(v));
		}
	}
	,serializeException: function(e) {
		this.buf.add("x");
		this.serialize(e);
	}
	,__class__: haxe_Serializer
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = ["haxe","_Unserializer","DefaultResolver"];
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return Type.resolveClass(name);
	}
	,resolveEnum: function(name) {
		return Type.resolveEnum(name);
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = ["haxe","Unserializer"];
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g1 = 0;
	var _g = haxe_Unserializer.BASE64.length;
	while(_g1 < _g) {
		var i = _g1++;
		codes[$hx_exports.StringTools.fastCodeAt(haxe_Unserializer.BASE64,i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	buf: null
	,pos: null
	,length: null
	,cache: null
	,scache: null
	,resolver: null
	,setResolver: function(r) {
		if(r == null) {
			this.resolver = haxe__$Unserializer_NullResolver.get_instance();
		} else {
			this.resolver = r;
		}
	}
	,getResolver: function() {
		return this.resolver;
	}
	,get: function(p) {
		return $hx_exports.StringTools.fastCodeAt(this.buf,p);
	}
	,readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.get(this.pos);
			if($hx_exports.StringTools.isEof(c)) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.get(this.pos);
			if($hx_exports.StringTools.isEof(c)) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return Std.parseFloat($hx_exports.HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw new js__$Boot_HaxeError("Invalid object");
			}
			if(this.get(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw new js__$Boot_HaxeError("Invalid object key");
			}
			var v = this.unserialize();
			Reflect.setField(o,k,v);
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.get(this.pos++) != 58) {
			throw new js__$Boot_HaxeError("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		var _g = this.get(this.pos++);
		switch(_g) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw new js__$Boot_HaxeError("Class not found " + name);
			}
			return cl;
		case 66:
			var name1 = this.unserialize();
			var e = this.resolver.resolveEnum(name1);
			if(e == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name1);
			}
			return e;
		case 67:
			var name2 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name2);
			if(cl1 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name2);
			}
			var o = Type.createEmptyInstance(cl1);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.get(this.pos++) != 103) {
				throw new js__$Boot_HaxeError("Invalid custom data");
			}
			return o;
		case 77:
			var h = new $hx_exports.haxe.ds.ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.get(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw new js__$Boot_HaxeError("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf1 = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.get(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n1 = this.readDigits();
					a[a.length + n1 - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h1 = new haxe_ds_StringMap();
			this.cache.push(h1);
			var buf2 = this.buf;
			while(this.get(this.pos) != 104) {
				var s1 = this.unserialize();
				h1.set(s1,this.unserialize());
			}
			this.pos++;
			return h1;
		case 99:
			var name3 = this.unserialize();
			var cl2 = this.resolver.resolveClass(name3);
			if(cl2 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name3);
			}
			var o1 = Type.createEmptyInstance(cl2);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name4 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name4);
			if(edecl == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name4);
			}
			this.pos++;
			var index = this.readDigits();
			var tag = Type.getEnumConstructs(edecl)[index];
			if(tag == null) {
				throw new js__$Boot_HaxeError("Unknown enum index " + name4 + "@" + index);
			}
			var e1 = this.unserializeEnum(edecl,tag);
			this.cache.push(e1);
			return e1;
		case 107:
			return NaN;
		case 108:
			var l = new $hx_exports.List();
			this.cache.push(l);
			var buf3 = this.buf;
			while(this.get(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o2 = { };
			this.cache.push(o2);
			this.unserializeObject(o2);
			return o2;
		case 112:
			return Infinity;
		case 113:
			var h2 = new $hx_exports.haxe.ds.IntMap();
			this.cache.push(h2);
			var buf4 = this.buf;
			var c1 = this.get(this.pos++);
			while(c1 == 58) {
				var i = this.readDigits();
				h2.set(i,this.unserialize());
				c1 = this.get(this.pos++);
			}
			if(c1 != 104) {
				throw new js__$Boot_HaxeError("Invalid IntMap format");
			}
			return h2;
		case 114:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.cache.length) {
				throw new js__$Boot_HaxeError("Invalid reference");
			}
			return this.cache[n2];
		case 115:
			var len = this.readDigits();
			var buf5 = this.buf;
			if(this.get(this.pos++) != 58 || this.length - this.pos < len) {
				throw new js__$Boot_HaxeError("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i1 + (len - rest);
			var bytes = $hx_exports.haxe.io.Bytes.alloc(size);
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[$hx_exports.StringTools.fastCodeAt(buf5,i1++)];
				var c2 = codes[$hx_exports.StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c11 << 2 | c2 >> 4);
				var c3 = codes[$hx_exports.StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c2 << 4 | c3 >> 2);
				var c4 = codes[$hx_exports.StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c3 << 6 | c4);
			}
			if(rest >= 2) {
				var c12 = codes[$hx_exports.StringTools.fastCodeAt(buf5,i1++)];
				var c21 = codes[$hx_exports.StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c12 << 2 | c21 >> 4);
				if(rest == 3) {
					var c31 = codes[$hx_exports.StringTools.fastCodeAt(buf5,i1++)];
					bytes.set(bpos++,c21 << 4 | c31 >> 2);
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.get(this.pos) >= 48 && this.get(this.pos) <= 57 && this.get(this.pos + 1) >= 48 && this.get(this.pos + 1) <= 57 && this.get(this.pos + 2) >= 48 && this.get(this.pos + 2) <= 57 && this.get(this.pos + 3) >= 48 && this.get(this.pos + 3) <= 57 && this.get(this.pos + 4) == 45) {
				d = $hx_exports.HxOverrides.strDate($hx_exports.HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				var t = this.readFloat();
				d = new Date(t);
			}
			this.cache.push(d);
			return d;
		case 119:
			var name5 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name5);
			if(edecl1 == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name5);
			}
			var e2 = this.unserializeEnum(edecl1,this.unserialize());
			this.cache.push(e2);
			return e2;
		case 120:
			throw js__$Boot_HaxeError.wrap(this.unserialize());
		case 121:
			var len1 = this.readDigits();
			if(this.get(this.pos++) != 58 || this.length - this.pos < len1) {
				throw new js__$Boot_HaxeError("Invalid string length");
			}
			var s2 = $hx_exports.HxOverrides.substr(this.buf,this.pos,len1);
			this.pos += len1;
			s2 = $hx_exports.StringTools.urlDecode(s2);
			this.scache.push(s2);
			return s2;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe__$Unserializer_NullResolver = function() {
};
$hxClasses["haxe._Unserializer.NullResolver"] = haxe__$Unserializer_NullResolver;
haxe__$Unserializer_NullResolver.__name__ = ["haxe","_Unserializer","NullResolver"];
haxe__$Unserializer_NullResolver.__properties__ = {get_instance:"get_instance"};
haxe__$Unserializer_NullResolver.instance = null;
haxe__$Unserializer_NullResolver.get_instance = function() {
	if(haxe__$Unserializer_NullResolver.instance == null) {
		haxe__$Unserializer_NullResolver.instance = new haxe__$Unserializer_NullResolver();
	}
	return haxe__$Unserializer_NullResolver.instance;
};
haxe__$Unserializer_NullResolver.prototype = {
	resolveClass: function(name) {
		return null;
	}
	,resolveEnum: function(name) {
		return null;
	}
	,__class__: haxe__$Unserializer_NullResolver
};
var haxe_Utf8 = function(size) {
	this.__b = "";
};
$hxClasses["haxe.Utf8"] = haxe_Utf8;
haxe_Utf8.__name__ = ["haxe","Utf8"];
haxe_Utf8.iter = function(s,chars) {
	var _g1 = 0;
	var _g = s.length;
	while(_g1 < _g) {
		var i = _g1++;
		chars($hx_exports.HxOverrides.cca(s,i));
	}
};
haxe_Utf8.encode = function(s) {
	throw new js__$Boot_HaxeError("Not implemented");
};
haxe_Utf8.decode = function(s) {
	throw new js__$Boot_HaxeError("Not implemented");
};
haxe_Utf8.charCodeAt = function(s,index) {
	return $hx_exports.HxOverrides.cca(s,index);
};
haxe_Utf8.validate = function(s) {
	return true;
};
haxe_Utf8.compare = function(a,b) {
	if(a > b) {
		return 1;
	} else if(a == b) {
		return 0;
	} else {
		return -1;
	}
};
haxe_Utf8.sub = function(s,pos,len) {
	return $hx_exports.HxOverrides.substr(s,pos,len);
};
haxe_Utf8.prototype = {
	__b: null
	,addChar: function(c) {
		this.__b += String.fromCharCode(c);
	}
	,toString: function() {
		return this.__b;
	}
	,__class__: haxe_Utf8
};
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = ["haxe","crypto","Base64"];
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		var _g = bytes.length % 3;
		switch(_g) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while($hx_exports.HxOverrides.cca(str,str.length - 1) == 61) str = $hx_exports.HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes($hx_exports.haxe.io.Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = ["haxe","crypto","BaseCode"];
haxe_crypto_BaseCode.encode = function(s,base) {
	var b = new haxe_crypto_BaseCode($hx_exports.haxe.io.Bytes.ofString(base));
	return b.encodeString(s);
};
haxe_crypto_BaseCode.decode = function(s,base) {
	var b = new haxe_crypto_BaseCode($hx_exports.haxe.io.Bytes.ofString(base));
	return b.decodeString(s);
};
haxe_crypto_BaseCode.prototype = {
	base: null
	,nbits: null
	,tbl: null
	,encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = Std.int(b.length * 8 / nbits);
		var out = $hx_exports.haxe.io.Bytes.alloc(size + (b.length * 8 % nbits == 0 ? 0 : 1));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.get(pin++);
			}
			curbits -= nbits;
			out.set(pout++,base.get(buf >> curbits & mask));
		}
		if(curbits > 0) {
			out.set(pout++,base.get(buf << nbits - curbits & mask));
		}
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.get(i1)] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = $hx_exports.haxe.io.Bytes.alloc(size);
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.get(pin++)];
				if(i == -1) {
					throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.set(pout++,buf >> curbits & 255);
		}
		return out;
	}
	,encodeString: function(s) {
		return this.encodeBytes($hx_exports.haxe.io.Bytes.ofString(s)).toString();
	}
	,decodeString: function(s) {
		return this.decodeBytes($hx_exports.haxe.io.Bytes.ofString(s)).toString();
	}
	,__class__: haxe_crypto_BaseCode
};
var $hx_$exports_haxe_ds_HashMap = {};
$hxClasses["$hx_exports.haxe.ds.HashMap"] = $hx_$exports_haxe_ds_HashMap;
$hx_$exports_haxe_ds_HashMap.__name__ = ["$hx_exports","haxe","ds","HashMap"];
$hx_$exports_haxe_ds_HashMap._new = function() {
	var this1 = new haxe_ds__$HashMap_HashMapData();
	return this1;
};
$hx_$exports_haxe_ds_HashMap.set = function(this1,k,v) {
	this1.keys.set(k.hashCode(),k);
	this1.values.set(k.hashCode(),v);
};
$hx_$exports_haxe_ds_HashMap.get = function(this1,k) {
	return this1.values.get(k.hashCode());
};
$hx_$exports_haxe_ds_HashMap.exists = function(this1,k) {
	return this1.values.exists(k.hashCode());
};
$hx_$exports_haxe_ds_HashMap.remove = function(this1,k) {
	this1.values.remove(k.hashCode());
	return this1.keys.remove(k.hashCode());
};
$hx_$exports_haxe_ds_HashMap.keys = function(this1) {
	return this1.keys.iterator();
};
$hx_$exports_haxe_ds_HashMap.copy = function(this1) {
	var copied = new haxe_ds__$HashMap_HashMapData();
	copied.keys = this1.keys.copy();
	copied.values = this1.values.copy();
	return copied;
};
$hx_$exports_haxe_ds_HashMap.iterator = function(this1) {
	return this1.values.iterator();
};
var haxe_ds__$HashMap_HashMapData = function() {
	this.keys = new $hx_exports.haxe.ds.IntMap();
	this.values = new $hx_exports.haxe.ds.IntMap();
};
$hxClasses["haxe.ds._HashMap.HashMapData"] = haxe_ds__$HashMap_HashMapData;
haxe_ds__$HashMap_HashMapData.__name__ = ["haxe","ds","_HashMap","HashMapData"];
haxe_ds__$HashMap_HashMapData.prototype = {
	keys: null
	,values: null
	,__class__: haxe_ds__$HashMap_HashMapData
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	h: null
	,rh: null
	,isReserved: function(key) {
		return __map_reserved[key] != null;
	}
	,set: function(key,value) {
		if(this.isReserved(key)) {
			this.setReserved(key,value);
		} else {
			this.h[key] = value;
		}
	}
	,get: function(key) {
		if(this.isReserved(key)) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,exists: function(key) {
		if(this.isReserved(key)) {
			return this.existsReserved(key);
		}
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(this.isReserved(key)) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return $hx_exports.HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,iterator: function() {
		return new $hx_exports.haxe.ds._StringMap.StringMapIterator(this,this.arrayKeys());
	}
	,copy: function() {
		var copied = new haxe_ds_StringMap();
		var key = this.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			copied.set(key1,this.get(key1));
		}
		return copied;
	}
	,toString: function() {
		var s = new $hx_exports.StringBuf();
		s.add("{");
		var keys = this.arrayKeys();
		var _g1 = 0;
		var _g = keys.length;
		while(_g1 < _g) {
			var i = _g1++;
			var k = keys[i];
			s.add(k);
			s.add(" => ");
			s.add(Std.string(this.get(k)));
			if(i < keys.length - 1) {
				s.add(", ");
			}
		}
		s.add("}");
		return s.toString();
	}
	,__class__: haxe_ds_StringMap
};
var $hx_$exports_haxe_ds_Vector = {};
$hxClasses["$hx_exports.haxe.ds.Vector"] = $hx_$exports_haxe_ds_Vector;
$hx_$exports_haxe_ds_Vector.__name__ = ["$hx_exports","haxe","ds","Vector"];
$hx_$exports_haxe_ds_Vector.__properties__ = {get_length:"get_length"};
$hx_$exports_haxe_ds_Vector._new = function(length) {
	var this1 = new Array(length);
	return this1;
};
$hx_$exports_haxe_ds_Vector.get = function(this1,index) {
	return this1[index];
};
$hx_$exports_haxe_ds_Vector.set = function(this1,index,val) {
	return this1[index] = val;
};
$hx_$exports_haxe_ds_Vector.get_length = function(this1) {
	return this1.length;
};
$hx_$exports_haxe_ds_Vector.blit = function(src,srcPos,dest,destPos,len) {
	if(src == dest) {
		if(srcPos < destPos) {
			var i = srcPos + len;
			var j = destPos + len;
			var _g1 = 0;
			var _g = len;
			while(_g1 < _g) {
				var k = _g1++;
				--i;
				--j;
				src[j] = src[i];
			}
		} else if(srcPos > destPos) {
			var i1 = srcPos;
			var j1 = destPos;
			var _g11 = 0;
			var _g2 = len;
			while(_g11 < _g2) {
				var k1 = _g11++;
				src[j1] = src[i1];
				++i1;
				++j1;
			}
		}
	} else {
		var _g12 = 0;
		var _g3 = len;
		while(_g12 < _g3) {
			var i2 = _g12++;
			dest[destPos + i2] = src[srcPos + i2];
		}
	}
};
$hx_$exports_haxe_ds_Vector.toArray = function(this1) {
	return this1.slice(0);
};
$hx_$exports_haxe_ds_Vector.toData = function(this1) {
	return this1;
};
$hx_$exports_haxe_ds_Vector.fromData = function(data) {
	return data;
};
$hx_$exports_haxe_ds_Vector.fromArrayCopy = function(array) {
	return array.slice(0);
};
$hx_$exports_haxe_ds_Vector.copy = function(this1) {
	var length = this1.length;
	var this2 = new Array(length);
	var r = this2;
	$hx_$exports_haxe_ds_Vector.blit(this1,0,r,0,this1.length);
	return r;
};
$hx_$exports_haxe_ds_Vector.join = function(this1,sep) {
	var b = new $hx_exports.StringBuf();
	var i = 0;
	var len = this1.length;
	var _g1 = 0;
	var _g = len;
	while(_g1 < _g) {
		var i1 = _g1++;
		b.add(Std.string(this1[i1]));
		if(i1 < len - 1) {
			b.add(sep);
		}
	}
	return b.toString();
};
$hx_$exports_haxe_ds_Vector.map = function(this1,f) {
	var length = this1.length;
	var this2 = new Array(length);
	var r = this2;
	var i = 0;
	var len = length;
	var _g1 = 0;
	var _g = len;
	while(_g1 < _g) {
		var i1 = _g1++;
		var v = f(this1[i1]);
		r[i1] = v;
	}
	return r;
};
$hx_$exports_haxe_ds_Vector.sort = function(this1,f) {
	this1.sort(f);
};
var haxe_format_JsonParser = function(str) {
	this.str = str;
	this.pos = 0;
};
$hxClasses["haxe.format.JsonParser"] = haxe_format_JsonParser;
haxe_format_JsonParser.__name__ = ["haxe","format","JsonParser"];
haxe_format_JsonParser.parse = function(str) {
	return new haxe_format_JsonParser(str).parseRec();
};
haxe_format_JsonParser.prototype = {
	str: null
	,pos: null
	,parseRec: function() {
		while(true) {
			var c = this.nextChar();
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			case 34:
				return this.parseString();
			case 45:case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
				return this.parseNumber(c);
			case 91:
				var arr = [];
				var comma = null;
				while(true) {
					var c1 = this.nextChar();
					switch(c1) {
					case 9:case 10:case 13:case 32:
						break;
					case 44:
						if(comma) {
							comma = false;
						} else {
							this.invalidChar();
						}
						break;
					case 93:
						if(comma == false) {
							this.invalidChar();
						}
						return arr;
					default:
						if(comma) {
							this.invalidChar();
						}
						this.pos--;
						arr.push(this.parseRec());
						comma = true;
					}
				}
				break;
			case 102:
				var save = this.pos;
				if(this.nextChar() != 97 || this.nextChar() != 108 || this.nextChar() != 115 || this.nextChar() != 101) {
					this.pos = save;
					this.invalidChar();
				}
				return false;
			case 110:
				var save1 = this.pos;
				if(this.nextChar() != 117 || this.nextChar() != 108 || this.nextChar() != 108) {
					this.pos = save1;
					this.invalidChar();
				}
				return null;
			case 116:
				var save2 = this.pos;
				if(this.nextChar() != 114 || this.nextChar() != 117 || this.nextChar() != 101) {
					this.pos = save2;
					this.invalidChar();
				}
				return true;
			case 123:
				var obj = { };
				var field = null;
				var comma1 = null;
				while(true) {
					var c2 = this.nextChar();
					switch(c2) {
					case 9:case 10:case 13:case 32:
						break;
					case 34:
						if(field != null || comma1) {
							this.invalidChar();
						}
						field = this.parseString();
						break;
					case 44:
						if(comma1) {
							comma1 = false;
						} else {
							this.invalidChar();
						}
						break;
					case 58:
						if(field == null) {
							this.invalidChar();
						}
						Reflect.setField(obj,field,this.parseRec());
						field = null;
						comma1 = true;
						break;
					case 125:
						if(field != null || comma1 == false) {
							this.invalidChar();
						}
						return obj;
					default:
						this.invalidChar();
					}
				}
				break;
			default:
				this.invalidChar();
			}
		}
	}
	,parseString: function() {
		var start = this.pos;
		var buf = null;
		while(true) {
			var c = this.nextChar();
			if(c == 34) {
				break;
			}
			if(c == 92) {
				if(buf == null) {
					buf = new $hx_exports.StringBuf();
				}
				buf.addSub(this.str,start,this.pos - start - 1);
				c = this.nextChar();
				switch(c) {
				case 34:case 47:case 92:
					buf.addChar(c);
					break;
				case 98:
					buf.addChar(8);
					break;
				case 102:
					buf.addChar(12);
					break;
				case 110:
					buf.addChar(10);
					break;
				case 114:
					buf.addChar(13);
					break;
				case 116:
					buf.addChar(9);
					break;
				case 117:
					var uc = Std.parseInt("0x" + $hx_exports.HxOverrides.substr(this.str,this.pos,4));
					this.pos += 4;
					buf.addChar(uc);
					break;
				default:
					throw new js__$Boot_HaxeError("Invalid escape sequence \\" + String.fromCharCode(c) + " at position " + (this.pos - 1));
				}
				start = this.pos;
			} else if($hx_exports.StringTools.isEof(c)) {
				throw new js__$Boot_HaxeError("Unclosed string");
			}
		}
		if(buf == null) {
			return $hx_exports.HxOverrides.substr(this.str,start,this.pos - start - 1);
		} else {
			buf.addSub(this.str,start,this.pos - start - 1);
			return buf.toString();
		}
	}
	,parseNumber: function(c) {
		var start = this.pos - 1;
		var minus = c == 45;
		var digit = !minus;
		var zero = c == 48;
		var point = false;
		var e = false;
		var pm = false;
		var end = false;
		while(true) {
			c = this.nextChar();
			switch(c) {
			case 43:case 45:
				if(!e || pm) {
					this.invalidNumber(start);
				}
				digit = false;
				pm = true;
				break;
			case 46:
				if(minus || point) {
					this.invalidNumber(start);
				}
				digit = false;
				point = true;
				break;
			case 48:
				if(zero && !point) {
					this.invalidNumber(start);
				}
				if(minus) {
					minus = false;
					zero = true;
				}
				digit = true;
				break;
			case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
				if(zero && !point) {
					this.invalidNumber(start);
				}
				if(minus) {
					minus = false;
				}
				digit = true;
				zero = false;
				break;
			case 69:case 101:
				if(minus || zero || e) {
					this.invalidNumber(start);
				}
				digit = false;
				e = true;
				break;
			default:
				if(!digit) {
					this.invalidNumber(start);
				}
				this.pos--;
				end = true;
			}
			if(end) {
				break;
			}
		}
		var f = Std.parseFloat($hx_exports.HxOverrides.substr(this.str,start,this.pos - start));
		var i = Std.int(f);
		if(i == f) {
			return i;
		} else {
			return f;
		}
	}
	,nextChar: function() {
		return $hx_exports.StringTools.fastCodeAt(this.str,this.pos++);
	}
	,invalidChar: function() {
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + $hx_exports.StringTools.fastCodeAt(this.str,this.pos) + " at position " + this.pos);
	}
	,invalidNumber: function(start) {
		throw new js__$Boot_HaxeError("Invalid number at position " + start + ": " + $hx_exports.HxOverrides.substr(this.str,start,this.pos - start));
	}
	,__class__: haxe_format_JsonParser
};
var haxe_macro_Compiler = function() { };
$hxClasses["haxe.macro.Compiler"] = haxe_macro_Compiler;
haxe_macro_Compiler.__name__ = ["haxe","macro","Compiler"];
var haxe_macro_Context = function() { };
$hxClasses["haxe.macro.Context"] = haxe_macro_Context;
haxe_macro_Context.__name__ = ["haxe","macro","Context"];
var haxe_macro_Constant = $hxClasses["haxe.macro.Constant"] = { __ename__ : ["haxe","macro","Constant"], __constructs__ : ["CInt","CFloat","CString","CIdent","CRegexp"] };
haxe_macro_Constant.CInt = function(v) { var $x = ["CInt",0,v]; $x.__enum__ = haxe_macro_Constant; $x.toString = $estr; return $x; };
haxe_macro_Constant.CFloat = function(f) { var $x = ["CFloat",1,f]; $x.__enum__ = haxe_macro_Constant; $x.toString = $estr; return $x; };
haxe_macro_Constant.CString = function(s) { var $x = ["CString",2,s]; $x.__enum__ = haxe_macro_Constant; $x.toString = $estr; return $x; };
haxe_macro_Constant.CIdent = function(s) { var $x = ["CIdent",3,s]; $x.__enum__ = haxe_macro_Constant; $x.toString = $estr; return $x; };
haxe_macro_Constant.CRegexp = function(r,opt) { var $x = ["CRegexp",4,r,opt]; $x.__enum__ = haxe_macro_Constant; $x.toString = $estr; return $x; };
haxe_macro_Constant.__empty_constructs__ = [];
var haxe_macro_Binop = $hxClasses["haxe.macro.Binop"] = { __ename__ : ["haxe","macro","Binop"], __constructs__ : ["OpAdd","OpMult","OpDiv","OpSub","OpAssign","OpEq","OpNotEq","OpGt","OpGte","OpLt","OpLte","OpAnd","OpOr","OpXor","OpBoolAnd","OpBoolOr","OpShl","OpShr","OpUShr","OpMod","OpAssignOp","OpInterval","OpArrow","OpIn"] };
haxe_macro_Binop.OpAdd = ["OpAdd",0];
haxe_macro_Binop.OpAdd.toString = $estr;
haxe_macro_Binop.OpAdd.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpMult = ["OpMult",1];
haxe_macro_Binop.OpMult.toString = $estr;
haxe_macro_Binop.OpMult.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpDiv = ["OpDiv",2];
haxe_macro_Binop.OpDiv.toString = $estr;
haxe_macro_Binop.OpDiv.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpSub = ["OpSub",3];
haxe_macro_Binop.OpSub.toString = $estr;
haxe_macro_Binop.OpSub.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpAssign = ["OpAssign",4];
haxe_macro_Binop.OpAssign.toString = $estr;
haxe_macro_Binop.OpAssign.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpEq = ["OpEq",5];
haxe_macro_Binop.OpEq.toString = $estr;
haxe_macro_Binop.OpEq.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpNotEq = ["OpNotEq",6];
haxe_macro_Binop.OpNotEq.toString = $estr;
haxe_macro_Binop.OpNotEq.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpGt = ["OpGt",7];
haxe_macro_Binop.OpGt.toString = $estr;
haxe_macro_Binop.OpGt.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpGte = ["OpGte",8];
haxe_macro_Binop.OpGte.toString = $estr;
haxe_macro_Binop.OpGte.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpLt = ["OpLt",9];
haxe_macro_Binop.OpLt.toString = $estr;
haxe_macro_Binop.OpLt.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpLte = ["OpLte",10];
haxe_macro_Binop.OpLte.toString = $estr;
haxe_macro_Binop.OpLte.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpAnd = ["OpAnd",11];
haxe_macro_Binop.OpAnd.toString = $estr;
haxe_macro_Binop.OpAnd.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpOr = ["OpOr",12];
haxe_macro_Binop.OpOr.toString = $estr;
haxe_macro_Binop.OpOr.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpXor = ["OpXor",13];
haxe_macro_Binop.OpXor.toString = $estr;
haxe_macro_Binop.OpXor.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpBoolAnd = ["OpBoolAnd",14];
haxe_macro_Binop.OpBoolAnd.toString = $estr;
haxe_macro_Binop.OpBoolAnd.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpBoolOr = ["OpBoolOr",15];
haxe_macro_Binop.OpBoolOr.toString = $estr;
haxe_macro_Binop.OpBoolOr.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpShl = ["OpShl",16];
haxe_macro_Binop.OpShl.toString = $estr;
haxe_macro_Binop.OpShl.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpShr = ["OpShr",17];
haxe_macro_Binop.OpShr.toString = $estr;
haxe_macro_Binop.OpShr.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpUShr = ["OpUShr",18];
haxe_macro_Binop.OpUShr.toString = $estr;
haxe_macro_Binop.OpUShr.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpMod = ["OpMod",19];
haxe_macro_Binop.OpMod.toString = $estr;
haxe_macro_Binop.OpMod.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpAssignOp = function(op) { var $x = ["OpAssignOp",20,op]; $x.__enum__ = haxe_macro_Binop; $x.toString = $estr; return $x; };
haxe_macro_Binop.OpInterval = ["OpInterval",21];
haxe_macro_Binop.OpInterval.toString = $estr;
haxe_macro_Binop.OpInterval.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpArrow = ["OpArrow",22];
haxe_macro_Binop.OpArrow.toString = $estr;
haxe_macro_Binop.OpArrow.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpIn = ["OpIn",23];
haxe_macro_Binop.OpIn.toString = $estr;
haxe_macro_Binop.OpIn.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.__empty_constructs__ = [haxe_macro_Binop.OpAdd,haxe_macro_Binop.OpMult,haxe_macro_Binop.OpDiv,haxe_macro_Binop.OpSub,haxe_macro_Binop.OpAssign,haxe_macro_Binop.OpEq,haxe_macro_Binop.OpNotEq,haxe_macro_Binop.OpGt,haxe_macro_Binop.OpGte,haxe_macro_Binop.OpLt,haxe_macro_Binop.OpLte,haxe_macro_Binop.OpAnd,haxe_macro_Binop.OpOr,haxe_macro_Binop.OpXor,haxe_macro_Binop.OpBoolAnd,haxe_macro_Binop.OpBoolOr,haxe_macro_Binop.OpShl,haxe_macro_Binop.OpShr,haxe_macro_Binop.OpUShr,haxe_macro_Binop.OpMod,haxe_macro_Binop.OpInterval,haxe_macro_Binop.OpArrow,haxe_macro_Binop.OpIn];
var haxe_macro_Unop = $hxClasses["haxe.macro.Unop"] = { __ename__ : ["haxe","macro","Unop"], __constructs__ : ["OpIncrement","OpDecrement","OpNot","OpNeg","OpNegBits"] };
haxe_macro_Unop.OpIncrement = ["OpIncrement",0];
haxe_macro_Unop.OpIncrement.toString = $estr;
haxe_macro_Unop.OpIncrement.__enum__ = haxe_macro_Unop;
haxe_macro_Unop.OpDecrement = ["OpDecrement",1];
haxe_macro_Unop.OpDecrement.toString = $estr;
haxe_macro_Unop.OpDecrement.__enum__ = haxe_macro_Unop;
haxe_macro_Unop.OpNot = ["OpNot",2];
haxe_macro_Unop.OpNot.toString = $estr;
haxe_macro_Unop.OpNot.__enum__ = haxe_macro_Unop;
haxe_macro_Unop.OpNeg = ["OpNeg",3];
haxe_macro_Unop.OpNeg.toString = $estr;
haxe_macro_Unop.OpNeg.__enum__ = haxe_macro_Unop;
haxe_macro_Unop.OpNegBits = ["OpNegBits",4];
haxe_macro_Unop.OpNegBits.toString = $estr;
haxe_macro_Unop.OpNegBits.__enum__ = haxe_macro_Unop;
haxe_macro_Unop.__empty_constructs__ = [haxe_macro_Unop.OpIncrement,haxe_macro_Unop.OpDecrement,haxe_macro_Unop.OpNot,haxe_macro_Unop.OpNeg,haxe_macro_Unop.OpNegBits];
var haxe_macro_ExprDef = $hxClasses["haxe.macro.ExprDef"] = { __ename__ : ["haxe","macro","ExprDef"], __constructs__ : ["EConst","EArray","EBinop","EField","EParenthesis","EObjectDecl","EArrayDecl","ECall","ENew","EUnop","EVars","EFunction","EBlock","EFor","EIf","EWhile","ESwitch","ETry","EReturn","EBreak","EContinue","EUntyped","EThrow","ECast","EDisplay","EDisplayNew","ETernary","ECheckType","EMeta"] };
haxe_macro_ExprDef.EConst = function(c) { var $x = ["EConst",0,c]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EArray = function(e1,e2) { var $x = ["EArray",1,e1,e2]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EBinop = function(op,e1,e2) { var $x = ["EBinop",2,op,e1,e2]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EField = function(e,field) { var $x = ["EField",3,e,field]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EParenthesis = function(e) { var $x = ["EParenthesis",4,e]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EObjectDecl = function(fields) { var $x = ["EObjectDecl",5,fields]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EArrayDecl = function(values) { var $x = ["EArrayDecl",6,values]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.ECall = function(e,params) { var $x = ["ECall",7,e,params]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.ENew = function(t,params) { var $x = ["ENew",8,t,params]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EUnop = function(op,postFix,e) { var $x = ["EUnop",9,op,postFix,e]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EVars = function(vars) { var $x = ["EVars",10,vars]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EFunction = function(name,f) { var $x = ["EFunction",11,name,f]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EBlock = function(exprs) { var $x = ["EBlock",12,exprs]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EFor = function(it,expr) { var $x = ["EFor",13,it,expr]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EIf = function(econd,eif,eelse) { var $x = ["EIf",14,econd,eif,eelse]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EWhile = function(econd,e,normalWhile) { var $x = ["EWhile",15,econd,e,normalWhile]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.ESwitch = function(e,cases,edef) { var $x = ["ESwitch",16,e,cases,edef]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.ETry = function(e,catches) { var $x = ["ETry",17,e,catches]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EReturn = function(e) { var $x = ["EReturn",18,e]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EBreak = ["EBreak",19];
haxe_macro_ExprDef.EBreak.toString = $estr;
haxe_macro_ExprDef.EBreak.__enum__ = haxe_macro_ExprDef;
haxe_macro_ExprDef.EContinue = ["EContinue",20];
haxe_macro_ExprDef.EContinue.toString = $estr;
haxe_macro_ExprDef.EContinue.__enum__ = haxe_macro_ExprDef;
haxe_macro_ExprDef.EUntyped = function(e) { var $x = ["EUntyped",21,e]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EThrow = function(e) { var $x = ["EThrow",22,e]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.ECast = function(e,t) { var $x = ["ECast",23,e,t]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EDisplay = function(e,isCall) { var $x = ["EDisplay",24,e,isCall]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EDisplayNew = function(t) { var $x = ["EDisplayNew",25,t]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.ETernary = function(econd,eif,eelse) { var $x = ["ETernary",26,econd,eif,eelse]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.ECheckType = function(e,t) { var $x = ["ECheckType",27,e,t]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EMeta = function(s,e) { var $x = ["EMeta",28,s,e]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.__empty_constructs__ = [haxe_macro_ExprDef.EBreak,haxe_macro_ExprDef.EContinue];
var haxe_macro_ComplexType = $hxClasses["haxe.macro.ComplexType"] = { __ename__ : ["haxe","macro","ComplexType"], __constructs__ : ["TPath","TFunction","TAnonymous","TParent","TExtend","TOptional"] };
haxe_macro_ComplexType.TPath = function(p) { var $x = ["TPath",0,p]; $x.__enum__ = haxe_macro_ComplexType; $x.toString = $estr; return $x; };
haxe_macro_ComplexType.TFunction = function(args,ret) { var $x = ["TFunction",1,args,ret]; $x.__enum__ = haxe_macro_ComplexType; $x.toString = $estr; return $x; };
haxe_macro_ComplexType.TAnonymous = function(fields) { var $x = ["TAnonymous",2,fields]; $x.__enum__ = haxe_macro_ComplexType; $x.toString = $estr; return $x; };
haxe_macro_ComplexType.TParent = function(t) { var $x = ["TParent",3,t]; $x.__enum__ = haxe_macro_ComplexType; $x.toString = $estr; return $x; };
haxe_macro_ComplexType.TExtend = function(p,fields) { var $x = ["TExtend",4,p,fields]; $x.__enum__ = haxe_macro_ComplexType; $x.toString = $estr; return $x; };
haxe_macro_ComplexType.TOptional = function(t) { var $x = ["TOptional",5,t]; $x.__enum__ = haxe_macro_ComplexType; $x.toString = $estr; return $x; };
haxe_macro_ComplexType.__empty_constructs__ = [];
var haxe_macro_TypeParam = $hxClasses["haxe.macro.TypeParam"] = { __ename__ : ["haxe","macro","TypeParam"], __constructs__ : ["TPType","TPExpr"] };
haxe_macro_TypeParam.TPType = function(t) { var $x = ["TPType",0,t]; $x.__enum__ = haxe_macro_TypeParam; $x.toString = $estr; return $x; };
haxe_macro_TypeParam.TPExpr = function(e) { var $x = ["TPExpr",1,e]; $x.__enum__ = haxe_macro_TypeParam; $x.toString = $estr; return $x; };
haxe_macro_TypeParam.__empty_constructs__ = [];
var haxe_macro_Access = $hxClasses["haxe.macro.Access"] = { __ename__ : ["haxe","macro","Access"], __constructs__ : ["APublic","APrivate","AStatic","AOverride","ADynamic","AInline","AMacro"] };
haxe_macro_Access.APublic = ["APublic",0];
haxe_macro_Access.APublic.toString = $estr;
haxe_macro_Access.APublic.__enum__ = haxe_macro_Access;
haxe_macro_Access.APrivate = ["APrivate",1];
haxe_macro_Access.APrivate.toString = $estr;
haxe_macro_Access.APrivate.__enum__ = haxe_macro_Access;
haxe_macro_Access.AStatic = ["AStatic",2];
haxe_macro_Access.AStatic.toString = $estr;
haxe_macro_Access.AStatic.__enum__ = haxe_macro_Access;
haxe_macro_Access.AOverride = ["AOverride",3];
haxe_macro_Access.AOverride.toString = $estr;
haxe_macro_Access.AOverride.__enum__ = haxe_macro_Access;
haxe_macro_Access.ADynamic = ["ADynamic",4];
haxe_macro_Access.ADynamic.toString = $estr;
haxe_macro_Access.ADynamic.__enum__ = haxe_macro_Access;
haxe_macro_Access.AInline = ["AInline",5];
haxe_macro_Access.AInline.toString = $estr;
haxe_macro_Access.AInline.__enum__ = haxe_macro_Access;
haxe_macro_Access.AMacro = ["AMacro",6];
haxe_macro_Access.AMacro.toString = $estr;
haxe_macro_Access.AMacro.__enum__ = haxe_macro_Access;
haxe_macro_Access.__empty_constructs__ = [haxe_macro_Access.APublic,haxe_macro_Access.APrivate,haxe_macro_Access.AStatic,haxe_macro_Access.AOverride,haxe_macro_Access.ADynamic,haxe_macro_Access.AInline,haxe_macro_Access.AMacro];
var haxe_macro_FieldType = $hxClasses["haxe.macro.FieldType"] = { __ename__ : ["haxe","macro","FieldType"], __constructs__ : ["FVar","FFun","FProp"] };
haxe_macro_FieldType.FVar = function(t,e) { var $x = ["FVar",0,t,e]; $x.__enum__ = haxe_macro_FieldType; $x.toString = $estr; return $x; };
haxe_macro_FieldType.FFun = function(f) { var $x = ["FFun",1,f]; $x.__enum__ = haxe_macro_FieldType; $x.toString = $estr; return $x; };
haxe_macro_FieldType.FProp = function(get,set,t,e) { var $x = ["FProp",2,get,set,t,e]; $x.__enum__ = haxe_macro_FieldType; $x.toString = $estr; return $x; };
haxe_macro_FieldType.__empty_constructs__ = [];
var haxe_macro_TypeDefKind = $hxClasses["haxe.macro.TypeDefKind"] = { __ename__ : ["haxe","macro","TypeDefKind"], __constructs__ : ["TDEnum","TDStructure","TDClass","TDAlias","TDAbstract"] };
haxe_macro_TypeDefKind.TDEnum = ["TDEnum",0];
haxe_macro_TypeDefKind.TDEnum.toString = $estr;
haxe_macro_TypeDefKind.TDEnum.__enum__ = haxe_macro_TypeDefKind;
haxe_macro_TypeDefKind.TDStructure = ["TDStructure",1];
haxe_macro_TypeDefKind.TDStructure.toString = $estr;
haxe_macro_TypeDefKind.TDStructure.__enum__ = haxe_macro_TypeDefKind;
haxe_macro_TypeDefKind.TDClass = function(superClass,interfaces,isInterface) { var $x = ["TDClass",2,superClass,interfaces,isInterface]; $x.__enum__ = haxe_macro_TypeDefKind; $x.toString = $estr; return $x; };
haxe_macro_TypeDefKind.TDAlias = function(t) { var $x = ["TDAlias",3,t]; $x.__enum__ = haxe_macro_TypeDefKind; $x.toString = $estr; return $x; };
haxe_macro_TypeDefKind.TDAbstract = function(tthis,from,to) { var $x = ["TDAbstract",4,tthis,from,to]; $x.__enum__ = haxe_macro_TypeDefKind; $x.toString = $estr; return $x; };
haxe_macro_TypeDefKind.__empty_constructs__ = [haxe_macro_TypeDefKind.TDEnum,haxe_macro_TypeDefKind.TDStructure];
var haxe_macro_Error = function(m,p) {
	this.message = m;
	this.pos = p;
};
$hxClasses["haxe.macro.Error"] = haxe_macro_Error;
haxe_macro_Error.__name__ = ["haxe","macro","Error"];
haxe_macro_Error.prototype = {
	message: null
	,pos: null
	,toString: function() {
		return this.message;
	}
	,__class__: haxe_macro_Error
};
var haxe_macro_ImportMode = $hxClasses["haxe.macro.ImportMode"] = { __ename__ : ["haxe","macro","ImportMode"], __constructs__ : ["INormal","IAsName","IAll"] };
haxe_macro_ImportMode.INormal = ["INormal",0];
haxe_macro_ImportMode.INormal.toString = $estr;
haxe_macro_ImportMode.INormal.__enum__ = haxe_macro_ImportMode;
haxe_macro_ImportMode.IAsName = function(alias) { var $x = ["IAsName",1,alias]; $x.__enum__ = haxe_macro_ImportMode; $x.toString = $estr; return $x; };
haxe_macro_ImportMode.IAll = ["IAll",2];
haxe_macro_ImportMode.IAll.toString = $estr;
haxe_macro_ImportMode.IAll.__enum__ = haxe_macro_ImportMode;
haxe_macro_ImportMode.__empty_constructs__ = [haxe_macro_ImportMode.INormal,haxe_macro_ImportMode.IAll];
var haxe_macro_ExprTools = function() { };
$hxClasses["haxe.macro.ExprTools"] = haxe_macro_ExprTools;
haxe_macro_ExprTools.__name__ = ["haxe","macro","ExprTools"];
haxe_macro_ExprTools.toString = function(e) {
	return new haxe_macro_Printer().printExpr(e);
};
haxe_macro_ExprTools.iter = function(e,f) {
	var _g = e.expr;
	switch(_g[1]) {
	case 1:
		var e2 = _g[3];
		var e1 = _g[2];
		f(e1);
		f(e2);
		break;
	case 2:
		var e21 = _g[4];
		var e11 = _g[3];
		f(e11);
		f(e21);
		break;
	case 3:
		var e3 = _g[2];
		f(e3);
		break;
	case 4:
		var e4 = _g[2];
		f(e4);
		break;
	case 5:
		var fl = _g[2];
		var _g1 = 0;
		while(_g1 < fl.length) {
			var fd = fl[_g1];
			++_g1;
			f(fd.expr);
		}
		break;
	case 6:
		var el = _g[2];
		haxe_macro_ExprArrayTools.iter(el,f);
		break;
	case 7:
		var el1 = _g[3];
		var e5 = _g[2];
		f(e5);
		haxe_macro_ExprArrayTools.iter(el1,f);
		break;
	case 8:
		var el2 = _g[3];
		haxe_macro_ExprArrayTools.iter(el2,f);
		break;
	case 9:
		var e6 = _g[4];
		f(e6);
		break;
	case 10:
		var vl = _g[2];
		var _g2 = 0;
		while(_g2 < vl.length) {
			var v = vl[_g2];
			++_g2;
			haxe_macro_ExprTools.opt2(v.expr,f);
		}
		break;
	case 11:
		var func = _g[3];
		var _g3 = 0;
		var _g11 = func.args;
		while(_g3 < _g11.length) {
			var arg = _g11[_g3];
			++_g3;
			haxe_macro_ExprTools.opt2(arg.value,f);
		}
		haxe_macro_ExprTools.opt2(func.expr,f);
		break;
	case 12:
		var el3 = _g[2];
		haxe_macro_ExprArrayTools.iter(el3,f);
		break;
	case 13:
		var e22 = _g[3];
		var e12 = _g[2];
		f(e12);
		f(e22);
		break;
	case 14:
		var e31 = _g[4];
		var e23 = _g[3];
		var e13 = _g[2];
		f(e13);
		f(e23);
		haxe_macro_ExprTools.opt2(e31,f);
		break;
	case 15:
		var e24 = _g[3];
		var e14 = _g[2];
		f(e14);
		f(e24);
		break;
	case 16:
		var edef = _g[4];
		var cl = _g[3];
		var e7 = _g[2];
		f(e7);
		var _g4 = 0;
		while(_g4 < cl.length) {
			var c = cl[_g4];
			++_g4;
			haxe_macro_ExprArrayTools.iter(c.values,f);
			haxe_macro_ExprTools.opt2(c.guard,f);
			haxe_macro_ExprTools.opt2(c.expr,f);
		}
		if(edef != null && edef.expr != null) {
			f(edef);
		}
		break;
	case 17:
		var cl1 = _g[3];
		var e8 = _g[2];
		f(e8);
		var _g5 = 0;
		while(_g5 < cl1.length) {
			var c1 = cl1[_g5];
			++_g5;
			f(c1.expr);
		}
		break;
	case 18:
		var e9 = _g[2];
		haxe_macro_ExprTools.opt2(e9,f);
		break;
	case 0:case 19:case 20:case 25:
		break;
	case 21:
		var e10 = _g[2];
		f(e10);
		break;
	case 22:
		var e15 = _g[2];
		f(e15);
		break;
	case 23:
		var e16 = _g[2];
		f(e16);
		break;
	case 24:
		var e17 = _g[2];
		f(e17);
		break;
	case 26:
		var e32 = _g[4];
		var e25 = _g[3];
		var e18 = _g[2];
		f(e18);
		f(e25);
		haxe_macro_ExprTools.opt2(e32,f);
		break;
	case 27:
		var e19 = _g[2];
		f(e19);
		break;
	case 28:
		var e20 = _g[3];
		f(e20);
		break;
	}
};
haxe_macro_ExprTools.map = function(e,f) {
	var e1 = e.pos;
	var _g = e.expr;
	var tmp;
	switch(_g[1]) {
	case 0:
		tmp = e.expr;
		break;
	case 1:
		var e2 = _g[3];
		var e11 = _g[2];
		tmp = haxe_macro_ExprDef.EArray(f(e11),f(e2));
		break;
	case 2:
		var e21 = _g[4];
		var e12 = _g[3];
		var op = _g[2];
		tmp = haxe_macro_ExprDef.EBinop(op,f(e12),f(e21));
		break;
	case 3:
		var field = _g[3];
		var e3 = _g[2];
		tmp = haxe_macro_ExprDef.EField(f(e3),field);
		break;
	case 4:
		var e4 = _g[2];
		tmp = haxe_macro_ExprDef.EParenthesis(f(e4));
		break;
	case 5:
		var fields = _g[2];
		var ret = [];
		var _g1 = 0;
		while(_g1 < fields.length) {
			var field1 = fields[_g1];
			++_g1;
			ret.push({ field : field1.field, expr : f(field1.expr)});
		}
		tmp = haxe_macro_ExprDef.EObjectDecl(ret);
		break;
	case 6:
		var el = _g[2];
		tmp = haxe_macro_ExprDef.EArrayDecl(haxe_macro_ExprArrayTools.map(el,f));
		break;
	case 7:
		var params = _g[3];
		var e5 = _g[2];
		tmp = haxe_macro_ExprDef.ECall(f(e5),haxe_macro_ExprArrayTools.map(params,f));
		break;
	case 8:
		var params1 = _g[3];
		var tp = _g[2];
		tmp = haxe_macro_ExprDef.ENew(tp,haxe_macro_ExprArrayTools.map(params1,f));
		break;
	case 9:
		var e6 = _g[4];
		var postFix = _g[3];
		var op1 = _g[2];
		tmp = haxe_macro_ExprDef.EUnop(op1,postFix,f(e6));
		break;
	case 10:
		var vars = _g[2];
		var ret1 = [];
		var _g2 = 0;
		while(_g2 < vars.length) {
			var v = vars[_g2];
			++_g2;
			ret1.push({ name : v.name, type : v.type, expr : haxe_macro_ExprTools.opt(v.expr,f)});
		}
		tmp = haxe_macro_ExprDef.EVars(ret1);
		break;
	case 11:
		var func = _g[3];
		var name = _g[2];
		var ret2 = [];
		var _g3 = 0;
		var _g11 = func.args;
		while(_g3 < _g11.length) {
			var arg = _g11[_g3];
			++_g3;
			ret2.push({ name : arg.name, opt : arg.opt, type : arg.type, value : haxe_macro_ExprTools.opt(arg.value,f)});
		}
		tmp = haxe_macro_ExprDef.EFunction(name,{ args : ret2, ret : func.ret, params : func.params, expr : f(func.expr)});
		break;
	case 12:
		var el1 = _g[2];
		tmp = haxe_macro_ExprDef.EBlock(haxe_macro_ExprArrayTools.map(el1,f));
		break;
	case 13:
		var expr = _g[3];
		var it = _g[2];
		tmp = haxe_macro_ExprDef.EFor(f(it),f(expr));
		break;
	case 14:
		var eelse = _g[4];
		var eif = _g[3];
		var econd = _g[2];
		tmp = haxe_macro_ExprDef.EIf(f(econd),f(eif),haxe_macro_ExprTools.opt(eelse,f));
		break;
	case 15:
		var normalWhile = _g[4];
		var e7 = _g[3];
		var econd1 = _g[2];
		tmp = haxe_macro_ExprDef.EWhile(f(econd1),f(e7),normalWhile);
		break;
	case 16:
		var edef = _g[4];
		var cases = _g[3];
		var e8 = _g[2];
		var ret3 = [];
		var _g4 = 0;
		while(_g4 < cases.length) {
			var c = cases[_g4];
			++_g4;
			ret3.push({ expr : haxe_macro_ExprTools.opt(c.expr,f), guard : haxe_macro_ExprTools.opt(c.guard,f), values : haxe_macro_ExprArrayTools.map(c.values,f)});
		}
		tmp = haxe_macro_ExprDef.ESwitch(f(e8),ret3,edef == null || edef.expr == null ? edef : f(edef));
		break;
	case 17:
		var catches = _g[3];
		var e9 = _g[2];
		var ret4 = [];
		var _g5 = 0;
		while(_g5 < catches.length) {
			var c1 = catches[_g5];
			++_g5;
			ret4.push({ name : c1.name, type : c1.type, expr : f(c1.expr)});
		}
		tmp = haxe_macro_ExprDef.ETry(f(e9),ret4);
		break;
	case 18:
		var e10 = _g[2];
		tmp = haxe_macro_ExprDef.EReturn(haxe_macro_ExprTools.opt(e10,f));
		break;
	case 19:case 20:case 25:
		tmp = e.expr;
		break;
	case 21:
		var e13 = _g[2];
		tmp = haxe_macro_ExprDef.EUntyped(f(e13));
		break;
	case 22:
		var e14 = _g[2];
		tmp = haxe_macro_ExprDef.EThrow(f(e14));
		break;
	case 23:
		var t = _g[3];
		var e15 = _g[2];
		tmp = haxe_macro_ExprDef.ECast(f(e15),t);
		break;
	case 24:
		var isCall = _g[3];
		var e16 = _g[2];
		tmp = haxe_macro_ExprDef.EDisplay(f(e16),isCall);
		break;
	case 26:
		var eelse1 = _g[4];
		var eif1 = _g[3];
		var econd2 = _g[2];
		tmp = haxe_macro_ExprDef.ETernary(f(econd2),f(eif1),f(eelse1));
		break;
	case 27:
		var t1 = _g[3];
		var e17 = _g[2];
		tmp = haxe_macro_ExprDef.ECheckType(f(e17),t1);
		break;
	case 28:
		var e18 = _g[3];
		var m = _g[2];
		tmp = haxe_macro_ExprDef.EMeta(m,f(e18));
		break;
	}
	return { pos : e1, expr : tmp};
};
haxe_macro_ExprTools.getValue = function(e) {
	var _g = e.expr;
	switch(_g[1]) {
	case 0:
		switch(_g[2][1]) {
		case 0:
			var v = _g[2][2];
			return Std.parseInt(v);
		case 1:
			var v1 = _g[2][2];
			return Std.parseFloat(v1);
		case 2:
			var s = _g[2][2];
			return s;
		case 3:
			switch(_g[2][2]) {
			case "false":
				return false;
			case "null":
				return null;
			case "true":
				return true;
			default:
				throw new js__$Boot_HaxeError("Unsupported expression: " + Std.string(e));
			}
			break;
		default:
			throw new js__$Boot_HaxeError("Unsupported expression: " + Std.string(e));
		}
		break;
	case 2:
		var e2 = _g[4];
		var e1 = _g[3];
		var op = _g[2];
		var e11 = haxe_macro_ExprTools.getValue(e1);
		var e21 = haxe_macro_ExprTools.getValue(e2);
		switch(op[1]) {
		case 0:
			return e11 + e21;
		case 1:
			return e11 * e21;
		case 2:
			return e11 / e21;
		case 3:
			return e11 - e21;
		case 5:
			return e11 == e21;
		case 6:
			return e11 != e21;
		case 7:
			return e11 > e21;
		case 8:
			return e11 >= e21;
		case 9:
			return e11 < e21;
		case 10:
			return e11 <= e21;
		case 11:
			return e11 & e21;
		case 12:
			return e11 | e21;
		case 13:
			return e11 ^ e21;
		case 14:
			if(e11) {
				return e21;
			} else {
				return false;
			}
			break;
		case 15:
			if(!e11) {
				return e21;
			} else {
				return true;
			}
			break;
		case 16:
			return e11 << e21;
		case 17:
			return e11 >> e21;
		case 18:
			return e11 >>> e21;
		case 19:
			return e11 % e21;
		default:
			throw new js__$Boot_HaxeError("Unsupported expression: " + Std.string(e));
		}
		break;
	case 4:
		var e12 = _g[2];
		return haxe_macro_ExprTools.getValue(e12);
	case 5:
		var fields = _g[2];
		var obj = { };
		var _g1 = 0;
		while(_g1 < fields.length) {
			var field = fields[_g1];
			++_g1;
			Reflect.setField(obj,field.field,haxe_macro_ExprTools.getValue(field.expr));
		}
		return obj;
	case 6:
		var el = _g[2];
		return el.map(haxe_macro_ExprTools.getValue);
	case 9:
		if(_g[3] == false) {
			var e13 = _g[4];
			var op1 = _g[2];
			var e14 = haxe_macro_ExprTools.getValue(e13);
			switch(op1[1]) {
			case 2:
				return !e14;
			case 3:
				return -e14;
			case 4:
				return ~e14;
			default:
				throw new js__$Boot_HaxeError("Unsupported expression: " + Std.string(e));
			}
		} else {
			throw new js__$Boot_HaxeError("Unsupported expression: " + Std.string(e));
		}
		break;
	case 14:
		var eelse = _g[4];
		var eif = _g[3];
		var econd = _g[2];
		if(eelse == null) {
			throw new js__$Boot_HaxeError("If statements only have a value if the else clause is defined");
		} else {
			var econd1 = haxe_macro_ExprTools.getValue(econd);
			if(econd1) {
				return haxe_macro_ExprTools.getValue(eif);
			} else {
				return haxe_macro_ExprTools.getValue(eelse);
			}
		}
		break;
	case 21:
		var e15 = _g[2];
		return haxe_macro_ExprTools.getValue(e15);
	case 26:
		var eelse1 = _g[4];
		var eif1 = _g[3];
		var econd2 = _g[2];
		if(eelse1 == null) {
			throw new js__$Boot_HaxeError("If statements only have a value if the else clause is defined");
		} else {
			var econd3 = haxe_macro_ExprTools.getValue(econd2);
			if(econd3) {
				return haxe_macro_ExprTools.getValue(eif1);
			} else {
				return haxe_macro_ExprTools.getValue(eelse1);
			}
		}
		break;
	case 28:
		var e16 = _g[3];
		return haxe_macro_ExprTools.getValue(e16);
	default:
		throw new js__$Boot_HaxeError("Unsupported expression: " + Std.string(e));
	}
};
haxe_macro_ExprTools.opt = function(e,f) {
	if(e == null) {
		return null;
	} else {
		return f(e);
	}
};
haxe_macro_ExprTools.opt2 = function(e,f) {
	if(e != null) {
		f(e);
	}
};
var haxe_macro_ExprArrayTools = function() { };
$hxClasses["haxe.macro.ExprArrayTools"] = haxe_macro_ExprArrayTools;
haxe_macro_ExprArrayTools.__name__ = ["haxe","macro","ExprArrayTools"];
haxe_macro_ExprArrayTools.map = function(el,f) {
	var ret = [];
	var _g = 0;
	while(_g < el.length) {
		var e = el[_g];
		++_g;
		ret.push(f(e));
	}
	return ret;
};
haxe_macro_ExprArrayTools.iter = function(el,f) {
	var _g = 0;
	while(_g < el.length) {
		var e = el[_g];
		++_g;
		f(e);
	}
};
var haxe_macro_Printer = function(tabString) {
	if(tabString == null) {
		tabString = "\t";
	}
	this.tabs = "";
	this.tabString = tabString;
};
$hxClasses["haxe.macro.Printer"] = haxe_macro_Printer;
haxe_macro_Printer.__name__ = ["haxe","macro","Printer"];
haxe_macro_Printer.prototype = {
	tabs: null
	,tabString: null
	,printUnop: function(op) {
		switch(op[1]) {
		case 0:
			return "++";
		case 1:
			return "--";
		case 2:
			return "!";
		case 3:
			return "-";
		case 4:
			return "~";
		}
	}
	,printBinop: function(op) {
		switch(op[1]) {
		case 0:
			return "+";
		case 1:
			return "*";
		case 2:
			return "/";
		case 3:
			return "-";
		case 4:
			return "=";
		case 5:
			return "==";
		case 6:
			return "!=";
		case 7:
			return ">";
		case 8:
			return ">=";
		case 9:
			return "<";
		case 10:
			return "<=";
		case 11:
			return "&";
		case 12:
			return "|";
		case 13:
			return "^";
		case 14:
			return "&&";
		case 15:
			return "||";
		case 16:
			return "<<";
		case 17:
			return ">>";
		case 18:
			return ">>>";
		case 19:
			return "%";
		case 20:
			var op1 = op[2];
			return this.printBinop(op1) + "=";
		case 21:
			return "...";
		case 22:
			return "=>";
		case 23:
			return "in";
		}
	}
	,escapeString: function(s,delim) {
		return delim + $hx_exports.StringTools.replace($hx_exports.StringTools.replace($hx_exports.StringTools.replace($hx_exports.StringTools.replace($hx_exports.StringTools.replace(s,"\n","\\n"),"\t","\\t"),"\r","\\r"),"'","\\'"),"\"","\\\"") + delim;
	}
	,printFormatString: function(s) {
		return this.escapeString(s,"'");
	}
	,printString: function(s) {
		return this.escapeString(s,"\"");
	}
	,printConstant: function(c) {
		switch(c[1]) {
		case 0:
			var s = c[2];
			return s;
		case 1:
			var s1 = c[2];
			return s1;
		case 2:
			var s2 = c[2];
			return this.printString(s2);
		case 3:
			var s3 = c[2];
			return s3;
		case 4:
			var opt = c[3];
			var s4 = c[2];
			return "~/" + s4 + "/" + opt;
		}
	}
	,printTypeParam: function(param) {
		switch(param[1]) {
		case 0:
			var ct = param[2];
			return this.printComplexType(ct);
		case 1:
			var e = param[2];
			return this.printExpr(e);
		}
	}
	,printTypePath: function(tp) {
		return (tp.pack.length > 0 ? tp.pack.join(".") + "." : "") + tp.name + (tp.sub != null ? "." + tp.sub : "") + (tp.params == null ? "" : tp.params.length > 0 ? "<" + tp.params.map($bind(this,this.printTypeParam)).join(", ") + ">" : "");
	}
	,printComplexType: function(ct) {
		var _gthis = this;
		switch(ct[1]) {
		case 0:
			var tp = ct[2];
			return this.printTypePath(tp);
		case 1:
			var ret = ct[3];
			var args = ct[2];
			var printArg = function(ct1) {
				if(ct1[1] == 1) {
					return "(" + _gthis.printComplexType(ct1) + ")";
				} else {
					return _gthis.printComplexType(ct1);
				}
			};
			return (args.length > 0 ? args.map(printArg).join(" -> ") : "Void") + " -> " + this.printComplexType(ret);
		case 2:
			var fields = ct[2];
			var _g = [];
			var _g1 = 0;
			while(_g1 < fields.length) {
				var f = fields[_g1];
				++_g1;
				_g.push(this.printField(f) + "; ");
			}
			return "{ " + _g.join("") + "}";
		case 3:
			var ct2 = ct[2];
			return "(" + this.printComplexType(ct2) + ")";
		case 4:
			var fields1 = ct[3];
			var tpl = ct[2];
			return "{> " + tpl.map($bind(this,this.printTypePath)).join(" >, ") + ", " + fields1.map($bind(this,this.printField)).join(", ") + " }";
		case 5:
			var ct3 = ct[2];
			return "?" + this.printComplexType(ct3);
		}
	}
	,printMetadata: function(meta) {
		return "@" + meta.name + (meta.params != null && meta.params.length > 0 ? "(" + this.printExprs(meta.params,", ") + ")" : "");
	}
	,printAccess: function(access) {
		switch(access[1]) {
		case 0:
			return "public";
		case 1:
			return "private";
		case 2:
			return "static";
		case 3:
			return "override";
		case 4:
			return "dynamic";
		case 5:
			return "inline";
		case 6:
			return "macro";
		}
	}
	,printField: function(field) {
		var tmp = (field.doc != null && field.doc != "" ? "/**\n" + this.tabs + this.tabString + $hx_exports.StringTools.replace(field.doc,"\n","\n" + this.tabs + this.tabString) + "\n" + this.tabs + "**/\n" + this.tabs : "") + (field.meta != null && field.meta.length > 0 ? field.meta.map($bind(this,this.printMetadata)).join("\n" + this.tabs) + ("\n" + this.tabs) : "") + (field.access != null && field.access.length > 0 ? field.access.map($bind(this,this.printAccess)).join(" ") + " " : "");
		var _g = field.kind;
		var tmp1;
		switch(_g[1]) {
		case 0:
			var eo = _g[3];
			var t = _g[2];
			tmp1 = "var " + field.name + this.opt(t,$bind(this,this.printComplexType)," : ") + this.opt(eo,$bind(this,this.printExpr)," = ");
			break;
		case 1:
			var func = _g[2];
			tmp1 = "function " + field.name + this.printFunction(func);
			break;
		case 2:
			var eo1 = _g[5];
			var t1 = _g[4];
			var set = _g[3];
			var get = _g[2];
			tmp1 = "var " + field.name + "(" + get + ", " + set + ")" + this.opt(t1,$bind(this,this.printComplexType)," : ") + this.opt(eo1,$bind(this,this.printExpr)," = ");
			break;
		}
		return tmp + tmp1;
	}
	,printTypeParamDecl: function(tpd) {
		return tpd.name + (tpd.params != null && tpd.params.length > 0 ? "<" + tpd.params.map($bind(this,this.printTypeParamDecl)).join(", ") + ">" : "") + (tpd.constraints != null && tpd.constraints.length > 0 ? ":(" + tpd.constraints.map($bind(this,this.printComplexType)).join(", ") + ")" : "");
	}
	,printFunctionArg: function(arg) {
		return (arg.opt ? "?" : "") + arg.name + this.opt(arg.type,$bind(this,this.printComplexType),":") + this.opt(arg.value,$bind(this,this.printExpr)," = ");
	}
	,printFunction: function(func) {
		return (func.params == null ? "" : func.params.length > 0 ? "<" + func.params.map($bind(this,this.printTypeParamDecl)).join(", ") + ">" : "") + "(" + func.args.map($bind(this,this.printFunctionArg)).join(", ") + ")" + this.opt(func.ret,$bind(this,this.printComplexType),":") + this.opt(func.expr,$bind(this,this.printExpr)," ");
	}
	,printVar: function(v) {
		return v.name + this.opt(v.type,$bind(this,this.printComplexType),":") + this.opt(v.expr,$bind(this,this.printExpr)," = ");
	}
	,printExpr: function(e) {
		var _gthis = this;
		if(e == null) {
			return "#NULL";
		} else {
			var _g = e.expr;
			switch(_g[1]) {
			case 0:
				var c = _g[2];
				return this.printConstant(c);
			case 1:
				var e2 = _g[3];
				var e1 = _g[2];
				return "" + this.printExpr(e1) + "[" + this.printExpr(e2) + "]";
			case 2:
				var e21 = _g[4];
				var e11 = _g[3];
				var op = _g[2];
				return "" + this.printExpr(e11) + " " + this.printBinop(op) + " " + this.printExpr(e21);
			case 3:
				var n = _g[3];
				var e12 = _g[2];
				return "" + this.printExpr(e12) + "." + n;
			case 4:
				var e13 = _g[2];
				return "(" + this.printExpr(e13) + ")";
			case 5:
				var fl = _g[2];
				return "{ " + fl.map(function(fld) {
					return "" + fld.field + " : " + _gthis.printExpr(fld.expr);
				}).join(", ") + " }";
			case 6:
				var el = _g[2];
				return "[" + this.printExprs(el,", ") + "]";
			case 7:
				var el1 = _g[3];
				var e14 = _g[2];
				return "" + this.printExpr(e14) + "(" + this.printExprs(el1,", ") + ")";
			case 8:
				var el2 = _g[3];
				var tp = _g[2];
				return "new " + this.printTypePath(tp) + "(" + this.printExprs(el2,", ") + ")";
			case 9:
				switch(_g[3]) {
				case false:
					var e15 = _g[4];
					var op1 = _g[2];
					return this.printUnop(op1) + this.printExpr(e15);
				case true:
					var e16 = _g[4];
					var op2 = _g[2];
					return this.printExpr(e16) + this.printUnop(op2);
				}
				break;
			case 10:
				var vl = _g[2];
				return "var " + vl.map($bind(this,this.printVar)).join(", ");
			case 11:
				var func = _g[3];
				var no = _g[2];
				if(no != null) {
					return "function " + no + this.printFunction(func);
				} else {
					var func1 = _g[3];
					return "function" + this.printFunction(func1);
				}
				break;
			case 12:
				if(_g[2].length == 0) {
					return "{ }";
				} else {
					var el3 = _g[2];
					var old = this.tabs;
					this.tabs += this.tabString;
					var s = "{\n" + this.tabs + this.printExprs(el3,";\n" + this.tabs);
					this.tabs = old;
					return s + (";\n" + this.tabs + "}");
				}
				break;
			case 13:
				var e22 = _g[3];
				var e17 = _g[2];
				return "for (" + this.printExpr(e17) + ") " + this.printExpr(e22);
			case 14:
				if(_g[4] == null) {
					var econd = _g[2];
					var eif = _g[3];
					return "if (" + this.printExpr(econd) + ") " + this.printExpr(eif);
				} else {
					var econd1 = _g[2];
					var eif1 = _g[3];
					var eelse = _g[4];
					return "if (" + this.printExpr(econd1) + ") " + this.printExpr(eif1) + " else " + this.printExpr(eelse);
				}
				break;
			case 15:
				switch(_g[4]) {
				case false:
					var econd2 = _g[2];
					var e18 = _g[3];
					return "do " + this.printExpr(e18) + " while (" + this.printExpr(econd2) + ")";
				case true:
					var econd3 = _g[2];
					var e19 = _g[3];
					return "while (" + this.printExpr(econd3) + ") " + this.printExpr(e19);
				}
				break;
			case 16:
				var edef = _g[4];
				var cl = _g[3];
				var e110 = _g[2];
				var old1 = this.tabs;
				this.tabs += this.tabString;
				var s1 = "switch " + this.printExpr(e110) + " {\n" + this.tabs + cl.map(function(c1) {
					return "case " + _gthis.printExprs(c1.values,", ") + (c1.guard != null ? " if (" + _gthis.printExpr(c1.guard) + "):" : ":") + (c1.expr != null ? _gthis.opt(c1.expr,$bind(_gthis,_gthis.printExpr)) + ";" : "");
				}).join("\n" + this.tabs);
				if(edef != null) {
					s1 += "\n" + this.tabs + "default:" + (edef.expr == null ? "" : this.printExpr(edef) + ";");
				}
				this.tabs = old1;
				return s1 + ("\n" + this.tabs + "}");
			case 17:
				var cl1 = _g[3];
				var e111 = _g[2];
				return "try " + this.printExpr(e111) + cl1.map(function(c2) {
					return " catch(" + c2.name + ":" + _gthis.printComplexType(c2.type) + ") " + _gthis.printExpr(c2.expr);
				}).join("");
			case 18:
				var eo = _g[2];
				return "return" + this.opt(eo,$bind(this,this.printExpr)," ");
			case 19:
				return "break";
			case 20:
				return "continue";
			case 21:
				var e112 = _g[2];
				return "untyped " + this.printExpr(e112);
			case 22:
				var e113 = _g[2];
				return "throw " + this.printExpr(e113);
			case 23:
				var cto = _g[3];
				var e114 = _g[2];
				if(cto != null) {
					return "cast(" + this.printExpr(e114) + ", " + this.printComplexType(cto) + ")";
				} else {
					var e115 = _g[2];
					return "cast " + this.printExpr(e115);
				}
				break;
			case 24:
				var e116 = _g[2];
				return "#DISPLAY(" + this.printExpr(e116) + ")";
			case 25:
				var tp1 = _g[2];
				return "#DISPLAY(" + this.printTypePath(tp1) + ")";
			case 26:
				var eelse1 = _g[4];
				var eif2 = _g[3];
				var econd4 = _g[2];
				return "" + this.printExpr(econd4) + " ? " + this.printExpr(eif2) + " : " + this.printExpr(eelse1);
			case 27:
				var ct = _g[3];
				var e117 = _g[2];
				return "(" + this.printExpr(e117) + " : " + this.printComplexType(ct) + ")";
			case 28:
				var e118 = _g[3];
				var meta = _g[2];
				return this.printMetadata(meta) + " " + this.printExpr(e118);
			}
		}
	}
	,printExprs: function(el,sep) {
		return el.map($bind(this,this.printExpr)).join(sep);
	}
	,printExtension: function(tpl,fields) {
		return "{\n" + this.tabs + ">" + tpl.map($bind(this,this.printTypePath)).join(",\n" + this.tabs + ">") + "," + (fields.length > 0 ? "\n" + this.tabs + fields.map($bind(this,this.printField)).join(";\n" + this.tabs) + ";\n}" : "\n}");
	}
	,printStructure: function(fields) {
		if(fields.length == 0) {
			return "{ }";
		} else {
			return "{\n" + this.tabs + fields.map($bind(this,this.printField)).join(";\n" + this.tabs) + ";\n}";
		}
	}
	,printTypeDefinition: function(t,printPackage) {
		if(printPackage == null) {
			printPackage = true;
		}
		var old = this.tabs;
		this.tabs = this.tabString;
		var str;
		if(t == null) {
			str = "#NULL";
		} else {
			var str1 = (printPackage && t.pack.length > 0 && t.pack[0] != "" ? "package " + t.pack.join(".") + ";\n" : "") + (t.doc != null && t.doc != "" ? "/**\n" + this.tabString + $hx_exports.StringTools.replace(t.doc,"\n","\n" + this.tabString) + "\n**/\n" : "") + (t.meta != null && t.meta.length > 0 ? t.meta.map($bind(this,this.printMetadata)).join(" ") + " " : "") + (t.isExtern ? "extern " : "");
			var _g = t.kind;
			var str2;
			switch(_g[1]) {
			case 0:
				var str3 = "enum " + t.name + (t.params != null && t.params.length > 0 ? "<" + t.params.map($bind(this,this.printTypeParamDecl)).join(", ") + ">" : "") + " {\n";
				var _g1 = [];
				var _g11 = 0;
				var _g2 = t.fields;
				while(_g11 < _g2.length) {
					var field = _g2[_g11];
					++_g11;
					var str4 = this.tabs + (field.doc != null && field.doc != "" ? "/**\n" + this.tabs + this.tabString + $hx_exports.StringTools.replace(field.doc,"\n","\n" + this.tabs + this.tabString) + "\n" + this.tabs + "**/\n" + this.tabs : "") + (field.meta != null && field.meta.length > 0 ? field.meta.map($bind(this,this.printMetadata)).join(" ") + " " : "");
					var _g3 = field.kind;
					var str5;
					switch(_g3[1]) {
					case 0:
						var t1 = _g3[2];
						str5 = field.name + this.opt(t1,$bind(this,this.printComplexType),":");
						break;
					case 1:
						var func = _g3[2];
						str5 = field.name + this.printFunction(func);
						break;
					case 2:
						throw new js__$Boot_HaxeError("FProp is invalid for TDEnum.");
					}
					_g1.push(str4 + str5 + ";");
				}
				str2 = str3 + _g1.join("\n") + "\n}";
				break;
			case 1:
				var str6 = "typedef " + t.name + (t.params != null && t.params.length > 0 ? "<" + t.params.map($bind(this,this.printTypeParamDecl)).join(", ") + ">" : "") + " = {\n";
				var _g4 = [];
				var _g12 = 0;
				var _g21 = t.fields;
				while(_g12 < _g21.length) {
					var f = _g21[_g12];
					++_g12;
					_g4.push(this.tabs + this.printField(f) + ";");
				}
				str2 = str6 + _g4.join("\n") + "\n}";
				break;
			case 2:
				var isInterface = _g[4];
				var interfaces = _g[3];
				var superClass = _g[2];
				var str7 = (isInterface ? "interface " : "class ") + t.name + (t.params != null && t.params.length > 0 ? "<" + t.params.map($bind(this,this.printTypeParamDecl)).join(", ") + ">" : "") + (superClass != null ? " extends " + this.printTypePath(superClass) : "");
				var str8;
				if(interfaces != null) {
					var str9;
					if(isInterface) {
						var _g5 = [];
						var _g13 = 0;
						while(_g13 < interfaces.length) {
							var tp = interfaces[_g13];
							++_g13;
							_g5.push(" extends " + this.printTypePath(tp));
						}
						str9 = _g5;
					} else {
						var _g6 = [];
						var _g14 = 0;
						while(_g14 < interfaces.length) {
							var tp1 = interfaces[_g14];
							++_g14;
							_g6.push(" implements " + this.printTypePath(tp1));
						}
						str9 = _g6;
					}
					str8 = str9.join("");
				} else {
					str8 = "";
				}
				var str10 = str7 + str8 + " {\n";
				var _g7 = [];
				var _g15 = 0;
				var _g22 = t.fields;
				while(_g15 < _g22.length) {
					var f1 = _g22[_g15];
					++_g15;
					_g7.push(this.tabs + this.printFieldWithDelimiter(f1));
				}
				str2 = str10 + _g7.join("\n") + "\n}";
				break;
			case 3:
				var ct = _g[2];
				var str11 = "typedef " + t.name + (t.params != null && t.params.length > 0 ? "<" + t.params.map($bind(this,this.printTypeParamDecl)).join(", ") + ">" : "") + " = ";
				var str12;
				switch(ct[1]) {
				case 2:
					var fields = ct[2];
					str12 = this.printStructure(fields);
					break;
				case 4:
					var fields1 = ct[3];
					var tpl = ct[2];
					str12 = this.printExtension(tpl,fields1);
					break;
				default:
					str12 = this.printComplexType(ct);
				}
				str2 = str11 + str12 + ";";
				break;
			case 4:
				var to = _g[4];
				var from = _g[3];
				var tthis = _g[2];
				var str13 = "abstract " + t.name + (t.params != null && t.params.length > 0 ? "<" + t.params.map($bind(this,this.printTypeParamDecl)).join(", ") + ">" : "") + (tthis == null ? "" : "(" + this.printComplexType(tthis) + ")");
				var str14;
				if(from == null) {
					str14 = "";
				} else {
					var _g8 = [];
					var _g16 = 0;
					while(_g16 < from.length) {
						var f2 = from[_g16];
						++_g16;
						_g8.push(" from " + this.printComplexType(f2));
					}
					str14 = _g8.join("");
				}
				var str15 = str13 + str14;
				var str16;
				if(to == null) {
					str16 = "";
				} else {
					var _g9 = [];
					var _g17 = 0;
					while(_g17 < to.length) {
						var t2 = to[_g17];
						++_g17;
						_g9.push(" to " + this.printComplexType(t2));
					}
					str16 = _g9.join("");
				}
				var str17 = str15 + str16 + " {\n";
				var _g10 = [];
				var _g18 = 0;
				var _g23 = t.fields;
				while(_g18 < _g23.length) {
					var f3 = _g23[_g18];
					++_g18;
					_g10.push(this.tabs + this.printFieldWithDelimiter(f3));
				}
				str2 = str17 + _g10.join("\n") + "\n}";
				break;
			}
			str = str1 + str2;
		}
		this.tabs = old;
		return str;
	}
	,printFieldWithDelimiter: function(f) {
		var tmp = this.printField(f);
		var _g = f.kind;
		var tmp1;
		switch(_g[1]) {
		case 1:
			tmp1 = _g[2].expr == null ? ";" : _g[2].expr.expr[1] == 12 ? "" : ";";
			break;
		case 0:case 2:
			tmp1 = ";";
			break;
		}
		return tmp + tmp1;
	}
	,opt: function(v,f,prefix) {
		if(prefix == null) {
			prefix = "";
		}
		if(v == null) {
			return "";
		} else {
			return prefix + f(v);
		}
	}
	,__class__: haxe_macro_Printer
};
var haxe_macro_Type = $hxClasses["haxe.macro.Type"] = { __ename__ : ["haxe","macro","Type"], __constructs__ : ["TMono","TEnum","TInst","TType","TFun","TAnonymous","TDynamic","TLazy","TAbstract"] };
haxe_macro_Type.TMono = function(t) { var $x = ["TMono",0,t]; $x.__enum__ = haxe_macro_Type; $x.toString = $estr; return $x; };
haxe_macro_Type.TEnum = function(t,params) { var $x = ["TEnum",1,t,params]; $x.__enum__ = haxe_macro_Type; $x.toString = $estr; return $x; };
haxe_macro_Type.TInst = function(t,params) { var $x = ["TInst",2,t,params]; $x.__enum__ = haxe_macro_Type; $x.toString = $estr; return $x; };
haxe_macro_Type.TType = function(t,params) { var $x = ["TType",3,t,params]; $x.__enum__ = haxe_macro_Type; $x.toString = $estr; return $x; };
haxe_macro_Type.TFun = function(args,ret) { var $x = ["TFun",4,args,ret]; $x.__enum__ = haxe_macro_Type; $x.toString = $estr; return $x; };
haxe_macro_Type.TAnonymous = function(a) { var $x = ["TAnonymous",5,a]; $x.__enum__ = haxe_macro_Type; $x.toString = $estr; return $x; };
haxe_macro_Type.TDynamic = function(t) { var $x = ["TDynamic",6,t]; $x.__enum__ = haxe_macro_Type; $x.toString = $estr; return $x; };
haxe_macro_Type.TLazy = function(f) { var $x = ["TLazy",7,f]; $x.__enum__ = haxe_macro_Type; $x.toString = $estr; return $x; };
haxe_macro_Type.TAbstract = function(t,params) { var $x = ["TAbstract",8,t,params]; $x.__enum__ = haxe_macro_Type; $x.toString = $estr; return $x; };
haxe_macro_Type.__empty_constructs__ = [];
var haxe_macro_AnonStatus = $hxClasses["haxe.macro.AnonStatus"] = { __ename__ : ["haxe","macro","AnonStatus"], __constructs__ : ["AClosed","AOpened","AConst","AExtend","AClassStatics","AEnumStatics","AAbstractStatics"] };
haxe_macro_AnonStatus.AClosed = ["AClosed",0];
haxe_macro_AnonStatus.AClosed.toString = $estr;
haxe_macro_AnonStatus.AClosed.__enum__ = haxe_macro_AnonStatus;
haxe_macro_AnonStatus.AOpened = ["AOpened",1];
haxe_macro_AnonStatus.AOpened.toString = $estr;
haxe_macro_AnonStatus.AOpened.__enum__ = haxe_macro_AnonStatus;
haxe_macro_AnonStatus.AConst = ["AConst",2];
haxe_macro_AnonStatus.AConst.toString = $estr;
haxe_macro_AnonStatus.AConst.__enum__ = haxe_macro_AnonStatus;
haxe_macro_AnonStatus.AExtend = function(tl) { var $x = ["AExtend",3,tl]; $x.__enum__ = haxe_macro_AnonStatus; $x.toString = $estr; return $x; };
haxe_macro_AnonStatus.AClassStatics = function(t) { var $x = ["AClassStatics",4,t]; $x.__enum__ = haxe_macro_AnonStatus; $x.toString = $estr; return $x; };
haxe_macro_AnonStatus.AEnumStatics = function(t) { var $x = ["AEnumStatics",5,t]; $x.__enum__ = haxe_macro_AnonStatus; $x.toString = $estr; return $x; };
haxe_macro_AnonStatus.AAbstractStatics = function(t) { var $x = ["AAbstractStatics",6,t]; $x.__enum__ = haxe_macro_AnonStatus; $x.toString = $estr; return $x; };
haxe_macro_AnonStatus.__empty_constructs__ = [haxe_macro_AnonStatus.AClosed,haxe_macro_AnonStatus.AOpened,haxe_macro_AnonStatus.AConst];
var haxe_macro_ClassKind = $hxClasses["haxe.macro.ClassKind"] = { __ename__ : ["haxe","macro","ClassKind"], __constructs__ : ["KNormal","KTypeParameter","KExtension","KExpr","KGeneric","KGenericInstance","KMacroType","KAbstractImpl","KGenericBuild"] };
haxe_macro_ClassKind.KNormal = ["KNormal",0];
haxe_macro_ClassKind.KNormal.toString = $estr;
haxe_macro_ClassKind.KNormal.__enum__ = haxe_macro_ClassKind;
haxe_macro_ClassKind.KTypeParameter = function(constraints) { var $x = ["KTypeParameter",1,constraints]; $x.__enum__ = haxe_macro_ClassKind; $x.toString = $estr; return $x; };
haxe_macro_ClassKind.KExtension = function(cl,params) { var $x = ["KExtension",2,cl,params]; $x.__enum__ = haxe_macro_ClassKind; $x.toString = $estr; return $x; };
haxe_macro_ClassKind.KExpr = function(expr) { var $x = ["KExpr",3,expr]; $x.__enum__ = haxe_macro_ClassKind; $x.toString = $estr; return $x; };
haxe_macro_ClassKind.KGeneric = ["KGeneric",4];
haxe_macro_ClassKind.KGeneric.toString = $estr;
haxe_macro_ClassKind.KGeneric.__enum__ = haxe_macro_ClassKind;
haxe_macro_ClassKind.KGenericInstance = function(cl,params) { var $x = ["KGenericInstance",5,cl,params]; $x.__enum__ = haxe_macro_ClassKind; $x.toString = $estr; return $x; };
haxe_macro_ClassKind.KMacroType = ["KMacroType",6];
haxe_macro_ClassKind.KMacroType.toString = $estr;
haxe_macro_ClassKind.KMacroType.__enum__ = haxe_macro_ClassKind;
haxe_macro_ClassKind.KAbstractImpl = function(a) { var $x = ["KAbstractImpl",7,a]; $x.__enum__ = haxe_macro_ClassKind; $x.toString = $estr; return $x; };
haxe_macro_ClassKind.KGenericBuild = ["KGenericBuild",8];
haxe_macro_ClassKind.KGenericBuild.toString = $estr;
haxe_macro_ClassKind.KGenericBuild.__enum__ = haxe_macro_ClassKind;
haxe_macro_ClassKind.__empty_constructs__ = [haxe_macro_ClassKind.KNormal,haxe_macro_ClassKind.KGeneric,haxe_macro_ClassKind.KMacroType,haxe_macro_ClassKind.KGenericBuild];
var haxe_macro_FieldKind = $hxClasses["haxe.macro.FieldKind"] = { __ename__ : ["haxe","macro","FieldKind"], __constructs__ : ["FVar","FMethod"] };
haxe_macro_FieldKind.FVar = function(read,write) { var $x = ["FVar",0,read,write]; $x.__enum__ = haxe_macro_FieldKind; $x.toString = $estr; return $x; };
haxe_macro_FieldKind.FMethod = function(k) { var $x = ["FMethod",1,k]; $x.__enum__ = haxe_macro_FieldKind; $x.toString = $estr; return $x; };
haxe_macro_FieldKind.__empty_constructs__ = [];
var haxe_macro_VarAccess = $hxClasses["haxe.macro.VarAccess"] = { __ename__ : ["haxe","macro","VarAccess"], __constructs__ : ["AccNormal","AccNo","AccNever","AccResolve","AccCall","AccInline","AccRequire"] };
haxe_macro_VarAccess.AccNormal = ["AccNormal",0];
haxe_macro_VarAccess.AccNormal.toString = $estr;
haxe_macro_VarAccess.AccNormal.__enum__ = haxe_macro_VarAccess;
haxe_macro_VarAccess.AccNo = ["AccNo",1];
haxe_macro_VarAccess.AccNo.toString = $estr;
haxe_macro_VarAccess.AccNo.__enum__ = haxe_macro_VarAccess;
haxe_macro_VarAccess.AccNever = ["AccNever",2];
haxe_macro_VarAccess.AccNever.toString = $estr;
haxe_macro_VarAccess.AccNever.__enum__ = haxe_macro_VarAccess;
haxe_macro_VarAccess.AccResolve = ["AccResolve",3];
haxe_macro_VarAccess.AccResolve.toString = $estr;
haxe_macro_VarAccess.AccResolve.__enum__ = haxe_macro_VarAccess;
haxe_macro_VarAccess.AccCall = ["AccCall",4];
haxe_macro_VarAccess.AccCall.toString = $estr;
haxe_macro_VarAccess.AccCall.__enum__ = haxe_macro_VarAccess;
haxe_macro_VarAccess.AccInline = ["AccInline",5];
haxe_macro_VarAccess.AccInline.toString = $estr;
haxe_macro_VarAccess.AccInline.__enum__ = haxe_macro_VarAccess;
haxe_macro_VarAccess.AccRequire = function(r,msg) { var $x = ["AccRequire",6,r,msg]; $x.__enum__ = haxe_macro_VarAccess; $x.toString = $estr; return $x; };
haxe_macro_VarAccess.__empty_constructs__ = [haxe_macro_VarAccess.AccNormal,haxe_macro_VarAccess.AccNo,haxe_macro_VarAccess.AccNever,haxe_macro_VarAccess.AccResolve,haxe_macro_VarAccess.AccCall,haxe_macro_VarAccess.AccInline];
var haxe_macro_MethodKind = $hxClasses["haxe.macro.MethodKind"] = { __ename__ : ["haxe","macro","MethodKind"], __constructs__ : ["MethNormal","MethInline","MethDynamic","MethMacro"] };
haxe_macro_MethodKind.MethNormal = ["MethNormal",0];
haxe_macro_MethodKind.MethNormal.toString = $estr;
haxe_macro_MethodKind.MethNormal.__enum__ = haxe_macro_MethodKind;
haxe_macro_MethodKind.MethInline = ["MethInline",1];
haxe_macro_MethodKind.MethInline.toString = $estr;
haxe_macro_MethodKind.MethInline.__enum__ = haxe_macro_MethodKind;
haxe_macro_MethodKind.MethDynamic = ["MethDynamic",2];
haxe_macro_MethodKind.MethDynamic.toString = $estr;
haxe_macro_MethodKind.MethDynamic.__enum__ = haxe_macro_MethodKind;
haxe_macro_MethodKind.MethMacro = ["MethMacro",3];
haxe_macro_MethodKind.MethMacro.toString = $estr;
haxe_macro_MethodKind.MethMacro.__enum__ = haxe_macro_MethodKind;
haxe_macro_MethodKind.__empty_constructs__ = [haxe_macro_MethodKind.MethNormal,haxe_macro_MethodKind.MethInline,haxe_macro_MethodKind.MethDynamic,haxe_macro_MethodKind.MethMacro];
var haxe_macro_TConstant = $hxClasses["haxe.macro.TConstant"] = { __ename__ : ["haxe","macro","TConstant"], __constructs__ : ["TInt","TFloat","TString","TBool","TNull","TThis","TSuper"] };
haxe_macro_TConstant.TInt = function(i) { var $x = ["TInt",0,i]; $x.__enum__ = haxe_macro_TConstant; $x.toString = $estr; return $x; };
haxe_macro_TConstant.TFloat = function(s) { var $x = ["TFloat",1,s]; $x.__enum__ = haxe_macro_TConstant; $x.toString = $estr; return $x; };
haxe_macro_TConstant.TString = function(s) { var $x = ["TString",2,s]; $x.__enum__ = haxe_macro_TConstant; $x.toString = $estr; return $x; };
haxe_macro_TConstant.TBool = function(b) { var $x = ["TBool",3,b]; $x.__enum__ = haxe_macro_TConstant; $x.toString = $estr; return $x; };
haxe_macro_TConstant.TNull = ["TNull",4];
haxe_macro_TConstant.TNull.toString = $estr;
haxe_macro_TConstant.TNull.__enum__ = haxe_macro_TConstant;
haxe_macro_TConstant.TThis = ["TThis",5];
haxe_macro_TConstant.TThis.toString = $estr;
haxe_macro_TConstant.TThis.__enum__ = haxe_macro_TConstant;
haxe_macro_TConstant.TSuper = ["TSuper",6];
haxe_macro_TConstant.TSuper.toString = $estr;
haxe_macro_TConstant.TSuper.__enum__ = haxe_macro_TConstant;
haxe_macro_TConstant.__empty_constructs__ = [haxe_macro_TConstant.TNull,haxe_macro_TConstant.TThis,haxe_macro_TConstant.TSuper];
var haxe_macro_ModuleType = $hxClasses["haxe.macro.ModuleType"] = { __ename__ : ["haxe","macro","ModuleType"], __constructs__ : ["TClassDecl","TEnumDecl","TTypeDecl","TAbstract"] };
haxe_macro_ModuleType.TClassDecl = function(c) { var $x = ["TClassDecl",0,c]; $x.__enum__ = haxe_macro_ModuleType; $x.toString = $estr; return $x; };
haxe_macro_ModuleType.TEnumDecl = function(e) { var $x = ["TEnumDecl",1,e]; $x.__enum__ = haxe_macro_ModuleType; $x.toString = $estr; return $x; };
haxe_macro_ModuleType.TTypeDecl = function(t) { var $x = ["TTypeDecl",2,t]; $x.__enum__ = haxe_macro_ModuleType; $x.toString = $estr; return $x; };
haxe_macro_ModuleType.TAbstract = function(a) { var $x = ["TAbstract",3,a]; $x.__enum__ = haxe_macro_ModuleType; $x.toString = $estr; return $x; };
haxe_macro_ModuleType.__empty_constructs__ = [];
var haxe_macro_FieldAccess = $hxClasses["haxe.macro.FieldAccess"] = { __ename__ : ["haxe","macro","FieldAccess"], __constructs__ : ["FInstance","FStatic","FAnon","FDynamic","FClosure","FEnum"] };
haxe_macro_FieldAccess.FInstance = function(c,params,cf) { var $x = ["FInstance",0,c,params,cf]; $x.__enum__ = haxe_macro_FieldAccess; $x.toString = $estr; return $x; };
haxe_macro_FieldAccess.FStatic = function(c,cf) { var $x = ["FStatic",1,c,cf]; $x.__enum__ = haxe_macro_FieldAccess; $x.toString = $estr; return $x; };
haxe_macro_FieldAccess.FAnon = function(cf) { var $x = ["FAnon",2,cf]; $x.__enum__ = haxe_macro_FieldAccess; $x.toString = $estr; return $x; };
haxe_macro_FieldAccess.FDynamic = function(s) { var $x = ["FDynamic",3,s]; $x.__enum__ = haxe_macro_FieldAccess; $x.toString = $estr; return $x; };
haxe_macro_FieldAccess.FClosure = function(c,cf) { var $x = ["FClosure",4,c,cf]; $x.__enum__ = haxe_macro_FieldAccess; $x.toString = $estr; return $x; };
haxe_macro_FieldAccess.FEnum = function(e,ef) { var $x = ["FEnum",5,e,ef]; $x.__enum__ = haxe_macro_FieldAccess; $x.toString = $estr; return $x; };
haxe_macro_FieldAccess.__empty_constructs__ = [];
var haxe_macro_TypedExprDef = $hxClasses["haxe.macro.TypedExprDef"] = { __ename__ : ["haxe","macro","TypedExprDef"], __constructs__ : ["TConst","TLocal","TArray","TBinop","TField","TTypeExpr","TParenthesis","TObjectDecl","TArrayDecl","TCall","TNew","TUnop","TFunction","TVar","TBlock","TFor","TIf","TWhile","TSwitch","TTry","TReturn","TBreak","TContinue","TThrow","TCast","TMeta","TEnumParameter","TEnumIndex","TIdent"] };
haxe_macro_TypedExprDef.TConst = function(c) { var $x = ["TConst",0,c]; $x.__enum__ = haxe_macro_TypedExprDef; $x.toString = $estr; return $x; };
haxe_macro_TypedExprDef.TLocal = function(v) { var $x = ["TLocal",1,v]; $x.__enum__ = haxe_macro_TypedExprDef; $x.toString = $estr; return $x; };
haxe_macro_TypedExprDef.TArray = function(e1,e2) { var $x = ["TArray",2,e1,e2]; $x.__enum__ = haxe_macro_TypedExprDef; $x.toString = $estr; return $x; };
haxe_macro_TypedExprDef.TBinop = function(op,e1,e2) { var $x = ["TBinop",3,op,e1,e2]; $x.__enum__ = haxe_macro_TypedExprDef; $x.toString = $estr; return $x; };
haxe_macro_TypedExprDef.TField = function(e,fa) { var $x = ["TField",4,e,fa]; $x.__enum__ = haxe_macro_TypedExprDef; $x.toString = $estr; return $x; };
haxe_macro_TypedExprDef.TTypeExpr = function(m) { var $x = ["TTypeExpr",5,m]; $x.__enum__ = haxe_macro_TypedExprDef; $x.toString = $estr; return $x; };
haxe_macro_TypedExprDef.TParenthesis = function(e) { var $x = ["TParenthesis",6,e]; $x.__enum__ = haxe_macro_TypedExprDef; $x.toString = $estr; return $x; };
haxe_macro_TypedExprDef.TObjectDecl = function(fields) { var $x = ["TObjectDecl",7,fields]; $x.__enum__ = haxe_macro_TypedExprDef; $x.toString = $estr; return $x; };
haxe_macro_TypedExprDef.TArrayDecl = function(el) { var $x = ["TArrayDecl",8,el]; $x.__enum__ = haxe_macro_TypedExprDef; $x.toString = $estr; return $x; };
haxe_macro_TypedExprDef.TCall = function(e,el) { var $x = ["TCall",9,e,el]; $x.__enum__ = haxe_macro_TypedExprDef; $x.toString = $estr; return $x; };
haxe_macro_TypedExprDef.TNew = function(c,params,el) { var $x = ["TNew",10,c,params,el]; $x.__enum__ = haxe_macro_TypedExprDef; $x.toString = $estr; return $x; };
haxe_macro_TypedExprDef.TUnop = function(op,postFix,e) { var $x = ["TUnop",11,op,postFix,e]; $x.__enum__ = haxe_macro_TypedExprDef; $x.toString = $estr; return $x; };
haxe_macro_TypedExprDef.TFunction = function(tfunc) { var $x = ["TFunction",12,tfunc]; $x.__enum__ = haxe_macro_TypedExprDef; $x.toString = $estr; return $x; };
haxe_macro_TypedExprDef.TVar = function(v,expr) { var $x = ["TVar",13,v,expr]; $x.__enum__ = haxe_macro_TypedExprDef; $x.toString = $estr; return $x; };
haxe_macro_TypedExprDef.TBlock = function(el) { var $x = ["TBlock",14,el]; $x.__enum__ = haxe_macro_TypedExprDef; $x.toString = $estr; return $x; };
haxe_macro_TypedExprDef.TFor = function(v,e1,e2) { var $x = ["TFor",15,v,e1,e2]; $x.__enum__ = haxe_macro_TypedExprDef; $x.toString = $estr; return $x; };
haxe_macro_TypedExprDef.TIf = function(econd,eif,eelse) { var $x = ["TIf",16,econd,eif,eelse]; $x.__enum__ = haxe_macro_TypedExprDef; $x.toString = $estr; return $x; };
haxe_macro_TypedExprDef.TWhile = function(econd,e,normalWhile) { var $x = ["TWhile",17,econd,e,normalWhile]; $x.__enum__ = haxe_macro_TypedExprDef; $x.toString = $estr; return $x; };
haxe_macro_TypedExprDef.TSwitch = function(e,cases,edef) { var $x = ["TSwitch",18,e,cases,edef]; $x.__enum__ = haxe_macro_TypedExprDef; $x.toString = $estr; return $x; };
haxe_macro_TypedExprDef.TTry = function(e,catches) { var $x = ["TTry",19,e,catches]; $x.__enum__ = haxe_macro_TypedExprDef; $x.toString = $estr; return $x; };
haxe_macro_TypedExprDef.TReturn = function(e) { var $x = ["TReturn",20,e]; $x.__enum__ = haxe_macro_TypedExprDef; $x.toString = $estr; return $x; };
haxe_macro_TypedExprDef.TBreak = ["TBreak",21];
haxe_macro_TypedExprDef.TBreak.toString = $estr;
haxe_macro_TypedExprDef.TBreak.__enum__ = haxe_macro_TypedExprDef;
haxe_macro_TypedExprDef.TContinue = ["TContinue",22];
haxe_macro_TypedExprDef.TContinue.toString = $estr;
haxe_macro_TypedExprDef.TContinue.__enum__ = haxe_macro_TypedExprDef;
haxe_macro_TypedExprDef.TThrow = function(e) { var $x = ["TThrow",23,e]; $x.__enum__ = haxe_macro_TypedExprDef; $x.toString = $estr; return $x; };
haxe_macro_TypedExprDef.TCast = function(e,m) { var $x = ["TCast",24,e,m]; $x.__enum__ = haxe_macro_TypedExprDef; $x.toString = $estr; return $x; };
haxe_macro_TypedExprDef.TMeta = function(m,e1) { var $x = ["TMeta",25,m,e1]; $x.__enum__ = haxe_macro_TypedExprDef; $x.toString = $estr; return $x; };
haxe_macro_TypedExprDef.TEnumParameter = function(e1,ef,index) { var $x = ["TEnumParameter",26,e1,ef,index]; $x.__enum__ = haxe_macro_TypedExprDef; $x.toString = $estr; return $x; };
haxe_macro_TypedExprDef.TEnumIndex = function(e1) { var $x = ["TEnumIndex",27,e1]; $x.__enum__ = haxe_macro_TypedExprDef; $x.toString = $estr; return $x; };
haxe_macro_TypedExprDef.TIdent = function(s) { var $x = ["TIdent",28,s]; $x.__enum__ = haxe_macro_TypedExprDef; $x.toString = $estr; return $x; };
haxe_macro_TypedExprDef.__empty_constructs__ = [haxe_macro_TypedExprDef.TBreak,haxe_macro_TypedExprDef.TContinue];
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = ["js","Boot"];
js_Boot.isClass = function(o) {
	return o.__name__;
};
js_Boot.isEnum = function(e) {
	return e.__ename__;
};
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (js_Boot.isClass(o) || js_Boot.isEnum(o))) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_Lib = function() { };
$hxClasses["js.Lib"] = js_Lib;
js_Lib.__name__ = ["js","Lib"];
js_Lib.__properties__ = {get_undefined:"get_undefined"};
js_Lib.debug = function() {
	debugger;
};
js_Lib.alert = function(v) {
	alert(js_Boot.__string_rec(v,""));
};
js_Lib["eval"] = function(code) {
	return eval(code);
};
js_Lib.get_undefined = function() {
	return undefined;
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
$hxClasses["js.html.compat.ArrayBuffer"] = js_html_compat_ArrayBuffer;
js_html_compat_ArrayBuffer.__name__ = ["js","html","compat","ArrayBuffer"];
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	byteLength: null
	,a: null
	,slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_DataView = function(buffer,byteOffset,byteLength) {
	this.buf = buffer;
	this.offset = byteOffset == null ? 0 : byteOffset;
	this.length = byteLength == null ? buffer.byteLength - this.offset : byteLength;
	if(this.offset < 0 || this.length < 0 || this.offset + this.length > buffer.byteLength) {
		throw new js__$Boot_HaxeError($hx_exports.haxe.io.Error.OutsideBounds);
	}
	this.byteLength = this.length;
	this.byteOffset = this.offset;
	this.buffer = this.buf;
};
$hxClasses["js.html.compat.DataView"] = js_html_compat_DataView;
js_html_compat_DataView.__name__ = ["js","html","compat","DataView"];
js_html_compat_DataView.prototype = {
	buf: null
	,offset: null
	,length: null
	,byteLength: null
	,byteOffset: null
	,buffer: null
	,getInt8: function(byteOffset) {
		var v = this.buf.a[this.offset + byteOffset];
		if(v >= 128) {
			return v - 256;
		} else {
			return v;
		}
	}
	,getUint8: function(byteOffset) {
		return this.buf.a[this.offset + byteOffset];
	}
	,getInt16: function(byteOffset,littleEndian) {
		var v = this.getUint16(byteOffset,littleEndian);
		if(v >= 32768) {
			return v - 65536;
		} else {
			return v;
		}
	}
	,getUint16: function(byteOffset,littleEndian) {
		if(littleEndian) {
			return this.buf.a[this.offset + byteOffset] | this.buf.a[this.offset + byteOffset + 1] << 8;
		} else {
			return this.buf.a[this.offset + byteOffset] << 8 | this.buf.a[this.offset + byteOffset + 1];
		}
	}
	,getInt32: function(byteOffset,littleEndian) {
		var p = this.offset + byteOffset;
		var a = this.buf.a[p++];
		var b = this.buf.a[p++];
		var c = this.buf.a[p++];
		var d = this.buf.a[p++];
		if(littleEndian) {
			return a | b << 8 | c << 16 | d << 24;
		} else {
			return d | c << 8 | b << 16 | a << 24;
		}
	}
	,getUint32: function(byteOffset,littleEndian) {
		var v = this.getInt32(byteOffset,littleEndian);
		if(v < 0) {
			return v + 4294967296.;
		} else {
			return v;
		}
	}
	,getFloat32: function(byteOffset,littleEndian) {
		return $hx_exports.haxe.io.FPHelper.i32ToFloat(this.getInt32(byteOffset,littleEndian));
	}
	,getFloat64: function(byteOffset,littleEndian) {
		var a = this.getInt32(byteOffset,littleEndian);
		var b = this.getInt32(byteOffset + 4,littleEndian);
		return $hx_exports.haxe.io.FPHelper.i64ToDouble(littleEndian ? a : b,littleEndian ? b : a);
	}
	,setInt8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value < 0 ? value + 128 & 255 : value & 255;
	}
	,setUint8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setInt16: function(byteOffset,value,littleEndian) {
		this.setUint16(byteOffset,value < 0 ? value + 65536 : value,littleEndian);
	}
	,setUint16: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
		} else {
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p] = value & 255;
		}
	}
	,setInt32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,value,littleEndian);
	}
	,setUint32: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p++] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >>> 24;
		} else {
			this.buf.a[p++] = value >>> 24;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value & 255;
		}
	}
	,setFloat32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,$hx_exports.haxe.io.FPHelper.floatToI32(value),littleEndian);
	}
	,setFloat64: function(byteOffset,value,littleEndian) {
		var i64 = $hx_exports.haxe.io.FPHelper.doubleToI64(value);
		if(littleEndian) {
			this.setUint32(byteOffset,i64.low);
			this.setUint32(byteOffset,i64.high);
		} else {
			this.setUint32(byteOffset,i64.high);
			this.setUint32(byteOffset,i64.low);
		}
	}
	,__class__: js_html_compat_DataView
};
var js_html_compat_Float32Array = function() { };
$hxClasses["js.html.compat.Float32Array"] = js_html_compat_Float32Array;
js_html_compat_Float32Array.__name__ = ["js","html","compat","Float32Array"];
js_html_compat_Float32Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		var _g2 = [];
		var _g21 = 0;
		var _g11 = arr.length << 2;
		while(_g21 < _g11) {
			var i1 = _g21++;
			_g2.push(0);
		}
		arr.buffer = new js_html_compat_ArrayBuffer(_g2);
	} else if(Std.is(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset >> 2;
		}
		arr = [];
		var _g12 = 0;
		var _g3 = length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var val = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			arr.push($hx_exports.haxe.io.FPHelper.i32ToFloat(val));
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		var buffer1 = [];
		var _g4 = 0;
		while(_g4 < arr.length) {
			var f = arr[_g4];
			++_g4;
			var i3 = $hx_exports.haxe.io.FPHelper.floatToI32(f);
			buffer1.push(i3 & 255);
			buffer1.push(i3 >> 8 & 255);
			buffer1.push(i3 >> 16 & 255);
			buffer1.push(i3 >>> 24);
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(buffer1);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Float32Array._subarray;
	arr.set = js_html_compat_Float32Array._set;
	return arr;
};
js_html_compat_Float32Array._set = function(arg,offset) {
	if(Std.is(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Float32Array._subarray = function(start,end) {
	var a = js_html_compat_Float32Array._new(this.slice(start,end));
	a.byteOffset = start * 4;
	return a;
};
var js_html_compat_Float64Array = function() { };
$hxClasses["js.html.compat.Float64Array"] = js_html_compat_Float64Array;
js_html_compat_Float64Array.__name__ = ["js","html","compat","Float64Array"];
js_html_compat_Float64Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length << 3;
		arr.byteOffset = 0;
		var _g2 = [];
		var _g21 = 0;
		var _g11 = arr.length << 3;
		while(_g21 < _g11) {
			var i1 = _g21++;
			_g2.push(0);
		}
		arr.buffer = new js_html_compat_ArrayBuffer(_g2);
	} else if(Std.is(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset >> 3;
		}
		arr = [];
		var _g12 = 0;
		var _g3 = length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var val1 = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			var val2 = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			arr.push($hx_exports.haxe.io.FPHelper.i64ToDouble(val1,val2));
		}
		arr.byteLength = arr.length << 3;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		var buffer1 = [];
		var _g4 = 0;
		while(_g4 < arr.length) {
			var f = arr[_g4];
			++_g4;
			var v = $hx_exports.haxe.io.FPHelper.doubleToI64(f);
			var i3 = v.low;
			buffer1.push(i3 & 255);
			buffer1.push(i3 >> 8 & 255);
			buffer1.push(i3 >> 16 & 255);
			buffer1.push(i3 >>> 24);
			var i4 = v.high;
			buffer1.push(i4 & 255);
			buffer1.push(i4 >> 8 & 255);
			buffer1.push(i4 >> 16 & 255);
			buffer1.push(i4 >>> 24);
		}
		arr.byteLength = arr.length << 3;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(buffer1);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Float64Array._subarray;
	arr.set = js_html_compat_Float64Array._set;
	return arr;
};
js_html_compat_Float64Array._set = function(arg,offset) {
	if(Std.is(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Float64Array._subarray = function(start,end) {
	var a = js_html_compat_Float64Array._new(this.slice(start,end));
	a.byteOffset = start * 8;
	return a;
};
var js_html_compat_Uint8Array = function() { };
$hxClasses["js.html.compat.Uint8Array"] = js_html_compat_Uint8Array;
js_html_compat_Uint8Array.__name__ = ["js","html","compat","Uint8Array"];
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(Std.is(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(Std.is(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
var lime__$backend_html5_GameDeviceData = function() {
	this.connected = true;
	this.buttons = [];
	this.axes = [];
};
$hxClasses["lime._backend.html5.GameDeviceData"] = lime__$backend_html5_GameDeviceData;
lime__$backend_html5_GameDeviceData.__name__ = ["lime","_backend","html5","GameDeviceData"];
lime__$backend_html5_GameDeviceData.prototype = {
	connected: null
	,id: null
	,isGamepad: null
	,buttons: null
	,axes: null
	,__class__: lime__$backend_html5_GameDeviceData
};
var lime__$backend_native_NativeCFFI = function() { };
$hxClasses["lime._backend.native.NativeCFFI"] = lime__$backend_native_NativeCFFI;
lime__$backend_native_NativeCFFI.__name__ = ["lime","_backend","native","NativeCFFI"];
var lime_app__$Event_$Array_$String_$_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Array_String__Void"] = lime_app__$Event_$Array_$String_$_$Void;
lime_app__$Event_$Array_$String_$_$Void.__name__ = ["lime","app","_Event_Array_String__Void"];
lime_app__$Event_$Array_$String_$_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Array_$String_$_$Void
};
var lime_app__$Event_$Dynamic_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Dynamic_Void"] = lime_app__$Event_$Dynamic_$Void;
lime_app__$Event_$Dynamic_$Void.__name__ = ["lime","app","_Event_Dynamic_Void"];
lime_app__$Event_$Dynamic_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Dynamic_$Void
};
var lime_app__$Event_$Float_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Float_Void"] = lime_app__$Event_$Float_$Float_$Float_$Void;
lime_app__$Event_$Float_$Float_$Float_$Void.__name__ = ["lime","app","_Event_Float_Float_Float_Void"];
lime_app__$Event_$Float_$Float_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Float_$Void
};
var lime_app__$Event_$Float_$Float_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Int_Void"] = lime_app__$Event_$Float_$Float_$Int_$Void;
lime_app__$Event_$Float_$Float_$Int_$Void.__name__ = ["lime","app","_Event_Float_Float_Int_Void"];
lime_app__$Event_$Float_$Float_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Int_$Void
};
var lime_app__$Event_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Void"] = lime_app__$Event_$Float_$Float_$Void;
lime_app__$Event_$Float_$Float_$Void.__name__ = ["lime","app","_Event_Float_Float_Void"];
lime_app__$Event_$Float_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Void
};
var lime_app__$Event_$Int_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Float_Float_Void"] = lime_app__$Event_$Int_$Float_$Float_$Void;
lime_app__$Event_$Int_$Float_$Float_$Void.__name__ = ["lime","app","_Event_Int_Float_Float_Void"];
lime_app__$Event_$Int_$Float_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Float_$Float_$Void
};
var lime_app__$Event_$Int_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Float_Void"] = lime_app__$Event_$Int_$Float_$Void;
lime_app__$Event_$Int_$Float_$Void.__name__ = ["lime","app","_Event_Int_Float_Void"];
lime_app__$Event_$Int_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Float_$Void
};
var lime_app__$Event_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Int_Void"] = lime_app__$Event_$Int_$Int_$Void;
lime_app__$Event_$Int_$Int_$Void.__name__ = ["lime","app","_Event_Int_Int_Void"];
lime_app__$Event_$Int_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Int_$Void
};
var lime_app__$Event_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Void"] = lime_app__$Event_$Int_$Void;
lime_app__$Event_$Int_$Void.__name__ = ["lime","app","_Event_Int_Void"];
lime_app__$Event_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Void
};
var lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_lime_ui_JoystickHatPosition_Void"] = lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void;
lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.__name__ = ["lime","app","_Event_Int_lime_ui_JoystickHatPosition_Void"];
lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void
};
var lime_app__$Event_$String_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_String_Int_Int_Void"] = lime_app__$Event_$String_$Int_$Int_$Void;
lime_app__$Event_$String_$Int_$Int_$Void.__name__ = ["lime","app","_Event_String_Int_Int_Void"];
lime_app__$Event_$String_$Int_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$String_$Int_$Int_$Void
};
var lime_app__$Event_$String_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_String_Void"] = lime_app__$Event_$String_$Void;
lime_app__$Event_$String_$Void.__name__ = ["lime","app","_Event_String_Void"];
lime_app__$Event_$String_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$String_$Void
};
var lime_app__$Event_$Void_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Void_Void"] = lime_app__$Event_$Void_$Void;
lime_app__$Event_$Void_$Void.__name__ = ["lime","app","_Event_Void_Void"];
lime_app__$Event_$Void_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function() {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i]();
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Void_$Void
};
var lime_app__$Event_$haxe_$Function_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_haxe_Function_Void"] = lime_app__$Event_$haxe_$Function_$Void;
lime_app__$Event_$haxe_$Function_$Void.__name__ = ["lime","app","_Event_haxe_Function_Void"];
lime_app__$Event_$haxe_$Function_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$haxe_$Function_$Void
};
var lime_app__$Event_$lime_$graphics_$RenderContext_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_graphics_RenderContext_Void"] = lime_app__$Event_$lime_$graphics_$RenderContext_$Void;
lime_app__$Event_$lime_$graphics_$RenderContext_$Void.__name__ = ["lime","app","_Event_lime_graphics_RenderContext_Void"];
lime_app__$Event_$lime_$graphics_$RenderContext_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$graphics_$RenderContext_$Void
};
var lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_GamepadAxis_Float_Void"] = lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void;
lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void.__name__ = ["lime","app","_Event_lime_ui_GamepadAxis_Float_Void"];
lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void
};
var lime_app__$Event_$lime_$ui_$GamepadButton_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_GamepadButton_Void"] = lime_app__$Event_$lime_$ui_$GamepadButton_$Void;
lime_app__$Event_$lime_$ui_$GamepadButton_$Void.__name__ = ["lime","app","_Event_lime_ui_GamepadButton_Void"];
lime_app__$Event_$lime_$ui_$GamepadButton_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$GamepadButton_$Void
};
var lime_app__$Event_$lime_$ui_$Gamepad_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Gamepad_Void"] = lime_app__$Event_$lime_$ui_$Gamepad_$Void;
lime_app__$Event_$lime_$ui_$Gamepad_$Void.__name__ = ["lime","app","_Event_lime_ui_Gamepad_Void"];
lime_app__$Event_$lime_$ui_$Gamepad_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Gamepad_$Void
};
var lime_app__$Event_$lime_$ui_$Joystick_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Joystick_Void"] = lime_app__$Event_$lime_$ui_$Joystick_$Void;
lime_app__$Event_$lime_$ui_$Joystick_$Void.__name__ = ["lime","app","_Event_lime_ui_Joystick_Void"];
lime_app__$Event_$lime_$ui_$Joystick_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Joystick_$Void
};
var lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"] = lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void;
lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.__name__ = ["lime","app","_Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"];
lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void
};
var lime_app__$Event_$lime_$ui_$Touch_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Touch_Void"] = lime_app__$Event_$lime_$ui_$Touch_$Void;
lime_app__$Event_$lime_$ui_$Touch_$Void.__name__ = ["lime","app","_Event_lime_ui_Touch_Void"];
lime_app__$Event_$lime_$ui_$Touch_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Touch_$Void
};
var lime_app__$Event_$lime_$utils_$Resource_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_utils_Resource_Void"] = lime_app__$Event_$lime_$utils_$Resource_$Void;
lime_app__$Event_$lime_$utils_$Resource_$Void.__name__ = ["lime","app","_Event_lime_utils_Resource_Void"];
lime_app__$Event_$lime_$utils_$Resource_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$utils_$Resource_$Void
};
var lime_app__$Event_$ofEvents_$T_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_ofEvents_T_Void"] = lime_app__$Event_$ofEvents_$T_$Void;
lime_app__$Event_$ofEvents_$T_$Void.__name__ = ["lime","app","_Event_ofEvents_T_Void"];
lime_app__$Event_$ofEvents_$T_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$ofEvents_$T_$Void
};
var lime_graphics_ImageChannel = $hxClasses["lime.graphics.ImageChannel"] = { __ename__ : ["lime","graphics","ImageChannel"], __constructs__ : ["RED","GREEN","BLUE","ALPHA"] };
lime_graphics_ImageChannel.RED = ["RED",0];
lime_graphics_ImageChannel.RED.toString = $estr;
lime_graphics_ImageChannel.RED.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.GREEN = ["GREEN",1];
lime_graphics_ImageChannel.GREEN.toString = $estr;
lime_graphics_ImageChannel.GREEN.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.BLUE = ["BLUE",2];
lime_graphics_ImageChannel.BLUE.toString = $estr;
lime_graphics_ImageChannel.BLUE.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.ALPHA = ["ALPHA",3];
lime_graphics_ImageChannel.ALPHA.toString = $estr;
lime_graphics_ImageChannel.ALPHA.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.__empty_constructs__ = [lime_graphics_ImageChannel.RED,lime_graphics_ImageChannel.GREEN,lime_graphics_ImageChannel.BLUE,lime_graphics_ImageChannel.ALPHA];
var lime_graphics_ImageType = $hxClasses["lime.graphics.ImageType"] = { __ename__ : ["lime","graphics","ImageType"], __constructs__ : ["CANVAS","DATA","FLASH","CUSTOM"] };
lime_graphics_ImageType.CANVAS = ["CANVAS",0];
lime_graphics_ImageType.CANVAS.toString = $estr;
lime_graphics_ImageType.CANVAS.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.DATA = ["DATA",1];
lime_graphics_ImageType.DATA.toString = $estr;
lime_graphics_ImageType.DATA.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.FLASH = ["FLASH",2];
lime_graphics_ImageType.FLASH.toString = $estr;
lime_graphics_ImageType.FLASH.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.CUSTOM = ["CUSTOM",3];
lime_graphics_ImageType.CUSTOM.toString = $estr;
lime_graphics_ImageType.CUSTOM.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.__empty_constructs__ = [lime_graphics_ImageType.CANVAS,lime_graphics_ImageType.DATA,lime_graphics_ImageType.FLASH,lime_graphics_ImageType.CUSTOM];
var lime_graphics_RendererType = $hxClasses["lime.graphics.RendererType"] = { __ename__ : ["lime","graphics","RendererType"], __constructs__ : ["OPENGL","CANVAS","DOM","FLASH","CAIRO","CONSOLE","CUSTOM"] };
lime_graphics_RendererType.OPENGL = ["OPENGL",0];
lime_graphics_RendererType.OPENGL.toString = $estr;
lime_graphics_RendererType.OPENGL.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CANVAS = ["CANVAS",1];
lime_graphics_RendererType.CANVAS.toString = $estr;
lime_graphics_RendererType.CANVAS.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.DOM = ["DOM",2];
lime_graphics_RendererType.DOM.toString = $estr;
lime_graphics_RendererType.DOM.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.FLASH = ["FLASH",3];
lime_graphics_RendererType.FLASH.toString = $estr;
lime_graphics_RendererType.FLASH.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CAIRO = ["CAIRO",4];
lime_graphics_RendererType.CAIRO.toString = $estr;
lime_graphics_RendererType.CAIRO.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CONSOLE = ["CONSOLE",5];
lime_graphics_RendererType.CONSOLE.toString = $estr;
lime_graphics_RendererType.CONSOLE.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CUSTOM = ["CUSTOM",6];
lime_graphics_RendererType.CUSTOM.toString = $estr;
lime_graphics_RendererType.CUSTOM.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.__empty_constructs__ = [lime_graphics_RendererType.OPENGL,lime_graphics_RendererType.CANVAS,lime_graphics_RendererType.DOM,lime_graphics_RendererType.FLASH,lime_graphics_RendererType.CAIRO,lime_graphics_RendererType.CONSOLE,lime_graphics_RendererType.CUSTOM];
var $hx_$exports_lime_graphics_cairo_CairoFTFontFace = {};
$hxClasses["$hx_exports.lime.graphics.cairo.CairoFTFontFace"] = $hx_$exports_lime_graphics_cairo_CairoFTFontFace;
$hx_$exports_lime_graphics_cairo_CairoFTFontFace.__name__ = ["$hx_exports","lime","graphics","cairo","CairoFTFontFace"];
$hx_$exports_lime_graphics_cairo_CairoFTFontFace._new = function() {
	var this1 = 0;
	return this1;
};
$hx_$exports_lime_graphics_cairo_CairoFTFontFace.create = function(face,loadFlags) {
	return 0;
};
var $hx_$exports_lime_graphics_cairo_CairoFontFace = {};
$hxClasses["$hx_exports.lime.graphics.cairo.CairoFontFace"] = $hx_$exports_lime_graphics_cairo_CairoFontFace;
$hx_$exports_lime_graphics_cairo_CairoFontFace.__name__ = ["$hx_exports","lime","graphics","cairo","CairoFontFace"];
$hx_$exports_lime_graphics_cairo_CairoFontFace._new = function() {
	var this1 = null;
	return this1;
};
$hx_$exports_lime_graphics_cairo_CairoFontFace.status = function(this1) {
	return 0;
};
var $hx_$exports_lime_graphics_cairo_CairoFontOptions = {};
$hxClasses["$hx_exports.lime.graphics.cairo.CairoFontOptions"] = $hx_$exports_lime_graphics_cairo_CairoFontOptions;
$hx_$exports_lime_graphics_cairo_CairoFontOptions.__name__ = ["$hx_exports","lime","graphics","cairo","CairoFontOptions"];
$hx_$exports_lime_graphics_cairo_CairoFontOptions.__properties__ = {set_subpixelOrder:"set_subpixelOrder",get_subpixelOrder:"get_subpixelOrder",set_hintStyle:"set_hintStyle",get_hintStyle:"get_hintStyle",set_hintMetrics:"set_hintMetrics",get_hintMetrics:"get_hintMetrics",set_antialias:"set_antialias",get_antialias:"get_antialias"};
$hx_$exports_lime_graphics_cairo_CairoFontOptions._new = function() {
	var this1 = null;
	return this1;
};
$hx_$exports_lime_graphics_cairo_CairoFontOptions.get_antialias = function(this1) {
	return 0;
};
$hx_$exports_lime_graphics_cairo_CairoFontOptions.set_antialias = function(this1,value) {
	return value;
};
$hx_$exports_lime_graphics_cairo_CairoFontOptions.get_hintMetrics = function(this1) {
	return 0;
};
$hx_$exports_lime_graphics_cairo_CairoFontOptions.set_hintMetrics = function(this1,value) {
	return value;
};
$hx_$exports_lime_graphics_cairo_CairoFontOptions.get_hintStyle = function(this1) {
	return 0;
};
$hx_$exports_lime_graphics_cairo_CairoFontOptions.set_hintStyle = function(this1,value) {
	return value;
};
$hx_$exports_lime_graphics_cairo_CairoFontOptions.get_subpixelOrder = function(this1) {
	return 0;
};
$hx_$exports_lime_graphics_cairo_CairoFontOptions.set_subpixelOrder = function(this1,value) {
	return value;
};
var $hx_$exports_lime_graphics_cairo_CairoImageSurface = {};
$hxClasses["$hx_exports.lime.graphics.cairo.CairoImageSurface"] = $hx_$exports_lime_graphics_cairo_CairoImageSurface;
$hx_$exports_lime_graphics_cairo_CairoImageSurface.__name__ = ["$hx_exports","lime","graphics","cairo","CairoImageSurface"];
$hx_$exports_lime_graphics_cairo_CairoImageSurface.__properties__ = {get_width:"get_width",get_stride:"get_stride",get_height:"get_height",get_format:"get_format",get_data:"get_data"};
$hx_$exports_lime_graphics_cairo_CairoImageSurface._new = function(format,width,height) {
	var this1 = 0;
	return this1;
};
$hx_$exports_lime_graphics_cairo_CairoImageSurface.create = function(data,format,width,height,stride) {
	return 0;
};
$hx_$exports_lime_graphics_cairo_CairoImageSurface.fromImage = function(image) {
	return null;
};
$hx_$exports_lime_graphics_cairo_CairoImageSurface.get_data = function(this1) {
	return $hx_$exports_lime_utils_DataPointer.fromInt(0);
};
$hx_$exports_lime_graphics_cairo_CairoImageSurface.get_format = function(this1) {
	return 0;
};
$hx_$exports_lime_graphics_cairo_CairoImageSurface.get_height = function(this1) {
	return 0;
};
$hx_$exports_lime_graphics_cairo_CairoImageSurface.get_stride = function(this1) {
	return 0;
};
$hx_$exports_lime_graphics_cairo_CairoImageSurface.get_width = function(this1) {
	return 0;
};
var $hx_$exports_lime_graphics_cairo_CairoPattern = {};
$hxClasses["$hx_exports.lime.graphics.cairo.CairoPattern"] = $hx_$exports_lime_graphics_cairo_CairoPattern;
$hx_$exports_lime_graphics_cairo_CairoPattern.__name__ = ["$hx_exports","lime","graphics","cairo","CairoPattern"];
$hx_$exports_lime_graphics_cairo_CairoPattern.__properties__ = {set_matrix:"set_matrix",get_matrix:"get_matrix",set_filter:"set_filter",get_filter:"get_filter",set_extend:"set_extend",get_extend:"get_extend",get_colorStopCount:"get_colorStopCount"};
$hx_$exports_lime_graphics_cairo_CairoPattern._new = function(handle) {
	var this1 = handle;
	return this1;
};
$hx_$exports_lime_graphics_cairo_CairoPattern.addColorStopRGB = function(this1,offset,r,g,b) {
};
$hx_$exports_lime_graphics_cairo_CairoPattern.addColorStopRGBA = function(this1,offset,r,g,b,a) {
};
$hx_$exports_lime_graphics_cairo_CairoPattern.createForSurface = function(surface) {
	return 0;
};
$hx_$exports_lime_graphics_cairo_CairoPattern.createLinear = function(x0,y0,x1,y1) {
	return 0;
};
$hx_$exports_lime_graphics_cairo_CairoPattern.createRadial = function(cx0,cy0,radius0,cx1,cy1,radius1) {
	return 0;
};
$hx_$exports_lime_graphics_cairo_CairoPattern.createRGB = function(r,g,b) {
	return 0;
};
$hx_$exports_lime_graphics_cairo_CairoPattern.createRGBA = function(r,g,b,a) {
	return 0;
};
$hx_$exports_lime_graphics_cairo_CairoPattern.get_colorStopCount = function(this1) {
	return 0;
};
$hx_$exports_lime_graphics_cairo_CairoPattern.get_extend = function(this1) {
	return 0;
};
$hx_$exports_lime_graphics_cairo_CairoPattern.set_extend = function(this1,value) {
	return value;
};
$hx_$exports_lime_graphics_cairo_CairoPattern.get_filter = function(this1) {
	return 0;
};
$hx_$exports_lime_graphics_cairo_CairoPattern.set_filter = function(this1,value) {
	return value;
};
$hx_$exports_lime_graphics_cairo_CairoPattern.get_matrix = function(this1) {
	return null;
};
$hx_$exports_lime_graphics_cairo_CairoPattern.set_matrix = function(this1,value) {
	return value;
};
var $hx_$exports_lime_graphics_cairo_CairoSurface = {};
$hxClasses["$hx_exports.lime.graphics.cairo.CairoSurface"] = $hx_$exports_lime_graphics_cairo_CairoSurface;
$hx_$exports_lime_graphics_cairo_CairoSurface.__name__ = ["$hx_exports","lime","graphics","cairo","CairoSurface"];
$hx_$exports_lime_graphics_cairo_CairoSurface.flush = function(this1) {
};
var lime_graphics_console_IndexBuffer = function() {
};
$hxClasses["lime.graphics.console.IndexBuffer"] = lime_graphics_console_IndexBuffer;
lime_graphics_console_IndexBuffer.__name__ = ["lime","graphics","console","IndexBuffer"];
lime_graphics_console_IndexBuffer.prototype = {
	__class__: lime_graphics_console_IndexBuffer
};
var lime_graphics_console_Primitive = $hxClasses["lime.graphics.console.Primitive"] = { __ename__ : ["lime","graphics","console","Primitive"], __constructs__ : ["Point","Line","LineStrip","Triangle","TriangleStrip"] };
lime_graphics_console_Primitive.Point = ["Point",0];
lime_graphics_console_Primitive.Point.toString = $estr;
lime_graphics_console_Primitive.Point.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.Line = ["Line",1];
lime_graphics_console_Primitive.Line.toString = $estr;
lime_graphics_console_Primitive.Line.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.LineStrip = ["LineStrip",2];
lime_graphics_console_Primitive.LineStrip.toString = $estr;
lime_graphics_console_Primitive.LineStrip.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.Triangle = ["Triangle",3];
lime_graphics_console_Primitive.Triangle.toString = $estr;
lime_graphics_console_Primitive.Triangle.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.TriangleStrip = ["TriangleStrip",4];
lime_graphics_console_Primitive.TriangleStrip.toString = $estr;
lime_graphics_console_Primitive.TriangleStrip.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.__empty_constructs__ = [lime_graphics_console_Primitive.Point,lime_graphics_console_Primitive.Line,lime_graphics_console_Primitive.LineStrip,lime_graphics_console_Primitive.Triangle,lime_graphics_console_Primitive.TriangleStrip];
var lime_graphics_console_Shader = function() {
};
$hxClasses["lime.graphics.console.Shader"] = lime_graphics_console_Shader;
lime_graphics_console_Shader.__name__ = ["lime","graphics","console","Shader"];
lime_graphics_console_Shader.prototype = {
	__class__: lime_graphics_console_Shader
};
var lime_graphics_console_VertexBuffer = function() {
};
$hxClasses["lime.graphics.console.VertexBuffer"] = lime_graphics_console_VertexBuffer;
lime_graphics_console_VertexBuffer.__name__ = ["lime","graphics","console","VertexBuffer"];
lime_graphics_console_VertexBuffer.prototype = {
	lock: function() {
		return new lime_graphics_console_VertexOutput();
	}
	,unlock: function() {
	}
	,__class__: lime_graphics_console_VertexBuffer
};
var lime_graphics_console_VertexOutput = function() {
};
$hxClasses["lime.graphics.console.VertexOutput"] = lime_graphics_console_VertexOutput;
lime_graphics_console_VertexOutput.__name__ = ["lime","graphics","console","VertexOutput"];
lime_graphics_console_VertexOutput.prototype = {
	vec2: function(x,y) {
	}
	,vec3: function(x,y,z) {
	}
	,color: function(r,g,b,a) {
	}
	,__class__: lime_graphics_console_VertexOutput
};
var lime_graphics_format_BMPType = $hxClasses["lime.graphics.format.BMPType"] = { __ename__ : ["lime","graphics","format","BMPType"], __constructs__ : ["RGB","BITFIELD","ICO"] };
lime_graphics_format_BMPType.RGB = ["RGB",0];
lime_graphics_format_BMPType.RGB.toString = $estr;
lime_graphics_format_BMPType.RGB.__enum__ = lime_graphics_format_BMPType;
lime_graphics_format_BMPType.BITFIELD = ["BITFIELD",1];
lime_graphics_format_BMPType.BITFIELD.toString = $estr;
lime_graphics_format_BMPType.BITFIELD.__enum__ = lime_graphics_format_BMPType;
lime_graphics_format_BMPType.ICO = ["ICO",2];
lime_graphics_format_BMPType.ICO.toString = $estr;
lime_graphics_format_BMPType.ICO.__enum__ = lime_graphics_format_BMPType;
lime_graphics_format_BMPType.__empty_constructs__ = [lime_graphics_format_BMPType.RGB,lime_graphics_format_BMPType.BITFIELD,lime_graphics_format_BMPType.ICO];
var lime_graphics_opengl_GLContextType = $hxClasses["lime.graphics.opengl.GLContextType"] = { __ename__ : ["lime","graphics","opengl","GLContextType"], __constructs__ : ["OPENGL","GLES","WEBGL"] };
lime_graphics_opengl_GLContextType.OPENGL = ["OPENGL",0];
lime_graphics_opengl_GLContextType.OPENGL.toString = $estr;
lime_graphics_opengl_GLContextType.OPENGL.__enum__ = lime_graphics_opengl_GLContextType;
lime_graphics_opengl_GLContextType.GLES = ["GLES",1];
lime_graphics_opengl_GLContextType.GLES.toString = $estr;
lime_graphics_opengl_GLContextType.GLES.__enum__ = lime_graphics_opengl_GLContextType;
lime_graphics_opengl_GLContextType.WEBGL = ["WEBGL",2];
lime_graphics_opengl_GLContextType.WEBGL.toString = $estr;
lime_graphics_opengl_GLContextType.WEBGL.__enum__ = lime_graphics_opengl_GLContextType;
lime_graphics_opengl_GLContextType.__empty_constructs__ = [lime_graphics_opengl_GLContextType.OPENGL,lime_graphics_opengl_GLContextType.GLES,lime_graphics_opengl_GLContextType.WEBGL];
var $hx_$exports_lime_graphics_opengl_GLES2Context = {};
$hxClasses["$hx_exports.lime.graphics.opengl.GLES2Context"] = $hx_$exports_lime_graphics_opengl_GLES2Context;
$hx_$exports_lime_graphics_opengl_GLES2Context.__name__ = ["$hx_exports","lime","graphics","opengl","GLES2Context"];
$hx_$exports_lime_graphics_opengl_GLES2Context.fromGL = function(gl) {
	return $hx_exports.lime.graphics.opengl.GL.context;
};
var $hx_$exports_lime_graphics_opengl_GLES3Context = {};
$hxClasses["$hx_exports.lime.graphics.opengl.GLES3Context"] = $hx_$exports_lime_graphics_opengl_GLES3Context;
$hx_$exports_lime_graphics_opengl_GLES3Context.__name__ = ["$hx_exports","lime","graphics","opengl","GLES3Context"];
$hx_$exports_lime_graphics_opengl_GLES3Context.__properties__ = {get_version:"get_version",get_type:"get_type",get_MAX_CLIENT_WAIT_TIMEOUT_WEBGL:"get_MAX_CLIENT_WAIT_TIMEOUT_WEBGL",get_TIMEOUT_IGNORED:"get_TIMEOUT_IGNORED",get_INVALID_INDEX:"get_INVALID_INDEX",get_DEPTH32F_STENCIL8:"get_DEPTH32F_STENCIL8",get_DEPTH_COMPONENT32F:"get_DEPTH_COMPONENT32F",get_DYNAMIC_COPY:"get_DYNAMIC_COPY",get_DYNAMIC_READ:"get_DYNAMIC_READ",get_STATIC_COPY:"get_STATIC_COPY",get_STATIC_READ:"get_STATIC_READ",get_STREAM_COPY:"get_STREAM_COPY",get_STREAM_READ:"get_STREAM_READ",get_DEPTH_COMPONENT24:"get_DEPTH_COMPONENT24",get_MAX:"get_MAX",get_MIN:"get_MIN",get_STENCIL:"get_STENCIL",get_DEPTH:"get_DEPTH",get_COLOR:"get_COLOR",get_SYNC_FLUSH_COMMANDS_BIT:"get_SYNC_FLUSH_COMMANDS_BIT",get_WAIT_FAILED:"get_WAIT_FAILED",get_CONDITION_SATISFIED:"get_CONDITION_SATISFIED",get_TIMEOUT_EXPIRED:"get_TIMEOUT_EXPIRED",get_ALREADY_SIGNALED:"get_ALREADY_SIGNALED",get_SIGNALED:"get_SIGNALED",get_UNSIGNALED:"get_UNSIGNALED",get_SYNC_GPU_COMMANDS_COMPLETE:"get_SYNC_GPU_COMMANDS_COMPLETE",get_SYNC_FENCE:"get_SYNC_FENCE",get_SYNC_FLAGS:"get_SYNC_FLAGS",get_SYNC_STATUS:"get_SYNC_STATUS",get_SYNC_CONDITION:"get_SYNC_CONDITION",get_OBJECT_TYPE:"get_OBJECT_TYPE",get_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER:"get_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER",get_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER:"get_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER",get_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES:"get_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES",get_UNIFORM_BLOCK_ACTIVE_UNIFORMS:"get_UNIFORM_BLOCK_ACTIVE_UNIFORMS",get_UNIFORM_BLOCK_DATA_SIZE:"get_UNIFORM_BLOCK_DATA_SIZE",get_UNIFORM_BLOCK_BINDING:"get_UNIFORM_BLOCK_BINDING",get_UNIFORM_IS_ROW_MAJOR:"get_UNIFORM_IS_ROW_MAJOR",get_UNIFORM_MATRIX_STRIDE:"get_UNIFORM_MATRIX_STRIDE",get_UNIFORM_ARRAY_STRIDE:"get_UNIFORM_ARRAY_STRIDE",get_UNIFORM_OFFSET:"get_UNIFORM_OFFSET",get_UNIFORM_BLOCK_INDEX:"get_UNIFORM_BLOCK_INDEX",get_UNIFORM_SIZE:"get_UNIFORM_SIZE",get_UNIFORM_TYPE:"get_UNIFORM_TYPE",get_ACTIVE_UNIFORM_BLOCKS:"get_ACTIVE_UNIFORM_BLOCKS",get_UNIFORM_BUFFER_OFFSET_ALIGNMENT:"get_UNIFORM_BUFFER_OFFSET_ALIGNMENT",get_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS:"get_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS",get_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS:"get_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS",get_MAX_UNIFORM_BLOCK_SIZE:"get_MAX_UNIFORM_BLOCK_SIZE",get_MAX_UNIFORM_BUFFER_BINDINGS:"get_MAX_UNIFORM_BUFFER_BINDINGS",get_MAX_COMBINED_UNIFORM_BLOCKS:"get_MAX_COMBINED_UNIFORM_BLOCKS",get_MAX_FRAGMENT_UNIFORM_BLOCKS:"get_MAX_FRAGMENT_UNIFORM_BLOCKS",get_MAX_VERTEX_UNIFORM_BLOCKS:"get_MAX_VERTEX_UNIFORM_BLOCKS",get_UNIFORM_BUFFER_SIZE:"get_UNIFORM_BUFFER_SIZE",get_UNIFORM_BUFFER_START:"get_UNIFORM_BUFFER_START",get_UNIFORM_BUFFER_BINDING:"get_UNIFORM_BUFFER_BINDING",get_UNIFORM_BUFFER:"get_UNIFORM_BUFFER",get_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE:"get_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE",get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER:"get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER",get_RENDERBUFFER_SAMPLES:"get_RENDERBUFFER_SAMPLES",get_READ_FRAMEBUFFER_BINDING:"get_READ_FRAMEBUFFER_BINDING",get_DRAW_FRAMEBUFFER:"get_DRAW_FRAMEBUFFER",get_READ_FRAMEBUFFER:"get_READ_FRAMEBUFFER",get_DRAW_FRAMEBUFFER_BINDING:"get_DRAW_FRAMEBUFFER_BINDING",get_DEPTH24_STENCIL8:"get_DEPTH24_STENCIL8",get_FRAMEBUFFER_DEFAULT:"get_FRAMEBUFFER_DEFAULT",get_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE:"get_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE",get_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE:"get_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE",get_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE:"get_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE",get_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE:"get_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE",get_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE:"get_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE",get_FRAMEBUFFER_ATTACHMENT_RED_SIZE:"get_FRAMEBUFFER_ATTACHMENT_RED_SIZE",get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE:"get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE",get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING:"get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING",get_TRANSFORM_FEEDBACK_BINDING:"get_TRANSFORM_FEEDBACK_BINDING",get_TRANSFORM_FEEDBACK_ACTIVE:"get_TRANSFORM_FEEDBACK_ACTIVE",get_TRANSFORM_FEEDBACK_PAUSED:"get_TRANSFORM_FEEDBACK_PAUSED",get_TRANSFORM_FEEDBACK:"get_TRANSFORM_FEEDBACK",get_TRANSFORM_FEEDBACK_BUFFER_BINDING:"get_TRANSFORM_FEEDBACK_BUFFER_BINDING",get_TRANSFORM_FEEDBACK_BUFFER:"get_TRANSFORM_FEEDBACK_BUFFER",get_SEPARATE_ATTRIBS:"get_SEPARATE_ATTRIBS",get_INTERLEAVED_ATTRIBS:"get_INTERLEAVED_ATTRIBS",get_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS:"get_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS",get_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS:"get_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS",get_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN:"get_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN",get_TRANSFORM_FEEDBACK_BUFFER_SIZE:"get_TRANSFORM_FEEDBACK_BUFFER_SIZE",get_TRANSFORM_FEEDBACK_BUFFER_START:"get_TRANSFORM_FEEDBACK_BUFFER_START",get_TRANSFORM_FEEDBACK_VARYINGS:"get_TRANSFORM_FEEDBACK_VARYINGS",get_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS:"get_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS",get_TRANSFORM_FEEDBACK_BUFFER_MODE:"get_TRANSFORM_FEEDBACK_BUFFER_MODE",get_VERTEX_ATTRIB_ARRAY_DIVISOR:"get_VERTEX_ATTRIB_ARRAY_DIVISOR",get_VERTEX_ATTRIB_ARRAY_INTEGER:"get_VERTEX_ATTRIB_ARRAY_INTEGER",get_SIGNED_NORMALIZED:"get_SIGNED_NORMALIZED",get_UNSIGNED_NORMALIZED:"get_UNSIGNED_NORMALIZED",get_UNSIGNED_INT_VEC4:"get_UNSIGNED_INT_VEC4",get_UNSIGNED_INT_VEC3:"get_UNSIGNED_INT_VEC3",get_UNSIGNED_INT_VEC2:"get_UNSIGNED_INT_VEC2",get_FLOAT_MAT4x3:"get_FLOAT_MAT4x3",get_FLOAT_MAT4x2:"get_FLOAT_MAT4x2",get_FLOAT_MAT3x4:"get_FLOAT_MAT3x4",get_FLOAT_MAT3x2:"get_FLOAT_MAT3x2",get_FLOAT_MAT2x4:"get_FLOAT_MAT2x4",get_FLOAT_MAT2x3:"get_FLOAT_MAT2x3",get_COPY_WRITE_BUFFER_BINDING:"get_COPY_WRITE_BUFFER_BINDING",get_COPY_READ_BUFFER_BINDING:"get_COPY_READ_BUFFER_BINDING",get_COPY_WRITE_BUFFER:"get_COPY_WRITE_BUFFER",get_COPY_READ_BUFFER:"get_COPY_READ_BUFFER",get_PIXEL_UNPACK_BUFFER_BINDING:"get_PIXEL_UNPACK_BUFFER_BINDING",get_PIXEL_PACK_BUFFER_BINDING:"get_PIXEL_PACK_BUFFER_BINDING",get_PIXEL_UNPACK_BUFFER:"get_PIXEL_UNPACK_BUFFER",get_PIXEL_PACK_BUFFER:"get_PIXEL_PACK_BUFFER",get_SAMPLER_BINDING:"get_SAMPLER_BINDING",get_MAX_SAMPLES:"get_MAX_SAMPLES",get_UNSIGNED_INT_SAMPLER_2D_ARRAY:"get_UNSIGNED_INT_SAMPLER_2D_ARRAY",get_UNSIGNED_INT_SAMPLER_CUBE:"get_UNSIGNED_INT_SAMPLER_CUBE",get_UNSIGNED_INT_SAMPLER_3D:"get_UNSIGNED_INT_SAMPLER_3D",get_UNSIGNED_INT_SAMPLER_2D:"get_UNSIGNED_INT_SAMPLER_2D",get_INT_SAMPLER_2D_ARRAY:"get_INT_SAMPLER_2D_ARRAY",get_INT_SAMPLER_CUBE:"get_INT_SAMPLER_CUBE",get_INT_SAMPLER_3D:"get_INT_SAMPLER_3D",get_INT_SAMPLER_2D:"get_INT_SAMPLER_2D",get_SAMPLER_CUBE_SHADOW:"get_SAMPLER_CUBE_SHADOW",get_SAMPLER_2D_ARRAY_SHADOW:"get_SAMPLER_2D_ARRAY_SHADOW",get_SAMPLER_2D_ARRAY:"get_SAMPLER_2D_ARRAY",get_SAMPLER_2D_SHADOW:"get_SAMPLER_2D_SHADOW",get_SAMPLER_3D:"get_SAMPLER_3D",get_COLOR_ATTACHMENT15:"get_COLOR_ATTACHMENT15",get_COLOR_ATTACHMENT14:"get_COLOR_ATTACHMENT14",get_COLOR_ATTACHMENT13:"get_COLOR_ATTACHMENT13",get_COLOR_ATTACHMENT12:"get_COLOR_ATTACHMENT12",get_COLOR_ATTACHMENT11:"get_COLOR_ATTACHMENT11",get_COLOR_ATTACHMENT10:"get_COLOR_ATTACHMENT10",get_COLOR_ATTACHMENT9:"get_COLOR_ATTACHMENT9",get_COLOR_ATTACHMENT8:"get_COLOR_ATTACHMENT8",get_COLOR_ATTACHMENT7:"get_COLOR_ATTACHMENT7",get_COLOR_ATTACHMENT6:"get_COLOR_ATTACHMENT6",get_COLOR_ATTACHMENT5:"get_COLOR_ATTACHMENT5",get_COLOR_ATTACHMENT4:"get_COLOR_ATTACHMENT4",get_COLOR_ATTACHMENT3:"get_COLOR_ATTACHMENT3",get_COLOR_ATTACHMENT2:"get_COLOR_ATTACHMENT2",get_COLOR_ATTACHMENT1:"get_COLOR_ATTACHMENT1",get_MAX_COLOR_ATTACHMENTS:"get_MAX_COLOR_ATTACHMENTS",get_DRAW_BUFFER15:"get_DRAW_BUFFER15",get_DRAW_BUFFER14:"get_DRAW_BUFFER14",get_DRAW_BUFFER13:"get_DRAW_BUFFER13",get_DRAW_BUFFER12:"get_DRAW_BUFFER12",get_DRAW_BUFFER11:"get_DRAW_BUFFER11",get_DRAW_BUFFER10:"get_DRAW_BUFFER10",get_DRAW_BUFFER9:"get_DRAW_BUFFER9",get_DRAW_BUFFER8:"get_DRAW_BUFFER8",get_DRAW_BUFFER7:"get_DRAW_BUFFER7",get_DRAW_BUFFER6:"get_DRAW_BUFFER6",get_DRAW_BUFFER5:"get_DRAW_BUFFER5",get_DRAW_BUFFER4:"get_DRAW_BUFFER4",get_DRAW_BUFFER3:"get_DRAW_BUFFER3",get_DRAW_BUFFER2:"get_DRAW_BUFFER2",get_DRAW_BUFFER1:"get_DRAW_BUFFER1",get_DRAW_BUFFER0:"get_DRAW_BUFFER0",get_MAX_DRAW_BUFFERS:"get_MAX_DRAW_BUFFERS",get_ANY_SAMPLES_PASSED_CONSERVATIVE:"get_ANY_SAMPLES_PASSED_CONSERVATIVE",get_ANY_SAMPLES_PASSED:"get_ANY_SAMPLES_PASSED",get_QUERY_RESULT_AVAILABLE:"get_QUERY_RESULT_AVAILABLE",get_QUERY_RESULT:"get_QUERY_RESULT",get_CURRENT_QUERY:"get_CURRENT_QUERY",get_INT_2_10_10_10_REV:"get_INT_2_10_10_10_REV",get_RG_INTEGER:"get_RG_INTEGER",get_RG:"get_RG",get_HALF_FLOAT:"get_HALF_FLOAT",get_UNSIGNED_INT_24_8:"get_UNSIGNED_INT_24_8",get_FLOAT_32_UNSIGNED_INT_24_8_REV:"get_FLOAT_32_UNSIGNED_INT_24_8_REV",get_UNSIGNED_INT_5_9_9_9_REV:"get_UNSIGNED_INT_5_9_9_9_REV",get_UNSIGNED_INT_10F_11F_11F_REV:"get_UNSIGNED_INT_10F_11F_11F_REV",get_UNSIGNED_INT_2_10_10_10_REV:"get_UNSIGNED_INT_2_10_10_10_REV",get_TEXTURE_IMMUTABLE_LEVELS:"get_TEXTURE_IMMUTABLE_LEVELS",get_TEXTURE_IMMUTABLE_FORMAT:"get_TEXTURE_IMMUTABLE_FORMAT",get_RGB10_A2UI:"get_RGB10_A2UI",get_RGBA8_SNORM:"get_RGBA8_SNORM",get_RGB8_SNORM:"get_RGB8_SNORM",get_RG8_SNORM:"get_RG8_SNORM",get_R8_SNORM:"get_R8_SNORM",get_RG32UI:"get_RG32UI",get_RG32I:"get_RG32I",get_RG16UI:"get_RG16UI",get_RG16I:"get_RG16I",get_RG8UI:"get_RG8UI",get_RG8I:"get_RG8I",get_R32UI:"get_R32UI",get_R32I:"get_R32I",get_R16UI:"get_R16UI",get_R16I:"get_R16I",get_R8UI:"get_R8UI",get_R8I:"get_R8I",get_RG32F:"get_RG32F",get_RG16F:"get_RG16F",get_R32F:"get_R32F",get_R16F:"get_R16F",get_RG8:"get_RG8",get_R8:"get_R8",get_RGBA_INTEGER:"get_RGBA_INTEGER",get_RGB_INTEGER:"get_RGB_INTEGER",get_RED_INTEGER:"get_RED_INTEGER",get_RGB8I:"get_RGB8I",get_RGBA8I:"get_RGBA8I",get_RGB16I:"get_RGB16I",get_RGBA16I:"get_RGBA16I",get_RGB32I:"get_RGB32I",get_RGBA32I:"get_RGBA32I",get_RGB8UI:"get_RGB8UI",get_RGBA8UI:"get_RGBA8UI",get_RGB16UI:"get_RGB16UI",get_RGBA16UI:"get_RGBA16UI",get_RGB32UI:"get_RGB32UI",get_RGBA32UI:"get_RGBA32UI",get_RGB9_E5:"get_RGB9_E5",get_R11F_G11F_B10F:"get_R11F_G11F_B10F",get_TEXTURE_BINDING_2D_ARRAY:"get_TEXTURE_BINDING_2D_ARRAY",get_TEXTURE_2D_ARRAY:"get_TEXTURE_2D_ARRAY",get_RGB16F:"get_RGB16F",get_RGBA16F:"get_RGBA16F",get_RGB32F:"get_RGB32F",get_RGBA32F:"get_RGBA32F",get_COMPARE_REF_TO_TEXTURE:"get_COMPARE_REF_TO_TEXTURE",get_SRGB8_ALPHA8:"get_SRGB8_ALPHA8",get_SRGB8:"get_SRGB8",get_SRGB:"get_SRGB",get_TEXTURE_COMPARE_FUNC:"get_TEXTURE_COMPARE_FUNC",get_TEXTURE_COMPARE_MODE:"get_TEXTURE_COMPARE_MODE",get_TEXTURE_MAX_LEVEL:"get_TEXTURE_MAX_LEVEL",get_TEXTURE_BASE_LEVEL:"get_TEXTURE_BASE_LEVEL",get_TEXTURE_MAX_LOD:"get_TEXTURE_MAX_LOD",get_TEXTURE_MIN_LOD:"get_TEXTURE_MIN_LOD",get_TEXTURE_WRAP_R:"get_TEXTURE_WRAP_R",get_TEXTURE_3D:"get_TEXTURE_3D",get_RGB10_A2:"get_RGB10_A2",get_RGBA8:"get_RGBA8",get_RGB8:"get_RGB8",get_RED:"get_RED",get_MAX_ELEMENT_INDEX:"get_MAX_ELEMENT_INDEX",get_MAX_SERVER_WAIT_TIMEOUT:"get_MAX_SERVER_WAIT_TIMEOUT",get_MAX_FRAGMENT_INPUT_COMPONENTS:"get_MAX_FRAGMENT_INPUT_COMPONENTS",get_MAX_VERTEX_OUTPUT_COMPONENTS:"get_MAX_VERTEX_OUTPUT_COMPONENTS",get_VERTEX_ARRAY_BINDING:"get_VERTEX_ARRAY_BINDING",get_RASTERIZER_DISCARD:"get_RASTERIZER_DISCARD",get_FRAGMENT_SHADER_DERIVATIVE_HINT:"get_FRAGMENT_SHADER_DERIVATIVE_HINT",get_MAX_VARYING_COMPONENTS:"get_MAX_VARYING_COMPONENTS",get_MAX_PROGRAM_TEXEL_OFFSET:"get_MAX_PROGRAM_TEXEL_OFFSET",get_MIN_PROGRAM_TEXEL_OFFSET:"get_MIN_PROGRAM_TEXEL_OFFSET",get_MAX_ARRAY_TEXTURE_LAYERS:"get_MAX_ARRAY_TEXTURE_LAYERS",get_MAX_VERTEX_UNIFORM_COMPONENTS:"get_MAX_VERTEX_UNIFORM_COMPONENTS",get_MAX_FRAGMENT_UNIFORM_COMPONENTS:"get_MAX_FRAGMENT_UNIFORM_COMPONENTS",get_MAX_TEXTURE_LOD_BIAS:"get_MAX_TEXTURE_LOD_BIAS",get_MAX_ELEMENTS_INDICES:"get_MAX_ELEMENTS_INDICES",get_MAX_ELEMENTS_VERTICES:"get_MAX_ELEMENTS_VERTICES",get_MAX_3D_TEXTURE_SIZE:"get_MAX_3D_TEXTURE_SIZE",get_UNPACK_IMAGE_HEIGHT:"get_UNPACK_IMAGE_HEIGHT",get_UNPACK_SKIP_IMAGES:"get_UNPACK_SKIP_IMAGES",get_TEXTURE_BINDING_3D:"get_TEXTURE_BINDING_3D",get_PACK_SKIP_PIXELS:"get_PACK_SKIP_PIXELS",get_PACK_SKIP_ROWS:"get_PACK_SKIP_ROWS",get_PACK_ROW_LENGTH:"get_PACK_ROW_LENGTH",get_UNPACK_SKIP_PIXELS:"get_UNPACK_SKIP_PIXELS",get_UNPACK_SKIP_ROWS:"get_UNPACK_SKIP_ROWS",get_UNPACK_ROW_LENGTH:"get_UNPACK_ROW_LENGTH",get_READ_BUFFER:"get_READ_BUFFER",get_BROWSER_DEFAULT_WEBGL:"get_BROWSER_DEFAULT_WEBGL",get_UNPACK_COLORSPACE_CONVERSION_WEBGL:"get_UNPACK_COLORSPACE_CONVERSION_WEBGL",get_CONTEXT_LOST_WEBGL:"get_CONTEXT_LOST_WEBGL",get_UNPACK_PREMULTIPLY_ALPHA_WEBGL:"get_UNPACK_PREMULTIPLY_ALPHA_WEBGL",get_UNPACK_FLIP_Y_WEBGL:"get_UNPACK_FLIP_Y_WEBGL",get_INVALID_FRAMEBUFFER_OPERATION:"get_INVALID_FRAMEBUFFER_OPERATION",get_MAX_RENDERBUFFER_SIZE:"get_MAX_RENDERBUFFER_SIZE",get_RENDERBUFFER_BINDING:"get_RENDERBUFFER_BINDING",get_FRAMEBUFFER_BINDING:"get_FRAMEBUFFER_BINDING",get_FRAMEBUFFER_UNSUPPORTED:"get_FRAMEBUFFER_UNSUPPORTED",get_FRAMEBUFFER_INCOMPLETE_DIMENSIONS:"get_FRAMEBUFFER_INCOMPLETE_DIMENSIONS",get_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:"get_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT",get_FRAMEBUFFER_INCOMPLETE_ATTACHMENT:"get_FRAMEBUFFER_INCOMPLETE_ATTACHMENT",get_FRAMEBUFFER_COMPLETE:"get_FRAMEBUFFER_COMPLETE",get_NONE:"get_NONE",get_DEPTH_STENCIL_ATTACHMENT:"get_DEPTH_STENCIL_ATTACHMENT",get_STENCIL_ATTACHMENT:"get_STENCIL_ATTACHMENT",get_DEPTH_ATTACHMENT:"get_DEPTH_ATTACHMENT",get_COLOR_ATTACHMENT0:"get_COLOR_ATTACHMENT0",get_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE:"get_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE",get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL:"get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL",get_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME:"get_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME",get_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE:"get_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE",get_RENDERBUFFER_STENCIL_SIZE:"get_RENDERBUFFER_STENCIL_SIZE",get_RENDERBUFFER_DEPTH_SIZE:"get_RENDERBUFFER_DEPTH_SIZE",get_RENDERBUFFER_ALPHA_SIZE:"get_RENDERBUFFER_ALPHA_SIZE",get_RENDERBUFFER_BLUE_SIZE:"get_RENDERBUFFER_BLUE_SIZE",get_RENDERBUFFER_GREEN_SIZE:"get_RENDERBUFFER_GREEN_SIZE",get_RENDERBUFFER_RED_SIZE:"get_RENDERBUFFER_RED_SIZE",get_RENDERBUFFER_INTERNAL_FORMAT:"get_RENDERBUFFER_INTERNAL_FORMAT",get_RENDERBUFFER_HEIGHT:"get_RENDERBUFFER_HEIGHT",get_RENDERBUFFER_WIDTH:"get_RENDERBUFFER_WIDTH",get_DEPTH_STENCIL:"get_DEPTH_STENCIL",get_STENCIL_INDEX8:"get_STENCIL_INDEX8",get_STENCIL_INDEX:"get_STENCIL_INDEX",get_DEPTH_COMPONENT16:"get_DEPTH_COMPONENT16",get_RGB565:"get_RGB565",get_RGB5_A1:"get_RGB5_A1",get_RGBA4:"get_RGBA4",get_RENDERBUFFER:"get_RENDERBUFFER",get_FRAMEBUFFER:"get_FRAMEBUFFER",get_HIGH_INT:"get_HIGH_INT",get_MEDIUM_INT:"get_MEDIUM_INT",get_LOW_INT:"get_LOW_INT",get_HIGH_FLOAT:"get_HIGH_FLOAT",get_MEDIUM_FLOAT:"get_MEDIUM_FLOAT",get_LOW_FLOAT:"get_LOW_FLOAT",get_COMPILE_STATUS:"get_COMPILE_STATUS",get_POINT_SPRITE:"get_POINT_SPRITE",get_VERTEX_PROGRAM_POINT_SIZE:"get_VERTEX_PROGRAM_POINT_SIZE",get_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING:"get_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING",get_VERTEX_ATTRIB_ARRAY_POINTER:"get_VERTEX_ATTRIB_ARRAY_POINTER",get_VERTEX_ATTRIB_ARRAY_NORMALIZED:"get_VERTEX_ATTRIB_ARRAY_NORMALIZED",get_VERTEX_ATTRIB_ARRAY_TYPE:"get_VERTEX_ATTRIB_ARRAY_TYPE",get_VERTEX_ATTRIB_ARRAY_STRIDE:"get_VERTEX_ATTRIB_ARRAY_STRIDE",get_VERTEX_ATTRIB_ARRAY_SIZE:"get_VERTEX_ATTRIB_ARRAY_SIZE",get_VERTEX_ATTRIB_ARRAY_ENABLED:"get_VERTEX_ATTRIB_ARRAY_ENABLED",get_SAMPLER_CUBE:"get_SAMPLER_CUBE",get_SAMPLER_2D:"get_SAMPLER_2D",get_FLOAT_MAT4:"get_FLOAT_MAT4",get_FLOAT_MAT3:"get_FLOAT_MAT3",get_FLOAT_MAT2:"get_FLOAT_MAT2",get_BOOL_VEC4:"get_BOOL_VEC4",get_BOOL_VEC3:"get_BOOL_VEC3",get_BOOL_VEC2:"get_BOOL_VEC2",get_BOOL:"get_BOOL",get_INT_VEC4:"get_INT_VEC4",get_INT_VEC3:"get_INT_VEC3",get_INT_VEC2:"get_INT_VEC2",get_FLOAT_VEC4:"get_FLOAT_VEC4",get_FLOAT_VEC3:"get_FLOAT_VEC3",get_FLOAT_VEC2:"get_FLOAT_VEC2",get_MIRRORED_REPEAT:"get_MIRRORED_REPEAT",get_CLAMP_TO_EDGE:"get_CLAMP_TO_EDGE",get_REPEAT:"get_REPEAT",get_ACTIVE_TEXTURE:"get_ACTIVE_TEXTURE",get_TEXTURE31:"get_TEXTURE31",get_TEXTURE30:"get_TEXTURE30",get_TEXTURE29:"get_TEXTURE29",get_TEXTURE28:"get_TEXTURE28",get_TEXTURE27:"get_TEXTURE27",get_TEXTURE26:"get_TEXTURE26",get_TEXTURE25:"get_TEXTURE25",get_TEXTURE24:"get_TEXTURE24",get_TEXTURE23:"get_TEXTURE23",get_TEXTURE22:"get_TEXTURE22",get_TEXTURE21:"get_TEXTURE21",get_TEXTURE20:"get_TEXTURE20",get_TEXTURE19:"get_TEXTURE19",get_TEXTURE18:"get_TEXTURE18",get_TEXTURE17:"get_TEXTURE17",get_TEXTURE16:"get_TEXTURE16",get_TEXTURE15:"get_TEXTURE15",get_TEXTURE14:"get_TEXTURE14",get_TEXTURE13:"get_TEXTURE13",get_TEXTURE12:"get_TEXTURE12",get_TEXTURE11:"get_TEXTURE11",get_TEXTURE10:"get_TEXTURE10",get_TEXTURE9:"get_TEXTURE9",get_TEXTURE8:"get_TEXTURE8",get_TEXTURE7:"get_TEXTURE7",get_TEXTURE6:"get_TEXTURE6",get_TEXTURE5:"get_TEXTURE5",get_TEXTURE4:"get_TEXTURE4",get_TEXTURE3:"get_TEXTURE3",get_TEXTURE2:"get_TEXTURE2",get_TEXTURE1:"get_TEXTURE1",get_TEXTURE0:"get_TEXTURE0",get_MAX_CUBE_MAP_TEXTURE_SIZE:"get_MAX_CUBE_MAP_TEXTURE_SIZE",get_TEXTURE_CUBE_MAP_NEGATIVE_Z:"get_TEXTURE_CUBE_MAP_NEGATIVE_Z",get_TEXTURE_CUBE_MAP_POSITIVE_Z:"get_TEXTURE_CUBE_MAP_POSITIVE_Z",get_TEXTURE_CUBE_MAP_NEGATIVE_Y:"get_TEXTURE_CUBE_MAP_NEGATIVE_Y",get_TEXTURE_CUBE_MAP_POSITIVE_Y:"get_TEXTURE_CUBE_MAP_POSITIVE_Y",get_TEXTURE_CUBE_MAP_NEGATIVE_X:"get_TEXTURE_CUBE_MAP_NEGATIVE_X",get_TEXTURE_CUBE_MAP_POSITIVE_X:"get_TEXTURE_CUBE_MAP_POSITIVE_X",get_TEXTURE_BINDING_CUBE_MAP:"get_TEXTURE_BINDING_CUBE_MAP",get_TEXTURE_CUBE_MAP:"get_TEXTURE_CUBE_MAP",get_TEXTURE:"get_TEXTURE",get_TEXTURE_2D:"get_TEXTURE_2D",get_TEXTURE_WRAP_T:"get_TEXTURE_WRAP_T",get_TEXTURE_WRAP_S:"get_TEXTURE_WRAP_S",get_TEXTURE_MIN_FILTER:"get_TEXTURE_MIN_FILTER",get_TEXTURE_MAG_FILTER:"get_TEXTURE_MAG_FILTER",get_LINEAR_MIPMAP_LINEAR:"get_LINEAR_MIPMAP_LINEAR",get_NEAREST_MIPMAP_LINEAR:"get_NEAREST_MIPMAP_LINEAR",get_LINEAR_MIPMAP_NEAREST:"get_LINEAR_MIPMAP_NEAREST",get_NEAREST_MIPMAP_NEAREST:"get_NEAREST_MIPMAP_NEAREST",get_LINEAR:"get_LINEAR",get_NEAREST:"get_NEAREST",get_VERSION:"get_VERSION",get_RENDERER:"get_RENDERER",get_VENDOR:"get_VENDOR",get_DECR_WRAP:"get_DECR_WRAP",get_INCR_WRAP:"get_INCR_WRAP",get_INVERT:"get_INVERT",get_DECR:"get_DECR",get_INCR:"get_INCR",get_REPLACE:"get_REPLACE",get_KEEP:"get_KEEP",get_ALWAYS:"get_ALWAYS",get_GEQUAL:"get_GEQUAL",get_NOTEQUAL:"get_NOTEQUAL",get_GREATER:"get_GREATER",get_LEQUAL:"get_LEQUAL",get_EQUAL:"get_EQUAL",get_LESS:"get_LESS",get_NEVER:"get_NEVER",get_CURRENT_PROGRAM:"get_CURRENT_PROGRAM",get_SHADING_LANGUAGE_VERSION:"get_SHADING_LANGUAGE_VERSION",get_ACTIVE_ATTRIBUTES:"get_ACTIVE_ATTRIBUTES",get_ACTIVE_UNIFORMS:"get_ACTIVE_UNIFORMS",get_ATTACHED_SHADERS:"get_ATTACHED_SHADERS",get_VALIDATE_STATUS:"get_VALIDATE_STATUS",get_LINK_STATUS:"get_LINK_STATUS",get_DELETE_STATUS:"get_DELETE_STATUS",get_SHADER_TYPE:"get_SHADER_TYPE",get_MAX_FRAGMENT_UNIFORM_VECTORS:"get_MAX_FRAGMENT_UNIFORM_VECTORS",get_MAX_TEXTURE_IMAGE_UNITS:"get_MAX_TEXTURE_IMAGE_UNITS",get_MAX_VERTEX_TEXTURE_IMAGE_UNITS:"get_MAX_VERTEX_TEXTURE_IMAGE_UNITS",get_MAX_COMBINED_TEXTURE_IMAGE_UNITS:"get_MAX_COMBINED_TEXTURE_IMAGE_UNITS",get_MAX_VARYING_VECTORS:"get_MAX_VARYING_VECTORS",get_MAX_VERTEX_UNIFORM_VECTORS:"get_MAX_VERTEX_UNIFORM_VECTORS",get_MAX_VERTEX_ATTRIBS:"get_MAX_VERTEX_ATTRIBS",get_VERTEX_SHADER:"get_VERTEX_SHADER",get_FRAGMENT_SHADER:"get_FRAGMENT_SHADER",get_UNSIGNED_SHORT_5_6_5:"get_UNSIGNED_SHORT_5_6_5",get_UNSIGNED_SHORT_5_5_5_1:"get_UNSIGNED_SHORT_5_5_5_1",get_UNSIGNED_SHORT_4_4_4_4:"get_UNSIGNED_SHORT_4_4_4_4",get_LUMINANCE_ALPHA:"get_LUMINANCE_ALPHA",get_LUMINANCE:"get_LUMINANCE",get_RGBA:"get_RGBA",get_RGB:"get_RGB",get_ALPHA:"get_ALPHA",get_DEPTH_COMPONENT:"get_DEPTH_COMPONENT",get_FLOAT:"get_FLOAT",get_UNSIGNED_INT:"get_UNSIGNED_INT",get_INT:"get_INT",get_UNSIGNED_SHORT:"get_UNSIGNED_SHORT",get_SHORT:"get_SHORT",get_UNSIGNED_BYTE:"get_UNSIGNED_BYTE",get_BYTE:"get_BYTE",get_GENERATE_MIPMAP_HINT:"get_GENERATE_MIPMAP_HINT",get_NICEST:"get_NICEST",get_FASTEST:"get_FASTEST",get_DONT_CARE:"get_DONT_CARE",get_COMPRESSED_TEXTURE_FORMATS:"get_COMPRESSED_TEXTURE_FORMATS",get_SAMPLE_COVERAGE_INVERT:"get_SAMPLE_COVERAGE_INVERT",get_SAMPLE_COVERAGE_VALUE:"get_SAMPLE_COVERAGE_VALUE",get_SAMPLES:"get_SAMPLES",get_SAMPLE_BUFFERS:"get_SAMPLE_BUFFERS",get_TEXTURE_BINDING_2D:"get_TEXTURE_BINDING_2D",get_POLYGON_OFFSET_FACTOR:"get_POLYGON_OFFSET_FACTOR",get_POLYGON_OFFSET_UNITS:"get_POLYGON_OFFSET_UNITS",get_STENCIL_BITS:"get_STENCIL_BITS",get_DEPTH_BITS:"get_DEPTH_BITS",get_ALPHA_BITS:"get_ALPHA_BITS",get_BLUE_BITS:"get_BLUE_BITS",get_GREEN_BITS:"get_GREEN_BITS",get_RED_BITS:"get_RED_BITS",get_SUBPIXEL_BITS:"get_SUBPIXEL_BITS",get_MAX_VIEWPORT_DIMS:"get_MAX_VIEWPORT_DIMS",get_MAX_TEXTURE_SIZE:"get_MAX_TEXTURE_SIZE",get_PACK_ALIGNMENT:"get_PACK_ALIGNMENT",get_UNPACK_ALIGNMENT:"get_UNPACK_ALIGNMENT",get_COLOR_WRITEMASK:"get_COLOR_WRITEMASK",get_COLOR_CLEAR_VALUE:"get_COLOR_CLEAR_VALUE",get_SCISSOR_BOX:"get_SCISSOR_BOX",get_VIEWPORT:"get_VIEWPORT",get_STENCIL_BACK_WRITEMASK:"get_STENCIL_BACK_WRITEMASK",get_STENCIL_BACK_VALUE_MASK:"get_STENCIL_BACK_VALUE_MASK",get_STENCIL_BACK_REF:"get_STENCIL_BACK_REF",get_STENCIL_BACK_PASS_DEPTH_PASS:"get_STENCIL_BACK_PASS_DEPTH_PASS",get_STENCIL_BACK_PASS_DEPTH_FAIL:"get_STENCIL_BACK_PASS_DEPTH_FAIL",get_STENCIL_BACK_FAIL:"get_STENCIL_BACK_FAIL",get_STENCIL_BACK_FUNC:"get_STENCIL_BACK_FUNC",get_STENCIL_WRITEMASK:"get_STENCIL_WRITEMASK",get_STENCIL_VALUE_MASK:"get_STENCIL_VALUE_MASK",get_STENCIL_REF:"get_STENCIL_REF",get_STENCIL_PASS_DEPTH_PASS:"get_STENCIL_PASS_DEPTH_PASS",get_STENCIL_PASS_DEPTH_FAIL:"get_STENCIL_PASS_DEPTH_FAIL",get_STENCIL_FAIL:"get_STENCIL_FAIL",get_STENCIL_FUNC:"get_STENCIL_FUNC",get_STENCIL_CLEAR_VALUE:"get_STENCIL_CLEAR_VALUE",get_DEPTH_FUNC:"get_DEPTH_FUNC",get_DEPTH_CLEAR_VALUE:"get_DEPTH_CLEAR_VALUE",get_DEPTH_WRITEMASK:"get_DEPTH_WRITEMASK",get_DEPTH_RANGE:"get_DEPTH_RANGE",get_FRONT_FACE:"get_FRONT_FACE",get_CULL_FACE_MODE:"get_CULL_FACE_MODE",get_ALIASED_LINE_WIDTH_RANGE:"get_ALIASED_LINE_WIDTH_RANGE",get_ALIASED_POINT_SIZE_RANGE:"get_ALIASED_POINT_SIZE_RANGE",get_LINE_WIDTH:"get_LINE_WIDTH",get_CCW:"get_CCW",get_CW:"get_CW",get_OUT_OF_MEMORY:"get_OUT_OF_MEMORY",get_INVALID_OPERATION:"get_INVALID_OPERATION",get_INVALID_VALUE:"get_INVALID_VALUE",get_INVALID_ENUM:"get_INVALID_ENUM",get_NO_ERROR:"get_NO_ERROR",get_SAMPLE_COVERAGE:"get_SAMPLE_COVERAGE",get_SAMPLE_ALPHA_TO_COVERAGE:"get_SAMPLE_ALPHA_TO_COVERAGE",get_POLYGON_OFFSET_FILL:"get_POLYGON_OFFSET_FILL",get_SCISSOR_TEST:"get_SCISSOR_TEST",get_DEPTH_TEST:"get_DEPTH_TEST",get_STENCIL_TEST:"get_STENCIL_TEST",get_DITHER:"get_DITHER",get_BLEND:"get_BLEND",get_CULL_FACE:"get_CULL_FACE",get_FRONT_AND_BACK:"get_FRONT_AND_BACK",get_BACK:"get_BACK",get_FRONT:"get_FRONT",get_CURRENT_VERTEX_ATTRIB:"get_CURRENT_VERTEX_ATTRIB",get_BUFFER_USAGE:"get_BUFFER_USAGE",get_BUFFER_SIZE:"get_BUFFER_SIZE",get_DYNAMIC_DRAW:"get_DYNAMIC_DRAW",get_STATIC_DRAW:"get_STATIC_DRAW",get_STREAM_DRAW:"get_STREAM_DRAW",get_ELEMENT_ARRAY_BUFFER_BINDING:"get_ELEMENT_ARRAY_BUFFER_BINDING",get_ARRAY_BUFFER_BINDING:"get_ARRAY_BUFFER_BINDING",get_ELEMENT_ARRAY_BUFFER:"get_ELEMENT_ARRAY_BUFFER",get_ARRAY_BUFFER:"get_ARRAY_BUFFER",get_BLEND_COLOR:"get_BLEND_COLOR",get_ONE_MINUS_CONSTANT_ALPHA:"get_ONE_MINUS_CONSTANT_ALPHA",get_CONSTANT_ALPHA:"get_CONSTANT_ALPHA",get_ONE_MINUS_CONSTANT_COLOR:"get_ONE_MINUS_CONSTANT_COLOR",get_CONSTANT_COLOR:"get_CONSTANT_COLOR",get_BLEND_SRC_ALPHA:"get_BLEND_SRC_ALPHA",get_BLEND_DST_ALPHA:"get_BLEND_DST_ALPHA",get_BLEND_SRC_RGB:"get_BLEND_SRC_RGB",get_BLEND_DST_RGB:"get_BLEND_DST_RGB",get_FUNC_REVERSE_SUBTRACT:"get_FUNC_REVERSE_SUBTRACT",get_FUNC_SUBTRACT:"get_FUNC_SUBTRACT",get_BLEND_EQUATION_ALPHA:"get_BLEND_EQUATION_ALPHA",get_BLEND_EQUATION_RGB:"get_BLEND_EQUATION_RGB",get_BLEND_EQUATION:"get_BLEND_EQUATION",get_FUNC_ADD:"get_FUNC_ADD",get_SRC_ALPHA_SATURATE:"get_SRC_ALPHA_SATURATE",get_ONE_MINUS_DST_COLOR:"get_ONE_MINUS_DST_COLOR",get_DST_COLOR:"get_DST_COLOR",get_ONE_MINUS_DST_ALPHA:"get_ONE_MINUS_DST_ALPHA",get_DST_ALPHA:"get_DST_ALPHA",get_ONE_MINUS_SRC_ALPHA:"get_ONE_MINUS_SRC_ALPHA",get_SRC_ALPHA:"get_SRC_ALPHA",get_ONE_MINUS_SRC_COLOR:"get_ONE_MINUS_SRC_COLOR",get_SRC_COLOR:"get_SRC_COLOR",get_ONE:"get_ONE",get_ZERO:"get_ZERO",get_TRIANGLE_FAN:"get_TRIANGLE_FAN",get_TRIANGLE_STRIP:"get_TRIANGLE_STRIP",get_TRIANGLES:"get_TRIANGLES",get_LINE_STRIP:"get_LINE_STRIP",get_LINE_LOOP:"get_LINE_LOOP",get_LINES:"get_LINES",get_POINTS:"get_POINTS",get_COLOR_BUFFER_BIT:"get_COLOR_BUFFER_BIT",get_STENCIL_BUFFER_BIT:"get_STENCIL_BUFFER_BIT",get_DEPTH_BUFFER_BIT:"get_DEPTH_BUFFER_BIT",get_EXTENSIONS:"get_EXTENSIONS"};
$hx_$exports_lime_graphics_opengl_GLES3Context.__extensions = null;
$hx_$exports_lime_graphics_opengl_GLES3Context.get_EXTENSIONS = function(this1) {
	return 7939;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_DEPTH_BUFFER_BIT = function(this1) {
	return this1.DEPTH_BUFFER_BIT;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_STENCIL_BUFFER_BIT = function(this1) {
	return this1.STENCIL_BUFFER_BIT;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_COLOR_BUFFER_BIT = function(this1) {
	return this1.COLOR_BUFFER_BIT;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_POINTS = function(this1) {
	return this1.POINTS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_LINES = function(this1) {
	return this1.LINES;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_LINE_LOOP = function(this1) {
	return this1.LINE_LOOP;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_LINE_STRIP = function(this1) {
	return this1.LINE_STRIP;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TRIANGLES = function(this1) {
	return this1.TRIANGLES;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TRIANGLE_STRIP = function(this1) {
	return this1.TRIANGLE_STRIP;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TRIANGLE_FAN = function(this1) {
	return this1.TRIANGLE_FAN;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_ZERO = function(this1) {
	return this1.ZERO;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_ONE = function(this1) {
	return this1.ONE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_SRC_COLOR = function(this1) {
	return this1.SRC_COLOR;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_ONE_MINUS_SRC_COLOR = function(this1) {
	return this1.ONE_MINUS_SRC_COLOR;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_SRC_ALPHA = function(this1) {
	return this1.SRC_ALPHA;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_ONE_MINUS_SRC_ALPHA = function(this1) {
	return this1.ONE_MINUS_SRC_ALPHA;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_DST_ALPHA = function(this1) {
	return this1.DST_ALPHA;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_ONE_MINUS_DST_ALPHA = function(this1) {
	return this1.ONE_MINUS_DST_ALPHA;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_DST_COLOR = function(this1) {
	return this1.DST_COLOR;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_ONE_MINUS_DST_COLOR = function(this1) {
	return this1.ONE_MINUS_DST_COLOR;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_SRC_ALPHA_SATURATE = function(this1) {
	return this1.SRC_ALPHA_SATURATE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_FUNC_ADD = function(this1) {
	return this1.FUNC_ADD;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_BLEND_EQUATION = function(this1) {
	return this1.BLEND_EQUATION;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_BLEND_EQUATION_RGB = function(this1) {
	return this1.BLEND_EQUATION_RGB;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_BLEND_EQUATION_ALPHA = function(this1) {
	return this1.BLEND_EQUATION_ALPHA;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_FUNC_SUBTRACT = function(this1) {
	return this1.FUNC_SUBTRACT;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_FUNC_REVERSE_SUBTRACT = function(this1) {
	return this1.FUNC_REVERSE_SUBTRACT;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_BLEND_DST_RGB = function(this1) {
	return this1.BLEND_DST_RGB;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_BLEND_SRC_RGB = function(this1) {
	return this1.BLEND_SRC_RGB;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_BLEND_DST_ALPHA = function(this1) {
	return this1.BLEND_DST_ALPHA;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_BLEND_SRC_ALPHA = function(this1) {
	return this1.BLEND_SRC_ALPHA;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_CONSTANT_COLOR = function(this1) {
	return this1.CONSTANT_COLOR;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_ONE_MINUS_CONSTANT_COLOR = function(this1) {
	return this1.ONE_MINUS_CONSTANT_COLOR;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_CONSTANT_ALPHA = function(this1) {
	return this1.CONSTANT_ALPHA;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_ONE_MINUS_CONSTANT_ALPHA = function(this1) {
	return this1.ONE_MINUS_CONSTANT_ALPHA;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_BLEND_COLOR = function(this1) {
	return this1.BLEND_COLOR;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_ARRAY_BUFFER = function(this1) {
	return this1.ARRAY_BUFFER;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_ELEMENT_ARRAY_BUFFER = function(this1) {
	return this1.ELEMENT_ARRAY_BUFFER;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_ARRAY_BUFFER_BINDING = function(this1) {
	return this1.ARRAY_BUFFER_BINDING;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_ELEMENT_ARRAY_BUFFER_BINDING = function(this1) {
	return this1.ELEMENT_ARRAY_BUFFER_BINDING;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_STREAM_DRAW = function(this1) {
	return this1.STREAM_DRAW;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_STATIC_DRAW = function(this1) {
	return this1.STATIC_DRAW;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_DYNAMIC_DRAW = function(this1) {
	return this1.DYNAMIC_DRAW;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_BUFFER_SIZE = function(this1) {
	return this1.BUFFER_SIZE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_BUFFER_USAGE = function(this1) {
	return this1.BUFFER_USAGE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_CURRENT_VERTEX_ATTRIB = function(this1) {
	return this1.CURRENT_VERTEX_ATTRIB;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_FRONT = function(this1) {
	return this1.FRONT;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_BACK = function(this1) {
	return this1.BACK;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_FRONT_AND_BACK = function(this1) {
	return this1.FRONT_AND_BACK;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_CULL_FACE = function(this1) {
	return this1.CULL_FACE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_BLEND = function(this1) {
	return this1.BLEND;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_DITHER = function(this1) {
	return this1.DITHER;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_STENCIL_TEST = function(this1) {
	return this1.STENCIL_TEST;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_DEPTH_TEST = function(this1) {
	return this1.DEPTH_TEST;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_SCISSOR_TEST = function(this1) {
	return this1.SCISSOR_TEST;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_POLYGON_OFFSET_FILL = function(this1) {
	return this1.POLYGON_OFFSET_FILL;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_SAMPLE_ALPHA_TO_COVERAGE = function(this1) {
	return this1.SAMPLE_ALPHA_TO_COVERAGE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_SAMPLE_COVERAGE = function(this1) {
	return this1.SAMPLE_COVERAGE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_NO_ERROR = function(this1) {
	return this1.NO_ERROR;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_INVALID_ENUM = function(this1) {
	return this1.INVALID_ENUM;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_INVALID_VALUE = function(this1) {
	return this1.INVALID_VALUE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_INVALID_OPERATION = function(this1) {
	return this1.INVALID_OPERATION;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_OUT_OF_MEMORY = function(this1) {
	return this1.OUT_OF_MEMORY;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_CW = function(this1) {
	return this1.CW;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_CCW = function(this1) {
	return this1.CCW;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_LINE_WIDTH = function(this1) {
	return this1.LINE_WIDTH;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_ALIASED_POINT_SIZE_RANGE = function(this1) {
	return this1.ALIASED_POINT_SIZE_RANGE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_ALIASED_LINE_WIDTH_RANGE = function(this1) {
	return this1.ALIASED_LINE_WIDTH_RANGE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_CULL_FACE_MODE = function(this1) {
	return this1.CULL_FACE_MODE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_FRONT_FACE = function(this1) {
	return this1.FRONT_FACE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_DEPTH_RANGE = function(this1) {
	return this1.DEPTH_RANGE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_DEPTH_WRITEMASK = function(this1) {
	return this1.DEPTH_WRITEMASK;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_DEPTH_CLEAR_VALUE = function(this1) {
	return this1.DEPTH_CLEAR_VALUE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_DEPTH_FUNC = function(this1) {
	return this1.DEPTH_FUNC;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_STENCIL_CLEAR_VALUE = function(this1) {
	return this1.STENCIL_CLEAR_VALUE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_STENCIL_FUNC = function(this1) {
	return this1.STENCIL_FUNC;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_STENCIL_FAIL = function(this1) {
	return this1.STENCIL_FAIL;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_STENCIL_PASS_DEPTH_FAIL = function(this1) {
	return this1.STENCIL_PASS_DEPTH_FAIL;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_STENCIL_PASS_DEPTH_PASS = function(this1) {
	return this1.STENCIL_PASS_DEPTH_PASS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_STENCIL_REF = function(this1) {
	return this1.STENCIL_REF;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_STENCIL_VALUE_MASK = function(this1) {
	return this1.STENCIL_VALUE_MASK;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_STENCIL_WRITEMASK = function(this1) {
	return this1.STENCIL_WRITEMASK;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_STENCIL_BACK_FUNC = function(this1) {
	return this1.STENCIL_BACK_FUNC;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_STENCIL_BACK_FAIL = function(this1) {
	return this1.STENCIL_BACK_FAIL;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_STENCIL_BACK_PASS_DEPTH_FAIL = function(this1) {
	return this1.STENCIL_BACK_PASS_DEPTH_FAIL;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_STENCIL_BACK_PASS_DEPTH_PASS = function(this1) {
	return this1.STENCIL_BACK_PASS_DEPTH_PASS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_STENCIL_BACK_REF = function(this1) {
	return this1.STENCIL_BACK_REF;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_STENCIL_BACK_VALUE_MASK = function(this1) {
	return this1.STENCIL_BACK_VALUE_MASK;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_STENCIL_BACK_WRITEMASK = function(this1) {
	return this1.STENCIL_BACK_WRITEMASK;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_VIEWPORT = function(this1) {
	return this1.VIEWPORT;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_SCISSOR_BOX = function(this1) {
	return this1.SCISSOR_BOX;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_COLOR_CLEAR_VALUE = function(this1) {
	return this1.COLOR_CLEAR_VALUE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_COLOR_WRITEMASK = function(this1) {
	return this1.COLOR_WRITEMASK;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_UNPACK_ALIGNMENT = function(this1) {
	return this1.UNPACK_ALIGNMENT;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_PACK_ALIGNMENT = function(this1) {
	return this1.PACK_ALIGNMENT;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_MAX_TEXTURE_SIZE = function(this1) {
	return this1.MAX_TEXTURE_SIZE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_MAX_VIEWPORT_DIMS = function(this1) {
	return this1.MAX_VIEWPORT_DIMS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_SUBPIXEL_BITS = function(this1) {
	return this1.SUBPIXEL_BITS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RED_BITS = function(this1) {
	return this1.RED_BITS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_GREEN_BITS = function(this1) {
	return this1.GREEN_BITS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_BLUE_BITS = function(this1) {
	return this1.BLUE_BITS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_ALPHA_BITS = function(this1) {
	return this1.ALPHA_BITS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_DEPTH_BITS = function(this1) {
	return this1.DEPTH_BITS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_STENCIL_BITS = function(this1) {
	return this1.STENCIL_BITS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_POLYGON_OFFSET_UNITS = function(this1) {
	return this1.POLYGON_OFFSET_UNITS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_POLYGON_OFFSET_FACTOR = function(this1) {
	return this1.POLYGON_OFFSET_FACTOR;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE_BINDING_2D = function(this1) {
	return this1.TEXTURE_BINDING_2D;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_SAMPLE_BUFFERS = function(this1) {
	return this1.SAMPLE_BUFFERS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_SAMPLES = function(this1) {
	return this1.SAMPLES;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_SAMPLE_COVERAGE_VALUE = function(this1) {
	return this1.SAMPLE_COVERAGE_VALUE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_SAMPLE_COVERAGE_INVERT = function(this1) {
	return this1.SAMPLE_COVERAGE_INVERT;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_COMPRESSED_TEXTURE_FORMATS = function(this1) {
	return this1.COMPRESSED_TEXTURE_FORMATS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_DONT_CARE = function(this1) {
	return this1.DONT_CARE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_FASTEST = function(this1) {
	return this1.FASTEST;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_NICEST = function(this1) {
	return this1.NICEST;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_GENERATE_MIPMAP_HINT = function(this1) {
	return this1.GENERATE_MIPMAP_HINT;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_BYTE = function(this1) {
	return this1.BYTE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_UNSIGNED_BYTE = function(this1) {
	return this1.UNSIGNED_BYTE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_SHORT = function(this1) {
	return this1.SHORT;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_UNSIGNED_SHORT = function(this1) {
	return this1.UNSIGNED_SHORT;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_INT = function(this1) {
	return this1.INT;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_UNSIGNED_INT = function(this1) {
	return this1.UNSIGNED_INT;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_FLOAT = function(this1) {
	return this1.FLOAT;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_DEPTH_COMPONENT = function(this1) {
	return this1.DEPTH_COMPONENT;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_ALPHA = function(this1) {
	return this1.ALPHA;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RGB = function(this1) {
	return this1.RGB;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RGBA = function(this1) {
	return this1.RGBA;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_LUMINANCE = function(this1) {
	return this1.LUMINANCE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_LUMINANCE_ALPHA = function(this1) {
	return this1.LUMINANCE_ALPHA;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_UNSIGNED_SHORT_4_4_4_4 = function(this1) {
	return this1.UNSIGNED_SHORT_4_4_4_4;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_UNSIGNED_SHORT_5_5_5_1 = function(this1) {
	return this1.UNSIGNED_SHORT_5_5_5_1;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_UNSIGNED_SHORT_5_6_5 = function(this1) {
	return this1.UNSIGNED_SHORT_5_6_5;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_FRAGMENT_SHADER = function(this1) {
	return this1.FRAGMENT_SHADER;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_VERTEX_SHADER = function(this1) {
	return this1.VERTEX_SHADER;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_MAX_VERTEX_ATTRIBS = function(this1) {
	return this1.MAX_VERTEX_ATTRIBS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_MAX_VERTEX_UNIFORM_VECTORS = function(this1) {
	return this1.MAX_VERTEX_UNIFORM_VECTORS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_MAX_VARYING_VECTORS = function(this1) {
	return this1.MAX_VARYING_VECTORS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_MAX_COMBINED_TEXTURE_IMAGE_UNITS = function(this1) {
	return this1.MAX_COMBINED_TEXTURE_IMAGE_UNITS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_MAX_VERTEX_TEXTURE_IMAGE_UNITS = function(this1) {
	return this1.MAX_VERTEX_TEXTURE_IMAGE_UNITS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_MAX_TEXTURE_IMAGE_UNITS = function(this1) {
	return this1.MAX_TEXTURE_IMAGE_UNITS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_MAX_FRAGMENT_UNIFORM_VECTORS = function(this1) {
	return this1.MAX_FRAGMENT_UNIFORM_VECTORS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_SHADER_TYPE = function(this1) {
	return this1.SHADER_TYPE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_DELETE_STATUS = function(this1) {
	return this1.DELETE_STATUS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_LINK_STATUS = function(this1) {
	return this1.LINK_STATUS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_VALIDATE_STATUS = function(this1) {
	return this1.VALIDATE_STATUS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_ATTACHED_SHADERS = function(this1) {
	return this1.ATTACHED_SHADERS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_ACTIVE_UNIFORMS = function(this1) {
	return this1.ACTIVE_UNIFORMS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_ACTIVE_ATTRIBUTES = function(this1) {
	return this1.ACTIVE_ATTRIBUTES;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_SHADING_LANGUAGE_VERSION = function(this1) {
	return this1.SHADING_LANGUAGE_VERSION;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_CURRENT_PROGRAM = function(this1) {
	return this1.CURRENT_PROGRAM;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_NEVER = function(this1) {
	return this1.NEVER;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_LESS = function(this1) {
	return this1.LESS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_EQUAL = function(this1) {
	return this1.EQUAL;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_LEQUAL = function(this1) {
	return this1.LEQUAL;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_GREATER = function(this1) {
	return this1.GREATER;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_NOTEQUAL = function(this1) {
	return this1.NOTEQUAL;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_GEQUAL = function(this1) {
	return this1.GEQUAL;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_ALWAYS = function(this1) {
	return this1.ALWAYS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_KEEP = function(this1) {
	return this1.KEEP;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_REPLACE = function(this1) {
	return this1.REPLACE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_INCR = function(this1) {
	return this1.INCR;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_DECR = function(this1) {
	return this1.DECR;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_INVERT = function(this1) {
	return this1.INVERT;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_INCR_WRAP = function(this1) {
	return this1.INCR_WRAP;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_DECR_WRAP = function(this1) {
	return this1.DECR_WRAP;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_VENDOR = function(this1) {
	return this1.VENDOR;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RENDERER = function(this1) {
	return this1.RENDERER;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_VERSION = function(this1) {
	return this1.VERSION;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_NEAREST = function(this1) {
	return this1.NEAREST;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_LINEAR = function(this1) {
	return this1.LINEAR;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_NEAREST_MIPMAP_NEAREST = function(this1) {
	return this1.NEAREST_MIPMAP_NEAREST;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_LINEAR_MIPMAP_NEAREST = function(this1) {
	return this1.LINEAR_MIPMAP_NEAREST;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_NEAREST_MIPMAP_LINEAR = function(this1) {
	return this1.NEAREST_MIPMAP_LINEAR;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_LINEAR_MIPMAP_LINEAR = function(this1) {
	return this1.LINEAR_MIPMAP_LINEAR;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE_MAG_FILTER = function(this1) {
	return this1.TEXTURE_MAG_FILTER;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE_MIN_FILTER = function(this1) {
	return this1.TEXTURE_MIN_FILTER;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE_WRAP_S = function(this1) {
	return this1.TEXTURE_WRAP_S;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE_WRAP_T = function(this1) {
	return this1.TEXTURE_WRAP_T;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE_2D = function(this1) {
	return this1.TEXTURE_2D;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE = function(this1) {
	return this1.TEXTURE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE_CUBE_MAP = function(this1) {
	return this1.TEXTURE_CUBE_MAP;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE_BINDING_CUBE_MAP = function(this1) {
	return this1.TEXTURE_BINDING_CUBE_MAP;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE_CUBE_MAP_POSITIVE_X = function(this1) {
	return this1.TEXTURE_CUBE_MAP_POSITIVE_X;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE_CUBE_MAP_NEGATIVE_X = function(this1) {
	return this1.TEXTURE_CUBE_MAP_NEGATIVE_X;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE_CUBE_MAP_POSITIVE_Y = function(this1) {
	return this1.TEXTURE_CUBE_MAP_POSITIVE_Y;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE_CUBE_MAP_NEGATIVE_Y = function(this1) {
	return this1.TEXTURE_CUBE_MAP_NEGATIVE_Y;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE_CUBE_MAP_POSITIVE_Z = function(this1) {
	return this1.TEXTURE_CUBE_MAP_POSITIVE_Z;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE_CUBE_MAP_NEGATIVE_Z = function(this1) {
	return this1.TEXTURE_CUBE_MAP_NEGATIVE_Z;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_MAX_CUBE_MAP_TEXTURE_SIZE = function(this1) {
	return this1.MAX_CUBE_MAP_TEXTURE_SIZE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE0 = function(this1) {
	return this1.TEXTURE0;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE1 = function(this1) {
	return this1.TEXTURE1;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE2 = function(this1) {
	return this1.TEXTURE2;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE3 = function(this1) {
	return this1.TEXTURE3;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE4 = function(this1) {
	return this1.TEXTURE4;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE5 = function(this1) {
	return this1.TEXTURE5;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE6 = function(this1) {
	return this1.TEXTURE6;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE7 = function(this1) {
	return this1.TEXTURE7;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE8 = function(this1) {
	return this1.TEXTURE8;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE9 = function(this1) {
	return this1.TEXTURE9;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE10 = function(this1) {
	return this1.TEXTURE10;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE11 = function(this1) {
	return this1.TEXTURE11;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE12 = function(this1) {
	return this1.TEXTURE12;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE13 = function(this1) {
	return this1.TEXTURE13;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE14 = function(this1) {
	return this1.TEXTURE14;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE15 = function(this1) {
	return this1.TEXTURE15;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE16 = function(this1) {
	return this1.TEXTURE16;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE17 = function(this1) {
	return this1.TEXTURE17;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE18 = function(this1) {
	return this1.TEXTURE18;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE19 = function(this1) {
	return this1.TEXTURE19;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE20 = function(this1) {
	return this1.TEXTURE20;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE21 = function(this1) {
	return this1.TEXTURE21;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE22 = function(this1) {
	return this1.TEXTURE22;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE23 = function(this1) {
	return this1.TEXTURE23;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE24 = function(this1) {
	return this1.TEXTURE24;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE25 = function(this1) {
	return this1.TEXTURE25;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE26 = function(this1) {
	return this1.TEXTURE26;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE27 = function(this1) {
	return this1.TEXTURE27;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE28 = function(this1) {
	return this1.TEXTURE28;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE29 = function(this1) {
	return this1.TEXTURE29;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE30 = function(this1) {
	return this1.TEXTURE30;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE31 = function(this1) {
	return this1.TEXTURE31;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_ACTIVE_TEXTURE = function(this1) {
	return this1.ACTIVE_TEXTURE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_REPEAT = function(this1) {
	return this1.REPEAT;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_CLAMP_TO_EDGE = function(this1) {
	return this1.CLAMP_TO_EDGE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_MIRRORED_REPEAT = function(this1) {
	return this1.MIRRORED_REPEAT;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_FLOAT_VEC2 = function(this1) {
	return this1.FLOAT_VEC2;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_FLOAT_VEC3 = function(this1) {
	return this1.FLOAT_VEC3;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_FLOAT_VEC4 = function(this1) {
	return this1.FLOAT_VEC4;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_INT_VEC2 = function(this1) {
	return this1.INT_VEC2;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_INT_VEC3 = function(this1) {
	return this1.INT_VEC3;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_INT_VEC4 = function(this1) {
	return this1.INT_VEC4;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_BOOL = function(this1) {
	return this1.BOOL;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_BOOL_VEC2 = function(this1) {
	return this1.BOOL_VEC2;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_BOOL_VEC3 = function(this1) {
	return this1.BOOL_VEC3;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_BOOL_VEC4 = function(this1) {
	return this1.BOOL_VEC4;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_FLOAT_MAT2 = function(this1) {
	return this1.FLOAT_MAT2;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_FLOAT_MAT3 = function(this1) {
	return this1.FLOAT_MAT3;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_FLOAT_MAT4 = function(this1) {
	return this1.FLOAT_MAT4;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_SAMPLER_2D = function(this1) {
	return this1.SAMPLER_2D;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_SAMPLER_CUBE = function(this1) {
	return this1.SAMPLER_CUBE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_VERTEX_ATTRIB_ARRAY_ENABLED = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_ENABLED;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_VERTEX_ATTRIB_ARRAY_SIZE = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_SIZE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_VERTEX_ATTRIB_ARRAY_STRIDE = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_STRIDE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_VERTEX_ATTRIB_ARRAY_TYPE = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_TYPE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_VERTEX_ATTRIB_ARRAY_NORMALIZED = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_NORMALIZED;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_VERTEX_ATTRIB_ARRAY_POINTER = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_POINTER;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_VERTEX_PROGRAM_POINT_SIZE = function(this1) {
	return 0;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_POINT_SPRITE = function(this1) {
	return 0;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_COMPILE_STATUS = function(this1) {
	return this1.COMPILE_STATUS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_LOW_FLOAT = function(this1) {
	return this1.LOW_FLOAT;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_MEDIUM_FLOAT = function(this1) {
	return this1.MEDIUM_FLOAT;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_HIGH_FLOAT = function(this1) {
	return this1.HIGH_FLOAT;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_LOW_INT = function(this1) {
	return this1.LOW_INT;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_MEDIUM_INT = function(this1) {
	return this1.MEDIUM_INT;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_HIGH_INT = function(this1) {
	return this1.HIGH_INT;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_FRAMEBUFFER = function(this1) {
	return this1.FRAMEBUFFER;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RENDERBUFFER = function(this1) {
	return this1.RENDERBUFFER;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RGBA4 = function(this1) {
	return this1.RGBA4;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RGB5_A1 = function(this1) {
	return this1.RGB5_A1;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RGB565 = function(this1) {
	return this1.RGB565;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_DEPTH_COMPONENT16 = function(this1) {
	return this1.DEPTH_COMPONENT16;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_STENCIL_INDEX = function(this1) {
	return this1.STENCIL_INDEX;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_STENCIL_INDEX8 = function(this1) {
	return this1.STENCIL_INDEX8;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_DEPTH_STENCIL = function(this1) {
	return this1.DEPTH_STENCIL;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RENDERBUFFER_WIDTH = function(this1) {
	return this1.RENDERBUFFER_WIDTH;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RENDERBUFFER_HEIGHT = function(this1) {
	return this1.RENDERBUFFER_HEIGHT;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RENDERBUFFER_INTERNAL_FORMAT = function(this1) {
	return this1.RENDERBUFFER_INTERNAL_FORMAT;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RENDERBUFFER_RED_SIZE = function(this1) {
	return this1.RENDERBUFFER_RED_SIZE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RENDERBUFFER_GREEN_SIZE = function(this1) {
	return this1.RENDERBUFFER_GREEN_SIZE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RENDERBUFFER_BLUE_SIZE = function(this1) {
	return this1.RENDERBUFFER_BLUE_SIZE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RENDERBUFFER_ALPHA_SIZE = function(this1) {
	return this1.RENDERBUFFER_ALPHA_SIZE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RENDERBUFFER_DEPTH_SIZE = function(this1) {
	return this1.RENDERBUFFER_DEPTH_SIZE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RENDERBUFFER_STENCIL_SIZE = function(this1) {
	return this1.RENDERBUFFER_STENCIL_SIZE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_COLOR_ATTACHMENT0 = function(this1) {
	return this1.COLOR_ATTACHMENT0;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_DEPTH_ATTACHMENT = function(this1) {
	return this1.DEPTH_ATTACHMENT;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_STENCIL_ATTACHMENT = function(this1) {
	return this1.STENCIL_ATTACHMENT;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_DEPTH_STENCIL_ATTACHMENT = function(this1) {
	return this1.DEPTH_STENCIL_ATTACHMENT;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_NONE = function(this1) {
	return this1.NONE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_FRAMEBUFFER_COMPLETE = function(this1) {
	return this1.FRAMEBUFFER_COMPLETE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = function(this1) {
	return this1.FRAMEBUFFER_INCOMPLETE_ATTACHMENT;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = function(this1) {
	return this1.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = function(this1) {
	return this1.FRAMEBUFFER_INCOMPLETE_DIMENSIONS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_FRAMEBUFFER_UNSUPPORTED = function(this1) {
	return this1.FRAMEBUFFER_UNSUPPORTED;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_FRAMEBUFFER_BINDING = function(this1) {
	return this1.FRAMEBUFFER_BINDING;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RENDERBUFFER_BINDING = function(this1) {
	return this1.RENDERBUFFER_BINDING;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_MAX_RENDERBUFFER_SIZE = function(this1) {
	return this1.MAX_RENDERBUFFER_SIZE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_INVALID_FRAMEBUFFER_OPERATION = function(this1) {
	return this1.INVALID_FRAMEBUFFER_OPERATION;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_UNPACK_FLIP_Y_WEBGL = function(this1) {
	return this1.UNPACK_FLIP_Y_WEBGL;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_UNPACK_PREMULTIPLY_ALPHA_WEBGL = function(this1) {
	return this1.UNPACK_PREMULTIPLY_ALPHA_WEBGL;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_CONTEXT_LOST_WEBGL = function(this1) {
	return this1.CONTEXT_LOST_WEBGL;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_UNPACK_COLORSPACE_CONVERSION_WEBGL = function(this1) {
	return this1.UNPACK_COLORSPACE_CONVERSION_WEBGL;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_BROWSER_DEFAULT_WEBGL = function(this1) {
	return this1.BROWSER_DEFAULT_WEBGL;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_type = function(this1) {
	return this1.type;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_version = function(this1) {
	return this1.version;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_READ_BUFFER = function(this1) {
	return this1.READ_BUFFER;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_UNPACK_ROW_LENGTH = function(this1) {
	return this1.UNPACK_ROW_LENGTH;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_UNPACK_SKIP_ROWS = function(this1) {
	return this1.UNPACK_SKIP_ROWS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_UNPACK_SKIP_PIXELS = function(this1) {
	return this1.UNPACK_SKIP_PIXELS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_PACK_ROW_LENGTH = function(this1) {
	return this1.PACK_ROW_LENGTH;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_PACK_SKIP_ROWS = function(this1) {
	return this1.PACK_SKIP_ROWS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_PACK_SKIP_PIXELS = function(this1) {
	return this1.PACK_SKIP_PIXELS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE_BINDING_3D = function(this1) {
	return this1.TEXTURE_BINDING_3D;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_UNPACK_SKIP_IMAGES = function(this1) {
	return this1.UNPACK_SKIP_IMAGES;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_UNPACK_IMAGE_HEIGHT = function(this1) {
	return this1.UNPACK_IMAGE_HEIGHT;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_MAX_3D_TEXTURE_SIZE = function(this1) {
	return this1.MAX_3D_TEXTURE_SIZE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_MAX_ELEMENTS_VERTICES = function(this1) {
	return this1.MAX_ELEMENTS_VERTICES;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_MAX_ELEMENTS_INDICES = function(this1) {
	return this1.MAX_ELEMENTS_INDICES;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_MAX_TEXTURE_LOD_BIAS = function(this1) {
	return this1.MAX_TEXTURE_LOD_BIAS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_MAX_FRAGMENT_UNIFORM_COMPONENTS = function(this1) {
	return this1.MAX_FRAGMENT_UNIFORM_COMPONENTS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_MAX_VERTEX_UNIFORM_COMPONENTS = function(this1) {
	return this1.MAX_VERTEX_UNIFORM_COMPONENTS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_MAX_ARRAY_TEXTURE_LAYERS = function(this1) {
	return this1.MAX_ARRAY_TEXTURE_LAYERS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_MIN_PROGRAM_TEXEL_OFFSET = function(this1) {
	return this1.MIN_PROGRAM_TEXEL_OFFSET;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_MAX_PROGRAM_TEXEL_OFFSET = function(this1) {
	return this1.MAX_PROGRAM_TEXEL_OFFSET;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_MAX_VARYING_COMPONENTS = function(this1) {
	return this1.MAX_VARYING_COMPONENTS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_FRAGMENT_SHADER_DERIVATIVE_HINT = function(this1) {
	return this1.FRAGMENT_SHADER_DERIVATIVE_HINT;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RASTERIZER_DISCARD = function(this1) {
	return this1.RASTERIZER_DISCARD;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_VERTEX_ARRAY_BINDING = function(this1) {
	return this1.VERTEX_ARRAY_BINDING;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_MAX_VERTEX_OUTPUT_COMPONENTS = function(this1) {
	return this1.MAX_VERTEX_OUTPUT_COMPONENTS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_MAX_FRAGMENT_INPUT_COMPONENTS = function(this1) {
	return this1.MAX_FRAGMENT_INPUT_COMPONENTS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_MAX_SERVER_WAIT_TIMEOUT = function(this1) {
	return this1.MAX_SERVER_WAIT_TIMEOUT;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_MAX_ELEMENT_INDEX = function(this1) {
	return this1.MAX_ELEMENT_INDEX;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RED = function(this1) {
	return this1.RED;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RGB8 = function(this1) {
	return this1.RGB8;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RGBA8 = function(this1) {
	return this1.RGBA8;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RGB10_A2 = function(this1) {
	return this1.RGB10_A2;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE_3D = function(this1) {
	return this1.TEXTURE_3D;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE_WRAP_R = function(this1) {
	return this1.TEXTURE_WRAP_R;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE_MIN_LOD = function(this1) {
	return this1.TEXTURE_MIN_LOD;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE_MAX_LOD = function(this1) {
	return this1.TEXTURE_MAX_LOD;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE_BASE_LEVEL = function(this1) {
	return this1.TEXTURE_BASE_LEVEL;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE_MAX_LEVEL = function(this1) {
	return this1.TEXTURE_MAX_LEVEL;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE_COMPARE_MODE = function(this1) {
	return this1.TEXTURE_COMPARE_MODE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE_COMPARE_FUNC = function(this1) {
	return this1.TEXTURE_COMPARE_FUNC;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_SRGB = function(this1) {
	return this1.SRGB;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_SRGB8 = function(this1) {
	return this1.SRGB8;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_SRGB8_ALPHA8 = function(this1) {
	return this1.SRGB8_ALPHA8;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_COMPARE_REF_TO_TEXTURE = function(this1) {
	return this1.COMPARE_REF_TO_TEXTURE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RGBA32F = function(this1) {
	return this1.RGBA32F;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RGB32F = function(this1) {
	return this1.RGB32F;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RGBA16F = function(this1) {
	return this1.RGBA16F;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RGB16F = function(this1) {
	return this1.RGB16F;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE_2D_ARRAY = function(this1) {
	return this1.TEXTURE_2D_ARRAY;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE_BINDING_2D_ARRAY = function(this1) {
	return this1.TEXTURE_BINDING_2D_ARRAY;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_R11F_G11F_B10F = function(this1) {
	return this1.R11F_G11F_B10F;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RGB9_E5 = function(this1) {
	return this1.RGB9_E5;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RGBA32UI = function(this1) {
	return this1.RGBA32UI;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RGB32UI = function(this1) {
	return this1.RGB32UI;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RGBA16UI = function(this1) {
	return this1.RGBA16UI;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RGB16UI = function(this1) {
	return this1.RGB16UI;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RGBA8UI = function(this1) {
	return this1.RGBA8UI;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RGB8UI = function(this1) {
	return this1.RGB8UI;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RGBA32I = function(this1) {
	return this1.RGBA32I;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RGB32I = function(this1) {
	return this1.RGB32I;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RGBA16I = function(this1) {
	return this1.RGBA16I;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RGB16I = function(this1) {
	return this1.RGB16I;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RGBA8I = function(this1) {
	return this1.RGBA8I;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RGB8I = function(this1) {
	return this1.RGB8I;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RED_INTEGER = function(this1) {
	return this1.RED_INTEGER;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RGB_INTEGER = function(this1) {
	return this1.RGB_INTEGER;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RGBA_INTEGER = function(this1) {
	return this1.RGBA_INTEGER;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_R8 = function(this1) {
	return this1.R8;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RG8 = function(this1) {
	return this1.RG8;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_R16F = function(this1) {
	return this1.R16F;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_R32F = function(this1) {
	return this1.R32F;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RG16F = function(this1) {
	return this1.RG16F;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RG32F = function(this1) {
	return this1.RG32F;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_R8I = function(this1) {
	return this1.R8I;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_R8UI = function(this1) {
	return this1.R8UI;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_R16I = function(this1) {
	return this1.R16I;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_R16UI = function(this1) {
	return this1.R16UI;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_R32I = function(this1) {
	return this1.R32I;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_R32UI = function(this1) {
	return this1.R32UI;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RG8I = function(this1) {
	return this1.RG8I;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RG8UI = function(this1) {
	return this1.RG8UI;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RG16I = function(this1) {
	return this1.RG16I;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RG16UI = function(this1) {
	return this1.RG16UI;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RG32I = function(this1) {
	return this1.RG32I;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RG32UI = function(this1) {
	return this1.RG32UI;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_R8_SNORM = function(this1) {
	return this1.R8_SNORM;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RG8_SNORM = function(this1) {
	return this1.RG8_SNORM;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RGB8_SNORM = function(this1) {
	return this1.RGB8_SNORM;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RGBA8_SNORM = function(this1) {
	return this1.RGBA8_SNORM;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RGB10_A2UI = function(this1) {
	return this1.RGB10_A2UI;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE_IMMUTABLE_FORMAT = function(this1) {
	return this1.TEXTURE_IMMUTABLE_FORMAT;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TEXTURE_IMMUTABLE_LEVELS = function(this1) {
	return this1.TEXTURE_IMMUTABLE_LEVELS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_UNSIGNED_INT_2_10_10_10_REV = function(this1) {
	return this1.UNSIGNED_INT_2_10_10_10_REV;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_UNSIGNED_INT_10F_11F_11F_REV = function(this1) {
	return this1.UNSIGNED_INT_10F_11F_11F_REV;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_UNSIGNED_INT_5_9_9_9_REV = function(this1) {
	return this1.UNSIGNED_INT_5_9_9_9_REV;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_FLOAT_32_UNSIGNED_INT_24_8_REV = function(this1) {
	return this1.FLOAT_32_UNSIGNED_INT_24_8_REV;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_UNSIGNED_INT_24_8 = function(this1) {
	return this1.UNSIGNED_INT_24_8;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_HALF_FLOAT = function(this1) {
	return this1.HALF_FLOAT;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RG = function(this1) {
	return this1.RG;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RG_INTEGER = function(this1) {
	return this1.RG_INTEGER;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_INT_2_10_10_10_REV = function(this1) {
	return this1.INT_2_10_10_10_REV;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_CURRENT_QUERY = function(this1) {
	return this1.CURRENT_QUERY;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_QUERY_RESULT = function(this1) {
	return this1.QUERY_RESULT;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_QUERY_RESULT_AVAILABLE = function(this1) {
	return this1.QUERY_RESULT_AVAILABLE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_ANY_SAMPLES_PASSED = function(this1) {
	return this1.ANY_SAMPLES_PASSED;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_ANY_SAMPLES_PASSED_CONSERVATIVE = function(this1) {
	return this1.ANY_SAMPLES_PASSED_CONSERVATIVE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_MAX_DRAW_BUFFERS = function(this1) {
	return this1.MAX_DRAW_BUFFERS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_DRAW_BUFFER0 = function(this1) {
	return this1.DRAW_BUFFER0;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_DRAW_BUFFER1 = function(this1) {
	return this1.DRAW_BUFFER1;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_DRAW_BUFFER2 = function(this1) {
	return this1.DRAW_BUFFER2;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_DRAW_BUFFER3 = function(this1) {
	return this1.DRAW_BUFFER3;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_DRAW_BUFFER4 = function(this1) {
	return this1.DRAW_BUFFER4;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_DRAW_BUFFER5 = function(this1) {
	return this1.DRAW_BUFFER5;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_DRAW_BUFFER6 = function(this1) {
	return this1.DRAW_BUFFER6;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_DRAW_BUFFER7 = function(this1) {
	return this1.DRAW_BUFFER7;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_DRAW_BUFFER8 = function(this1) {
	return this1.DRAW_BUFFER8;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_DRAW_BUFFER9 = function(this1) {
	return this1.DRAW_BUFFER9;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_DRAW_BUFFER10 = function(this1) {
	return this1.DRAW_BUFFER10;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_DRAW_BUFFER11 = function(this1) {
	return this1.DRAW_BUFFER11;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_DRAW_BUFFER12 = function(this1) {
	return this1.DRAW_BUFFER12;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_DRAW_BUFFER13 = function(this1) {
	return this1.DRAW_BUFFER13;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_DRAW_BUFFER14 = function(this1) {
	return this1.DRAW_BUFFER14;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_DRAW_BUFFER15 = function(this1) {
	return this1.DRAW_BUFFER15;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_MAX_COLOR_ATTACHMENTS = function(this1) {
	return this1.MAX_COLOR_ATTACHMENTS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_COLOR_ATTACHMENT1 = function(this1) {
	return this1.COLOR_ATTACHMENT1;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_COLOR_ATTACHMENT2 = function(this1) {
	return this1.COLOR_ATTACHMENT2;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_COLOR_ATTACHMENT3 = function(this1) {
	return this1.COLOR_ATTACHMENT3;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_COLOR_ATTACHMENT4 = function(this1) {
	return this1.COLOR_ATTACHMENT4;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_COLOR_ATTACHMENT5 = function(this1) {
	return this1.COLOR_ATTACHMENT5;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_COLOR_ATTACHMENT6 = function(this1) {
	return this1.COLOR_ATTACHMENT6;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_COLOR_ATTACHMENT7 = function(this1) {
	return this1.COLOR_ATTACHMENT7;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_COLOR_ATTACHMENT8 = function(this1) {
	return this1.COLOR_ATTACHMENT8;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_COLOR_ATTACHMENT9 = function(this1) {
	return this1.COLOR_ATTACHMENT9;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_COLOR_ATTACHMENT10 = function(this1) {
	return this1.COLOR_ATTACHMENT10;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_COLOR_ATTACHMENT11 = function(this1) {
	return this1.COLOR_ATTACHMENT11;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_COLOR_ATTACHMENT12 = function(this1) {
	return this1.COLOR_ATTACHMENT12;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_COLOR_ATTACHMENT13 = function(this1) {
	return this1.COLOR_ATTACHMENT13;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_COLOR_ATTACHMENT14 = function(this1) {
	return this1.COLOR_ATTACHMENT14;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_COLOR_ATTACHMENT15 = function(this1) {
	return this1.COLOR_ATTACHMENT15;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_SAMPLER_3D = function(this1) {
	return this1.SAMPLER_3D;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_SAMPLER_2D_SHADOW = function(this1) {
	return this1.SAMPLER_2D_SHADOW;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_SAMPLER_2D_ARRAY = function(this1) {
	return this1.SAMPLER_2D_ARRAY;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_SAMPLER_2D_ARRAY_SHADOW = function(this1) {
	return this1.SAMPLER_2D_ARRAY_SHADOW;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_SAMPLER_CUBE_SHADOW = function(this1) {
	return this1.SAMPLER_CUBE_SHADOW;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_INT_SAMPLER_2D = function(this1) {
	return this1.INT_SAMPLER_2D;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_INT_SAMPLER_3D = function(this1) {
	return this1.INT_SAMPLER_3D;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_INT_SAMPLER_CUBE = function(this1) {
	return this1.INT_SAMPLER_CUBE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_INT_SAMPLER_2D_ARRAY = function(this1) {
	return this1.INT_SAMPLER_2D_ARRAY;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_UNSIGNED_INT_SAMPLER_2D = function(this1) {
	return this1.UNSIGNED_INT_SAMPLER_2D;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_UNSIGNED_INT_SAMPLER_3D = function(this1) {
	return this1.UNSIGNED_INT_SAMPLER_3D;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_UNSIGNED_INT_SAMPLER_CUBE = function(this1) {
	return this1.UNSIGNED_INT_SAMPLER_CUBE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_UNSIGNED_INT_SAMPLER_2D_ARRAY = function(this1) {
	return this1.UNSIGNED_INT_SAMPLER_2D_ARRAY;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_MAX_SAMPLES = function(this1) {
	return this1.MAX_SAMPLES;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_SAMPLER_BINDING = function(this1) {
	return this1.SAMPLER_BINDING;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_PIXEL_PACK_BUFFER = function(this1) {
	return this1.PIXEL_PACK_BUFFER;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_PIXEL_UNPACK_BUFFER = function(this1) {
	return this1.PIXEL_UNPACK_BUFFER;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_PIXEL_PACK_BUFFER_BINDING = function(this1) {
	return this1.PIXEL_PACK_BUFFER_BINDING;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_PIXEL_UNPACK_BUFFER_BINDING = function(this1) {
	return this1.PIXEL_UNPACK_BUFFER_BINDING;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_COPY_READ_BUFFER = function(this1) {
	return this1.COPY_READ_BUFFER;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_COPY_WRITE_BUFFER = function(this1) {
	return this1.COPY_WRITE_BUFFER;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_COPY_READ_BUFFER_BINDING = function(this1) {
	return this1.COPY_READ_BUFFER_BINDING;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_COPY_WRITE_BUFFER_BINDING = function(this1) {
	return this1.COPY_WRITE_BUFFER_BINDING;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_FLOAT_MAT2x3 = function(this1) {
	return this1.FLOAT_MAT2x3;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_FLOAT_MAT2x4 = function(this1) {
	return this1.FLOAT_MAT2x4;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_FLOAT_MAT3x2 = function(this1) {
	return this1.FLOAT_MAT3x2;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_FLOAT_MAT3x4 = function(this1) {
	return this1.FLOAT_MAT3x4;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_FLOAT_MAT4x2 = function(this1) {
	return this1.FLOAT_MAT4x2;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_FLOAT_MAT4x3 = function(this1) {
	return this1.FLOAT_MAT4x3;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_UNSIGNED_INT_VEC2 = function(this1) {
	return this1.UNSIGNED_INT_VEC2;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_UNSIGNED_INT_VEC3 = function(this1) {
	return this1.UNSIGNED_INT_VEC3;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_UNSIGNED_INT_VEC4 = function(this1) {
	return this1.UNSIGNED_INT_VEC4;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_UNSIGNED_NORMALIZED = function(this1) {
	return this1.UNSIGNED_NORMALIZED;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_SIGNED_NORMALIZED = function(this1) {
	return this1.SIGNED_NORMALIZED;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_VERTEX_ATTRIB_ARRAY_INTEGER = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_INTEGER;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_VERTEX_ATTRIB_ARRAY_DIVISOR = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_DIVISOR;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TRANSFORM_FEEDBACK_BUFFER_MODE = function(this1) {
	return this1.TRANSFORM_FEEDBACK_BUFFER_MODE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = function(this1) {
	return this1.MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TRANSFORM_FEEDBACK_VARYINGS = function(this1) {
	return this1.TRANSFORM_FEEDBACK_VARYINGS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TRANSFORM_FEEDBACK_BUFFER_START = function(this1) {
	return this1.TRANSFORM_FEEDBACK_BUFFER_START;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TRANSFORM_FEEDBACK_BUFFER_SIZE = function(this1) {
	return this1.TRANSFORM_FEEDBACK_BUFFER_SIZE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = function(this1) {
	return this1.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = function(this1) {
	return this1.MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = function(this1) {
	return this1.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_INTERLEAVED_ATTRIBS = function(this1) {
	return this1.INTERLEAVED_ATTRIBS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_SEPARATE_ATTRIBS = function(this1) {
	return this1.SEPARATE_ATTRIBS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TRANSFORM_FEEDBACK_BUFFER = function(this1) {
	return this1.TRANSFORM_FEEDBACK_BUFFER;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TRANSFORM_FEEDBACK_BUFFER_BINDING = function(this1) {
	return this1.TRANSFORM_FEEDBACK_BUFFER_BINDING;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TRANSFORM_FEEDBACK = function(this1) {
	return this1.TRANSFORM_FEEDBACK;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TRANSFORM_FEEDBACK_PAUSED = function(this1) {
	return this1.TRANSFORM_FEEDBACK_PAUSED;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TRANSFORM_FEEDBACK_ACTIVE = function(this1) {
	return this1.TRANSFORM_FEEDBACK_ACTIVE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TRANSFORM_FEEDBACK_BINDING = function(this1) {
	return this1.TRANSFORM_FEEDBACK_BINDING;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_FRAMEBUFFER_ATTACHMENT_RED_SIZE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_RED_SIZE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_FRAMEBUFFER_DEFAULT = function(this1) {
	return this1.FRAMEBUFFER_DEFAULT;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_DEPTH24_STENCIL8 = function(this1) {
	return this1.DEPTH24_STENCIL8;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_DRAW_FRAMEBUFFER_BINDING = function(this1) {
	return this1.DRAW_FRAMEBUFFER_BINDING;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_READ_FRAMEBUFFER = function(this1) {
	return this1.READ_FRAMEBUFFER;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_DRAW_FRAMEBUFFER = function(this1) {
	return this1.DRAW_FRAMEBUFFER;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_READ_FRAMEBUFFER_BINDING = function(this1) {
	return this1.READ_FRAMEBUFFER_BINDING;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_RENDERBUFFER_SAMPLES = function(this1) {
	return this1.RENDERBUFFER_SAMPLES;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = function(this1) {
	return this1.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_UNIFORM_BUFFER = function(this1) {
	return this1.UNIFORM_BUFFER;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_UNIFORM_BUFFER_BINDING = function(this1) {
	return this1.UNIFORM_BUFFER_BINDING;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_UNIFORM_BUFFER_START = function(this1) {
	return this1.UNIFORM_BUFFER_START;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_UNIFORM_BUFFER_SIZE = function(this1) {
	return this1.UNIFORM_BUFFER_SIZE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_MAX_VERTEX_UNIFORM_BLOCKS = function(this1) {
	return this1.MAX_VERTEX_UNIFORM_BLOCKS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_MAX_FRAGMENT_UNIFORM_BLOCKS = function(this1) {
	return this1.MAX_FRAGMENT_UNIFORM_BLOCKS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_MAX_COMBINED_UNIFORM_BLOCKS = function(this1) {
	return this1.MAX_COMBINED_UNIFORM_BLOCKS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_MAX_UNIFORM_BUFFER_BINDINGS = function(this1) {
	return this1.MAX_UNIFORM_BUFFER_BINDINGS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_MAX_UNIFORM_BLOCK_SIZE = function(this1) {
	return this1.MAX_UNIFORM_BLOCK_SIZE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = function(this1) {
	return this1.MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = function(this1) {
	return this1.MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_UNIFORM_BUFFER_OFFSET_ALIGNMENT = function(this1) {
	return this1.UNIFORM_BUFFER_OFFSET_ALIGNMENT;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_ACTIVE_UNIFORM_BLOCKS = function(this1) {
	return this1.ACTIVE_UNIFORM_BLOCKS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_UNIFORM_TYPE = function(this1) {
	return this1.UNIFORM_TYPE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_UNIFORM_SIZE = function(this1) {
	return this1.UNIFORM_SIZE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_UNIFORM_BLOCK_INDEX = function(this1) {
	return this1.UNIFORM_BLOCK_INDEX;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_UNIFORM_OFFSET = function(this1) {
	return this1.UNIFORM_OFFSET;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_UNIFORM_ARRAY_STRIDE = function(this1) {
	return this1.UNIFORM_ARRAY_STRIDE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_UNIFORM_MATRIX_STRIDE = function(this1) {
	return this1.UNIFORM_MATRIX_STRIDE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_UNIFORM_IS_ROW_MAJOR = function(this1) {
	return this1.UNIFORM_IS_ROW_MAJOR;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_UNIFORM_BLOCK_BINDING = function(this1) {
	return this1.UNIFORM_BLOCK_BINDING;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_UNIFORM_BLOCK_DATA_SIZE = function(this1) {
	return this1.UNIFORM_BLOCK_DATA_SIZE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_UNIFORM_BLOCK_ACTIVE_UNIFORMS = function(this1) {
	return this1.UNIFORM_BLOCK_ACTIVE_UNIFORMS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = function(this1) {
	return this1.UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = function(this1) {
	return this1.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = function(this1) {
	return this1.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_OBJECT_TYPE = function(this1) {
	return this1.OBJECT_TYPE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_SYNC_CONDITION = function(this1) {
	return this1.SYNC_CONDITION;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_SYNC_STATUS = function(this1) {
	return this1.SYNC_STATUS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_SYNC_FLAGS = function(this1) {
	return this1.SYNC_FLAGS;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_SYNC_FENCE = function(this1) {
	return this1.SYNC_FENCE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_SYNC_GPU_COMMANDS_COMPLETE = function(this1) {
	return this1.SYNC_GPU_COMMANDS_COMPLETE;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_UNSIGNALED = function(this1) {
	return this1.UNSIGNALED;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_SIGNALED = function(this1) {
	return this1.SIGNALED;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_ALREADY_SIGNALED = function(this1) {
	return this1.ALREADY_SIGNALED;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TIMEOUT_EXPIRED = function(this1) {
	return this1.TIMEOUT_EXPIRED;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_CONDITION_SATISFIED = function(this1) {
	return this1.CONDITION_SATISFIED;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_WAIT_FAILED = function(this1) {
	return this1.WAIT_FAILED;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_SYNC_FLUSH_COMMANDS_BIT = function(this1) {
	return this1.SYNC_FLUSH_COMMANDS_BIT;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_COLOR = function(this1) {
	return this1.COLOR;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_DEPTH = function(this1) {
	return this1.DEPTH;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_STENCIL = function(this1) {
	return this1.STENCIL;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_MIN = function(this1) {
	return this1.MIN;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_MAX = function(this1) {
	return this1.MAX;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_DEPTH_COMPONENT24 = function(this1) {
	return this1.DEPTH_COMPONENT24;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_STREAM_READ = function(this1) {
	return this1.STREAM_READ;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_STREAM_COPY = function(this1) {
	return this1.STREAM_COPY;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_STATIC_READ = function(this1) {
	return this1.STATIC_READ;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_STATIC_COPY = function(this1) {
	return this1.STATIC_COPY;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_DYNAMIC_READ = function(this1) {
	return this1.DYNAMIC_READ;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_DYNAMIC_COPY = function(this1) {
	return this1.DYNAMIC_COPY;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_DEPTH_COMPONENT32F = function(this1) {
	return this1.DEPTH_COMPONENT32F;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_DEPTH32F_STENCIL8 = function(this1) {
	return this1.DEPTH32F_STENCIL8;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_INVALID_INDEX = function(this1) {
	return this1.INVALID_INDEX;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_TIMEOUT_IGNORED = function(this1) {
	return this1.TIMEOUT_IGNORED;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.get_MAX_CLIENT_WAIT_TIMEOUT_WEBGL = function(this1) {
	return this1.MAX_CLIENT_WAIT_TIMEOUT_WEBGL;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.activeTexture = function(this1,texture) {
	this1.activeTexture(texture);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.attachShader = function(this1,program,shader) {
	this1.attachShader(program,shader);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.beginQuery = function(this1,target,query) {
	this1.beginQuery(target,query);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.beginTransformFeedback = function(this1,primitiveNode) {
	this1.beginTransformFeedback(primitiveNode);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.bindAttribLocation = function(this1,program,index,name) {
	this1.bindAttribLocation(program,index,name);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.bindBuffer = function(this1,target,buffer) {
	this1.bindBuffer(target,buffer);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.bindBufferBase = function(this1,target,index,buffer) {
	this1.bindBufferBase(target,index,buffer);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.bindBufferRange = function(this1,target,index,buffer,offset,size) {
	this1.bindBufferRange(target,index,buffer,offset,size);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.bindFramebuffer = function(this1,target,framebuffer) {
	this1.bindFramebuffer(target,framebuffer);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.bindRenderbuffer = function(this1,target,renderbuffer) {
	this1.bindRenderbuffer(target,renderbuffer);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.bindSampler = function(this1,unit,sampler) {
	this1.bindSampler(unit,sampler);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.bindTexture = function(this1,target,texture) {
	this1.bindTexture(target,texture);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.bindTransformFeedback = function(this1,target,transformFeedback) {
	this1.bindTransformFeedback(target,transformFeedback);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.bindVertexArray = function(this1,vertexArray) {
	this1.bindVertexArray(vertexArray);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.blendColor = function(this1,red,green,blue,alpha) {
	this1.blendColor(red,green,blue,alpha);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.blendEquation = function(this1,mode) {
	this1.blendEquation(mode);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.blendEquationSeparate = function(this1,modeRGB,modeAlpha) {
	this1.blendEquationSeparate(modeRGB,modeAlpha);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.blendFunc = function(this1,sfactor,dfactor) {
	this1.blendFunc(sfactor,dfactor);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.blendFuncSeparate = function(this1,srcRGB,dstRGB,srcAlpha,dstAlpha) {
	this1.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.blitFramebuffer = function(this1,srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter) {
	this1.blitFramebuffer(srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.bufferData = function(this1,target,size,data,usage) {
	this1.bufferData(target,size,data,usage);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.bufferSubData = function(this1,target,offset,size,data) {
	this1.bufferSubData(target,offset,size,data);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.checkFramebufferStatus = function(this1,target) {
	return this1.checkFramebufferStatus(target);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.clear = function(this1,mask) {
	this1.clear(mask);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.clearBufferfi = function(this1,buffer,drawbuffer,depth,stencil) {
	this1.clearBufferfi(buffer,drawbuffer,depth,stencil);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.clearBufferfv = function(this1,buffer,drawbuffer,value) {
	this1.clearBufferfv(buffer,drawbuffer,value);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.clearBufferiv = function(this1,buffer,drawbuffer,value) {
	this1.clearBufferiv(buffer,drawbuffer,value);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.clearBufferuiv = function(this1,buffer,drawbuffer,value) {
	this1.clearBufferuiv(buffer,drawbuffer,value);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.clearColor = function(this1,red,green,blue,alpha) {
	this1.clearColor(red,green,blue,alpha);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.clearDepthf = function(this1,depth) {
	this1.clearDepthf(depth);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.clearStencil = function(this1,s) {
	this1.clearStencil(s);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.clientWaitSync = function(this1,sync,flags,timeout) {
	return this1.clientWaitSync(sync,flags,timeout);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.colorMask = function(this1,red,green,blue,alpha) {
	this1.colorMask(red,green,blue,alpha);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.compileShader = function(this1,shader) {
	this1.compileShader(shader);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.compressedTexImage2D = function(this1,target,level,internalformat,width,height,border,imageSize,data) {
	this1.compressedTexImage2D(target,level,internalformat,width,height,border,imageSize,data);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.compressedTexImage3D = function(this1,target,level,internalformat,width,height,depth,border,imageSize,data) {
	this1.compressedTexImage3D(target,level,internalformat,width,height,depth,border,imageSize,data);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.compressedTexSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,imageSize,data) {
	this1.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,imageSize,data);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.compressedTexSubImage3D = function(this1,target,level,xoffset,yoffset,zoffset,width,height,depth,format,imageSize,data) {
	this1.compressedTexSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,imageSize,data);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.copyBufferSubData = function(this1,readTarget,writeTarget,readOffset,writeOffset,size) {
	this1.copyBufferSubData(readTarget,writeTarget,readOffset,writeOffset,size);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.copyTexImage2D = function(this1,target,level,internalformat,x,y,width,height,border) {
	this1.copyTexImage2D(target,level,internalformat,x,y,width,height,border);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.copyTexSubImage2D = function(this1,target,level,xoffset,yoffset,x,y,width,height) {
	this1.copyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.copyTexSubImage3D = function(this1,target,level,xoffset,yoffset,zoffset,x,y,width,height) {
	this1.copyTexSubImage3D(target,level,xoffset,yoffset,zoffset,x,y,width,height);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.createBuffer = function(this1) {
	return this1.createBuffer();
};
$hx_$exports_lime_graphics_opengl_GLES3Context.createFramebuffer = function(this1) {
	return this1.createFramebuffer();
};
$hx_$exports_lime_graphics_opengl_GLES3Context.createProgram = function(this1) {
	return this1.createProgram();
};
$hx_$exports_lime_graphics_opengl_GLES3Context.createQuery = function(this1) {
	return this1.createQuery();
};
$hx_$exports_lime_graphics_opengl_GLES3Context.createRenderbuffer = function(this1) {
	return this1.createRenderbuffer();
};
$hx_$exports_lime_graphics_opengl_GLES3Context.createSampler = function(this1) {
	return this1.createSampler();
};
$hx_$exports_lime_graphics_opengl_GLES3Context.createShader = function(this1,type) {
	return this1.createShader(type);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.createTexture = function(this1) {
	return this1.createTexture();
};
$hx_$exports_lime_graphics_opengl_GLES3Context.createTransformFeedback = function(this1) {
	return this1.createTransformFeedback();
};
$hx_$exports_lime_graphics_opengl_GLES3Context.createVertexArray = function(this1) {
	return this1.createVertexArray();
};
$hx_$exports_lime_graphics_opengl_GLES3Context.cullFace = function(this1,mode) {
	this1.cullFace(mode);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.deleteBuffer = function(this1,buffer) {
	this1.deleteBuffer(buffer);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.deleteFramebuffer = function(this1,framebuffer) {
	this1.deleteFramebuffer(framebuffer);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.deleteProgram = function(this1,program) {
	this1.deleteProgram(program);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.deleteQuery = function(this1,query) {
	this1.deleteQuery(query);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.deleteRenderbuffer = function(this1,renderbuffer) {
	this1.deleteRenderbuffer(renderbuffer);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.deleteSampler = function(this1,sampler) {
	this1.deleteSampler(sampler);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.deleteShader = function(this1,shader) {
	this1.deleteShader(shader);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.deleteSync = function(this1,sync) {
	this1.deleteSync(sync);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.deleteTexture = function(this1,texture) {
	this1.deleteTexture(texture);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.deleteTransformFeedback = function(this1,transformFeedback) {
	this1.deleteTransformFeedback(transformFeedback);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.deleteVertexArray = function(this1,vertexArray) {
	this1.deleteVertexArray(vertexArray);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.depthFunc = function(this1,func) {
	this1.depthFunc(func);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.depthMask = function(this1,flag) {
	this1.depthMask(flag);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.depthRangef = function(this1,zNear,zFar) {
	this1.depthRangef(zNear,zFar);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.detachShader = function(this1,program,shader) {
	this1.detachShader(program,shader);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.disable = function(this1,cap) {
	this1.disable(cap);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.disableVertexAttribArray = function(this1,index) {
	this1.disableVertexAttribArray(index);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.drawArrays = function(this1,mode,first,count) {
	this1.drawArrays(mode,first,count);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.drawArraysInstanced = function(this1,mode,first,count,instanceCount) {
	this1.drawArraysInstanced(mode,first,count,instanceCount);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.drawBuffers = function(this1,buffers) {
	this1.drawBuffers(buffers);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.drawElements = function(this1,mode,count,type,offset) {
	this1.drawElements(mode,count,type,offset);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.drawElementsInstanced = function(this1,mode,count,type,offset,instanceCount) {
	this1.drawElementsInstanced(mode,count,type,offset,instanceCount);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.drawRangeElements = function(this1,mode,start,end,count,type,offset) {
	this1.drawRangeElements(mode,start,end,count,type,offset);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.enable = function(this1,cap) {
	this1.enable(cap);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.enableVertexAttribArray = function(this1,index) {
	this1.enableVertexAttribArray(index);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.endQuery = function(this1,target) {
	this1.endQuery(target);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.endTransformFeedback = function(this1) {
	this1.endTransformFeedback();
};
$hx_$exports_lime_graphics_opengl_GLES3Context.fenceSync = function(this1,condition,flags) {
	return this1.fenceSync(condition,flags);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.finish = function(this1) {
	this1.finish();
};
$hx_$exports_lime_graphics_opengl_GLES3Context.flush = function(this1) {
	this1.flush();
};
$hx_$exports_lime_graphics_opengl_GLES3Context.framebufferRenderbuffer = function(this1,target,attachment,renderbuffertarget,renderbuffer) {
	this1.framebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.framebufferTexture2D = function(this1,target,attachment,textarget,texture,level) {
	this1.framebufferTexture2D(target,attachment,textarget,texture,level);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.framebufferTextureLayer = function(this1,target,attachment,texture,level,layer) {
	this1.framebufferTextureLayer(target,attachment,texture,level,layer);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.frontFace = function(this1,mode) {
	this1.frontFace(mode);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.genBuffers = function(this1,n,buffers) {
	if(buffers == null) {
		buffers = [];
	}
	var _g1 = 0;
	var _g = n;
	while(_g1 < _g) {
		var i = _g1++;
		buffers[i] = this1.createBuffer();
	}
	return buffers;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.generateMipmap = function(this1,target) {
	this1.generateMipmap(target);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.genFramebuffers = function(this1,n,framebuffers) {
	if(framebuffers == null) {
		framebuffers = [];
	}
	var _g1 = 0;
	var _g = n;
	while(_g1 < _g) {
		var i = _g1++;
		framebuffers[i] = this1.createFramebuffer();
	}
	return framebuffers;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.genQueries = function(this1,n,queries) {
	if(queries == null) {
		queries = [];
	}
	var _g1 = 0;
	var _g = n;
	while(_g1 < _g) {
		var i = _g1++;
		queries[i] = this1.createQuery();
	}
	return queries;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.genRenderbuffers = function(this1,n,renderbuffers) {
	if(renderbuffers == null) {
		renderbuffers = [];
	}
	var _g1 = 0;
	var _g = n;
	while(_g1 < _g) {
		var i = _g1++;
		renderbuffers[i] = this1.createRenderbuffer();
	}
	return renderbuffers;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.genSamplers = function(this1,n,samplers) {
	if(samplers == null) {
		samplers = [];
	}
	var _g1 = 0;
	var _g = n;
	while(_g1 < _g) {
		var i = _g1++;
		samplers[i] = this1.createSampler();
	}
	return samplers;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.genTextures = function(this1,n,textures) {
	if(textures == null) {
		textures = [];
	}
	var _g1 = 0;
	var _g = n;
	while(_g1 < _g) {
		var i = _g1++;
		textures[i] = this1.createTexture();
	}
	return textures;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.genTransformFeedbacks = function(this1,n,transformFeedbacks) {
	if(transformFeedbacks == null) {
		transformFeedbacks = [];
	}
	var _g1 = 0;
	var _g = n;
	while(_g1 < _g) {
		var i = _g1++;
		transformFeedbacks[i] = this1.createTransformFeedback();
	}
	return transformFeedbacks;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getActiveAttrib = function(this1,program,index) {
	return this1.getActiveAttrib(program,index);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getActiveUniform = function(this1,program,index) {
	return this1.getActiveUniform(program,index);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getActiveUniformBlocki = function(this1,program,uniformBlockIndex,pname) {
	return this1.getActiveUniformBlocki(program,uniformBlockIndex,pname);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getActiveUniformBlockiv = function(this1,program,uniformBlockIndex,pname,params) {
	this1.getActiveUniformBlockiv(program,uniformBlockIndex,pname,params);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getActiveUniformBlockName = function(this1,program,uniformBlockIndex) {
	return this1.getActiveUniformBlockName(program,uniformBlockIndex);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getActiveUniformsiv = function(this1,program,uniformIndices,pname,params) {
	this1.getActiveUniformsiv(program,uniformIndices,pname,params);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getAttachedShaders = function(this1,program) {
	return this1.getAttachedShaders(program);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getAttribLocation = function(this1,program,name) {
	return this1.getAttribLocation(program,name);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getBoolean = function(this1,pname) {
	return this1.getBoolean(pname);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getBooleanv = function(this1,pname,params) {
	this1.getBooleanv(pname,params);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getBufferParameteri = function(this1,target,pname) {
	return this1.getBufferParameteri(target,pname);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getBufferParameteri64v = function(this1,target,pname,params) {
	this1.getBufferParameteri64v(target,pname,params);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getBufferParameteriv = function(this1,target,pname,params) {
	this1.getBufferParameteriv(target,pname,params);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getBufferPointerv = function(this1,target,pname) {
	return this1.getBufferPointerv(target,pname);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getError = function(this1) {
	return this1.getError();
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getFloat = function(this1,pname) {
	return this1.getFloat(pname);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getFloatv = function(this1,pname,params) {
	this1.getFloatv(pname,params);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getExtension = function(this1,name) {
	return this1.getExtension(name);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getFragDataLocation = function(this1,program,name) {
	return this1.getFragDataLocation(program,name);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getFramebufferAttachmentParameteri = function(this1,target,attachment,pname) {
	return this1.getFramebufferAttachmentParameteri(target,attachment,pname);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getFramebufferAttachmentParameteriv = function(this1,target,attachment,pname,params) {
	this1.getFramebufferAttachmentParameteriv(target,attachment,pname,params);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getInteger = function(this1,pname) {
	return this1.getInteger(pname);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getInteger64 = function(this1,pname) {
	return this1.getInteger64(pname);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getInteger64i = function(this1,pname) {
	return this1.getInteger64(pname);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getInteger64i_v = function(this1,pname,index,params) {
	this1.getInteger64i_v(pname,index,params);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getInteger64v = function(this1,pname,params) {
	this1.getInteger64v(pname,params);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getIntegeri_v = function(this1,pname,index,params) {
	this1.getIntegeri_v(pname,index,params);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getIntegerv = function(this1,pname,params) {
	this1.getIntegerv(pname,params);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getInternalformati = function(this1,target,internalformat,pname) {
	return this1.getInternalformatParameter(target,internalformat,pname);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getInternalformativ = function(this1,target,internalformat,pname,bufSize,params) {
	this1.getInternalformativ(target,internalformat,pname,bufSize,params);
	return;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getProgramBinary = function(this1,program,binaryFormat) {
	return this1.getProgramBinary(program,binaryFormat);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getProgrami = function(this1,program,pname) {
	return this1.getProgrami(program,pname);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getProgramInfoLog = function(this1,program) {
	return this1.getProgramInfoLog(program);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getProgramiv = function(this1,program,pname,params) {
	this1.getProgramiv(program,pname,params);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getQueryi = function(this1,target,pname) {
	return this1.getQueryi(target,pname);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getQueryiv = function(this1,target,pname,params) {
	this1.getQueryiv(target,pname,params);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getQueryObjectui = function(this1,query,pname) {
	return this1.getQueryObjectui(query,pname);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getQueryObjectuiv = function(this1,query,pname,params) {
	this1.getQueryObjectuiv(query,pname,params);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getRenderbufferParameteri = function(this1,target,pname) {
	return this1.getRenderbufferParameteri(target,pname);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getRenderbufferParameteriv = function(this1,target,pname,params) {
	this1.getRenderbufferParameteriv(target,pname,params);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getSamplerParameteri = function(this1,sampler,pname) {
	return this1.getSamplerParameteri(sampler,pname);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getSamplerParameteriv = function(this1,sampler,pname,params) {
	this1.getSamplerParameteriv(sampler,pname,params);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getSamplerParameterf = function(this1,sampler,pname) {
	return this1.getSamplerParameterf(sampler,pname);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getSamplerParameterfv = function(this1,sampler,pname,params) {
	this1.getSamplerParameterfv(sampler,pname,params);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getShaderInfoLog = function(this1,shader) {
	return this1.getShaderInfoLog(shader);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getShaderi = function(this1,shader,pname) {
	return this1.getShaderi(shader,pname);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getShaderiv = function(this1,shader,pname,params) {
	this1.getShaderiv(shader,pname,params);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getShaderPrecisionFormat = function(this1,shadertype,precisiontype) {
	return this1.getShaderPrecisionFormat(shadertype,precisiontype);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getShaderSource = function(this1,shader) {
	return this1.getShaderSource(shader);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getString = function(this1,name) {
	return this1.getString(name);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getStringi = function(this1,name,index) {
	return this1.getStringi(name,index);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getSyncParameteri = function(this1,sync,pname) {
	return this1.getSyncParameteri(sync,pname);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getSyncParameteriv = function(this1,sync,pname,params) {
	this1.getSyncParameteriv(sync,pname,params);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getTexParameterf = function(this1,target,pname) {
	return this1.getTexParameterf(target,pname);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getTexParameterfv = function(this1,target,pname,params) {
	this1.getTexParameterfv(target,pname,params);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getTexParameteri = function(this1,target,pname) {
	return this1.getTexParameteri(target,pname);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getTexParameteriv = function(this1,target,pname,params) {
	this1.getTexParameteriv(target,pname,params);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getTransformFeedbackVarying = function(this1,program,index) {
	return this1.getTransformFeedbackVarying(program,index);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getUniformf = function(this1,program,location) {
	return this1.getUniformf(program,location);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getUniformfv = function(this1,program,location,params) {
	this1.getUniformfv(program,location,params);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getUniformi = function(this1,program,location) {
	return this1.getUniformi(program,location);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getUniformiv = function(this1,program,location,params) {
	this1.getUniformiv(program,location,params);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getUniformui = function(this1,program,location) {
	return this1.getUniformui(program,location);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getUniformuiv = function(this1,program,location,params) {
	this1.getUniformuiv(program,location,params);
	return;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getUniformBlockIndex = function(this1,program,uniformBlockName) {
	return this1.getUniformBlockIndex(program,uniformBlockName);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getUniformIndices = function(this1,program,uniformNames) {
	return this1.getUniformIndices(program,uniformNames);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getUniformLocation = function(this1,program,name) {
	return this1.getUniformLocation(program,name);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getVertexAttribf = function(this1,index,pname) {
	return this1.getVertexAttribf(index,pname);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getVertexAttribfv = function(this1,index,pname,params) {
	this1.getVertexAttribfv(index,pname,params);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getVertexAttribi = function(this1,index,pname) {
	return this1.getVertexAttrib(index,pname);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getVertexAttribIi = function(this1,index,pname) {
	return this1.getVertexAttribIi(index,pname);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getVertexAttribIiv = function(this1,index,pname,params) {
	this1.getVertexAttribIiv(index,pname,params);
	return;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getVertexAttribIui = function(this1,index,pname) {
	return this1.getVertexAttribIui(index,pname);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getVertexAttribIuiv = function(this1,index,pname,params) {
	this1.getVertexAttribIuiv(index,pname,params);
	return;
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getVertexAttribiv = function(this1,index,pname,params) {
	this1.getVertexAttribiv(index,pname,params);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.getVertexAttribPointerv = function(this1,index,pname) {
	return this1.getVertexAttribPointerv(index,pname);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.hint = function(this1,target,mode) {
	this1.hint(target,mode);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.invalidateFramebuffer = function(this1,target,attachments) {
	this1.invalidateFramebuffer(target,attachments);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.invalidateSubFramebuffer = function(this1,target,attachments,x,y,width,height) {
	this1.invalidateSubFramebuffer(target,attachments,x,y,width,height);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.isBuffer = function(this1,buffer) {
	return this1.isBuffer(buffer);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.isEnabled = function(this1,cap) {
	return this1.isEnabled(cap);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.isFramebuffer = function(this1,framebuffer) {
	return this1.isFramebuffer(framebuffer);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.isProgram = function(this1,program) {
	return this1.isProgram(program);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.isQuery = function(this1,query) {
	return this1.isQuery(query);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.isRenderbuffer = function(this1,renderbuffer) {
	return this1.isRenderbuffer(renderbuffer);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.isSampler = function(this1,sampler) {
	return this1.isSampler(sampler);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.isShader = function(this1,shader) {
	return this1.isShader(shader);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.isTexture = function(this1,texture) {
	return this1.isTexture(texture);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.isTransformFeedback = function(this1,transformFeedback) {
	return this1.isTransformFeedback(transformFeedback);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.isVertexArray = function(this1,vertexArray) {
	return this1.isVertexArray(vertexArray);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.lineWidth = function(this1,width) {
	this1.lineWidth(width);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.linkProgram = function(this1,program) {
	this1.linkProgram(program);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.mapBufferRange = function(this1,target,offset,length,access) {
	return this1.mapBufferRange(target,offset,length,access);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.pauseTransformFeedback = function(this1) {
	this1.pauseTransformFeedback();
};
$hx_$exports_lime_graphics_opengl_GLES3Context.pixelStorei = function(this1,pname,param) {
	this1.pixelStorei(pname,param);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.polygonOffset = function(this1,factor,units) {
	this1.polygonOffset(factor,units);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.programBinary = function(this1,program,binaryFormat,binary,length) {
	this1.programBinary(program,binaryFormat,binary,length);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.programParameteri = function(this1,program,pname,value) {
	this1.programParameteri(program,pname,value);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.readBuffer = function(this1,src) {
	this1.readBuffer(src);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.readPixels = function(this1,x,y,width,height,format,type,data) {
	this1.readPixels(x,y,width,height,format,type,data);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.releaseShaderCompiler = function(this1) {
	this1.releaseShaderCompiler();
};
$hx_$exports_lime_graphics_opengl_GLES3Context.renderbufferStorage = function(this1,target,internalformat,width,height) {
	this1.renderbufferStorage(target,internalformat,width,height);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.renderbufferStorageMultisample = function(this1,target,samples,internalformat,width,height) {
	this1.renderbufferStorageMultisample(target,samples,internalformat,width,height);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.resumeTransformFeedback = function(this1) {
	this1.resumeTransformFeedback();
};
$hx_$exports_lime_graphics_opengl_GLES3Context.sampleCoverage = function(this1,value,invert) {
	this1.sampleCoverage(value,invert);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.samplerParameterf = function(this1,sampler,pname,param) {
	this1.samplerParameterf(sampler,pname,param);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.samplerParameteri = function(this1,sampler,pname,param) {
	this1.samplerParameteri(sampler,pname,param);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.scissor = function(this1,x,y,width,height) {
	this1.scissor(x,y,width,height);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.shaderBinary = function(this1,shaders,binaryformat,binary,length) {
	this1.shaderBinary(shaders,binaryformat,binary,length);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.shaderSource = function(this1,shader,source) {
	this1.shaderSource(shader,source);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.stencilFunc = function(this1,func,ref,mask) {
	this1.stencilFunc(func,ref,mask);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.stencilFuncSeparate = function(this1,face,func,ref,mask) {
	this1.stencilFuncSeparate(face,func,ref,mask);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.stencilMask = function(this1,mask) {
	this1.stencilMask(mask);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.stencilMaskSeparate = function(this1,face,mask) {
	this1.stencilMaskSeparate(face,mask);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.stencilOp = function(this1,fail,zfail,zpass) {
	this1.stencilOp(fail,zfail,zpass);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.stencilOpSeparate = function(this1,face,fail,zfail,zpass) {
	this1.stencilOpSeparate(face,fail,zfail,zpass);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.texImage2D = function(this1,target,level,internalformat,width,height,border,format,type,data) {
	this1.texImage2D(target,level,internalformat,width,height,border,format,type,data);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.texImage3D = function(this1,target,level,internalformat,width,height,depth,border,format,type,data) {
	this1.texImage3D(target,level,internalformat,width,height,depth,border,format,type,data);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.texStorage2D = function(this1,target,level,internalformat,width,height) {
	this1.texStorage2D(target,level,internalformat,width,height);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.texStorage3D = function(this1,target,level,internalformat,width,height,depth) {
	this1.texStorage3D(target,level,internalformat,width,height,depth);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.texParameterf = function(this1,target,pname,param) {
	this1.texParameterf(target,pname,param);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.texParameteri = function(this1,target,pname,param) {
	this1.texParameteri(target,pname,param);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.texSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,type,data) {
	this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,data);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.texSubImage3D = function(this1,target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,data) {
	this1.texSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,data);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.transformFeedbackVaryings = function(this1,program,varyings,bufferMode) {
	this1.transformFeedbackVaryings(program,varyings,bufferMode);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.uniform1f = function(this1,location,v0) {
	this1.uniform1f(location,v0);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.uniform1fv = function(this1,location,count,v) {
	this1.uniform1fv(location,count,v);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.uniform1i = function(this1,location,v0) {
	this1.uniform1i(location,v0);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.uniform1iv = function(this1,location,count,v) {
	this1.uniform1iv(location,count,v);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.uniform1ui = function(this1,location,v0) {
	this1.uniform1ui(location,v0);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.uniform1uiv = function(this1,location,count,v) {
	this1.uniform1uiv(location,count,v);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.uniform2f = function(this1,location,v0,v1) {
	this1.uniform2f(location,v0,v1);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.uniform2fv = function(this1,location,count,v) {
	this1.uniform2fv(location,count,v);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.uniform2i = function(this1,location,v0,v1) {
	this1.uniform2i(location,v0,v1);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.uniform2iv = function(this1,location,count,v) {
	this1.uniform2iv(location,count,v);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.uniform2ui = function(this1,location,v0,v1) {
	this1.uniform2ui(location,v0,v1);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.uniform2uiv = function(this1,location,count,v) {
	this1.uniform2uiv(location,count,v);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.uniform3f = function(this1,location,v0,v1,v2) {
	this1.uniform3f(location,v0,v1,v2);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.uniform3fv = function(this1,location,count,v) {
	this1.uniform3fv(location,count,v);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.uniform3i = function(this1,location,v0,v1,v2) {
	this1.uniform3i(location,v0,v1,v2);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.uniform3iv = function(this1,location,count,v) {
	this1.uniform3iv(location,count,v);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.uniform3ui = function(this1,location,v0,v1,v2) {
	this1.uniform3ui(location,v0,v1,v2);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.uniform3uiv = function(this1,location,count,v) {
	this1.uniform3uiv(location,count,v);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.uniform4f = function(this1,location,v0,v1,v2,v3) {
	this1.uniform4f(location,v0,v1,v2,v3);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.uniform4fv = function(this1,location,count,v) {
	this1.uniform4fv(location,count,v);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.uniform4i = function(this1,location,v0,v1,v2,v3) {
	this1.uniform4i(location,v0,v1,v2,v3);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.uniform4iv = function(this1,location,count,v) {
	this1.uniform4iv(location,count,v);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.uniform4ui = function(this1,location,v0,v1,v2,v3) {
	this1.uniform4ui(location,v0,v1,v2,v3);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.uniform4uiv = function(this1,location,count,v) {
	this1.uniform4uiv(location,count,v);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.uniformBlockBinding = function(this1,program,uniformBlockIndex,uniformBlockBinding) {
	this1.uniformBlockBinding(program,uniformBlockIndex,uniformBlockBinding);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.uniformMatrix2fv = function(this1,location,count,transpose,v) {
	this1.uniformMatrix2fv(location,count,transpose,v);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.uniformMatrix2x3fv = function(this1,location,count,transpose,v) {
	this1.uniformMatrix2x3fv(location,count,transpose,v);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.uniformMatrix2x4fv = function(this1,location,count,transpose,v) {
	this1.uniformMatrix2x4fv(location,count,transpose,v);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.uniformMatrix3fv = function(this1,location,count,transpose,v) {
	this1.uniformMatrix3fv(location,count,transpose,v);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.uniformMatrix3x2fv = function(this1,location,count,transpose,v) {
	this1.uniformMatrix3x2fv(location,count,transpose,v);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.uniformMatrix3x4fv = function(this1,location,count,transpose,v) {
	this1.uniformMatrix3x4fv(location,count,transpose,v);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.uniformMatrix4fv = function(this1,location,count,transpose,v) {
	this1.uniformMatrix4fv(location,count,transpose,v);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.uniformMatrix4x2fv = function(this1,location,count,transpose,v) {
	this1.uniformMatrix4x2fv(location,count,transpose,v);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.uniformMatrix4x3fv = function(this1,location,count,transpose,v) {
	this1.uniformMatrix4x3fv(location,count,transpose,v);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.unmapBuffer = function(this1,target) {
	return this1.unmapBuffer(target);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.useProgram = function(this1,program) {
	this1.useProgram(program);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.validateProgram = function(this1,program) {
	this1.validateProgram(program);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.vertexAttrib1f = function(this1,indx,x) {
	this1.vertexAttrib1f(indx,x);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.vertexAttrib1fv = function(this1,indx,values) {
	this1.vertexAttrib1fv(indx,values);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.vertexAttrib2f = function(this1,indx,x,y) {
	this1.vertexAttrib2f(indx,x,y);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.vertexAttrib2fv = function(this1,indx,values) {
	this1.vertexAttrib2fv(indx,values);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.vertexAttrib3f = function(this1,indx,x,y,z) {
	this1.vertexAttrib3f(indx,x,y,z);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.vertexAttrib3fv = function(this1,indx,values) {
	this1.vertexAttrib3fv(indx,values);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.vertexAttrib4f = function(this1,indx,x,y,z,w) {
	this1.vertexAttrib4f(indx,x,y,z,w);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.vertexAttrib4fv = function(this1,indx,values) {
	this1.vertexAttrib4fv(indx,values);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.vertexAttribDivisor = function(this1,index,divisor) {
	this1.vertexAttribDivisor(index,divisor);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.vertexAttribI4i = function(this1,indx,x,y,z,w) {
	this1.vertexAttribI4i(indx,x,y,z,w);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.vertexAttribI4iv = function(this1,indx,values) {
	this1.vertexAttribI4iv(indx,values);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.vertexAttribI4ui = function(this1,indx,x,y,z,w) {
	this1.vertexAttribI4ui(indx,x,y,z,w);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.vertexAttribI4uiv = function(this1,indx,values) {
	this1.vertexAttribI4uiv(indx,values);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.vertexAttribIPointer = function(this1,indx,size,type,stride,pointer) {
	this1.vertexAttribIPointer(indx,size,type,stride,pointer);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.vertexAttribPointer = function(this1,indx,size,type,normalized,stride,pointer) {
	this1.vertexAttribPointer(indx,size,type,normalized,stride,pointer);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.viewport = function(this1,x,y,width,height) {
	this1.viewport(x,y,width,height);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.waitSync = function(this1,sync,flags,timeout) {
	this1.waitSync(sync,flags,timeout);
};
$hx_$exports_lime_graphics_opengl_GLES3Context.fromGL = function(gl) {
	return $hx_exports.lime.graphics.opengl.GL.context;
};
var lime_utils_BytePointerData = function(bytes,offset) {
	this.bytes = bytes;
	this.offset = offset;
};
$hxClasses["lime.utils.BytePointerData"] = lime_utils_BytePointerData;
lime_utils_BytePointerData.__name__ = ["lime","utils","BytePointerData"];
lime_utils_BytePointerData.prototype = {
	bytes: null
	,offset: null
	,__class__: lime_utils_BytePointerData
};
var $hx_$exports_lime_graphics_opengl_WebGL2Context = {};
$hxClasses["$hx_exports.lime.graphics.opengl.WebGL2Context"] = $hx_$exports_lime_graphics_opengl_WebGL2Context;
$hx_$exports_lime_graphics_opengl_WebGL2Context.__name__ = ["$hx_exports","lime","graphics","opengl","WebGL2Context"];
$hx_$exports_lime_graphics_opengl_WebGL2Context.__properties__ = {get_version:"get_version",get_type:"get_type",get_MAX_CLIENT_WAIT_TIMEOUT_WEBGL:"get_MAX_CLIENT_WAIT_TIMEOUT_WEBGL",get_TIMEOUT_IGNORED:"get_TIMEOUT_IGNORED",get_INVALID_INDEX:"get_INVALID_INDEX",get_DEPTH32F_STENCIL8:"get_DEPTH32F_STENCIL8",get_DEPTH_COMPONENT32F:"get_DEPTH_COMPONENT32F",get_DYNAMIC_COPY:"get_DYNAMIC_COPY",get_DYNAMIC_READ:"get_DYNAMIC_READ",get_STATIC_COPY:"get_STATIC_COPY",get_STATIC_READ:"get_STATIC_READ",get_STREAM_COPY:"get_STREAM_COPY",get_STREAM_READ:"get_STREAM_READ",get_DEPTH_COMPONENT24:"get_DEPTH_COMPONENT24",get_MAX:"get_MAX",get_MIN:"get_MIN",get_STENCIL:"get_STENCIL",get_DEPTH:"get_DEPTH",get_COLOR:"get_COLOR",get_SYNC_FLUSH_COMMANDS_BIT:"get_SYNC_FLUSH_COMMANDS_BIT",get_WAIT_FAILED:"get_WAIT_FAILED",get_CONDITION_SATISFIED:"get_CONDITION_SATISFIED",get_TIMEOUT_EXPIRED:"get_TIMEOUT_EXPIRED",get_ALREADY_SIGNALED:"get_ALREADY_SIGNALED",get_SIGNALED:"get_SIGNALED",get_UNSIGNALED:"get_UNSIGNALED",get_SYNC_GPU_COMMANDS_COMPLETE:"get_SYNC_GPU_COMMANDS_COMPLETE",get_SYNC_FENCE:"get_SYNC_FENCE",get_SYNC_FLAGS:"get_SYNC_FLAGS",get_SYNC_STATUS:"get_SYNC_STATUS",get_SYNC_CONDITION:"get_SYNC_CONDITION",get_OBJECT_TYPE:"get_OBJECT_TYPE",get_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER:"get_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER",get_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER:"get_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER",get_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES:"get_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES",get_UNIFORM_BLOCK_ACTIVE_UNIFORMS:"get_UNIFORM_BLOCK_ACTIVE_UNIFORMS",get_UNIFORM_BLOCK_DATA_SIZE:"get_UNIFORM_BLOCK_DATA_SIZE",get_UNIFORM_BLOCK_BINDING:"get_UNIFORM_BLOCK_BINDING",get_UNIFORM_IS_ROW_MAJOR:"get_UNIFORM_IS_ROW_MAJOR",get_UNIFORM_MATRIX_STRIDE:"get_UNIFORM_MATRIX_STRIDE",get_UNIFORM_ARRAY_STRIDE:"get_UNIFORM_ARRAY_STRIDE",get_UNIFORM_OFFSET:"get_UNIFORM_OFFSET",get_UNIFORM_BLOCK_INDEX:"get_UNIFORM_BLOCK_INDEX",get_UNIFORM_SIZE:"get_UNIFORM_SIZE",get_UNIFORM_TYPE:"get_UNIFORM_TYPE",get_ACTIVE_UNIFORM_BLOCKS:"get_ACTIVE_UNIFORM_BLOCKS",get_UNIFORM_BUFFER_OFFSET_ALIGNMENT:"get_UNIFORM_BUFFER_OFFSET_ALIGNMENT",get_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS:"get_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS",get_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS:"get_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS",get_MAX_UNIFORM_BLOCK_SIZE:"get_MAX_UNIFORM_BLOCK_SIZE",get_MAX_UNIFORM_BUFFER_BINDINGS:"get_MAX_UNIFORM_BUFFER_BINDINGS",get_MAX_COMBINED_UNIFORM_BLOCKS:"get_MAX_COMBINED_UNIFORM_BLOCKS",get_MAX_FRAGMENT_UNIFORM_BLOCKS:"get_MAX_FRAGMENT_UNIFORM_BLOCKS",get_MAX_VERTEX_UNIFORM_BLOCKS:"get_MAX_VERTEX_UNIFORM_BLOCKS",get_UNIFORM_BUFFER_SIZE:"get_UNIFORM_BUFFER_SIZE",get_UNIFORM_BUFFER_START:"get_UNIFORM_BUFFER_START",get_UNIFORM_BUFFER_BINDING:"get_UNIFORM_BUFFER_BINDING",get_UNIFORM_BUFFER:"get_UNIFORM_BUFFER",get_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE:"get_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE",get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER:"get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER",get_RENDERBUFFER_SAMPLES:"get_RENDERBUFFER_SAMPLES",get_READ_FRAMEBUFFER_BINDING:"get_READ_FRAMEBUFFER_BINDING",get_DRAW_FRAMEBUFFER:"get_DRAW_FRAMEBUFFER",get_READ_FRAMEBUFFER:"get_READ_FRAMEBUFFER",get_DRAW_FRAMEBUFFER_BINDING:"get_DRAW_FRAMEBUFFER_BINDING",get_DEPTH24_STENCIL8:"get_DEPTH24_STENCIL8",get_FRAMEBUFFER_DEFAULT:"get_FRAMEBUFFER_DEFAULT",get_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE:"get_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE",get_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE:"get_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE",get_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE:"get_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE",get_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE:"get_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE",get_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE:"get_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE",get_FRAMEBUFFER_ATTACHMENT_RED_SIZE:"get_FRAMEBUFFER_ATTACHMENT_RED_SIZE",get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE:"get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE",get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING:"get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING",get_TRANSFORM_FEEDBACK_BINDING:"get_TRANSFORM_FEEDBACK_BINDING",get_TRANSFORM_FEEDBACK_ACTIVE:"get_TRANSFORM_FEEDBACK_ACTIVE",get_TRANSFORM_FEEDBACK_PAUSED:"get_TRANSFORM_FEEDBACK_PAUSED",get_TRANSFORM_FEEDBACK:"get_TRANSFORM_FEEDBACK",get_TRANSFORM_FEEDBACK_BUFFER_BINDING:"get_TRANSFORM_FEEDBACK_BUFFER_BINDING",get_TRANSFORM_FEEDBACK_BUFFER:"get_TRANSFORM_FEEDBACK_BUFFER",get_SEPARATE_ATTRIBS:"get_SEPARATE_ATTRIBS",get_INTERLEAVED_ATTRIBS:"get_INTERLEAVED_ATTRIBS",get_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS:"get_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS",get_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS:"get_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS",get_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN:"get_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN",get_TRANSFORM_FEEDBACK_BUFFER_SIZE:"get_TRANSFORM_FEEDBACK_BUFFER_SIZE",get_TRANSFORM_FEEDBACK_BUFFER_START:"get_TRANSFORM_FEEDBACK_BUFFER_START",get_TRANSFORM_FEEDBACK_VARYINGS:"get_TRANSFORM_FEEDBACK_VARYINGS",get_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS:"get_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS",get_TRANSFORM_FEEDBACK_BUFFER_MODE:"get_TRANSFORM_FEEDBACK_BUFFER_MODE",get_VERTEX_ATTRIB_ARRAY_DIVISOR:"get_VERTEX_ATTRIB_ARRAY_DIVISOR",get_VERTEX_ATTRIB_ARRAY_INTEGER:"get_VERTEX_ATTRIB_ARRAY_INTEGER",get_SIGNED_NORMALIZED:"get_SIGNED_NORMALIZED",get_UNSIGNED_NORMALIZED:"get_UNSIGNED_NORMALIZED",get_UNSIGNED_INT_VEC4:"get_UNSIGNED_INT_VEC4",get_UNSIGNED_INT_VEC3:"get_UNSIGNED_INT_VEC3",get_UNSIGNED_INT_VEC2:"get_UNSIGNED_INT_VEC2",get_FLOAT_MAT4x3:"get_FLOAT_MAT4x3",get_FLOAT_MAT4x2:"get_FLOAT_MAT4x2",get_FLOAT_MAT3x4:"get_FLOAT_MAT3x4",get_FLOAT_MAT3x2:"get_FLOAT_MAT3x2",get_FLOAT_MAT2x4:"get_FLOAT_MAT2x4",get_FLOAT_MAT2x3:"get_FLOAT_MAT2x3",get_COPY_WRITE_BUFFER_BINDING:"get_COPY_WRITE_BUFFER_BINDING",get_COPY_READ_BUFFER_BINDING:"get_COPY_READ_BUFFER_BINDING",get_COPY_WRITE_BUFFER:"get_COPY_WRITE_BUFFER",get_COPY_READ_BUFFER:"get_COPY_READ_BUFFER",get_PIXEL_UNPACK_BUFFER_BINDING:"get_PIXEL_UNPACK_BUFFER_BINDING",get_PIXEL_PACK_BUFFER_BINDING:"get_PIXEL_PACK_BUFFER_BINDING",get_PIXEL_UNPACK_BUFFER:"get_PIXEL_UNPACK_BUFFER",get_PIXEL_PACK_BUFFER:"get_PIXEL_PACK_BUFFER",get_SAMPLER_BINDING:"get_SAMPLER_BINDING",get_MAX_SAMPLES:"get_MAX_SAMPLES",get_UNSIGNED_INT_SAMPLER_2D_ARRAY:"get_UNSIGNED_INT_SAMPLER_2D_ARRAY",get_UNSIGNED_INT_SAMPLER_CUBE:"get_UNSIGNED_INT_SAMPLER_CUBE",get_UNSIGNED_INT_SAMPLER_3D:"get_UNSIGNED_INT_SAMPLER_3D",get_UNSIGNED_INT_SAMPLER_2D:"get_UNSIGNED_INT_SAMPLER_2D",get_INT_SAMPLER_2D_ARRAY:"get_INT_SAMPLER_2D_ARRAY",get_INT_SAMPLER_CUBE:"get_INT_SAMPLER_CUBE",get_INT_SAMPLER_3D:"get_INT_SAMPLER_3D",get_INT_SAMPLER_2D:"get_INT_SAMPLER_2D",get_SAMPLER_CUBE_SHADOW:"get_SAMPLER_CUBE_SHADOW",get_SAMPLER_2D_ARRAY_SHADOW:"get_SAMPLER_2D_ARRAY_SHADOW",get_SAMPLER_2D_ARRAY:"get_SAMPLER_2D_ARRAY",get_SAMPLER_2D_SHADOW:"get_SAMPLER_2D_SHADOW",get_SAMPLER_3D:"get_SAMPLER_3D",get_COLOR_ATTACHMENT15:"get_COLOR_ATTACHMENT15",get_COLOR_ATTACHMENT14:"get_COLOR_ATTACHMENT14",get_COLOR_ATTACHMENT13:"get_COLOR_ATTACHMENT13",get_COLOR_ATTACHMENT12:"get_COLOR_ATTACHMENT12",get_COLOR_ATTACHMENT11:"get_COLOR_ATTACHMENT11",get_COLOR_ATTACHMENT10:"get_COLOR_ATTACHMENT10",get_COLOR_ATTACHMENT9:"get_COLOR_ATTACHMENT9",get_COLOR_ATTACHMENT8:"get_COLOR_ATTACHMENT8",get_COLOR_ATTACHMENT7:"get_COLOR_ATTACHMENT7",get_COLOR_ATTACHMENT6:"get_COLOR_ATTACHMENT6",get_COLOR_ATTACHMENT5:"get_COLOR_ATTACHMENT5",get_COLOR_ATTACHMENT4:"get_COLOR_ATTACHMENT4",get_COLOR_ATTACHMENT3:"get_COLOR_ATTACHMENT3",get_COLOR_ATTACHMENT2:"get_COLOR_ATTACHMENT2",get_COLOR_ATTACHMENT1:"get_COLOR_ATTACHMENT1",get_MAX_COLOR_ATTACHMENTS:"get_MAX_COLOR_ATTACHMENTS",get_DRAW_BUFFER15:"get_DRAW_BUFFER15",get_DRAW_BUFFER14:"get_DRAW_BUFFER14",get_DRAW_BUFFER13:"get_DRAW_BUFFER13",get_DRAW_BUFFER12:"get_DRAW_BUFFER12",get_DRAW_BUFFER11:"get_DRAW_BUFFER11",get_DRAW_BUFFER10:"get_DRAW_BUFFER10",get_DRAW_BUFFER9:"get_DRAW_BUFFER9",get_DRAW_BUFFER8:"get_DRAW_BUFFER8",get_DRAW_BUFFER7:"get_DRAW_BUFFER7",get_DRAW_BUFFER6:"get_DRAW_BUFFER6",get_DRAW_BUFFER5:"get_DRAW_BUFFER5",get_DRAW_BUFFER4:"get_DRAW_BUFFER4",get_DRAW_BUFFER3:"get_DRAW_BUFFER3",get_DRAW_BUFFER2:"get_DRAW_BUFFER2",get_DRAW_BUFFER1:"get_DRAW_BUFFER1",get_DRAW_BUFFER0:"get_DRAW_BUFFER0",get_MAX_DRAW_BUFFERS:"get_MAX_DRAW_BUFFERS",get_ANY_SAMPLES_PASSED_CONSERVATIVE:"get_ANY_SAMPLES_PASSED_CONSERVATIVE",get_ANY_SAMPLES_PASSED:"get_ANY_SAMPLES_PASSED",get_QUERY_RESULT_AVAILABLE:"get_QUERY_RESULT_AVAILABLE",get_QUERY_RESULT:"get_QUERY_RESULT",get_CURRENT_QUERY:"get_CURRENT_QUERY",get_INT_2_10_10_10_REV:"get_INT_2_10_10_10_REV",get_RG_INTEGER:"get_RG_INTEGER",get_RG:"get_RG",get_HALF_FLOAT:"get_HALF_FLOAT",get_UNSIGNED_INT_24_8:"get_UNSIGNED_INT_24_8",get_FLOAT_32_UNSIGNED_INT_24_8_REV:"get_FLOAT_32_UNSIGNED_INT_24_8_REV",get_UNSIGNED_INT_5_9_9_9_REV:"get_UNSIGNED_INT_5_9_9_9_REV",get_UNSIGNED_INT_10F_11F_11F_REV:"get_UNSIGNED_INT_10F_11F_11F_REV",get_UNSIGNED_INT_2_10_10_10_REV:"get_UNSIGNED_INT_2_10_10_10_REV",get_TEXTURE_IMMUTABLE_LEVELS:"get_TEXTURE_IMMUTABLE_LEVELS",get_TEXTURE_IMMUTABLE_FORMAT:"get_TEXTURE_IMMUTABLE_FORMAT",get_RGB10_A2UI:"get_RGB10_A2UI",get_RGBA8_SNORM:"get_RGBA8_SNORM",get_RGB8_SNORM:"get_RGB8_SNORM",get_RG8_SNORM:"get_RG8_SNORM",get_R8_SNORM:"get_R8_SNORM",get_RG32UI:"get_RG32UI",get_RG32I:"get_RG32I",get_RG16UI:"get_RG16UI",get_RG16I:"get_RG16I",get_RG8UI:"get_RG8UI",get_RG8I:"get_RG8I",get_R32UI:"get_R32UI",get_R32I:"get_R32I",get_R16UI:"get_R16UI",get_R16I:"get_R16I",get_R8UI:"get_R8UI",get_R8I:"get_R8I",get_RG32F:"get_RG32F",get_RG16F:"get_RG16F",get_R32F:"get_R32F",get_R16F:"get_R16F",get_RG8:"get_RG8",get_R8:"get_R8",get_RGBA_INTEGER:"get_RGBA_INTEGER",get_RGB_INTEGER:"get_RGB_INTEGER",get_RED_INTEGER:"get_RED_INTEGER",get_RGB8I:"get_RGB8I",get_RGBA8I:"get_RGBA8I",get_RGB16I:"get_RGB16I",get_RGBA16I:"get_RGBA16I",get_RGB32I:"get_RGB32I",get_RGBA32I:"get_RGBA32I",get_RGB8UI:"get_RGB8UI",get_RGBA8UI:"get_RGBA8UI",get_RGB16UI:"get_RGB16UI",get_RGBA16UI:"get_RGBA16UI",get_RGB32UI:"get_RGB32UI",get_RGBA32UI:"get_RGBA32UI",get_RGB9_E5:"get_RGB9_E5",get_R11F_G11F_B10F:"get_R11F_G11F_B10F",get_TEXTURE_BINDING_2D_ARRAY:"get_TEXTURE_BINDING_2D_ARRAY",get_TEXTURE_2D_ARRAY:"get_TEXTURE_2D_ARRAY",get_RGB16F:"get_RGB16F",get_RGBA16F:"get_RGBA16F",get_RGB32F:"get_RGB32F",get_RGBA32F:"get_RGBA32F",get_COMPARE_REF_TO_TEXTURE:"get_COMPARE_REF_TO_TEXTURE",get_SRGB8_ALPHA8:"get_SRGB8_ALPHA8",get_SRGB8:"get_SRGB8",get_SRGB:"get_SRGB",get_TEXTURE_COMPARE_FUNC:"get_TEXTURE_COMPARE_FUNC",get_TEXTURE_COMPARE_MODE:"get_TEXTURE_COMPARE_MODE",get_TEXTURE_MAX_LEVEL:"get_TEXTURE_MAX_LEVEL",get_TEXTURE_BASE_LEVEL:"get_TEXTURE_BASE_LEVEL",get_TEXTURE_MAX_LOD:"get_TEXTURE_MAX_LOD",get_TEXTURE_MIN_LOD:"get_TEXTURE_MIN_LOD",get_TEXTURE_WRAP_R:"get_TEXTURE_WRAP_R",get_TEXTURE_3D:"get_TEXTURE_3D",get_RGB10_A2:"get_RGB10_A2",get_RGBA8:"get_RGBA8",get_RGB8:"get_RGB8",get_RED:"get_RED",get_MAX_ELEMENT_INDEX:"get_MAX_ELEMENT_INDEX",get_MAX_SERVER_WAIT_TIMEOUT:"get_MAX_SERVER_WAIT_TIMEOUT",get_MAX_FRAGMENT_INPUT_COMPONENTS:"get_MAX_FRAGMENT_INPUT_COMPONENTS",get_MAX_VERTEX_OUTPUT_COMPONENTS:"get_MAX_VERTEX_OUTPUT_COMPONENTS",get_VERTEX_ARRAY_BINDING:"get_VERTEX_ARRAY_BINDING",get_RASTERIZER_DISCARD:"get_RASTERIZER_DISCARD",get_FRAGMENT_SHADER_DERIVATIVE_HINT:"get_FRAGMENT_SHADER_DERIVATIVE_HINT",get_MAX_VARYING_COMPONENTS:"get_MAX_VARYING_COMPONENTS",get_MAX_PROGRAM_TEXEL_OFFSET:"get_MAX_PROGRAM_TEXEL_OFFSET",get_MIN_PROGRAM_TEXEL_OFFSET:"get_MIN_PROGRAM_TEXEL_OFFSET",get_MAX_ARRAY_TEXTURE_LAYERS:"get_MAX_ARRAY_TEXTURE_LAYERS",get_MAX_VERTEX_UNIFORM_COMPONENTS:"get_MAX_VERTEX_UNIFORM_COMPONENTS",get_MAX_FRAGMENT_UNIFORM_COMPONENTS:"get_MAX_FRAGMENT_UNIFORM_COMPONENTS",get_MAX_TEXTURE_LOD_BIAS:"get_MAX_TEXTURE_LOD_BIAS",get_MAX_ELEMENTS_INDICES:"get_MAX_ELEMENTS_INDICES",get_MAX_ELEMENTS_VERTICES:"get_MAX_ELEMENTS_VERTICES",get_MAX_3D_TEXTURE_SIZE:"get_MAX_3D_TEXTURE_SIZE",get_UNPACK_IMAGE_HEIGHT:"get_UNPACK_IMAGE_HEIGHT",get_UNPACK_SKIP_IMAGES:"get_UNPACK_SKIP_IMAGES",get_TEXTURE_BINDING_3D:"get_TEXTURE_BINDING_3D",get_PACK_SKIP_PIXELS:"get_PACK_SKIP_PIXELS",get_PACK_SKIP_ROWS:"get_PACK_SKIP_ROWS",get_PACK_ROW_LENGTH:"get_PACK_ROW_LENGTH",get_UNPACK_SKIP_PIXELS:"get_UNPACK_SKIP_PIXELS",get_UNPACK_SKIP_ROWS:"get_UNPACK_SKIP_ROWS",get_UNPACK_ROW_LENGTH:"get_UNPACK_ROW_LENGTH",get_READ_BUFFER:"get_READ_BUFFER",get_BROWSER_DEFAULT_WEBGL:"get_BROWSER_DEFAULT_WEBGL",get_UNPACK_COLORSPACE_CONVERSION_WEBGL:"get_UNPACK_COLORSPACE_CONVERSION_WEBGL",get_CONTEXT_LOST_WEBGL:"get_CONTEXT_LOST_WEBGL",get_UNPACK_PREMULTIPLY_ALPHA_WEBGL:"get_UNPACK_PREMULTIPLY_ALPHA_WEBGL",get_UNPACK_FLIP_Y_WEBGL:"get_UNPACK_FLIP_Y_WEBGL",get_INVALID_FRAMEBUFFER_OPERATION:"get_INVALID_FRAMEBUFFER_OPERATION",get_MAX_RENDERBUFFER_SIZE:"get_MAX_RENDERBUFFER_SIZE",get_RENDERBUFFER_BINDING:"get_RENDERBUFFER_BINDING",get_FRAMEBUFFER_BINDING:"get_FRAMEBUFFER_BINDING",get_FRAMEBUFFER_UNSUPPORTED:"get_FRAMEBUFFER_UNSUPPORTED",get_FRAMEBUFFER_INCOMPLETE_DIMENSIONS:"get_FRAMEBUFFER_INCOMPLETE_DIMENSIONS",get_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:"get_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT",get_FRAMEBUFFER_INCOMPLETE_ATTACHMENT:"get_FRAMEBUFFER_INCOMPLETE_ATTACHMENT",get_FRAMEBUFFER_COMPLETE:"get_FRAMEBUFFER_COMPLETE",get_NONE:"get_NONE",get_DEPTH_STENCIL_ATTACHMENT:"get_DEPTH_STENCIL_ATTACHMENT",get_STENCIL_ATTACHMENT:"get_STENCIL_ATTACHMENT",get_DEPTH_ATTACHMENT:"get_DEPTH_ATTACHMENT",get_COLOR_ATTACHMENT0:"get_COLOR_ATTACHMENT0",get_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE:"get_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE",get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL:"get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL",get_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME:"get_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME",get_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE:"get_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE",get_RENDERBUFFER_STENCIL_SIZE:"get_RENDERBUFFER_STENCIL_SIZE",get_RENDERBUFFER_DEPTH_SIZE:"get_RENDERBUFFER_DEPTH_SIZE",get_RENDERBUFFER_ALPHA_SIZE:"get_RENDERBUFFER_ALPHA_SIZE",get_RENDERBUFFER_BLUE_SIZE:"get_RENDERBUFFER_BLUE_SIZE",get_RENDERBUFFER_GREEN_SIZE:"get_RENDERBUFFER_GREEN_SIZE",get_RENDERBUFFER_RED_SIZE:"get_RENDERBUFFER_RED_SIZE",get_RENDERBUFFER_INTERNAL_FORMAT:"get_RENDERBUFFER_INTERNAL_FORMAT",get_RENDERBUFFER_HEIGHT:"get_RENDERBUFFER_HEIGHT",get_RENDERBUFFER_WIDTH:"get_RENDERBUFFER_WIDTH",get_DEPTH_STENCIL:"get_DEPTH_STENCIL",get_STENCIL_INDEX8:"get_STENCIL_INDEX8",get_STENCIL_INDEX:"get_STENCIL_INDEX",get_DEPTH_COMPONENT16:"get_DEPTH_COMPONENT16",get_RGB565:"get_RGB565",get_RGB5_A1:"get_RGB5_A1",get_RGBA4:"get_RGBA4",get_RENDERBUFFER:"get_RENDERBUFFER",get_FRAMEBUFFER:"get_FRAMEBUFFER",get_HIGH_INT:"get_HIGH_INT",get_MEDIUM_INT:"get_MEDIUM_INT",get_LOW_INT:"get_LOW_INT",get_HIGH_FLOAT:"get_HIGH_FLOAT",get_MEDIUM_FLOAT:"get_MEDIUM_FLOAT",get_LOW_FLOAT:"get_LOW_FLOAT",get_COMPILE_STATUS:"get_COMPILE_STATUS",get_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING:"get_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING",get_VERTEX_ATTRIB_ARRAY_POINTER:"get_VERTEX_ATTRIB_ARRAY_POINTER",get_VERTEX_ATTRIB_ARRAY_NORMALIZED:"get_VERTEX_ATTRIB_ARRAY_NORMALIZED",get_VERTEX_ATTRIB_ARRAY_TYPE:"get_VERTEX_ATTRIB_ARRAY_TYPE",get_VERTEX_ATTRIB_ARRAY_STRIDE:"get_VERTEX_ATTRIB_ARRAY_STRIDE",get_VERTEX_ATTRIB_ARRAY_SIZE:"get_VERTEX_ATTRIB_ARRAY_SIZE",get_VERTEX_ATTRIB_ARRAY_ENABLED:"get_VERTEX_ATTRIB_ARRAY_ENABLED",get_SAMPLER_CUBE:"get_SAMPLER_CUBE",get_SAMPLER_2D:"get_SAMPLER_2D",get_FLOAT_MAT4:"get_FLOAT_MAT4",get_FLOAT_MAT3:"get_FLOAT_MAT3",get_FLOAT_MAT2:"get_FLOAT_MAT2",get_BOOL_VEC4:"get_BOOL_VEC4",get_BOOL_VEC3:"get_BOOL_VEC3",get_BOOL_VEC2:"get_BOOL_VEC2",get_BOOL:"get_BOOL",get_INT_VEC4:"get_INT_VEC4",get_INT_VEC3:"get_INT_VEC3",get_INT_VEC2:"get_INT_VEC2",get_FLOAT_VEC4:"get_FLOAT_VEC4",get_FLOAT_VEC3:"get_FLOAT_VEC3",get_FLOAT_VEC2:"get_FLOAT_VEC2",get_MIRRORED_REPEAT:"get_MIRRORED_REPEAT",get_CLAMP_TO_EDGE:"get_CLAMP_TO_EDGE",get_REPEAT:"get_REPEAT",get_ACTIVE_TEXTURE:"get_ACTIVE_TEXTURE",get_TEXTURE31:"get_TEXTURE31",get_TEXTURE30:"get_TEXTURE30",get_TEXTURE29:"get_TEXTURE29",get_TEXTURE28:"get_TEXTURE28",get_TEXTURE27:"get_TEXTURE27",get_TEXTURE26:"get_TEXTURE26",get_TEXTURE25:"get_TEXTURE25",get_TEXTURE24:"get_TEXTURE24",get_TEXTURE23:"get_TEXTURE23",get_TEXTURE22:"get_TEXTURE22",get_TEXTURE21:"get_TEXTURE21",get_TEXTURE20:"get_TEXTURE20",get_TEXTURE19:"get_TEXTURE19",get_TEXTURE18:"get_TEXTURE18",get_TEXTURE17:"get_TEXTURE17",get_TEXTURE16:"get_TEXTURE16",get_TEXTURE15:"get_TEXTURE15",get_TEXTURE14:"get_TEXTURE14",get_TEXTURE13:"get_TEXTURE13",get_TEXTURE12:"get_TEXTURE12",get_TEXTURE11:"get_TEXTURE11",get_TEXTURE10:"get_TEXTURE10",get_TEXTURE9:"get_TEXTURE9",get_TEXTURE8:"get_TEXTURE8",get_TEXTURE7:"get_TEXTURE7",get_TEXTURE6:"get_TEXTURE6",get_TEXTURE5:"get_TEXTURE5",get_TEXTURE4:"get_TEXTURE4",get_TEXTURE3:"get_TEXTURE3",get_TEXTURE2:"get_TEXTURE2",get_TEXTURE1:"get_TEXTURE1",get_TEXTURE0:"get_TEXTURE0",get_MAX_CUBE_MAP_TEXTURE_SIZE:"get_MAX_CUBE_MAP_TEXTURE_SIZE",get_TEXTURE_CUBE_MAP_NEGATIVE_Z:"get_TEXTURE_CUBE_MAP_NEGATIVE_Z",get_TEXTURE_CUBE_MAP_POSITIVE_Z:"get_TEXTURE_CUBE_MAP_POSITIVE_Z",get_TEXTURE_CUBE_MAP_NEGATIVE_Y:"get_TEXTURE_CUBE_MAP_NEGATIVE_Y",get_TEXTURE_CUBE_MAP_POSITIVE_Y:"get_TEXTURE_CUBE_MAP_POSITIVE_Y",get_TEXTURE_CUBE_MAP_NEGATIVE_X:"get_TEXTURE_CUBE_MAP_NEGATIVE_X",get_TEXTURE_CUBE_MAP_POSITIVE_X:"get_TEXTURE_CUBE_MAP_POSITIVE_X",get_TEXTURE_BINDING_CUBE_MAP:"get_TEXTURE_BINDING_CUBE_MAP",get_TEXTURE_CUBE_MAP:"get_TEXTURE_CUBE_MAP",get_TEXTURE:"get_TEXTURE",get_TEXTURE_2D:"get_TEXTURE_2D",get_TEXTURE_WRAP_T:"get_TEXTURE_WRAP_T",get_TEXTURE_WRAP_S:"get_TEXTURE_WRAP_S",get_TEXTURE_MIN_FILTER:"get_TEXTURE_MIN_FILTER",get_TEXTURE_MAG_FILTER:"get_TEXTURE_MAG_FILTER",get_LINEAR_MIPMAP_LINEAR:"get_LINEAR_MIPMAP_LINEAR",get_NEAREST_MIPMAP_LINEAR:"get_NEAREST_MIPMAP_LINEAR",get_LINEAR_MIPMAP_NEAREST:"get_LINEAR_MIPMAP_NEAREST",get_NEAREST_MIPMAP_NEAREST:"get_NEAREST_MIPMAP_NEAREST",get_LINEAR:"get_LINEAR",get_NEAREST:"get_NEAREST",get_VERSION:"get_VERSION",get_RENDERER:"get_RENDERER",get_VENDOR:"get_VENDOR",get_DECR_WRAP:"get_DECR_WRAP",get_INCR_WRAP:"get_INCR_WRAP",get_INVERT:"get_INVERT",get_DECR:"get_DECR",get_INCR:"get_INCR",get_REPLACE:"get_REPLACE",get_KEEP:"get_KEEP",get_ALWAYS:"get_ALWAYS",get_GEQUAL:"get_GEQUAL",get_NOTEQUAL:"get_NOTEQUAL",get_GREATER:"get_GREATER",get_LEQUAL:"get_LEQUAL",get_EQUAL:"get_EQUAL",get_LESS:"get_LESS",get_NEVER:"get_NEVER",get_CURRENT_PROGRAM:"get_CURRENT_PROGRAM",get_SHADING_LANGUAGE_VERSION:"get_SHADING_LANGUAGE_VERSION",get_ACTIVE_ATTRIBUTES:"get_ACTIVE_ATTRIBUTES",get_ACTIVE_UNIFORMS:"get_ACTIVE_UNIFORMS",get_ATTACHED_SHADERS:"get_ATTACHED_SHADERS",get_VALIDATE_STATUS:"get_VALIDATE_STATUS",get_LINK_STATUS:"get_LINK_STATUS",get_DELETE_STATUS:"get_DELETE_STATUS",get_SHADER_TYPE:"get_SHADER_TYPE",get_MAX_FRAGMENT_UNIFORM_VECTORS:"get_MAX_FRAGMENT_UNIFORM_VECTORS",get_MAX_TEXTURE_IMAGE_UNITS:"get_MAX_TEXTURE_IMAGE_UNITS",get_MAX_VERTEX_TEXTURE_IMAGE_UNITS:"get_MAX_VERTEX_TEXTURE_IMAGE_UNITS",get_MAX_COMBINED_TEXTURE_IMAGE_UNITS:"get_MAX_COMBINED_TEXTURE_IMAGE_UNITS",get_MAX_VARYING_VECTORS:"get_MAX_VARYING_VECTORS",get_MAX_VERTEX_UNIFORM_VECTORS:"get_MAX_VERTEX_UNIFORM_VECTORS",get_MAX_VERTEX_ATTRIBS:"get_MAX_VERTEX_ATTRIBS",get_VERTEX_SHADER:"get_VERTEX_SHADER",get_FRAGMENT_SHADER:"get_FRAGMENT_SHADER",get_UNSIGNED_SHORT_5_6_5:"get_UNSIGNED_SHORT_5_6_5",get_UNSIGNED_SHORT_5_5_5_1:"get_UNSIGNED_SHORT_5_5_5_1",get_UNSIGNED_SHORT_4_4_4_4:"get_UNSIGNED_SHORT_4_4_4_4",get_LUMINANCE_ALPHA:"get_LUMINANCE_ALPHA",get_LUMINANCE:"get_LUMINANCE",get_RGBA:"get_RGBA",get_RGB:"get_RGB",get_ALPHA:"get_ALPHA",get_DEPTH_COMPONENT:"get_DEPTH_COMPONENT",get_FLOAT:"get_FLOAT",get_UNSIGNED_INT:"get_UNSIGNED_INT",get_INT:"get_INT",get_UNSIGNED_SHORT:"get_UNSIGNED_SHORT",get_SHORT:"get_SHORT",get_UNSIGNED_BYTE:"get_UNSIGNED_BYTE",get_BYTE:"get_BYTE",get_GENERATE_MIPMAP_HINT:"get_GENERATE_MIPMAP_HINT",get_NICEST:"get_NICEST",get_FASTEST:"get_FASTEST",get_DONT_CARE:"get_DONT_CARE",get_COMPRESSED_TEXTURE_FORMATS:"get_COMPRESSED_TEXTURE_FORMATS",get_SAMPLE_COVERAGE_INVERT:"get_SAMPLE_COVERAGE_INVERT",get_SAMPLE_COVERAGE_VALUE:"get_SAMPLE_COVERAGE_VALUE",get_SAMPLES:"get_SAMPLES",get_SAMPLE_BUFFERS:"get_SAMPLE_BUFFERS",get_TEXTURE_BINDING_2D:"get_TEXTURE_BINDING_2D",get_POLYGON_OFFSET_FACTOR:"get_POLYGON_OFFSET_FACTOR",get_POLYGON_OFFSET_UNITS:"get_POLYGON_OFFSET_UNITS",get_STENCIL_BITS:"get_STENCIL_BITS",get_DEPTH_BITS:"get_DEPTH_BITS",get_ALPHA_BITS:"get_ALPHA_BITS",get_BLUE_BITS:"get_BLUE_BITS",get_GREEN_BITS:"get_GREEN_BITS",get_RED_BITS:"get_RED_BITS",get_SUBPIXEL_BITS:"get_SUBPIXEL_BITS",get_MAX_VIEWPORT_DIMS:"get_MAX_VIEWPORT_DIMS",get_MAX_TEXTURE_SIZE:"get_MAX_TEXTURE_SIZE",get_PACK_ALIGNMENT:"get_PACK_ALIGNMENT",get_UNPACK_ALIGNMENT:"get_UNPACK_ALIGNMENT",get_COLOR_WRITEMASK:"get_COLOR_WRITEMASK",get_COLOR_CLEAR_VALUE:"get_COLOR_CLEAR_VALUE",get_SCISSOR_BOX:"get_SCISSOR_BOX",get_VIEWPORT:"get_VIEWPORT",get_STENCIL_BACK_WRITEMASK:"get_STENCIL_BACK_WRITEMASK",get_STENCIL_BACK_VALUE_MASK:"get_STENCIL_BACK_VALUE_MASK",get_STENCIL_BACK_REF:"get_STENCIL_BACK_REF",get_STENCIL_BACK_PASS_DEPTH_PASS:"get_STENCIL_BACK_PASS_DEPTH_PASS",get_STENCIL_BACK_PASS_DEPTH_FAIL:"get_STENCIL_BACK_PASS_DEPTH_FAIL",get_STENCIL_BACK_FAIL:"get_STENCIL_BACK_FAIL",get_STENCIL_BACK_FUNC:"get_STENCIL_BACK_FUNC",get_STENCIL_WRITEMASK:"get_STENCIL_WRITEMASK",get_STENCIL_VALUE_MASK:"get_STENCIL_VALUE_MASK",get_STENCIL_REF:"get_STENCIL_REF",get_STENCIL_PASS_DEPTH_PASS:"get_STENCIL_PASS_DEPTH_PASS",get_STENCIL_PASS_DEPTH_FAIL:"get_STENCIL_PASS_DEPTH_FAIL",get_STENCIL_FAIL:"get_STENCIL_FAIL",get_STENCIL_FUNC:"get_STENCIL_FUNC",get_STENCIL_CLEAR_VALUE:"get_STENCIL_CLEAR_VALUE",get_DEPTH_FUNC:"get_DEPTH_FUNC",get_DEPTH_CLEAR_VALUE:"get_DEPTH_CLEAR_VALUE",get_DEPTH_WRITEMASK:"get_DEPTH_WRITEMASK",get_DEPTH_RANGE:"get_DEPTH_RANGE",get_FRONT_FACE:"get_FRONT_FACE",get_CULL_FACE_MODE:"get_CULL_FACE_MODE",get_ALIASED_LINE_WIDTH_RANGE:"get_ALIASED_LINE_WIDTH_RANGE",get_ALIASED_POINT_SIZE_RANGE:"get_ALIASED_POINT_SIZE_RANGE",get_LINE_WIDTH:"get_LINE_WIDTH",get_CCW:"get_CCW",get_CW:"get_CW",get_OUT_OF_MEMORY:"get_OUT_OF_MEMORY",get_INVALID_OPERATION:"get_INVALID_OPERATION",get_INVALID_VALUE:"get_INVALID_VALUE",get_INVALID_ENUM:"get_INVALID_ENUM",get_NO_ERROR:"get_NO_ERROR",get_SAMPLE_COVERAGE:"get_SAMPLE_COVERAGE",get_SAMPLE_ALPHA_TO_COVERAGE:"get_SAMPLE_ALPHA_TO_COVERAGE",get_POLYGON_OFFSET_FILL:"get_POLYGON_OFFSET_FILL",get_SCISSOR_TEST:"get_SCISSOR_TEST",get_DEPTH_TEST:"get_DEPTH_TEST",get_STENCIL_TEST:"get_STENCIL_TEST",get_DITHER:"get_DITHER",get_BLEND:"get_BLEND",get_CULL_FACE:"get_CULL_FACE",get_FRONT_AND_BACK:"get_FRONT_AND_BACK",get_BACK:"get_BACK",get_FRONT:"get_FRONT",get_CURRENT_VERTEX_ATTRIB:"get_CURRENT_VERTEX_ATTRIB",get_BUFFER_USAGE:"get_BUFFER_USAGE",get_BUFFER_SIZE:"get_BUFFER_SIZE",get_DYNAMIC_DRAW:"get_DYNAMIC_DRAW",get_STATIC_DRAW:"get_STATIC_DRAW",get_STREAM_DRAW:"get_STREAM_DRAW",get_ELEMENT_ARRAY_BUFFER_BINDING:"get_ELEMENT_ARRAY_BUFFER_BINDING",get_ARRAY_BUFFER_BINDING:"get_ARRAY_BUFFER_BINDING",get_ELEMENT_ARRAY_BUFFER:"get_ELEMENT_ARRAY_BUFFER",get_ARRAY_BUFFER:"get_ARRAY_BUFFER",get_BLEND_COLOR:"get_BLEND_COLOR",get_ONE_MINUS_CONSTANT_ALPHA:"get_ONE_MINUS_CONSTANT_ALPHA",get_CONSTANT_ALPHA:"get_CONSTANT_ALPHA",get_ONE_MINUS_CONSTANT_COLOR:"get_ONE_MINUS_CONSTANT_COLOR",get_CONSTANT_COLOR:"get_CONSTANT_COLOR",get_BLEND_SRC_ALPHA:"get_BLEND_SRC_ALPHA",get_BLEND_DST_ALPHA:"get_BLEND_DST_ALPHA",get_BLEND_SRC_RGB:"get_BLEND_SRC_RGB",get_BLEND_DST_RGB:"get_BLEND_DST_RGB",get_FUNC_REVERSE_SUBTRACT:"get_FUNC_REVERSE_SUBTRACT",get_FUNC_SUBTRACT:"get_FUNC_SUBTRACT",get_BLEND_EQUATION_ALPHA:"get_BLEND_EQUATION_ALPHA",get_BLEND_EQUATION_RGB:"get_BLEND_EQUATION_RGB",get_BLEND_EQUATION:"get_BLEND_EQUATION",get_FUNC_ADD:"get_FUNC_ADD",get_SRC_ALPHA_SATURATE:"get_SRC_ALPHA_SATURATE",get_ONE_MINUS_DST_COLOR:"get_ONE_MINUS_DST_COLOR",get_DST_COLOR:"get_DST_COLOR",get_ONE_MINUS_DST_ALPHA:"get_ONE_MINUS_DST_ALPHA",get_DST_ALPHA:"get_DST_ALPHA",get_ONE_MINUS_SRC_ALPHA:"get_ONE_MINUS_SRC_ALPHA",get_SRC_ALPHA:"get_SRC_ALPHA",get_ONE_MINUS_SRC_COLOR:"get_ONE_MINUS_SRC_COLOR",get_SRC_COLOR:"get_SRC_COLOR",get_ONE:"get_ONE",get_ZERO:"get_ZERO",get_TRIANGLE_FAN:"get_TRIANGLE_FAN",get_TRIANGLE_STRIP:"get_TRIANGLE_STRIP",get_TRIANGLES:"get_TRIANGLES",get_LINE_STRIP:"get_LINE_STRIP",get_LINE_LOOP:"get_LINE_LOOP",get_LINES:"get_LINES",get_POINTS:"get_POINTS",get_COLOR_BUFFER_BIT:"get_COLOR_BUFFER_BIT",get_STENCIL_BUFFER_BIT:"get_STENCIL_BUFFER_BIT",get_DEPTH_BUFFER_BIT:"get_DEPTH_BUFFER_BIT"};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_DEPTH_BUFFER_BIT = function(this1) {
	return this1.DEPTH_BUFFER_BIT;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_STENCIL_BUFFER_BIT = function(this1) {
	return this1.STENCIL_BUFFER_BIT;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_COLOR_BUFFER_BIT = function(this1) {
	return this1.COLOR_BUFFER_BIT;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_POINTS = function(this1) {
	return this1.POINTS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_LINES = function(this1) {
	return this1.LINES;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_LINE_LOOP = function(this1) {
	return this1.LINE_LOOP;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_LINE_STRIP = function(this1) {
	return this1.LINE_STRIP;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TRIANGLES = function(this1) {
	return this1.TRIANGLES;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TRIANGLE_STRIP = function(this1) {
	return this1.TRIANGLE_STRIP;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TRIANGLE_FAN = function(this1) {
	return this1.TRIANGLE_FAN;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_ZERO = function(this1) {
	return this1.ZERO;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_ONE = function(this1) {
	return this1.ONE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_SRC_COLOR = function(this1) {
	return this1.SRC_COLOR;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_ONE_MINUS_SRC_COLOR = function(this1) {
	return this1.ONE_MINUS_SRC_COLOR;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_SRC_ALPHA = function(this1) {
	return this1.SRC_ALPHA;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_ONE_MINUS_SRC_ALPHA = function(this1) {
	return this1.ONE_MINUS_SRC_ALPHA;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_DST_ALPHA = function(this1) {
	return this1.DST_ALPHA;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_ONE_MINUS_DST_ALPHA = function(this1) {
	return this1.ONE_MINUS_DST_ALPHA;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_DST_COLOR = function(this1) {
	return this1.DST_COLOR;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_ONE_MINUS_DST_COLOR = function(this1) {
	return this1.ONE_MINUS_DST_COLOR;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_SRC_ALPHA_SATURATE = function(this1) {
	return this1.SRC_ALPHA_SATURATE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_FUNC_ADD = function(this1) {
	return this1.FUNC_ADD;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_BLEND_EQUATION = function(this1) {
	return this1.BLEND_EQUATION;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_BLEND_EQUATION_RGB = function(this1) {
	return this1.BLEND_EQUATION_RGB;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_BLEND_EQUATION_ALPHA = function(this1) {
	return this1.BLEND_EQUATION_ALPHA;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_FUNC_SUBTRACT = function(this1) {
	return this1.FUNC_SUBTRACT;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_FUNC_REVERSE_SUBTRACT = function(this1) {
	return this1.FUNC_REVERSE_SUBTRACT;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_BLEND_DST_RGB = function(this1) {
	return this1.BLEND_DST_RGB;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_BLEND_SRC_RGB = function(this1) {
	return this1.BLEND_SRC_RGB;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_BLEND_DST_ALPHA = function(this1) {
	return this1.BLEND_DST_ALPHA;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_BLEND_SRC_ALPHA = function(this1) {
	return this1.BLEND_SRC_ALPHA;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_CONSTANT_COLOR = function(this1) {
	return this1.CONSTANT_COLOR;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_ONE_MINUS_CONSTANT_COLOR = function(this1) {
	return this1.ONE_MINUS_CONSTANT_COLOR;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_CONSTANT_ALPHA = function(this1) {
	return this1.CONSTANT_ALPHA;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_ONE_MINUS_CONSTANT_ALPHA = function(this1) {
	return this1.ONE_MINUS_CONSTANT_ALPHA;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_BLEND_COLOR = function(this1) {
	return this1.BLEND_COLOR;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_ARRAY_BUFFER = function(this1) {
	return this1.ARRAY_BUFFER;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_ELEMENT_ARRAY_BUFFER = function(this1) {
	return this1.ELEMENT_ARRAY_BUFFER;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_ARRAY_BUFFER_BINDING = function(this1) {
	return this1.ARRAY_BUFFER_BINDING;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_ELEMENT_ARRAY_BUFFER_BINDING = function(this1) {
	return this1.ELEMENT_ARRAY_BUFFER_BINDING;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_STREAM_DRAW = function(this1) {
	return this1.STREAM_DRAW;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_STATIC_DRAW = function(this1) {
	return this1.STATIC_DRAW;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_DYNAMIC_DRAW = function(this1) {
	return this1.DYNAMIC_DRAW;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_BUFFER_SIZE = function(this1) {
	return this1.BUFFER_SIZE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_BUFFER_USAGE = function(this1) {
	return this1.BUFFER_USAGE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_CURRENT_VERTEX_ATTRIB = function(this1) {
	return this1.CURRENT_VERTEX_ATTRIB;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_FRONT = function(this1) {
	return this1.FRONT;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_BACK = function(this1) {
	return this1.BACK;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_FRONT_AND_BACK = function(this1) {
	return this1.FRONT_AND_BACK;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_CULL_FACE = function(this1) {
	return this1.CULL_FACE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_BLEND = function(this1) {
	return this1.BLEND;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_DITHER = function(this1) {
	return this1.DITHER;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_STENCIL_TEST = function(this1) {
	return this1.STENCIL_TEST;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_DEPTH_TEST = function(this1) {
	return this1.DEPTH_TEST;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_SCISSOR_TEST = function(this1) {
	return this1.SCISSOR_TEST;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_POLYGON_OFFSET_FILL = function(this1) {
	return this1.POLYGON_OFFSET_FILL;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_SAMPLE_ALPHA_TO_COVERAGE = function(this1) {
	return this1.SAMPLE_ALPHA_TO_COVERAGE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_SAMPLE_COVERAGE = function(this1) {
	return this1.SAMPLE_COVERAGE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_NO_ERROR = function(this1) {
	return this1.NO_ERROR;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_INVALID_ENUM = function(this1) {
	return this1.INVALID_ENUM;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_INVALID_VALUE = function(this1) {
	return this1.INVALID_VALUE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_INVALID_OPERATION = function(this1) {
	return this1.INVALID_OPERATION;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_OUT_OF_MEMORY = function(this1) {
	return this1.OUT_OF_MEMORY;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_CW = function(this1) {
	return this1.CW;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_CCW = function(this1) {
	return this1.CCW;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_LINE_WIDTH = function(this1) {
	return this1.LINE_WIDTH;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_ALIASED_POINT_SIZE_RANGE = function(this1) {
	return this1.ALIASED_POINT_SIZE_RANGE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_ALIASED_LINE_WIDTH_RANGE = function(this1) {
	return this1.ALIASED_LINE_WIDTH_RANGE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_CULL_FACE_MODE = function(this1) {
	return this1.CULL_FACE_MODE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_FRONT_FACE = function(this1) {
	return this1.FRONT_FACE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_DEPTH_RANGE = function(this1) {
	return this1.DEPTH_RANGE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_DEPTH_WRITEMASK = function(this1) {
	return this1.DEPTH_WRITEMASK;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_DEPTH_CLEAR_VALUE = function(this1) {
	return this1.DEPTH_CLEAR_VALUE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_DEPTH_FUNC = function(this1) {
	return this1.DEPTH_FUNC;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_STENCIL_CLEAR_VALUE = function(this1) {
	return this1.STENCIL_CLEAR_VALUE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_STENCIL_FUNC = function(this1) {
	return this1.STENCIL_FUNC;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_STENCIL_FAIL = function(this1) {
	return this1.STENCIL_FAIL;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_STENCIL_PASS_DEPTH_FAIL = function(this1) {
	return this1.STENCIL_PASS_DEPTH_FAIL;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_STENCIL_PASS_DEPTH_PASS = function(this1) {
	return this1.STENCIL_PASS_DEPTH_PASS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_STENCIL_REF = function(this1) {
	return this1.STENCIL_REF;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_STENCIL_VALUE_MASK = function(this1) {
	return this1.STENCIL_VALUE_MASK;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_STENCIL_WRITEMASK = function(this1) {
	return this1.STENCIL_WRITEMASK;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_STENCIL_BACK_FUNC = function(this1) {
	return this1.STENCIL_BACK_FUNC;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_STENCIL_BACK_FAIL = function(this1) {
	return this1.STENCIL_BACK_FAIL;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_STENCIL_BACK_PASS_DEPTH_FAIL = function(this1) {
	return this1.STENCIL_BACK_PASS_DEPTH_FAIL;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_STENCIL_BACK_PASS_DEPTH_PASS = function(this1) {
	return this1.STENCIL_BACK_PASS_DEPTH_PASS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_STENCIL_BACK_REF = function(this1) {
	return this1.STENCIL_BACK_REF;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_STENCIL_BACK_VALUE_MASK = function(this1) {
	return this1.STENCIL_BACK_VALUE_MASK;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_STENCIL_BACK_WRITEMASK = function(this1) {
	return this1.STENCIL_BACK_WRITEMASK;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_VIEWPORT = function(this1) {
	return this1.VIEWPORT;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_SCISSOR_BOX = function(this1) {
	return this1.SCISSOR_BOX;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_COLOR_CLEAR_VALUE = function(this1) {
	return this1.COLOR_CLEAR_VALUE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_COLOR_WRITEMASK = function(this1) {
	return this1.COLOR_WRITEMASK;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_UNPACK_ALIGNMENT = function(this1) {
	return this1.UNPACK_ALIGNMENT;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_PACK_ALIGNMENT = function(this1) {
	return this1.PACK_ALIGNMENT;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_MAX_TEXTURE_SIZE = function(this1) {
	return this1.MAX_TEXTURE_SIZE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_MAX_VIEWPORT_DIMS = function(this1) {
	return this1.MAX_VIEWPORT_DIMS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_SUBPIXEL_BITS = function(this1) {
	return this1.SUBPIXEL_BITS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RED_BITS = function(this1) {
	return this1.RED_BITS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_GREEN_BITS = function(this1) {
	return this1.GREEN_BITS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_BLUE_BITS = function(this1) {
	return this1.BLUE_BITS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_ALPHA_BITS = function(this1) {
	return this1.ALPHA_BITS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_DEPTH_BITS = function(this1) {
	return this1.DEPTH_BITS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_STENCIL_BITS = function(this1) {
	return this1.STENCIL_BITS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_POLYGON_OFFSET_UNITS = function(this1) {
	return this1.POLYGON_OFFSET_UNITS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_POLYGON_OFFSET_FACTOR = function(this1) {
	return this1.POLYGON_OFFSET_FACTOR;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE_BINDING_2D = function(this1) {
	return this1.TEXTURE_BINDING_2D;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_SAMPLE_BUFFERS = function(this1) {
	return this1.SAMPLE_BUFFERS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_SAMPLES = function(this1) {
	return this1.SAMPLES;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_SAMPLE_COVERAGE_VALUE = function(this1) {
	return this1.SAMPLE_COVERAGE_VALUE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_SAMPLE_COVERAGE_INVERT = function(this1) {
	return this1.SAMPLE_COVERAGE_INVERT;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_COMPRESSED_TEXTURE_FORMATS = function(this1) {
	return this1.COMPRESSED_TEXTURE_FORMATS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_DONT_CARE = function(this1) {
	return this1.DONT_CARE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_FASTEST = function(this1) {
	return this1.FASTEST;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_NICEST = function(this1) {
	return this1.NICEST;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_GENERATE_MIPMAP_HINT = function(this1) {
	return this1.GENERATE_MIPMAP_HINT;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_BYTE = function(this1) {
	return this1.BYTE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_UNSIGNED_BYTE = function(this1) {
	return this1.UNSIGNED_BYTE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_SHORT = function(this1) {
	return this1.SHORT;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_UNSIGNED_SHORT = function(this1) {
	return this1.UNSIGNED_SHORT;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_INT = function(this1) {
	return this1.INT;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_UNSIGNED_INT = function(this1) {
	return this1.UNSIGNED_INT;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_FLOAT = function(this1) {
	return this1.FLOAT;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_DEPTH_COMPONENT = function(this1) {
	return this1.DEPTH_COMPONENT;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_ALPHA = function(this1) {
	return this1.ALPHA;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RGB = function(this1) {
	return this1.RGB;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RGBA = function(this1) {
	return this1.RGBA;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_LUMINANCE = function(this1) {
	return this1.LUMINANCE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_LUMINANCE_ALPHA = function(this1) {
	return this1.LUMINANCE_ALPHA;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_UNSIGNED_SHORT_4_4_4_4 = function(this1) {
	return this1.UNSIGNED_SHORT_4_4_4_4;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_UNSIGNED_SHORT_5_5_5_1 = function(this1) {
	return this1.UNSIGNED_SHORT_5_5_5_1;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_UNSIGNED_SHORT_5_6_5 = function(this1) {
	return this1.UNSIGNED_SHORT_5_6_5;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_FRAGMENT_SHADER = function(this1) {
	return this1.FRAGMENT_SHADER;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_VERTEX_SHADER = function(this1) {
	return this1.VERTEX_SHADER;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_MAX_VERTEX_ATTRIBS = function(this1) {
	return this1.MAX_VERTEX_ATTRIBS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_MAX_VERTEX_UNIFORM_VECTORS = function(this1) {
	return this1.MAX_VERTEX_UNIFORM_VECTORS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_MAX_VARYING_VECTORS = function(this1) {
	return this1.MAX_VARYING_VECTORS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_MAX_COMBINED_TEXTURE_IMAGE_UNITS = function(this1) {
	return this1.MAX_COMBINED_TEXTURE_IMAGE_UNITS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_MAX_VERTEX_TEXTURE_IMAGE_UNITS = function(this1) {
	return this1.MAX_VERTEX_TEXTURE_IMAGE_UNITS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_MAX_TEXTURE_IMAGE_UNITS = function(this1) {
	return this1.MAX_TEXTURE_IMAGE_UNITS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_MAX_FRAGMENT_UNIFORM_VECTORS = function(this1) {
	return this1.MAX_FRAGMENT_UNIFORM_VECTORS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_SHADER_TYPE = function(this1) {
	return this1.SHADER_TYPE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_DELETE_STATUS = function(this1) {
	return this1.DELETE_STATUS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_LINK_STATUS = function(this1) {
	return this1.LINK_STATUS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_VALIDATE_STATUS = function(this1) {
	return this1.VALIDATE_STATUS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_ATTACHED_SHADERS = function(this1) {
	return this1.ATTACHED_SHADERS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_ACTIVE_UNIFORMS = function(this1) {
	return this1.ACTIVE_UNIFORMS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_ACTIVE_ATTRIBUTES = function(this1) {
	return this1.ACTIVE_ATTRIBUTES;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_SHADING_LANGUAGE_VERSION = function(this1) {
	return this1.SHADING_LANGUAGE_VERSION;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_CURRENT_PROGRAM = function(this1) {
	return this1.CURRENT_PROGRAM;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_NEVER = function(this1) {
	return this1.NEVER;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_LESS = function(this1) {
	return this1.LESS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_EQUAL = function(this1) {
	return this1.EQUAL;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_LEQUAL = function(this1) {
	return this1.LEQUAL;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_GREATER = function(this1) {
	return this1.GREATER;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_NOTEQUAL = function(this1) {
	return this1.NOTEQUAL;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_GEQUAL = function(this1) {
	return this1.GEQUAL;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_ALWAYS = function(this1) {
	return this1.ALWAYS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_KEEP = function(this1) {
	return this1.KEEP;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_REPLACE = function(this1) {
	return this1.REPLACE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_INCR = function(this1) {
	return this1.INCR;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_DECR = function(this1) {
	return this1.DECR;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_INVERT = function(this1) {
	return this1.INVERT;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_INCR_WRAP = function(this1) {
	return this1.INCR_WRAP;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_DECR_WRAP = function(this1) {
	return this1.DECR_WRAP;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_VENDOR = function(this1) {
	return this1.VENDOR;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RENDERER = function(this1) {
	return this1.RENDERER;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_VERSION = function(this1) {
	return this1.VERSION;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_NEAREST = function(this1) {
	return this1.NEAREST;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_LINEAR = function(this1) {
	return this1.LINEAR;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_NEAREST_MIPMAP_NEAREST = function(this1) {
	return this1.NEAREST_MIPMAP_NEAREST;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_LINEAR_MIPMAP_NEAREST = function(this1) {
	return this1.LINEAR_MIPMAP_NEAREST;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_NEAREST_MIPMAP_LINEAR = function(this1) {
	return this1.NEAREST_MIPMAP_LINEAR;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_LINEAR_MIPMAP_LINEAR = function(this1) {
	return this1.LINEAR_MIPMAP_LINEAR;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE_MAG_FILTER = function(this1) {
	return this1.TEXTURE_MAG_FILTER;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE_MIN_FILTER = function(this1) {
	return this1.TEXTURE_MIN_FILTER;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE_WRAP_S = function(this1) {
	return this1.TEXTURE_WRAP_S;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE_WRAP_T = function(this1) {
	return this1.TEXTURE_WRAP_T;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE_2D = function(this1) {
	return this1.TEXTURE_2D;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE = function(this1) {
	return this1.TEXTURE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE_CUBE_MAP = function(this1) {
	return this1.TEXTURE_CUBE_MAP;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE_BINDING_CUBE_MAP = function(this1) {
	return this1.TEXTURE_BINDING_CUBE_MAP;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE_CUBE_MAP_POSITIVE_X = function(this1) {
	return this1.TEXTURE_CUBE_MAP_POSITIVE_X;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE_CUBE_MAP_NEGATIVE_X = function(this1) {
	return this1.TEXTURE_CUBE_MAP_NEGATIVE_X;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE_CUBE_MAP_POSITIVE_Y = function(this1) {
	return this1.TEXTURE_CUBE_MAP_POSITIVE_Y;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE_CUBE_MAP_NEGATIVE_Y = function(this1) {
	return this1.TEXTURE_CUBE_MAP_NEGATIVE_Y;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE_CUBE_MAP_POSITIVE_Z = function(this1) {
	return this1.TEXTURE_CUBE_MAP_POSITIVE_Z;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE_CUBE_MAP_NEGATIVE_Z = function(this1) {
	return this1.TEXTURE_CUBE_MAP_NEGATIVE_Z;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_MAX_CUBE_MAP_TEXTURE_SIZE = function(this1) {
	return this1.MAX_CUBE_MAP_TEXTURE_SIZE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE0 = function(this1) {
	return this1.TEXTURE0;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE1 = function(this1) {
	return this1.TEXTURE1;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE2 = function(this1) {
	return this1.TEXTURE2;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE3 = function(this1) {
	return this1.TEXTURE3;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE4 = function(this1) {
	return this1.TEXTURE4;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE5 = function(this1) {
	return this1.TEXTURE5;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE6 = function(this1) {
	return this1.TEXTURE6;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE7 = function(this1) {
	return this1.TEXTURE7;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE8 = function(this1) {
	return this1.TEXTURE8;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE9 = function(this1) {
	return this1.TEXTURE9;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE10 = function(this1) {
	return this1.TEXTURE10;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE11 = function(this1) {
	return this1.TEXTURE11;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE12 = function(this1) {
	return this1.TEXTURE12;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE13 = function(this1) {
	return this1.TEXTURE13;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE14 = function(this1) {
	return this1.TEXTURE14;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE15 = function(this1) {
	return this1.TEXTURE15;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE16 = function(this1) {
	return this1.TEXTURE16;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE17 = function(this1) {
	return this1.TEXTURE17;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE18 = function(this1) {
	return this1.TEXTURE18;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE19 = function(this1) {
	return this1.TEXTURE19;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE20 = function(this1) {
	return this1.TEXTURE20;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE21 = function(this1) {
	return this1.TEXTURE21;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE22 = function(this1) {
	return this1.TEXTURE22;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE23 = function(this1) {
	return this1.TEXTURE23;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE24 = function(this1) {
	return this1.TEXTURE24;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE25 = function(this1) {
	return this1.TEXTURE25;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE26 = function(this1) {
	return this1.TEXTURE26;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE27 = function(this1) {
	return this1.TEXTURE27;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE28 = function(this1) {
	return this1.TEXTURE28;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE29 = function(this1) {
	return this1.TEXTURE29;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE30 = function(this1) {
	return this1.TEXTURE30;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE31 = function(this1) {
	return this1.TEXTURE31;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_ACTIVE_TEXTURE = function(this1) {
	return this1.ACTIVE_TEXTURE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_REPEAT = function(this1) {
	return this1.REPEAT;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_CLAMP_TO_EDGE = function(this1) {
	return this1.CLAMP_TO_EDGE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_MIRRORED_REPEAT = function(this1) {
	return this1.MIRRORED_REPEAT;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_FLOAT_VEC2 = function(this1) {
	return this1.FLOAT_VEC2;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_FLOAT_VEC3 = function(this1) {
	return this1.FLOAT_VEC3;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_FLOAT_VEC4 = function(this1) {
	return this1.FLOAT_VEC4;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_INT_VEC2 = function(this1) {
	return this1.INT_VEC2;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_INT_VEC3 = function(this1) {
	return this1.INT_VEC3;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_INT_VEC4 = function(this1) {
	return this1.INT_VEC4;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_BOOL = function(this1) {
	return this1.BOOL;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_BOOL_VEC2 = function(this1) {
	return this1.BOOL_VEC2;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_BOOL_VEC3 = function(this1) {
	return this1.BOOL_VEC3;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_BOOL_VEC4 = function(this1) {
	return this1.BOOL_VEC4;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_FLOAT_MAT2 = function(this1) {
	return this1.FLOAT_MAT2;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_FLOAT_MAT3 = function(this1) {
	return this1.FLOAT_MAT3;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_FLOAT_MAT4 = function(this1) {
	return this1.FLOAT_MAT4;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_SAMPLER_2D = function(this1) {
	return this1.SAMPLER_2D;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_SAMPLER_CUBE = function(this1) {
	return this1.SAMPLER_CUBE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_VERTEX_ATTRIB_ARRAY_ENABLED = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_ENABLED;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_VERTEX_ATTRIB_ARRAY_SIZE = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_SIZE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_VERTEX_ATTRIB_ARRAY_STRIDE = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_STRIDE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_VERTEX_ATTRIB_ARRAY_TYPE = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_TYPE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_VERTEX_ATTRIB_ARRAY_NORMALIZED = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_NORMALIZED;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_VERTEX_ATTRIB_ARRAY_POINTER = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_POINTER;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_COMPILE_STATUS = function(this1) {
	return this1.COMPILE_STATUS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_LOW_FLOAT = function(this1) {
	return this1.LOW_FLOAT;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_MEDIUM_FLOAT = function(this1) {
	return this1.MEDIUM_FLOAT;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_HIGH_FLOAT = function(this1) {
	return this1.HIGH_FLOAT;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_LOW_INT = function(this1) {
	return this1.LOW_INT;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_MEDIUM_INT = function(this1) {
	return this1.MEDIUM_INT;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_HIGH_INT = function(this1) {
	return this1.HIGH_INT;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_FRAMEBUFFER = function(this1) {
	return this1.FRAMEBUFFER;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RENDERBUFFER = function(this1) {
	return this1.RENDERBUFFER;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RGBA4 = function(this1) {
	return this1.RGBA4;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RGB5_A1 = function(this1) {
	return this1.RGB5_A1;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RGB565 = function(this1) {
	return this1.RGB565;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_DEPTH_COMPONENT16 = function(this1) {
	return this1.DEPTH_COMPONENT16;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_STENCIL_INDEX = function(this1) {
	return this1.STENCIL_INDEX;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_STENCIL_INDEX8 = function(this1) {
	return this1.STENCIL_INDEX8;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_DEPTH_STENCIL = function(this1) {
	return this1.DEPTH_STENCIL;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RENDERBUFFER_WIDTH = function(this1) {
	return this1.RENDERBUFFER_WIDTH;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RENDERBUFFER_HEIGHT = function(this1) {
	return this1.RENDERBUFFER_HEIGHT;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RENDERBUFFER_INTERNAL_FORMAT = function(this1) {
	return this1.RENDERBUFFER_INTERNAL_FORMAT;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RENDERBUFFER_RED_SIZE = function(this1) {
	return this1.RENDERBUFFER_RED_SIZE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RENDERBUFFER_GREEN_SIZE = function(this1) {
	return this1.RENDERBUFFER_GREEN_SIZE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RENDERBUFFER_BLUE_SIZE = function(this1) {
	return this1.RENDERBUFFER_BLUE_SIZE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RENDERBUFFER_ALPHA_SIZE = function(this1) {
	return this1.RENDERBUFFER_ALPHA_SIZE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RENDERBUFFER_DEPTH_SIZE = function(this1) {
	return this1.RENDERBUFFER_DEPTH_SIZE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RENDERBUFFER_STENCIL_SIZE = function(this1) {
	return this1.RENDERBUFFER_STENCIL_SIZE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_COLOR_ATTACHMENT0 = function(this1) {
	return this1.COLOR_ATTACHMENT0;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_DEPTH_ATTACHMENT = function(this1) {
	return this1.DEPTH_ATTACHMENT;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_STENCIL_ATTACHMENT = function(this1) {
	return this1.STENCIL_ATTACHMENT;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_DEPTH_STENCIL_ATTACHMENT = function(this1) {
	return this1.DEPTH_STENCIL_ATTACHMENT;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_NONE = function(this1) {
	return this1.NONE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_FRAMEBUFFER_COMPLETE = function(this1) {
	return this1.FRAMEBUFFER_COMPLETE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = function(this1) {
	return this1.FRAMEBUFFER_INCOMPLETE_ATTACHMENT;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = function(this1) {
	return this1.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = function(this1) {
	return this1.FRAMEBUFFER_INCOMPLETE_DIMENSIONS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_FRAMEBUFFER_UNSUPPORTED = function(this1) {
	return this1.FRAMEBUFFER_UNSUPPORTED;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_FRAMEBUFFER_BINDING = function(this1) {
	return this1.FRAMEBUFFER_BINDING;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RENDERBUFFER_BINDING = function(this1) {
	return this1.RENDERBUFFER_BINDING;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_MAX_RENDERBUFFER_SIZE = function(this1) {
	return this1.MAX_RENDERBUFFER_SIZE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_INVALID_FRAMEBUFFER_OPERATION = function(this1) {
	return this1.INVALID_FRAMEBUFFER_OPERATION;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_UNPACK_FLIP_Y_WEBGL = function(this1) {
	return this1.UNPACK_FLIP_Y_WEBGL;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_UNPACK_PREMULTIPLY_ALPHA_WEBGL = function(this1) {
	return this1.UNPACK_PREMULTIPLY_ALPHA_WEBGL;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_CONTEXT_LOST_WEBGL = function(this1) {
	return this1.CONTEXT_LOST_WEBGL;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_UNPACK_COLORSPACE_CONVERSION_WEBGL = function(this1) {
	return this1.UNPACK_COLORSPACE_CONVERSION_WEBGL;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_BROWSER_DEFAULT_WEBGL = function(this1) {
	return this1.BROWSER_DEFAULT_WEBGL;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_type = function(this1) {
	return this1.type;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_version = function(this1) {
	return this1.version;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_READ_BUFFER = function(this1) {
	return this1.READ_BUFFER;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_UNPACK_ROW_LENGTH = function(this1) {
	return this1.UNPACK_ROW_LENGTH;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_UNPACK_SKIP_ROWS = function(this1) {
	return this1.UNPACK_SKIP_ROWS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_UNPACK_SKIP_PIXELS = function(this1) {
	return this1.UNPACK_SKIP_PIXELS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_PACK_ROW_LENGTH = function(this1) {
	return this1.PACK_ROW_LENGTH;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_PACK_SKIP_ROWS = function(this1) {
	return this1.PACK_SKIP_ROWS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_PACK_SKIP_PIXELS = function(this1) {
	return this1.PACK_SKIP_PIXELS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE_BINDING_3D = function(this1) {
	return this1.TEXTURE_BINDING_3D;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_UNPACK_SKIP_IMAGES = function(this1) {
	return this1.UNPACK_SKIP_IMAGES;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_UNPACK_IMAGE_HEIGHT = function(this1) {
	return this1.UNPACK_IMAGE_HEIGHT;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_MAX_3D_TEXTURE_SIZE = function(this1) {
	return this1.MAX_3D_TEXTURE_SIZE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_MAX_ELEMENTS_VERTICES = function(this1) {
	return this1.MAX_ELEMENTS_VERTICES;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_MAX_ELEMENTS_INDICES = function(this1) {
	return this1.MAX_ELEMENTS_INDICES;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_MAX_TEXTURE_LOD_BIAS = function(this1) {
	return this1.MAX_TEXTURE_LOD_BIAS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_MAX_FRAGMENT_UNIFORM_COMPONENTS = function(this1) {
	return this1.MAX_FRAGMENT_UNIFORM_COMPONENTS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_MAX_VERTEX_UNIFORM_COMPONENTS = function(this1) {
	return this1.MAX_VERTEX_UNIFORM_COMPONENTS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_MAX_ARRAY_TEXTURE_LAYERS = function(this1) {
	return this1.MAX_ARRAY_TEXTURE_LAYERS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_MIN_PROGRAM_TEXEL_OFFSET = function(this1) {
	return this1.MIN_PROGRAM_TEXEL_OFFSET;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_MAX_PROGRAM_TEXEL_OFFSET = function(this1) {
	return this1.MAX_PROGRAM_TEXEL_OFFSET;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_MAX_VARYING_COMPONENTS = function(this1) {
	return this1.MAX_VARYING_COMPONENTS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_FRAGMENT_SHADER_DERIVATIVE_HINT = function(this1) {
	return this1.FRAGMENT_SHADER_DERIVATIVE_HINT;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RASTERIZER_DISCARD = function(this1) {
	return this1.RASTERIZER_DISCARD;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_VERTEX_ARRAY_BINDING = function(this1) {
	return this1.VERTEX_ARRAY_BINDING;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_MAX_VERTEX_OUTPUT_COMPONENTS = function(this1) {
	return this1.MAX_VERTEX_OUTPUT_COMPONENTS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_MAX_FRAGMENT_INPUT_COMPONENTS = function(this1) {
	return this1.MAX_FRAGMENT_INPUT_COMPONENTS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_MAX_SERVER_WAIT_TIMEOUT = function(this1) {
	return this1.MAX_SERVER_WAIT_TIMEOUT;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_MAX_ELEMENT_INDEX = function(this1) {
	return this1.MAX_ELEMENT_INDEX;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RED = function(this1) {
	return this1.RED;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RGB8 = function(this1) {
	return this1.RGB8;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RGBA8 = function(this1) {
	return this1.RGBA8;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RGB10_A2 = function(this1) {
	return this1.RGB10_A2;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE_3D = function(this1) {
	return this1.TEXTURE_3D;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE_WRAP_R = function(this1) {
	return this1.TEXTURE_WRAP_R;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE_MIN_LOD = function(this1) {
	return this1.TEXTURE_MIN_LOD;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE_MAX_LOD = function(this1) {
	return this1.TEXTURE_MAX_LOD;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE_BASE_LEVEL = function(this1) {
	return this1.TEXTURE_BASE_LEVEL;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE_MAX_LEVEL = function(this1) {
	return this1.TEXTURE_MAX_LEVEL;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE_COMPARE_MODE = function(this1) {
	return this1.TEXTURE_COMPARE_MODE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE_COMPARE_FUNC = function(this1) {
	return this1.TEXTURE_COMPARE_FUNC;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_SRGB = function(this1) {
	return this1.SRGB;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_SRGB8 = function(this1) {
	return this1.SRGB8;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_SRGB8_ALPHA8 = function(this1) {
	return this1.SRGB8_ALPHA8;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_COMPARE_REF_TO_TEXTURE = function(this1) {
	return this1.COMPARE_REF_TO_TEXTURE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RGBA32F = function(this1) {
	return this1.RGBA32F;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RGB32F = function(this1) {
	return this1.RGB32F;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RGBA16F = function(this1) {
	return this1.RGBA16F;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RGB16F = function(this1) {
	return this1.RGB16F;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE_2D_ARRAY = function(this1) {
	return this1.TEXTURE_2D_ARRAY;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE_BINDING_2D_ARRAY = function(this1) {
	return this1.TEXTURE_BINDING_2D_ARRAY;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_R11F_G11F_B10F = function(this1) {
	return this1.R11F_G11F_B10F;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RGB9_E5 = function(this1) {
	return this1.RGB9_E5;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RGBA32UI = function(this1) {
	return this1.RGBA32UI;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RGB32UI = function(this1) {
	return this1.RGB32UI;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RGBA16UI = function(this1) {
	return this1.RGBA16UI;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RGB16UI = function(this1) {
	return this1.RGB16UI;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RGBA8UI = function(this1) {
	return this1.RGBA8UI;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RGB8UI = function(this1) {
	return this1.RGB8UI;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RGBA32I = function(this1) {
	return this1.RGBA32I;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RGB32I = function(this1) {
	return this1.RGB32I;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RGBA16I = function(this1) {
	return this1.RGBA16I;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RGB16I = function(this1) {
	return this1.RGB16I;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RGBA8I = function(this1) {
	return this1.RGBA8I;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RGB8I = function(this1) {
	return this1.RGB8I;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RED_INTEGER = function(this1) {
	return this1.RED_INTEGER;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RGB_INTEGER = function(this1) {
	return this1.RGB_INTEGER;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RGBA_INTEGER = function(this1) {
	return this1.RGBA_INTEGER;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_R8 = function(this1) {
	return this1.R8;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RG8 = function(this1) {
	return this1.RG8;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_R16F = function(this1) {
	return this1.R16F;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_R32F = function(this1) {
	return this1.R32F;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RG16F = function(this1) {
	return this1.RG16F;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RG32F = function(this1) {
	return this1.RG32F;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_R8I = function(this1) {
	return this1.R8I;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_R8UI = function(this1) {
	return this1.R8UI;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_R16I = function(this1) {
	return this1.R16I;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_R16UI = function(this1) {
	return this1.R16UI;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_R32I = function(this1) {
	return this1.R32I;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_R32UI = function(this1) {
	return this1.R32UI;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RG8I = function(this1) {
	return this1.RG8I;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RG8UI = function(this1) {
	return this1.RG8UI;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RG16I = function(this1) {
	return this1.RG16I;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RG16UI = function(this1) {
	return this1.RG16UI;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RG32I = function(this1) {
	return this1.RG32I;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RG32UI = function(this1) {
	return this1.RG32UI;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_R8_SNORM = function(this1) {
	return this1.R8_SNORM;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RG8_SNORM = function(this1) {
	return this1.RG8_SNORM;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RGB8_SNORM = function(this1) {
	return this1.RGB8_SNORM;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RGBA8_SNORM = function(this1) {
	return this1.RGBA8_SNORM;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RGB10_A2UI = function(this1) {
	return this1.RGB10_A2UI;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE_IMMUTABLE_FORMAT = function(this1) {
	return this1.TEXTURE_IMMUTABLE_FORMAT;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TEXTURE_IMMUTABLE_LEVELS = function(this1) {
	return this1.TEXTURE_IMMUTABLE_LEVELS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_UNSIGNED_INT_2_10_10_10_REV = function(this1) {
	return this1.UNSIGNED_INT_2_10_10_10_REV;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_UNSIGNED_INT_10F_11F_11F_REV = function(this1) {
	return this1.UNSIGNED_INT_10F_11F_11F_REV;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_UNSIGNED_INT_5_9_9_9_REV = function(this1) {
	return this1.UNSIGNED_INT_5_9_9_9_REV;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_FLOAT_32_UNSIGNED_INT_24_8_REV = function(this1) {
	return this1.FLOAT_32_UNSIGNED_INT_24_8_REV;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_UNSIGNED_INT_24_8 = function(this1) {
	return this1.UNSIGNED_INT_24_8;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_HALF_FLOAT = function(this1) {
	return this1.HALF_FLOAT;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RG = function(this1) {
	return this1.RG;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RG_INTEGER = function(this1) {
	return this1.RG_INTEGER;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_INT_2_10_10_10_REV = function(this1) {
	return this1.INT_2_10_10_10_REV;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_CURRENT_QUERY = function(this1) {
	return this1.CURRENT_QUERY;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_QUERY_RESULT = function(this1) {
	return this1.QUERY_RESULT;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_QUERY_RESULT_AVAILABLE = function(this1) {
	return this1.QUERY_RESULT_AVAILABLE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_ANY_SAMPLES_PASSED = function(this1) {
	return this1.ANY_SAMPLES_PASSED;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_ANY_SAMPLES_PASSED_CONSERVATIVE = function(this1) {
	return this1.ANY_SAMPLES_PASSED_CONSERVATIVE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_MAX_DRAW_BUFFERS = function(this1) {
	return this1.MAX_DRAW_BUFFERS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_DRAW_BUFFER0 = function(this1) {
	return this1.DRAW_BUFFER0;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_DRAW_BUFFER1 = function(this1) {
	return this1.DRAW_BUFFER1;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_DRAW_BUFFER2 = function(this1) {
	return this1.DRAW_BUFFER2;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_DRAW_BUFFER3 = function(this1) {
	return this1.DRAW_BUFFER3;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_DRAW_BUFFER4 = function(this1) {
	return this1.DRAW_BUFFER4;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_DRAW_BUFFER5 = function(this1) {
	return this1.DRAW_BUFFER5;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_DRAW_BUFFER6 = function(this1) {
	return this1.DRAW_BUFFER6;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_DRAW_BUFFER7 = function(this1) {
	return this1.DRAW_BUFFER7;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_DRAW_BUFFER8 = function(this1) {
	return this1.DRAW_BUFFER8;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_DRAW_BUFFER9 = function(this1) {
	return this1.DRAW_BUFFER9;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_DRAW_BUFFER10 = function(this1) {
	return this1.DRAW_BUFFER10;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_DRAW_BUFFER11 = function(this1) {
	return this1.DRAW_BUFFER11;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_DRAW_BUFFER12 = function(this1) {
	return this1.DRAW_BUFFER12;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_DRAW_BUFFER13 = function(this1) {
	return this1.DRAW_BUFFER13;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_DRAW_BUFFER14 = function(this1) {
	return this1.DRAW_BUFFER14;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_DRAW_BUFFER15 = function(this1) {
	return this1.DRAW_BUFFER15;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_MAX_COLOR_ATTACHMENTS = function(this1) {
	return this1.MAX_COLOR_ATTACHMENTS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_COLOR_ATTACHMENT1 = function(this1) {
	return this1.COLOR_ATTACHMENT1;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_COLOR_ATTACHMENT2 = function(this1) {
	return this1.COLOR_ATTACHMENT2;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_COLOR_ATTACHMENT3 = function(this1) {
	return this1.COLOR_ATTACHMENT3;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_COLOR_ATTACHMENT4 = function(this1) {
	return this1.COLOR_ATTACHMENT4;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_COLOR_ATTACHMENT5 = function(this1) {
	return this1.COLOR_ATTACHMENT5;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_COLOR_ATTACHMENT6 = function(this1) {
	return this1.COLOR_ATTACHMENT6;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_COLOR_ATTACHMENT7 = function(this1) {
	return this1.COLOR_ATTACHMENT7;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_COLOR_ATTACHMENT8 = function(this1) {
	return this1.COLOR_ATTACHMENT8;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_COLOR_ATTACHMENT9 = function(this1) {
	return this1.COLOR_ATTACHMENT9;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_COLOR_ATTACHMENT10 = function(this1) {
	return this1.COLOR_ATTACHMENT10;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_COLOR_ATTACHMENT11 = function(this1) {
	return this1.COLOR_ATTACHMENT11;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_COLOR_ATTACHMENT12 = function(this1) {
	return this1.COLOR_ATTACHMENT12;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_COLOR_ATTACHMENT13 = function(this1) {
	return this1.COLOR_ATTACHMENT13;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_COLOR_ATTACHMENT14 = function(this1) {
	return this1.COLOR_ATTACHMENT14;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_COLOR_ATTACHMENT15 = function(this1) {
	return this1.COLOR_ATTACHMENT15;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_SAMPLER_3D = function(this1) {
	return this1.SAMPLER_3D;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_SAMPLER_2D_SHADOW = function(this1) {
	return this1.SAMPLER_2D_SHADOW;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_SAMPLER_2D_ARRAY = function(this1) {
	return this1.SAMPLER_2D_ARRAY;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_SAMPLER_2D_ARRAY_SHADOW = function(this1) {
	return this1.SAMPLER_2D_ARRAY_SHADOW;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_SAMPLER_CUBE_SHADOW = function(this1) {
	return this1.SAMPLER_CUBE_SHADOW;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_INT_SAMPLER_2D = function(this1) {
	return this1.INT_SAMPLER_2D;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_INT_SAMPLER_3D = function(this1) {
	return this1.INT_SAMPLER_3D;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_INT_SAMPLER_CUBE = function(this1) {
	return this1.INT_SAMPLER_CUBE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_INT_SAMPLER_2D_ARRAY = function(this1) {
	return this1.INT_SAMPLER_2D_ARRAY;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_UNSIGNED_INT_SAMPLER_2D = function(this1) {
	return this1.UNSIGNED_INT_SAMPLER_2D;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_UNSIGNED_INT_SAMPLER_3D = function(this1) {
	return this1.UNSIGNED_INT_SAMPLER_3D;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_UNSIGNED_INT_SAMPLER_CUBE = function(this1) {
	return this1.UNSIGNED_INT_SAMPLER_CUBE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_UNSIGNED_INT_SAMPLER_2D_ARRAY = function(this1) {
	return this1.UNSIGNED_INT_SAMPLER_2D_ARRAY;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_MAX_SAMPLES = function(this1) {
	return this1.MAX_SAMPLES;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_SAMPLER_BINDING = function(this1) {
	return this1.SAMPLER_BINDING;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_PIXEL_PACK_BUFFER = function(this1) {
	return this1.PIXEL_PACK_BUFFER;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_PIXEL_UNPACK_BUFFER = function(this1) {
	return this1.PIXEL_UNPACK_BUFFER;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_PIXEL_PACK_BUFFER_BINDING = function(this1) {
	return this1.PIXEL_PACK_BUFFER_BINDING;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_PIXEL_UNPACK_BUFFER_BINDING = function(this1) {
	return this1.PIXEL_UNPACK_BUFFER_BINDING;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_COPY_READ_BUFFER = function(this1) {
	return this1.COPY_READ_BUFFER;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_COPY_WRITE_BUFFER = function(this1) {
	return this1.COPY_WRITE_BUFFER;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_COPY_READ_BUFFER_BINDING = function(this1) {
	return this1.COPY_READ_BUFFER_BINDING;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_COPY_WRITE_BUFFER_BINDING = function(this1) {
	return this1.COPY_WRITE_BUFFER_BINDING;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_FLOAT_MAT2x3 = function(this1) {
	return this1.FLOAT_MAT2x3;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_FLOAT_MAT2x4 = function(this1) {
	return this1.FLOAT_MAT2x4;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_FLOAT_MAT3x2 = function(this1) {
	return this1.FLOAT_MAT3x2;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_FLOAT_MAT3x4 = function(this1) {
	return this1.FLOAT_MAT3x4;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_FLOAT_MAT4x2 = function(this1) {
	return this1.FLOAT_MAT4x2;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_FLOAT_MAT4x3 = function(this1) {
	return this1.FLOAT_MAT4x3;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_UNSIGNED_INT_VEC2 = function(this1) {
	return this1.UNSIGNED_INT_VEC2;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_UNSIGNED_INT_VEC3 = function(this1) {
	return this1.UNSIGNED_INT_VEC3;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_UNSIGNED_INT_VEC4 = function(this1) {
	return this1.UNSIGNED_INT_VEC4;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_UNSIGNED_NORMALIZED = function(this1) {
	return this1.UNSIGNED_NORMALIZED;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_SIGNED_NORMALIZED = function(this1) {
	return this1.SIGNED_NORMALIZED;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_VERTEX_ATTRIB_ARRAY_INTEGER = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_INTEGER;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_VERTEX_ATTRIB_ARRAY_DIVISOR = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_DIVISOR;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TRANSFORM_FEEDBACK_BUFFER_MODE = function(this1) {
	return this1.TRANSFORM_FEEDBACK_BUFFER_MODE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = function(this1) {
	return this1.MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TRANSFORM_FEEDBACK_VARYINGS = function(this1) {
	return this1.TRANSFORM_FEEDBACK_VARYINGS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TRANSFORM_FEEDBACK_BUFFER_START = function(this1) {
	return this1.TRANSFORM_FEEDBACK_BUFFER_START;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TRANSFORM_FEEDBACK_BUFFER_SIZE = function(this1) {
	return this1.TRANSFORM_FEEDBACK_BUFFER_SIZE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = function(this1) {
	return this1.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = function(this1) {
	return this1.MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = function(this1) {
	return this1.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_INTERLEAVED_ATTRIBS = function(this1) {
	return this1.INTERLEAVED_ATTRIBS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_SEPARATE_ATTRIBS = function(this1) {
	return this1.SEPARATE_ATTRIBS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TRANSFORM_FEEDBACK_BUFFER = function(this1) {
	return this1.TRANSFORM_FEEDBACK_BUFFER;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TRANSFORM_FEEDBACK_BUFFER_BINDING = function(this1) {
	return this1.TRANSFORM_FEEDBACK_BUFFER_BINDING;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TRANSFORM_FEEDBACK = function(this1) {
	return this1.TRANSFORM_FEEDBACK;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TRANSFORM_FEEDBACK_PAUSED = function(this1) {
	return this1.TRANSFORM_FEEDBACK_PAUSED;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TRANSFORM_FEEDBACK_ACTIVE = function(this1) {
	return this1.TRANSFORM_FEEDBACK_ACTIVE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TRANSFORM_FEEDBACK_BINDING = function(this1) {
	return this1.TRANSFORM_FEEDBACK_BINDING;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_FRAMEBUFFER_ATTACHMENT_RED_SIZE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_RED_SIZE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_FRAMEBUFFER_DEFAULT = function(this1) {
	return this1.FRAMEBUFFER_DEFAULT;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_DEPTH24_STENCIL8 = function(this1) {
	return this1.DEPTH24_STENCIL8;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_DRAW_FRAMEBUFFER_BINDING = function(this1) {
	return this1.DRAW_FRAMEBUFFER_BINDING;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_READ_FRAMEBUFFER = function(this1) {
	return this1.READ_FRAMEBUFFER;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_DRAW_FRAMEBUFFER = function(this1) {
	return this1.DRAW_FRAMEBUFFER;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_READ_FRAMEBUFFER_BINDING = function(this1) {
	return this1.READ_FRAMEBUFFER_BINDING;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_RENDERBUFFER_SAMPLES = function(this1) {
	return this1.RENDERBUFFER_SAMPLES;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = function(this1) {
	return this1.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_UNIFORM_BUFFER = function(this1) {
	return this1.UNIFORM_BUFFER;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_UNIFORM_BUFFER_BINDING = function(this1) {
	return this1.UNIFORM_BUFFER_BINDING;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_UNIFORM_BUFFER_START = function(this1) {
	return this1.UNIFORM_BUFFER_START;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_UNIFORM_BUFFER_SIZE = function(this1) {
	return this1.UNIFORM_BUFFER_SIZE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_MAX_VERTEX_UNIFORM_BLOCKS = function(this1) {
	return this1.MAX_VERTEX_UNIFORM_BLOCKS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_MAX_FRAGMENT_UNIFORM_BLOCKS = function(this1) {
	return this1.MAX_FRAGMENT_UNIFORM_BLOCKS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_MAX_COMBINED_UNIFORM_BLOCKS = function(this1) {
	return this1.MAX_COMBINED_UNIFORM_BLOCKS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_MAX_UNIFORM_BUFFER_BINDINGS = function(this1) {
	return this1.MAX_UNIFORM_BUFFER_BINDINGS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_MAX_UNIFORM_BLOCK_SIZE = function(this1) {
	return this1.MAX_UNIFORM_BLOCK_SIZE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = function(this1) {
	return this1.MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = function(this1) {
	return this1.MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_UNIFORM_BUFFER_OFFSET_ALIGNMENT = function(this1) {
	return this1.UNIFORM_BUFFER_OFFSET_ALIGNMENT;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_ACTIVE_UNIFORM_BLOCKS = function(this1) {
	return this1.ACTIVE_UNIFORM_BLOCKS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_UNIFORM_TYPE = function(this1) {
	return this1.UNIFORM_TYPE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_UNIFORM_SIZE = function(this1) {
	return this1.UNIFORM_SIZE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_UNIFORM_BLOCK_INDEX = function(this1) {
	return this1.UNIFORM_BLOCK_INDEX;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_UNIFORM_OFFSET = function(this1) {
	return this1.UNIFORM_OFFSET;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_UNIFORM_ARRAY_STRIDE = function(this1) {
	return this1.UNIFORM_ARRAY_STRIDE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_UNIFORM_MATRIX_STRIDE = function(this1) {
	return this1.UNIFORM_MATRIX_STRIDE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_UNIFORM_IS_ROW_MAJOR = function(this1) {
	return this1.UNIFORM_IS_ROW_MAJOR;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_UNIFORM_BLOCK_BINDING = function(this1) {
	return this1.UNIFORM_BLOCK_BINDING;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_UNIFORM_BLOCK_DATA_SIZE = function(this1) {
	return this1.UNIFORM_BLOCK_DATA_SIZE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_UNIFORM_BLOCK_ACTIVE_UNIFORMS = function(this1) {
	return this1.UNIFORM_BLOCK_ACTIVE_UNIFORMS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = function(this1) {
	return this1.UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = function(this1) {
	return this1.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = function(this1) {
	return this1.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_OBJECT_TYPE = function(this1) {
	return this1.OBJECT_TYPE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_SYNC_CONDITION = function(this1) {
	return this1.SYNC_CONDITION;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_SYNC_STATUS = function(this1) {
	return this1.SYNC_STATUS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_SYNC_FLAGS = function(this1) {
	return this1.SYNC_FLAGS;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_SYNC_FENCE = function(this1) {
	return this1.SYNC_FENCE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_SYNC_GPU_COMMANDS_COMPLETE = function(this1) {
	return this1.SYNC_GPU_COMMANDS_COMPLETE;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_UNSIGNALED = function(this1) {
	return this1.UNSIGNALED;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_SIGNALED = function(this1) {
	return this1.SIGNALED;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_ALREADY_SIGNALED = function(this1) {
	return this1.ALREADY_SIGNALED;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TIMEOUT_EXPIRED = function(this1) {
	return this1.TIMEOUT_EXPIRED;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_CONDITION_SATISFIED = function(this1) {
	return this1.CONDITION_SATISFIED;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_WAIT_FAILED = function(this1) {
	return this1.WAIT_FAILED;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_SYNC_FLUSH_COMMANDS_BIT = function(this1) {
	return this1.SYNC_FLUSH_COMMANDS_BIT;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_COLOR = function(this1) {
	return this1.COLOR;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_DEPTH = function(this1) {
	return this1.DEPTH;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_STENCIL = function(this1) {
	return this1.STENCIL;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_MIN = function(this1) {
	return this1.MIN;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_MAX = function(this1) {
	return this1.MAX;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_DEPTH_COMPONENT24 = function(this1) {
	return this1.DEPTH_COMPONENT24;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_STREAM_READ = function(this1) {
	return this1.STREAM_READ;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_STREAM_COPY = function(this1) {
	return this1.STREAM_COPY;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_STATIC_READ = function(this1) {
	return this1.STATIC_READ;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_STATIC_COPY = function(this1) {
	return this1.STATIC_COPY;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_DYNAMIC_READ = function(this1) {
	return this1.DYNAMIC_READ;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_DYNAMIC_COPY = function(this1) {
	return this1.DYNAMIC_COPY;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_DEPTH_COMPONENT32F = function(this1) {
	return this1.DEPTH_COMPONENT32F;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_DEPTH32F_STENCIL8 = function(this1) {
	return this1.DEPTH32F_STENCIL8;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_INVALID_INDEX = function(this1) {
	return this1.INVALID_INDEX;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_TIMEOUT_IGNORED = function(this1) {
	return this1.TIMEOUT_IGNORED;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.get_MAX_CLIENT_WAIT_TIMEOUT_WEBGL = function(this1) {
	return this1.MAX_CLIENT_WAIT_TIMEOUT_WEBGL;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.activeTexture = function(this1,texture) {
	this1.activeTexture(texture);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.attachShader = function(this1,program,shader) {
	this1.attachShader(program,shader);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.beginQuery = function(this1,target,query) {
	this1.beginQuery(target,query);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.beginTransformFeedback = function(this1,primitiveNode) {
	this1.beginTransformFeedback(primitiveNode);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.bindAttribLocation = function(this1,program,index,name) {
	this1.bindAttribLocation(program,index,name);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.bindBuffer = function(this1,target,buffer) {
	this1.bindBuffer(target,buffer);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.bindBufferBase = function(this1,target,index,buffer) {
	this1.bindBufferBase(target,index,buffer);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.bindBufferRange = function(this1,target,index,buffer,offset,size) {
	this1.bindBufferRange(target,index,buffer,offset,size);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.bindFramebuffer = function(this1,target,framebuffer) {
	this1.bindFramebuffer(target,framebuffer);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.bindRenderbuffer = function(this1,target,renderbuffer) {
	this1.bindRenderbuffer(target,renderbuffer);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.bindSampler = function(this1,unit,sampler) {
	this1.bindSampler(unit,sampler);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.bindTexture = function(this1,target,texture) {
	this1.bindTexture(target,texture);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.bindTransformFeedback = function(this1,target,transformFeedback) {
	this1.bindTransformFeedback(target,transformFeedback);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.bindVertexArray = function(this1,vertexArray) {
	this1.bindVertexArray(vertexArray);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.blendColor = function(this1,red,green,blue,alpha) {
	this1.blendColor(red,green,blue,alpha);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.blendEquation = function(this1,mode) {
	this1.blendEquation(mode);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.blendEquationSeparate = function(this1,modeRGB,modeAlpha) {
	this1.blendEquationSeparate(modeRGB,modeAlpha);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.blendFunc = function(this1,sfactor,dfactor) {
	this1.blendFunc(sfactor,dfactor);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.blendFuncSeparate = function(this1,srcRGB,dstRGB,srcAlpha,dstAlpha) {
	this1.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.blitFramebuffer = function(this1,srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter) {
	this1.blitFramebuffer(srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.bufferData = function(this1,target,srcData,usage,srcOffset,length) {
	this1.bufferDataWEBGL(target,srcData,usage,srcOffset,length);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.bufferSubData = function(this1,target,offset,srcData,srcOffset,length) {
	this1.bufferSubDataWEBGL(target,offset,srcData,srcOffset,length);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.checkFramebufferStatus = function(this1,target) {
	return this1.checkFramebufferStatus(target);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.clear = function(this1,mask) {
	this1.clear(mask);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.clearBufferfi = function(this1,buffer,drawbuffer,depth,stencil) {
	this1.clearBufferfi(buffer,drawbuffer,depth,stencil);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.clearBufferfv = function(this1,buffer,drawbuffer,values,srcOffset) {
	this1.clearBufferfvWEBGL(buffer,drawbuffer,values,srcOffset);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.clearBufferiv = function(this1,buffer,drawbuffer,values,srcOffset) {
	this1.clearBufferivWEBGL(buffer,drawbuffer,values,srcOffset);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.clearBufferuiv = function(this1,buffer,drawbuffer,values,srcOffset) {
	this1.clearBufferuivWEBGL(buffer,drawbuffer,values,srcOffset);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.clearColor = function(this1,red,green,blue,alpha) {
	this1.clearColor(red,green,blue,alpha);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.clearDepth = function(this1,depth) {
	this1.clearDepthf(depth);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.clearStencil = function(this1,s) {
	this1.clearStencil(s);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.clientWaitSync = function(this1,sync,flags,timeout) {
	return this1.clientWaitSync(sync,flags,timeout);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.colorMask = function(this1,red,green,blue,alpha) {
	this1.colorMask(red,green,blue,alpha);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.compileShader = function(this1,shader) {
	this1.compileShader(shader);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.compressedTexImage2D = function(this1,target,level,internalformat,width,height,border,srcData,srcOffset,srcLengthOverride) {
	this1.compressedTexImage2DWEBGL(target,level,internalformat,width,height,border,srcData,srcOffset,srcLengthOverride);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.compressedTexImage3D = function(this1,target,level,internalformat,width,height,depth,border,srcData,srcOffset,srcLengthOverride) {
	this1.compressedTexImage3DWEBGL(target,level,internalformat,width,height,depth,border,srcData,srcOffset,srcLengthOverride);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.compressedTexSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,srcLengthOverride) {
	this1.compressedTexSubImage2DWEBGL(target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,srcLengthOverride);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.compressedTexSubImage3D = function(this1,target,level,xoffset,yoffset,zoffset,width,height,depth,format,srcData,srcOffset,srcLengthOverride) {
	this1.compressedTexSubImage3DWEBGL(target,level,xoffset,yoffset,zoffset,width,height,depth,format,srcData,srcOffset,srcLengthOverride);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.copyBufferSubData = function(this1,readTarget,writeTarget,readOffset,writeOffset,size) {
	this1.copyBufferSubData(readTarget,writeTarget,readOffset,writeOffset,size);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.copyTexImage2D = function(this1,target,level,internalformat,x,y,width,height,border) {
	this1.copyTexImage2D(target,level,internalformat,x,y,width,height,border);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.copyTexSubImage2D = function(this1,target,level,xoffset,yoffset,x,y,width,height) {
	this1.copyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.copyTexSubImage3D = function(this1,target,level,xoffset,yoffset,zoffset,x,y,width,height) {
	this1.copyTexSubImage3D(target,level,xoffset,yoffset,zoffset,x,y,width,height);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.createBuffer = function(this1) {
	return this1.createBuffer();
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.createFramebuffer = function(this1) {
	return this1.createFramebuffer();
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.createProgram = function(this1) {
	return this1.createProgram();
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.createQuery = function(this1) {
	return this1.createQuery();
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.createRenderbuffer = function(this1) {
	return this1.createRenderbuffer();
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.createSampler = function(this1) {
	return this1.createSampler();
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.createShader = function(this1,type) {
	return this1.createShader(type);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.createTexture = function(this1) {
	return this1.createTexture();
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.createTransformFeedback = function(this1) {
	return this1.createTransformFeedback();
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.createVertexArray = function(this1) {
	return this1.createVertexArray();
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.cullFace = function(this1,mode) {
	this1.cullFace(mode);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.deleteBuffer = function(this1,buffer) {
	this1.deleteBuffer(buffer);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.deleteFramebuffer = function(this1,framebuffer) {
	this1.deleteFramebuffer(framebuffer);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.deleteProgram = function(this1,program) {
	this1.deleteProgram(program);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.deleteQuery = function(this1,query) {
	this1.deleteQuery(query);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.deleteRenderbuffer = function(this1,renderbuffer) {
	this1.deleteRenderbuffer(renderbuffer);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.deleteSampler = function(this1,sampler) {
	this1.deleteSampler(sampler);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.deleteShader = function(this1,shader) {
	this1.deleteShader(shader);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.deleteSync = function(this1,sync) {
	this1.deleteSync(sync);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.deleteTexture = function(this1,texture) {
	this1.deleteTexture(texture);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.deleteTransformFeedback = function(this1,transformFeedback) {
	this1.deleteTransformFeedback(transformFeedback);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.deleteVertexArray = function(this1,vertexArray) {
	this1.deleteVertexArray(vertexArray);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.depthFunc = function(this1,func) {
	this1.depthFunc(func);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.depthMask = function(this1,flag) {
	this1.depthMask(flag);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.depthRange = function(this1,zNear,zFar) {
	this1.depthRangef(zNear,zFar);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.detachShader = function(this1,program,shader) {
	this1.detachShader(program,shader);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.disable = function(this1,cap) {
	this1.disable(cap);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.disableVertexAttribArray = function(this1,index) {
	this1.disableVertexAttribArray(index);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.drawArrays = function(this1,mode,first,count) {
	this1.drawArrays(mode,first,count);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.drawArraysInstanced = function(this1,mode,first,count,instanceCount) {
	this1.drawArraysInstanced(mode,first,count,instanceCount);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.drawBuffers = function(this1,buffers) {
	this1.drawBuffers(buffers);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.drawElements = function(this1,mode,count,type,offset) {
	this1.drawElements(mode,count,type,offset);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.drawElementsInstanced = function(this1,mode,count,type,offset,instanceCount) {
	this1.drawElementsInstanced(mode,count,type,offset,instanceCount);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.drawRangeElements = function(this1,mode,start,end,count,type,offset) {
	this1.drawRangeElements(mode,start,end,count,type,offset);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.enable = function(this1,cap) {
	this1.enable(cap);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.enableVertexAttribArray = function(this1,index) {
	this1.enableVertexAttribArray(index);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.endQuery = function(this1,target) {
	this1.endQuery(target);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.endTransformFeedback = function(this1) {
	this1.endTransformFeedback();
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.fenceSync = function(this1,condition,flags) {
	return this1.fenceSync(condition,flags);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.finish = function(this1) {
	this1.finish();
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.flush = function(this1) {
	this1.flush();
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.framebufferRenderbuffer = function(this1,target,attachment,renderbuffertarget,renderbuffer) {
	this1.framebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.framebufferTexture2D = function(this1,target,attachment,textarget,texture,level) {
	this1.framebufferTexture2D(target,attachment,textarget,texture,level);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.framebufferTextureLayer = function(this1,target,attachment,texture,level,layer) {
	this1.framebufferTextureLayer(target,attachment,texture,level,layer);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.frontFace = function(this1,mode) {
	this1.frontFace(mode);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.generateMipmap = function(this1,target) {
	this1.generateMipmap(target);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.getActiveAttrib = function(this1,program,index) {
	return this1.getActiveAttrib(program,index);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.getActiveUniform = function(this1,program,index) {
	return this1.getActiveUniform(program,index);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.getActiveUniformBlockName = function(this1,program,uniformBlockIndex) {
	return this1.getActiveUniformBlockName(program,uniformBlockIndex);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.getActiveUniformBlockParameter = function(this1,program,uniformBlockIndex,pname) {
	return this1.getActiveUniformBlockParameter(program,uniformBlockIndex,pname);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.getActiveUniforms = function(this1,program,uniformIndices,pname) {
	return this1.getActiveUniforms(program,uniformIndices,pname);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.getAttachedShaders = function(this1,program) {
	return this1.getAttachedShaders(program);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.getAttribLocation = function(this1,program,name) {
	return this1.getAttribLocation(program,name);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.getBufferParameter = function(this1,target,pname) {
	return this1.getBufferParameter(target,pname);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.getBufferSubData = function(this1,target,srcByteOffset,dstData,srcOffset,length) {
	this1.getBufferSubDataWEBGL(target,srcByteOffset,dstData,srcOffset,length);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.getContextAttributes = function(this1) {
	return this1.getContextAttributes();
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.getError = function(this1) {
	return this1.getError();
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.getExtension = function(this1,name) {
	return this1.getExtension(name);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.getFragDataLocation = function(this1,program,name) {
	return this1.getFragDataLocation(program,name);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.getFramebufferAttachmentParameter = function(this1,target,attachment,pname) {
	return this1.getFramebufferAttachmentParameter(target,attachment,pname);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.getIndexedParameter = function(this1,target,index) {
	return this1.getIndexedParameter(target,index);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.getInternalformatParameter = function(this1,target,internalformat,pname) {
	return this1.getInternalformatParameter(target,internalformat,pname);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.getParameter = function(this1,pname) {
	return this1.getParameter(pname);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.getProgramInfoLog = function(this1,program) {
	return this1.getProgramInfoLog(program);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.getProgramParameter = function(this1,program,pname) {
	return this1.getProgramParameter(program,pname);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.getQuery = function(this1,target,pname) {
	return this1.getQuery(target,pname);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.getQueryParameter = function(this1,query,pname) {
	return this1.getQueryParameter(query,pname);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.getRenderbufferParameter = function(this1,target,pname) {
	return this1.getRenderbufferParameter(target,pname);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.getSamplerParameter = function(this1,sampler,pname) {
	return this1.getSamplerParameter(sampler,pname);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.getShaderInfoLog = function(this1,shader) {
	return this1.getShaderInfoLog(shader);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.getShaderParameter = function(this1,shader,pname) {
	return this1.getShaderParameter(shader,pname);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.getShaderPrecisionFormat = function(this1,shadertype,precisiontype) {
	return this1.getShaderPrecisionFormat(shadertype,precisiontype);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.getShaderSource = function(this1,shader) {
	return this1.getShaderSource(shader);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.getSupportedExtensions = function(this1) {
	return this1.getSupportedExtensions();
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.getSyncParameter = function(this1,sync,pname) {
	return this1.getSyncParameter(sync,pname);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.getTexParameter = function(this1,target,pname) {
	return this1.getTexParameter(target,pname);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.getTransformFeedbackVarying = function(this1,program,index) {
	return this1.getTransformFeedbackVarying(program,index);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.getUniform = function(this1,program,location) {
	return this1.getUniform(program,location);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.getUniformBlockIndex = function(this1,program,uniformBlockName) {
	return this1.getUniformBlockIndex(program,uniformBlockName);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.getUniformIndices = function(this1,program,uniformNames) {
	return this1.getUniformIndices(program,uniformNames);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.getUniformLocation = function(this1,program,name) {
	return this1.getUniformLocation(program,name);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.getVertexAttrib = function(this1,index,pname) {
	return this1.getVertexAttrib(index,pname);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.getVertexAttribOffset = function(this1,index,pname) {
	return this1.getVertexAttribPointerv(index,pname);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.hint = function(this1,target,mode) {
	this1.hint(target,mode);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.invalidateFramebuffer = function(this1,target,attachments) {
	this1.invalidateFramebuffer(target,attachments);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.invalidateSubFramebuffer = function(this1,target,attachments,x,y,width,height) {
	this1.invalidateSubFramebuffer(target,attachments,x,y,width,height);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.isBuffer = function(this1,buffer) {
	return this1.isBuffer(buffer);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.isContextLost = function(this1) {
	return this1.isContextLost();
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.isEnabled = function(this1,cap) {
	return this1.isEnabled(cap);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.isFramebuffer = function(this1,framebuffer) {
	return this1.isFramebuffer(framebuffer);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.isProgram = function(this1,program) {
	return this1.isProgram(program);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.isQuery = function(this1,query) {
	return this1.isQuery(query);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.isRenderbuffer = function(this1,renderbuffer) {
	return this1.isRenderbuffer(renderbuffer);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.isSampler = function(this1,sampler) {
	return this1.isSampler(sampler);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.isShader = function(this1,shader) {
	return this1.isShader(shader);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.isTexture = function(this1,texture) {
	return this1.isTexture(texture);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.isTransformFeedback = function(this1,transformFeedback) {
	return this1.isTransformFeedback(transformFeedback);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.isVertexArray = function(this1,vertexArray) {
	return this1.isVertexArray(vertexArray);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.lineWidth = function(this1,width) {
	this1.lineWidth(width);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.linkProgram = function(this1,program) {
	this1.linkProgram(program);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.pauseTransformFeedback = function(this1) {
	this1.pauseTransformFeedback();
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.pixelStorei = function(this1,pname,param) {
	this1.pixelStorei(pname,param);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.polygonOffset = function(this1,factor,units) {
	this1.polygonOffset(factor,units);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.readBuffer = function(this1,src) {
	this1.readBuffer(src);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.readPixels = function(this1,x,y,width,height,format,type,pixels,dstOffset) {
	this1.readPixelsWEBGL(x,y,width,height,format,type,pixels,dstOffset);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.renderbufferStorage = function(this1,target,internalformat,width,height) {
	this1.renderbufferStorage(target,internalformat,width,height);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.renderbufferStorageMultisample = function(this1,target,samples,internalformat,width,height) {
	this1.renderbufferStorageMultisample(target,samples,internalformat,width,height);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.resumeTransformFeedback = function(this1) {
	this1.resumeTransformFeedback();
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.sampleCoverage = function(this1,value,invert) {
	this1.sampleCoverage(value,invert);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.samplerParameterf = function(this1,sampler,pname,param) {
	this1.samplerParameterf(sampler,pname,param);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.samplerParameteri = function(this1,sampler,pname,param) {
	this1.samplerParameteri(sampler,pname,param);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.scissor = function(this1,x,y,width,height) {
	this1.scissor(x,y,width,height);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.shaderSource = function(this1,shader,source) {
	this1.shaderSource(shader,source);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.stencilFunc = function(this1,func,ref,mask) {
	this1.stencilFunc(func,ref,mask);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.stencilFuncSeparate = function(this1,face,func,ref,mask) {
	this1.stencilFuncSeparate(face,func,ref,mask);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.stencilMask = function(this1,mask) {
	this1.stencilMask(mask);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.stencilMaskSeparate = function(this1,face,mask) {
	this1.stencilMaskSeparate(face,mask);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.stencilOp = function(this1,fail,zfail,zpass) {
	this1.stencilOp(fail,zfail,zpass);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.stencilOpSeparate = function(this1,face,fail,zfail,zpass) {
	this1.stencilOpSeparate(face,fail,zfail,zpass);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.texImage2D = function(this1,target,level,internalformat,width,height,border,format,type,srcData,srcOffset) {
	this1.texImage2DWEBGL(target,level,internalformat,width,height,border,format,type,srcData,srcOffset);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.texImage3D = function(this1,target,level,internalformat,width,height,depth,border,format,type,srcData,srcOffset) {
	this1.texImage3DWEBGL(target,level,internalformat,width,height,depth,border,format,type,srcData,srcOffset);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.texStorage2D = function(this1,target,level,internalformat,width,height) {
	this1.texStorage2D(target,level,internalformat,width,height);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.texStorage3D = function(this1,target,level,internalformat,width,height,depth) {
	this1.texStorage3D(target,level,internalformat,width,height,depth);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.texParameterf = function(this1,target,pname,param) {
	this1.texParameterf(target,pname,param);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.texParameteri = function(this1,target,pname,param) {
	this1.texParameteri(target,pname,param);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.texSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset) {
	this1.texSubImage2DWEBGL(target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.texSubImage3D = function(this1,target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,srcData,srcOffset) {
	this1.texSubImage3DWEBGL(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,srcData,srcOffset);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.transformFeedbackVaryings = function(this1,program,varyings,bufferMode) {
	this1.transformFeedbackVaryings(program,varyings,bufferMode);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.uniform1f = function(this1,location,v0) {
	this1.uniform1f(location,v0);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.uniform1fv = function(this1,location,v) {
	this1.uniform1fvWEBGL(location,v);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.uniform1i = function(this1,location,v0) {
	this1.uniform1i(location,v0);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.uniform1iv = function(this1,location,v) {
	this1.uniform1ivWEBGL(location,v);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.uniform1ui = function(this1,location,v0) {
	this1.uniform1ui(location,v0);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.uniform1uiv = function(this1,location,v) {
	this1.uniform1uivWEBGL(location,v);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.uniform2f = function(this1,location,v0,v1) {
	this1.uniform2f(location,v0,v1);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.uniform2fv = function(this1,location,v) {
	this1.uniform2fvWEBGL(location,v);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.uniform2i = function(this1,location,v0,v1) {
	this1.uniform2i(location,v0,v1);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.uniform2iv = function(this1,location,v) {
	this1.uniform2fvWEBGL(location,v);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.uniform2ui = function(this1,location,v0,v1) {
	this1.uniform2ui(location,v0,v1);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.uniform2uiv = function(this1,location,v) {
	this1.uniform2uivWEBGL(location,v);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.uniform3f = function(this1,location,v0,v1,v2) {
	this1.uniform3f(location,v0,v1,v2);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.uniform3fv = function(this1,location,v) {
	this1.uniform3fvWEBGL(location,v);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.uniform3i = function(this1,location,v0,v1,v2) {
	this1.uniform3i(location,v0,v1,v2);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.uniform3iv = function(this1,location,v) {
	this1.uniform3ivWEBGL(location,v);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.uniform3ui = function(this1,location,v0,v1,v2) {
	this1.uniform3ui(location,v0,v1,v2);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.uniform3uiv = function(this1,location,v) {
	this1.uniform3uivWEBGL(location,v);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.uniform4f = function(this1,location,v0,v1,v2,v3) {
	this1.uniform4f(location,v0,v1,v2,v3);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.uniform4fv = function(this1,location,v) {
	this1.uniform4fvWEBGL(location,v);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.uniform4i = function(this1,location,v0,v1,v2,v3) {
	this1.uniform4i(location,v0,v1,v2,v3);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.uniform4iv = function(this1,location,v) {
	this1.uniform4ivWEBGL(location,v);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.uniform4ui = function(this1,location,v0,v1,v2,v3) {
	this1.uniform4ui(location,v0,v1,v2,v3);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.uniform4uiv = function(this1,location,v) {
	this1.uniform4uivWEBGL(location,v);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.uniformBlockBinding = function(this1,program,uniformBlockIndex,uniformBlockBinding) {
	this1.uniformBlockBinding(program,uniformBlockIndex,uniformBlockBinding);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.uniformMatrix2fv = function(this1,location,transpose,v,srcOffset,srcLength) {
	this1.uniformMatrix2fvWEBGL(location,transpose,v,srcOffset,srcLength);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.uniformMatrix2x3fv = function(this1,location,transpose,v,srcOffset,srcLength) {
	this1.uniformMatrix2x3fvWEBGL(location,transpose,v,srcOffset,srcLength);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.uniformMatrix2x4fv = function(this1,location,transpose,v,srcOffset,srcLength) {
	this1.uniformMatrix2x4fvWEBGL(location,transpose,v,srcOffset,srcLength);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.uniformMatrix3fv = function(this1,location,transpose,v,srcOffset,srcLength) {
	this1.uniformMatrix3fvWEBGL(location,transpose,v,srcOffset,srcLength);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.uniformMatrix3x2fv = function(this1,location,transpose,v,srcOffset,srcLength) {
	this1.uniformMatrix3x2fvWEBGL(location,transpose,v,srcOffset,srcLength);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.uniformMatrix3x4fv = function(this1,location,transpose,v,srcOffset,srcLength) {
	this1.uniformMatrix3x4fvWEBGL(location,transpose,v,srcOffset,srcLength);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.uniformMatrix4fv = function(this1,location,transpose,v,srcOffset,srcLength) {
	this1.uniformMatrix4fvWEBGL(location,transpose,v,srcOffset,srcLength);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.uniformMatrix4x2fv = function(this1,location,transpose,v,srcOffset,srcLength) {
	this1.uniformMatrix4x2fvWEBGL(location,transpose,v,srcOffset,srcLength);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.uniformMatrix4x3fv = function(this1,location,transpose,v,srcOffset,srcLength) {
	this1.uniformMatrix4x3fvWEBGL(location,transpose,v,srcOffset,srcLength);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.useProgram = function(this1,program) {
	this1.useProgram(program);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.validateProgram = function(this1,program) {
	this1.validateProgram(program);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.vertexAttrib1f = function(this1,indx,x) {
	this1.vertexAttrib1f(indx,x);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.vertexAttrib1fv = function(this1,indx,values) {
	this1.vertexAttrib1fv(indx,$hx_$exports_lime_utils_DataPointer.fromArrayBufferView(values));
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.vertexAttrib2f = function(this1,indx,x,y) {
	this1.vertexAttrib2f(indx,x,y);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.vertexAttrib2fv = function(this1,indx,values) {
	this1.vertexAttrib2fv(indx,$hx_$exports_lime_utils_DataPointer.fromArrayBufferView(values));
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.vertexAttrib3f = function(this1,indx,x,y,z) {
	this1.vertexAttrib3f(indx,x,y,z);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.vertexAttrib3fv = function(this1,indx,values) {
	this1.vertexAttrib3fv(indx,$hx_$exports_lime_utils_DataPointer.fromArrayBufferView(values));
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.vertexAttrib4f = function(this1,indx,x,y,z,w) {
	this1.vertexAttrib4f(indx,x,y,z,w);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.vertexAttrib4fv = function(this1,indx,values) {
	this1.vertexAttrib4fv(indx,$hx_$exports_lime_utils_DataPointer.fromArrayBufferView(values));
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.vertexAttribDivisor = function(this1,index,divisor) {
	this1.vertexAttribDivisor(index,divisor);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.vertexAttribI4i = function(this1,indx,x,y,z,w) {
	this1.vertexAttribI4i(indx,x,y,z,w);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.vertexAttribI4iv = function(this1,indx,values) {
	this1.vertexAttribI4iv(indx,$hx_$exports_lime_utils_DataPointer.fromArrayBufferView(values));
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.vertexAttribI4ui = function(this1,indx,x,y,z,w) {
	this1.vertexAttribI4ui(indx,x,y,z,w);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.vertexAttribI4uiv = function(this1,indx,values) {
	this1.vertexAttribI4uiv(indx,$hx_$exports_lime_utils_DataPointer.fromArrayBufferView(values));
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.vertexAttribPointer = function(this1,indx,size,type,normalized,stride,offset) {
	this1.vertexAttribPointer(indx,size,type,normalized,stride,offset);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.viewport = function(this1,x,y,width,height) {
	this1.viewport(x,y,width,height);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.waitSync = function(this1,sync,flags,timeout) {
	this1.waitSync(sync,flags,timeout);
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.fromGL = function(gl) {
	return $hx_exports.lime.graphics.opengl.GL.context;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.fromGLES3Context = function(gl) {
	return gl;
};
$hx_$exports_lime_graphics_opengl_WebGL2Context.toWebGLContext = function(gl) {
	return gl;
};
var $hx_$exports_lime_graphics_opengl_WebGLContext = {};
$hxClasses["$hx_exports.lime.graphics.opengl.WebGLContext"] = $hx_$exports_lime_graphics_opengl_WebGLContext;
$hx_$exports_lime_graphics_opengl_WebGLContext.__name__ = ["$hx_exports","lime","graphics","opengl","WebGLContext"];
$hx_$exports_lime_graphics_opengl_WebGLContext.bufferData = function(this1,target,srcData,usage) {
	this1.bufferDataWEBGL(target,srcData,usage,null,null);
};
$hx_$exports_lime_graphics_opengl_WebGLContext.bufferSubData = function(this1,target,offset,srcData) {
	this1.bufferSubDataWEBGL(target,offset,srcData,null,null);
};
$hx_$exports_lime_graphics_opengl_WebGLContext.compressedTexImage2D = function(this1,target,level,internalformat,width,height,border,srcData) {
	this1.compressedTexImage2DWEBGL(target,level,internalformat,width,height,border,srcData,null,null);
};
$hx_$exports_lime_graphics_opengl_WebGLContext.compressedTexSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,srcData) {
	this1.compressedTexSubImage2DWEBGL(target,level,xoffset,yoffset,width,height,format,srcData,null,null);
};
$hx_$exports_lime_graphics_opengl_WebGLContext.readPixels = function(this1,x,y,width,height,format,type,pixels) {
	this1.readPixelsWEBGL(x,y,width,height,format,type,pixels,null);
};
$hx_$exports_lime_graphics_opengl_WebGLContext.texImage2D = function(this1,target,level,internalformat,width,height,border,format,type,srcData) {
	this1.texImage2DWEBGL(target,level,internalformat,width,height,border,format,type,srcData,null);
};
$hx_$exports_lime_graphics_opengl_WebGLContext.texSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,type,srcData) {
	this1.texSubImage2DWEBGL(target,level,xoffset,yoffset,width,height,format,type,srcData,null);
};
$hx_$exports_lime_graphics_opengl_WebGLContext.uniformMatrix2fv = function(this1,location,transpose,v) {
	this1.uniformMatrix2fvWEBGL(location,transpose,v,null,null);
};
$hx_$exports_lime_graphics_opengl_WebGLContext.uniformMatrix3fv = function(this1,location,transpose,v) {
	this1.uniformMatrix3fvWEBGL(location,transpose,v,null,null);
};
$hx_$exports_lime_graphics_opengl_WebGLContext.uniformMatrix4fv = function(this1,location,transpose,v) {
	this1.uniformMatrix4fvWEBGL(location,transpose,v,null,null);
};
$hx_$exports_lime_graphics_opengl_WebGLContext.fromGL = function(gl) {
	return $hx_exports.lime.graphics.opengl.GL.context;
};
$hx_$exports_lime_graphics_opengl_WebGLContext.fromGLES2Context = function(gl) {
	return gl;
};
$hx_$exports_lime_graphics_opengl_WebGLContext.fromGLES3Context = function(gl) {
	return gl;
};
var $hx_$exports_lime_math_ColorMatrix = {};
$hxClasses["$hx_exports.lime.math.ColorMatrix"] = $hx_$exports_lime_math_ColorMatrix;
$hx_$exports_lime_math_ColorMatrix.__name__ = ["$hx_exports","lime","math","ColorMatrix"];
$hx_$exports_lime_math_ColorMatrix.__properties__ = {set_redOffset:"set_redOffset",get_redOffset:"get_redOffset",set_redMultiplier:"set_redMultiplier",get_redMultiplier:"get_redMultiplier",set_greenOffset:"set_greenOffset",get_greenOffset:"get_greenOffset",set_greenMultiplier:"set_greenMultiplier",get_greenMultiplier:"get_greenMultiplier",set_color:"set_color",get_color:"get_color",set_blueOffset:"set_blueOffset",get_blueOffset:"get_blueOffset",set_blueMultiplier:"set_blueMultiplier",get_blueMultiplier:"get_blueMultiplier",set_alphaOffset:"set_alphaOffset",get_alphaOffset:"get_alphaOffset",set_alphaMultiplier:"set_alphaMultiplier",get_alphaMultiplier:"get_alphaMultiplier"};
$hx_$exports_lime_math_ColorMatrix.__alphaTable = null;
$hx_$exports_lime_math_ColorMatrix.__blueTable = null;
$hx_$exports_lime_math_ColorMatrix.__greenTable = null;
$hx_$exports_lime_math_ColorMatrix.__redTable = null;
$hx_$exports_lime_math_ColorMatrix._new = function(data) {
	var this1;
	if(data != null && data.length == 20) {
		this1 = data;
	} else {
		var array = $hx_$exports_lime_math_ColorMatrix.__identity;
		var this2;
		if(array != null) {
			this2 = new Float32Array(array);
		} else {
			this2 = null;
		}
		this1 = this2;
	}
	return this1;
};
$hx_$exports_lime_math_ColorMatrix.clone = function(this1) {
	var this2;
	if(this1 != null) {
		this2 = new Float32Array(this1);
	} else {
		this2 = null;
	}
	return $hx_$exports_lime_math_ColorMatrix._new(this2);
};
$hx_$exports_lime_math_ColorMatrix.concat = function(this1,second) {
	var _g = this1;
	_g[0] += second[0];
	var _g1 = this1;
	_g1[6] += second[6];
	var _g2 = this1;
	_g2[12] += second[12];
	var _g3 = this1;
	_g3[18] += second[18];
};
$hx_$exports_lime_math_ColorMatrix.copyFrom = function(this1,other) {
	this1.set(other);
};
$hx_$exports_lime_math_ColorMatrix.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 0;
	this1[6] = 1;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 0;
	this1[11] = 0;
	this1[12] = 1;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 0;
	this1[16] = 0;
	this1[17] = 0;
	this1[18] = 1;
	this1[19] = 0;
};
$hx_$exports_lime_math_ColorMatrix.getAlphaTable = function(this1) {
	if($hx_$exports_lime_math_ColorMatrix.__alphaTable == null) {
		var this2 = new Uint8Array(256);
		$hx_$exports_lime_math_ColorMatrix.__alphaTable = this2;
	}
	var value;
	$hx_$exports_lime_math_ColorMatrix.__alphaTable[0] = 0;
	var _g = 1;
	while(_g < 256) {
		var i = _g++;
		value = $hx_exports.Math.floor(i * this1[18] + this1[19] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		$hx_$exports_lime_math_ColorMatrix.__alphaTable[i] = value;
	}
	return $hx_$exports_lime_math_ColorMatrix.__alphaTable;
};
$hx_$exports_lime_math_ColorMatrix.getBlueTable = function(this1) {
	if($hx_$exports_lime_math_ColorMatrix.__blueTable == null) {
		var this2 = new Uint8Array(256);
		$hx_$exports_lime_math_ColorMatrix.__blueTable = this2;
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = $hx_exports.Math.floor(i * this1[12] + this1[14] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		$hx_$exports_lime_math_ColorMatrix.__blueTable[i] = value;
	}
	return $hx_$exports_lime_math_ColorMatrix.__blueTable;
};
$hx_$exports_lime_math_ColorMatrix.getGreenTable = function(this1) {
	if($hx_$exports_lime_math_ColorMatrix.__greenTable == null) {
		var this2 = new Uint8Array(256);
		$hx_$exports_lime_math_ColorMatrix.__greenTable = this2;
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = $hx_exports.Math.floor(i * this1[6] + this1[9] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		$hx_$exports_lime_math_ColorMatrix.__greenTable[i] = value;
	}
	return $hx_$exports_lime_math_ColorMatrix.__greenTable;
};
$hx_$exports_lime_math_ColorMatrix.getRedTable = function(this1) {
	if($hx_$exports_lime_math_ColorMatrix.__redTable == null) {
		var this2 = new Uint8Array(256);
		$hx_$exports_lime_math_ColorMatrix.__redTable = this2;
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = $hx_exports.Math.floor(i * this1[0] + this1[4] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		$hx_$exports_lime_math_ColorMatrix.__redTable[i] = value;
	}
	return $hx_$exports_lime_math_ColorMatrix.__redTable;
};
$hx_$exports_lime_math_ColorMatrix.__toFlashColorTransform = function(this1) {
	return null;
};
$hx_$exports_lime_math_ColorMatrix.get_alphaMultiplier = function(this1) {
	return this1[18];
};
$hx_$exports_lime_math_ColorMatrix.set_alphaMultiplier = function(this1,value) {
	return this1[18] = value;
};
$hx_$exports_lime_math_ColorMatrix.get_alphaOffset = function(this1) {
	return this1[19] * 255;
};
$hx_$exports_lime_math_ColorMatrix.set_alphaOffset = function(this1,value) {
	return this1[19] = value / 255;
};
$hx_$exports_lime_math_ColorMatrix.get_blueMultiplier = function(this1) {
	return this1[12];
};
$hx_$exports_lime_math_ColorMatrix.set_blueMultiplier = function(this1,value) {
	return this1[12] = value;
};
$hx_$exports_lime_math_ColorMatrix.get_blueOffset = function(this1) {
	return this1[14] * 255;
};
$hx_$exports_lime_math_ColorMatrix.set_blueOffset = function(this1,value) {
	return this1[14] = value / 255;
};
$hx_$exports_lime_math_ColorMatrix.get_color = function(this1) {
	return Std.int(this1[4] * 255) << 16 | Std.int(this1[9] * 255) << 8 | Std.int(this1[14] * 255);
};
$hx_$exports_lime_math_ColorMatrix.set_color = function(this1,value) {
	this1[4] = (value >> 16 & 255) / 255;
	this1[9] = (value >> 8 & 255) / 255;
	this1[14] = (value & 255) / 255;
	this1[0] = 0;
	this1[6] = 0;
	this1[12] = 0;
	return $hx_$exports_lime_math_ColorMatrix.get_color(this1);
};
$hx_$exports_lime_math_ColorMatrix.get_greenMultiplier = function(this1) {
	return this1[6];
};
$hx_$exports_lime_math_ColorMatrix.set_greenMultiplier = function(this1,value) {
	return this1[6] = value;
};
$hx_$exports_lime_math_ColorMatrix.get_greenOffset = function(this1) {
	return this1[9] * 255;
};
$hx_$exports_lime_math_ColorMatrix.set_greenOffset = function(this1,value) {
	return this1[9] = value / 255;
};
$hx_$exports_lime_math_ColorMatrix.get_redMultiplier = function(this1) {
	return this1[0];
};
$hx_$exports_lime_math_ColorMatrix.set_redMultiplier = function(this1,value) {
	return this1[0] = value;
};
$hx_$exports_lime_math_ColorMatrix.get_redOffset = function(this1) {
	return this1[4] * 255;
};
$hx_$exports_lime_math_ColorMatrix.set_redOffset = function(this1,value) {
	return this1[4] = value / 255;
};
$hx_$exports_lime_math_ColorMatrix.get = function(this1,index) {
	return this1[index];
};
$hx_$exports_lime_math_ColorMatrix.set = function(this1,index,value) {
	return this1[index] = value;
};
var $hx_$exports_lime_math_Matrix4 = {};
$hxClasses["$hx_exports.lime.math.Matrix4"] = $hx_$exports_lime_math_Matrix4;
$hx_$exports_lime_math_Matrix4.__name__ = ["$hx_exports","lime","math","Matrix4"];
$hx_$exports_lime_math_Matrix4.__properties__ = {set_position:"set_position",get_position:"get_position",get_determinant:"get_determinant"};
$hx_$exports_lime_math_Matrix4._new = function(data) {
	var this1;
	if(data != null && data.length == 16) {
		this1 = data;
	} else {
		var array = $hx_$exports_lime_math_Matrix4.__identity;
		var this2;
		if(array != null) {
			this2 = new Float32Array(array);
		} else {
			this2 = null;
		}
		this1 = this2;
	}
	return this1;
};
$hx_$exports_lime_math_Matrix4.append = function(this1,lhs) {
	var m111 = this1[0];
	var m121 = this1[4];
	var m131 = this1[8];
	var m141 = this1[12];
	var m112 = this1[1];
	var m122 = this1[5];
	var m132 = this1[9];
	var m142 = this1[13];
	var m113 = this1[2];
	var m123 = this1[6];
	var m133 = this1[10];
	var m143 = this1[14];
	var m114 = this1[3];
	var m124 = this1[7];
	var m134 = this1[11];
	var m144 = this1[15];
	var m211 = $hx_$exports_lime_math_Matrix4.get(lhs,0);
	var m221 = $hx_$exports_lime_math_Matrix4.get(lhs,4);
	var m231 = $hx_$exports_lime_math_Matrix4.get(lhs,8);
	var m241 = $hx_$exports_lime_math_Matrix4.get(lhs,12);
	var m212 = $hx_$exports_lime_math_Matrix4.get(lhs,1);
	var m222 = $hx_$exports_lime_math_Matrix4.get(lhs,5);
	var m232 = $hx_$exports_lime_math_Matrix4.get(lhs,9);
	var m242 = $hx_$exports_lime_math_Matrix4.get(lhs,13);
	var m213 = $hx_$exports_lime_math_Matrix4.get(lhs,2);
	var m223 = $hx_$exports_lime_math_Matrix4.get(lhs,6);
	var m233 = $hx_$exports_lime_math_Matrix4.get(lhs,10);
	var m243 = $hx_$exports_lime_math_Matrix4.get(lhs,14);
	var m214 = $hx_$exports_lime_math_Matrix4.get(lhs,3);
	var m224 = $hx_$exports_lime_math_Matrix4.get(lhs,7);
	var m234 = $hx_$exports_lime_math_Matrix4.get(lhs,11);
	var m244 = $hx_$exports_lime_math_Matrix4.get(lhs,15);
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
$hx_$exports_lime_math_Matrix4.appendRotation = function(this1,degrees,axis,pivotPoint) {
	var m = $hx_$exports_lime_math_Matrix4.__getAxisRotation(this1,axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		var p = pivotPoint;
		$hx_$exports_lime_math_Matrix4.appendTranslation(m,p.x,p.y,p.z);
	}
	$hx_$exports_lime_math_Matrix4.append(this1,m);
};
$hx_$exports_lime_math_Matrix4.appendScale = function(this1,xScale,yScale,zScale) {
	var array = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
	var this2;
	if(array != null) {
		this2 = new Float32Array(array);
	} else {
		this2 = null;
	}
	$hx_$exports_lime_math_Matrix4.append(this1,$hx_$exports_lime_math_Matrix4._new(this2));
};
$hx_$exports_lime_math_Matrix4.appendTranslation = function(this1,x,y,z) {
	this1[12] += x;
	this1[13] += y;
	this1[14] += z;
};
$hx_$exports_lime_math_Matrix4.clone = function(this1) {
	var this2;
	if(this1 != null) {
		this2 = new Float32Array(this1);
	} else {
		this2 = null;
	}
	return $hx_$exports_lime_math_Matrix4._new(this2);
};
$hx_$exports_lime_math_Matrix4.copyColumnFrom = function(this1,column,vector) {
	switch(column) {
	case 0:
		this1[0] = vector.x;
		this1[1] = vector.y;
		this1[2] = vector.z;
		this1[3] = vector.w;
		break;
	case 1:
		this1[4] = vector.x;
		this1[5] = vector.y;
		this1[6] = vector.z;
		this1[7] = vector.w;
		break;
	case 2:
		this1[8] = vector.x;
		this1[9] = vector.y;
		this1[10] = vector.z;
		this1[11] = vector.w;
		break;
	case 3:
		this1[12] = vector.x;
		this1[13] = vector.y;
		this1[14] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		$hx_exports.lime.utils.Log.error("Column " + column + " out of bounds [0, ..., 3]",{ fileName : "Matrix4.hx", lineNumber : 139, className : "lime.math._Matrix4.Matrix4_Impl_", methodName : "copyColumnFrom"});
	}
};
$hx_$exports_lime_math_Matrix4.copyColumnTo = function(this1,column,vector) {
	switch(column) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[1];
		vector.z = this1[2];
		vector.w = this1[3];
		break;
	case 1:
		vector.x = this1[4];
		vector.y = this1[5];
		vector.z = this1[6];
		vector.w = this1[7];
		break;
	case 2:
		vector.x = this1[8];
		vector.y = this1[9];
		vector.z = this1[10];
		vector.w = this1[11];
		break;
	case 3:
		vector.x = this1[12];
		vector.y = this1[13];
		vector.z = this1[14];
		vector.w = this1[15];
		break;
	default:
		$hx_exports.lime.utils.Log.error("Column " + column + " out of bounds [0, ..., 3]",{ fileName : "Matrix4.hx", lineNumber : 180, className : "lime.math._Matrix4.Matrix4_Impl_", methodName : "copyColumnTo"});
	}
};
$hx_$exports_lime_math_Matrix4.copyFrom = function(this1,other) {
	this1.set(other);
};
$hx_$exports_lime_math_Matrix4.copythisFrom = function(this1,array,index,transposeValues) {
	if(transposeValues == null) {
		transposeValues = false;
	}
	if(index == null) {
		index = 0;
	}
	if(transposeValues) {
		$hx_$exports_lime_math_Matrix4.transpose(this1);
	}
	var l = array.length - index;
	var _g1 = 0;
	var _g = l;
	while(_g1 < _g) {
		var c = _g1++;
		this1[c] = array[c + index];
	}
	if(transposeValues) {
		$hx_$exports_lime_math_Matrix4.transpose(this1);
	}
};
$hx_$exports_lime_math_Matrix4.copythisTo = function(this1,array,index,transposeValues) {
	if(transposeValues == null) {
		transposeValues = false;
	}
	if(index == null) {
		index = 0;
	}
	if(transposeValues) {
		$hx_$exports_lime_math_Matrix4.transpose(this1);
	}
	var l = this1.length;
	var _g1 = 0;
	var _g = l;
	while(_g1 < _g) {
		var c = _g1++;
		array[c + index] = this1[c];
	}
	if(transposeValues) {
		$hx_$exports_lime_math_Matrix4.transpose(this1);
	}
};
$hx_$exports_lime_math_Matrix4.copyRowFrom = function(this1,row,vector) {
	switch(row) {
	case 0:
		this1[0] = vector.x;
		this1[4] = vector.y;
		this1[8] = vector.z;
		this1[12] = vector.w;
		break;
	case 1:
		this1[1] = vector.x;
		this1[5] = vector.y;
		this1[9] = vector.z;
		this1[13] = vector.w;
		break;
	case 2:
		this1[2] = vector.x;
		this1[6] = vector.y;
		this1[10] = vector.z;
		this1[14] = vector.w;
		break;
	case 3:
		this1[3] = vector.x;
		this1[7] = vector.y;
		this1[11] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		$hx_exports.lime.utils.Log.error("Row " + row + " out of bounds [0, ..., 3]",{ fileName : "Matrix4.hx", lineNumber : 258, className : "lime.math._Matrix4.Matrix4_Impl_", methodName : "copyRowFrom"});
	}
};
$hx_$exports_lime_math_Matrix4.create2D = function(x,y,scale,rotation) {
	if(rotation == null) {
		rotation = 0;
	}
	if(scale == null) {
		scale = 1;
	}
	var theta = rotation * $hx_exports.Math.PI / 180.0;
	var c = $hx_exports.Math.cos(theta);
	var s = $hx_exports.Math.sin(theta);
	var array = [c * scale,-s * scale,0,0,s * scale,c * scale,0,0,0,0,1,0,x,y,0,1];
	var this1;
	if(array != null) {
		this1 = new Float32Array(array);
	} else {
		this1 = null;
	}
	return $hx_$exports_lime_math_Matrix4._new(this1);
};
$hx_$exports_lime_math_Matrix4.createABCD = function(a,b,c,d,tx,ty,matrix) {
	if(matrix == null) {
		matrix = $hx_$exports_lime_math_Matrix4._new();
	}
	$hx_$exports_lime_math_Matrix4.set(matrix,0,a);
	$hx_$exports_lime_math_Matrix4.set(matrix,1,b);
	$hx_$exports_lime_math_Matrix4.set(matrix,2,0);
	$hx_$exports_lime_math_Matrix4.set(matrix,3,0);
	$hx_$exports_lime_math_Matrix4.set(matrix,4,c);
	$hx_$exports_lime_math_Matrix4.set(matrix,5,d);
	$hx_$exports_lime_math_Matrix4.set(matrix,6,0);
	$hx_$exports_lime_math_Matrix4.set(matrix,7,0);
	$hx_$exports_lime_math_Matrix4.set(matrix,8,0);
	$hx_$exports_lime_math_Matrix4.set(matrix,9,0);
	$hx_$exports_lime_math_Matrix4.set(matrix,10,1);
	$hx_$exports_lime_math_Matrix4.set(matrix,11,0);
	$hx_$exports_lime_math_Matrix4.set(matrix,12,tx);
	$hx_$exports_lime_math_Matrix4.set(matrix,13,ty);
	$hx_$exports_lime_math_Matrix4.set(matrix,14,0);
	$hx_$exports_lime_math_Matrix4.set(matrix,15,1);
	return matrix;
};
$hx_$exports_lime_math_Matrix4.createOrtho = function(x0,x1,y0,y1,zNear,zFar) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	var sz = 1.0 / (zFar - zNear);
	var array = [2.0 * sx,0,0,0,0,2.0 * sy,0,0,0,0,-2.0 * sz,0,-(x0 + x1) * sx,-(y0 + y1) * sy,-(zNear + zFar) * sz,1];
	var this1;
	if(array != null) {
		this1 = new Float32Array(array);
	} else {
		this1 = null;
	}
	return $hx_$exports_lime_math_Matrix4._new(this1);
};
$hx_$exports_lime_math_Matrix4.copyRowTo = function(this1,row,vector) {
	switch(row) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[4];
		vector.z = this1[8];
		vector.w = this1[12];
		break;
	case 1:
		vector.x = this1[1];
		vector.y = this1[5];
		vector.z = this1[9];
		vector.w = this1[13];
		break;
	case 2:
		vector.x = this1[2];
		vector.y = this1[6];
		vector.z = this1[10];
		vector.w = this1[14];
		break;
	case 3:
		vector.x = this1[3];
		vector.y = this1[7];
		vector.z = this1[11];
		vector.w = this1[15];
		break;
	default:
		$hx_exports.lime.utils.Log.error("Row " + row + " out of bounds [0, ..., 3]",{ fileName : "Matrix4.hx", lineNumber : 360, className : "lime.math._Matrix4.Matrix4_Impl_", methodName : "copyRowTo"});
	}
};
$hx_$exports_lime_math_Matrix4.copyToMatrix4 = function(this1,other) {
	(js_Boot.__cast(other , Float32Array)).set(this1);
};
$hx_$exports_lime_math_Matrix4.deltaTransformVector = function(this1,v) {
	var x = v.x;
	var y = v.y;
	var z = v.z;
	return new $hx_exports.lime.math.Vector4(x * this1[0] + y * this1[4] + z * this1[8] + this1[3],x * this1[1] + y * this1[5] + z * this1[9] + this1[7],x * this1[2] + y * this1[6] + z * this1[10] + this1[11],0);
};
$hx_$exports_lime_math_Matrix4.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 1;
	this1[6] = 0;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 1;
	this1[11] = 0;
	this1[12] = 0;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 1;
};
$hx_$exports_lime_math_Matrix4.interpolate = function(thisMat,toMat,percent) {
	var m = $hx_$exports_lime_math_Matrix4._new();
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		$hx_$exports_lime_math_Matrix4.set(m,i,$hx_$exports_lime_math_Matrix4.get(thisMat,i) + ($hx_$exports_lime_math_Matrix4.get(toMat,i) - $hx_$exports_lime_math_Matrix4.get(thisMat,i)) * percent);
	}
	return m;
};
$hx_$exports_lime_math_Matrix4.interpolateTo = function(this1,toMat,percent) {
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		this1[i] += ($hx_$exports_lime_math_Matrix4.get(toMat,i) - this1[i]) * percent;
	}
};
$hx_$exports_lime_math_Matrix4.invert = function(this1) {
	var d = $hx_$exports_lime_math_Matrix4.get_determinant(this1);
	var invertable = $hx_exports.Math.abs(d) > 0.00000000001;
	if(invertable) {
		d = 1 / d;
		var m11 = this1[0];
		var m21 = this1[4];
		var m31 = this1[8];
		var m41 = this1[12];
		var m12 = this1[1];
		var m22 = this1[5];
		var m32 = this1[9];
		var m42 = this1[13];
		var m13 = this1[2];
		var m23 = this1[6];
		var m33 = this1[10];
		var m43 = this1[14];
		var m14 = this1[3];
		var m24 = this1[7];
		var m34 = this1[11];
		var m44 = this1[15];
		this1[0] = d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24));
		this1[1] = -d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14));
		this1[2] = d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14));
		this1[3] = -d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
		this1[4] = -d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24));
		this1[5] = d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14));
		this1[6] = -d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14));
		this1[7] = d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14));
		this1[8] = d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24));
		this1[9] = -d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14));
		this1[10] = d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14));
		this1[11] = -d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14));
		this1[12] = -d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23));
		this1[13] = d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13));
		this1[14] = -d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13));
		this1[15] = d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13));
	}
	return invertable;
};
$hx_$exports_lime_math_Matrix4.pointAt = function(this1,pos,at,up) {
	if(at == null) {
		at = new $hx_exports.lime.math.Vector4(0,0,-1);
	}
	if(up == null) {
		up = new $hx_exports.lime.math.Vector4(0,-1,0);
	}
	var dir = at.subtract(pos);
	var vup = up.clone();
	dir.normalize();
	vup.normalize();
	var dir2 = dir.clone();
	dir2.scaleBy(vup.dotProduct(dir));
	vup = vup.subtract(dir2);
	if(vup.get_length() > 0) {
		vup.normalize();
	} else if(dir.x != 0) {
		vup = new $hx_exports.lime.math.Vector4(-dir.y,dir.x,0);
	} else {
		vup = new $hx_exports.lime.math.Vector4(1,0,0);
	}
	var right = vup.crossProduct(dir);
	right.normalize();
	this1[0] = right.x;
	this1[4] = right.y;
	this1[8] = right.z;
	this1[12] = 0.0;
	this1[1] = vup.x;
	this1[5] = vup.y;
	this1[9] = vup.z;
	this1[13] = 0.0;
	this1[2] = dir.x;
	this1[6] = dir.y;
	this1[10] = dir.z;
	this1[14] = 0.0;
	this1[3] = pos.x;
	this1[7] = pos.y;
	this1[11] = pos.z;
	this1[15] = 1.0;
};
$hx_$exports_lime_math_Matrix4.prepend = function(this1,rhs) {
	var m111 = $hx_$exports_lime_math_Matrix4.get(rhs,0);
	var m121 = $hx_$exports_lime_math_Matrix4.get(rhs,4);
	var m131 = $hx_$exports_lime_math_Matrix4.get(rhs,8);
	var m141 = $hx_$exports_lime_math_Matrix4.get(rhs,12);
	var m112 = $hx_$exports_lime_math_Matrix4.get(rhs,1);
	var m122 = $hx_$exports_lime_math_Matrix4.get(rhs,5);
	var m132 = $hx_$exports_lime_math_Matrix4.get(rhs,9);
	var m142 = $hx_$exports_lime_math_Matrix4.get(rhs,13);
	var m113 = $hx_$exports_lime_math_Matrix4.get(rhs,2);
	var m123 = $hx_$exports_lime_math_Matrix4.get(rhs,6);
	var m133 = $hx_$exports_lime_math_Matrix4.get(rhs,10);
	var m143 = $hx_$exports_lime_math_Matrix4.get(rhs,14);
	var m114 = $hx_$exports_lime_math_Matrix4.get(rhs,3);
	var m124 = $hx_$exports_lime_math_Matrix4.get(rhs,7);
	var m134 = $hx_$exports_lime_math_Matrix4.get(rhs,11);
	var m144 = $hx_$exports_lime_math_Matrix4.get(rhs,15);
	var m211 = this1[0];
	var m221 = this1[4];
	var m231 = this1[8];
	var m241 = this1[12];
	var m212 = this1[1];
	var m222 = this1[5];
	var m232 = this1[9];
	var m242 = this1[13];
	var m213 = this1[2];
	var m223 = this1[6];
	var m233 = this1[10];
	var m243 = this1[14];
	var m214 = this1[3];
	var m224 = this1[7];
	var m234 = this1[11];
	var m244 = this1[15];
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
$hx_$exports_lime_math_Matrix4.prependRotation = function(this1,degrees,axis,pivotPoint) {
	var m = $hx_$exports_lime_math_Matrix4.__getAxisRotation(this1,axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		var p = pivotPoint;
		$hx_$exports_lime_math_Matrix4.appendTranslation(m,p.x,p.y,p.z);
	}
	$hx_$exports_lime_math_Matrix4.prepend(this1,m);
};
$hx_$exports_lime_math_Matrix4.prependScale = function(this1,xScale,yScale,zScale) {
	var array = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
	var this2;
	if(array != null) {
		this2 = new Float32Array(array);
	} else {
		this2 = null;
	}
	$hx_$exports_lime_math_Matrix4.prepend(this1,$hx_$exports_lime_math_Matrix4._new(this2));
};
$hx_$exports_lime_math_Matrix4.prependTranslation = function(this1,x,y,z) {
	var m = $hx_$exports_lime_math_Matrix4._new();
	$hx_$exports_lime_math_Matrix4.set_position(m,new $hx_exports.lime.math.Vector4(x,y,z));
	$hx_$exports_lime_math_Matrix4.prepend(this1,m);
};
$hx_$exports_lime_math_Matrix4.transformVector = function(this1,v) {
	var x = v.x;
	var y = v.y;
	var z = v.z;
	return new $hx_exports.lime.math.Vector4(x * this1[0] + y * this1[4] + z * this1[8] + this1[12],x * this1[1] + y * this1[5] + z * this1[9] + this1[13],x * this1[2] + y * this1[6] + z * this1[10] + this1[14],x * this1[3] + y * this1[7] + z * this1[11] + this1[15]);
};
$hx_$exports_lime_math_Matrix4.transformVectors = function(this1,ain,aout) {
	var i = 0;
	var x;
	var y;
	var z;
	while(i + 3 <= ain.length) {
		x = ain[i];
		y = ain[i + 1];
		z = ain[i + 2];
		aout[i] = x * this1[0] + y * this1[4] + z * this1[8] + this1[12];
		aout[i + 1] = x * this1[1] + y * this1[5] + z * this1[9] + this1[13];
		aout[i + 2] = x * this1[2] + y * this1[6] + z * this1[10] + this1[14];
		i += 3;
	}
};
$hx_$exports_lime_math_Matrix4.transpose = function(this1) {
	var temp = this1[1];
	this1[1] = this1[4];
	this1[4] = temp;
	var temp1 = this1[2];
	this1[2] = this1[8];
	this1[8] = temp1;
	var temp2 = this1[3];
	this1[3] = this1[12];
	this1[12] = temp2;
	var temp3 = this1[6];
	this1[6] = this1[9];
	this1[9] = temp3;
	var temp4 = this1[7];
	this1[7] = this1[13];
	this1[13] = temp4;
	var temp5 = this1[11];
	this1[11] = this1[14];
	this1[14] = temp5;
};
$hx_$exports_lime_math_Matrix4.__getAxisRotation = function(this1,x,y,z,degrees) {
	var m = $hx_$exports_lime_math_Matrix4._new();
	var a1 = new $hx_exports.lime.math.Vector4(x,y,z);
	var rad = -degrees * ($hx_exports.Math.PI / 180);
	var c = $hx_exports.Math.cos(rad);
	var s = $hx_exports.Math.sin(rad);
	var t = 1.0 - c;
	$hx_$exports_lime_math_Matrix4.set(m,0,c + a1.x * a1.x * t);
	$hx_$exports_lime_math_Matrix4.set(m,5,c + a1.y * a1.y * t);
	$hx_$exports_lime_math_Matrix4.set(m,10,c + a1.z * a1.z * t);
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	$hx_$exports_lime_math_Matrix4.set(m,4,tmp1 + tmp2);
	$hx_$exports_lime_math_Matrix4.set(m,1,tmp1 - tmp2);
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	$hx_$exports_lime_math_Matrix4.set(m,8,tmp1 - tmp2);
	$hx_$exports_lime_math_Matrix4.set(m,2,tmp1 + tmp2);
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	$hx_$exports_lime_math_Matrix4.set(m,9,tmp1 + tmp2);
	$hx_$exports_lime_math_Matrix4.set(m,6,tmp1 - tmp2);
	return m;
};
$hx_$exports_lime_math_Matrix4.__swap = function(this1,a,b) {
	var temp = this1[a];
	this1[a] = this1[b];
	this1[b] = temp;
};
$hx_$exports_lime_math_Matrix4.get_determinant = function(this1) {
	return (this1[0] * this1[5] - this1[4] * this1[1]) * (this1[10] * this1[15] - this1[14] * this1[11]) - (this1[0] * this1[9] - this1[8] * this1[1]) * (this1[6] * this1[15] - this1[14] * this1[7]) + (this1[0] * this1[13] - this1[12] * this1[1]) * (this1[6] * this1[11] - this1[10] * this1[7]) + (this1[4] * this1[9] - this1[8] * this1[5]) * (this1[2] * this1[15] - this1[14] * this1[3]) - (this1[4] * this1[13] - this1[12] * this1[5]) * (this1[2] * this1[11] - this1[10] * this1[3]) + (this1[8] * this1[13] - this1[12] * this1[9]) * (this1[2] * this1[7] - this1[6] * this1[3]);
};
$hx_$exports_lime_math_Matrix4.get_position = function(this1) {
	return new $hx_exports.lime.math.Vector4(this1[12],this1[13],this1[14]);
};
$hx_$exports_lime_math_Matrix4.set_position = function(this1,val) {
	this1[12] = val.x;
	this1[13] = val.y;
	this1[14] = val.z;
	return val;
};
$hx_$exports_lime_math_Matrix4.get = function(this1,index) {
	return this1[index];
};
$hx_$exports_lime_math_Matrix4.set = function(this1,index,value) {
	this1[index] = value;
	return value;
};
var $hx_$exports_lime_math_color_ARGB = {};
$hxClasses["$hx_exports.lime.math.color.ARGB"] = $hx_$exports_lime_math_color_ARGB;
$hx_$exports_lime_math_color_ARGB.__name__ = ["$hx_exports","lime","math","color","ARGB"];
$hx_$exports_lime_math_color_ARGB.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"};
$hx_$exports_lime_math_color_ARGB.a16 = null;
$hx_$exports_lime_math_color_ARGB.unmult = null;
$hx_$exports_lime_math_color_ARGB._new = function(argb) {
	if(argb == null) {
		argb = 0;
	}
	var this1 = argb;
	return this1;
};
$hx_$exports_lime_math_color_ARGB.create = function(a,r,g,b) {
	var this1 = 0;
	var argb = this1;
	argb = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
	return argb;
};
$hx_$exports_lime_math_color_ARGB.multiplyAlpha = function(this1) {
	if((this1 >>> 24 & 255) == 0) {
		this1 = 0;
	} else if((this1 >>> 24 & 255) != 255) {
		$hx_$exports_lime_math_color_ARGB.a16 = $hx_$exports_lime_math_color_RGBA.__alpha16[this1 >>> 24 & 255];
		this1 = (this1 >>> 24 & 255 & 255) << 24 | ((this1 >>> 16 & 255) * $hx_$exports_lime_math_color_ARGB.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * $hx_$exports_lime_math_color_ARGB.a16 >> 16 & 255) << 8 | (this1 & 255) * $hx_$exports_lime_math_color_ARGB.a16 >> 16 & 255;
	}
};
$hx_$exports_lime_math_color_ARGB.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	switch(format) {
	case 0:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 1:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 3] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 1] & 255;
		break;
	case 2:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset + 2] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 >>> 24 & 255) != 0 && (this1 >>> 24 & 255) != 255) {
			$hx_$exports_lime_math_color_ARGB.unmult = 255.0 / (this1 >>> 24 & 255);
			this1 = (this1 >>> 24 & 255 & 255) << 24 | ($hx_$exports_lime_math_color_RGBA.__clamp[$hx_exports.Math.floor((this1 >>> 16 & 255) * $hx_$exports_lime_math_color_ARGB.unmult)] & 255) << 16 | ($hx_$exports_lime_math_color_RGBA.__clamp[$hx_exports.Math.floor((this1 >>> 8 & 255) * $hx_$exports_lime_math_color_ARGB.unmult)] & 255) << 8 | $hx_$exports_lime_math_color_RGBA.__clamp[$hx_exports.Math.floor((this1 & 255) * $hx_$exports_lime_math_color_ARGB.unmult)] & 255;
		}
	}
};
$hx_$exports_lime_math_color_ARGB.set = function(this1,a,r,g,b) {
	this1 = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
};
$hx_$exports_lime_math_color_ARGB.unmultiplyAlpha = function(this1) {
	if((this1 >>> 24 & 255) != 0 && (this1 >>> 24 & 255) != 255) {
		$hx_$exports_lime_math_color_ARGB.unmult = 255.0 / (this1 >>> 24 & 255);
		this1 = (this1 >>> 24 & 255 & 255) << 24 | ($hx_$exports_lime_math_color_RGBA.__clamp[$hx_exports.Math.floor((this1 >>> 16 & 255) * $hx_$exports_lime_math_color_ARGB.unmult)] & 255) << 16 | ($hx_$exports_lime_math_color_RGBA.__clamp[$hx_exports.Math.floor((this1 >>> 8 & 255) * $hx_$exports_lime_math_color_ARGB.unmult)] & 255) << 8 | $hx_$exports_lime_math_color_RGBA.__clamp[$hx_exports.Math.floor((this1 & 255) * $hx_$exports_lime_math_color_ARGB.unmult)] & 255;
	}
};
$hx_$exports_lime_math_color_ARGB.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	if(premultiplied) {
		if((this1 >>> 24 & 255) == 0) {
			this1 = 0;
		} else if((this1 >>> 24 & 255) != 255) {
			$hx_$exports_lime_math_color_ARGB.a16 = $hx_$exports_lime_math_color_RGBA.__alpha16[this1 >>> 24 & 255];
			this1 = (this1 >>> 24 & 255 & 255) << 24 | ((this1 >>> 16 & 255) * $hx_$exports_lime_math_color_ARGB.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * $hx_$exports_lime_math_color_ARGB.a16 >> 16 & 255) << 8 | (this1 & 255) * $hx_$exports_lime_math_color_ARGB.a16 >> 16 & 255;
		}
	}
	switch(format) {
	case 0:
		data[offset] = this1 >>> 16 & 255;
		data[offset + 1] = this1 >>> 8 & 255;
		data[offset + 2] = this1 & 255;
		data[offset + 3] = this1 >>> 24 & 255;
		break;
	case 1:
		data[offset] = this1 >>> 24 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 2:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >>> 8 & 255;
		data[offset + 2] = this1 >>> 16 & 255;
		data[offset + 3] = this1 >>> 24 & 255;
		break;
	}
};
$hx_$exports_lime_math_color_ARGB.__fromBGRA = function(bgra) {
	var this1 = 0;
	var argb = this1;
	argb = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
	return argb;
};
$hx_$exports_lime_math_color_ARGB.__fromRGBA = function(rgba) {
	var this1 = 0;
	var argb = this1;
	argb = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
	return argb;
};
$hx_$exports_lime_math_color_ARGB.get_a = function(this1) {
	return this1 >>> 24 & 255;
};
$hx_$exports_lime_math_color_ARGB.set_a = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
$hx_$exports_lime_math_color_ARGB.get_b = function(this1) {
	return this1 & 255;
};
$hx_$exports_lime_math_color_ARGB.set_b = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
$hx_$exports_lime_math_color_ARGB.get_g = function(this1) {
	return this1 >>> 8 & 255;
};
$hx_$exports_lime_math_color_ARGB.set_g = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
$hx_$exports_lime_math_color_ARGB.get_r = function(this1) {
	return this1 >>> 16 & 255;
};
$hx_$exports_lime_math_color_ARGB.set_r = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
var $hx_$exports_lime_math_color_BGRA = {};
$hxClasses["$hx_exports.lime.math.color.BGRA"] = $hx_$exports_lime_math_color_BGRA;
$hx_$exports_lime_math_color_BGRA.__name__ = ["$hx_exports","lime","math","color","BGRA"];
$hx_$exports_lime_math_color_BGRA.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"};
$hx_$exports_lime_math_color_BGRA.a16 = null;
$hx_$exports_lime_math_color_BGRA.unmult = null;
$hx_$exports_lime_math_color_BGRA._new = function(bgra) {
	if(bgra == null) {
		bgra = 0;
	}
	var this1 = bgra;
	return this1;
};
$hx_$exports_lime_math_color_BGRA.create = function(b,g,r,a) {
	var this1 = 0;
	var bgra = this1;
	bgra = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255;
	return bgra;
};
$hx_$exports_lime_math_color_BGRA.multiplyAlpha = function(this1) {
	if((this1 & 255) == 0) {
		this1 = 0;
	} else if((this1 & 255) != 255) {
		$hx_$exports_lime_math_color_BGRA.a16 = $hx_$exports_lime_math_color_RGBA.__alpha16[this1 & 255];
		this1 = ((this1 >>> 24 & 255) * $hx_$exports_lime_math_color_BGRA.a16 >> 16 & 255) << 24 | ((this1 >>> 16 & 255) * $hx_$exports_lime_math_color_BGRA.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * $hx_$exports_lime_math_color_BGRA.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
	}
};
$hx_$exports_lime_math_color_BGRA.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	switch(format) {
	case 0:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		this1 = (data[offset + 3] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 1] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 & 255) != 0 && (this1 & 255) != 255) {
			$hx_$exports_lime_math_color_BGRA.unmult = 255.0 / (this1 & 255);
			this1 = ($hx_$exports_lime_math_color_RGBA.__clamp[$hx_exports.Math.floor((this1 >>> 24 & 255) * $hx_$exports_lime_math_color_BGRA.unmult)] & 255) << 24 | ($hx_$exports_lime_math_color_RGBA.__clamp[$hx_exports.Math.floor((this1 >>> 16 & 255) * $hx_$exports_lime_math_color_BGRA.unmult)] & 255) << 16 | ($hx_$exports_lime_math_color_RGBA.__clamp[$hx_exports.Math.floor((this1 >>> 8 & 255) * $hx_$exports_lime_math_color_BGRA.unmult)] & 255) << 8 | this1 & 255 & 255;
		}
	}
};
$hx_$exports_lime_math_color_BGRA.set = function(this1,b,g,r,a) {
	this1 = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255;
};
$hx_$exports_lime_math_color_BGRA.unmultiplyAlpha = function(this1) {
	if((this1 & 255) != 0 && (this1 & 255) != 255) {
		$hx_$exports_lime_math_color_BGRA.unmult = 255.0 / (this1 & 255);
		this1 = ($hx_$exports_lime_math_color_RGBA.__clamp[$hx_exports.Math.floor((this1 >>> 24 & 255) * $hx_$exports_lime_math_color_BGRA.unmult)] & 255) << 24 | ($hx_$exports_lime_math_color_RGBA.__clamp[$hx_exports.Math.floor((this1 >>> 16 & 255) * $hx_$exports_lime_math_color_BGRA.unmult)] & 255) << 16 | ($hx_$exports_lime_math_color_RGBA.__clamp[$hx_exports.Math.floor((this1 >>> 8 & 255) * $hx_$exports_lime_math_color_BGRA.unmult)] & 255) << 8 | this1 & 255 & 255;
	}
};
$hx_$exports_lime_math_color_BGRA.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	if(premultiplied) {
		if((this1 & 255) == 0) {
			this1 = 0;
		} else if((this1 & 255) != 255) {
			$hx_$exports_lime_math_color_BGRA.a16 = $hx_$exports_lime_math_color_RGBA.__alpha16[this1 & 255];
			this1 = ((this1 >>> 24 & 255) * $hx_$exports_lime_math_color_BGRA.a16 >> 16 & 255) << 24 | ((this1 >>> 16 & 255) * $hx_$exports_lime_math_color_BGRA.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * $hx_$exports_lime_math_color_BGRA.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
		}
	}
	switch(format) {
	case 0:
		data[offset] = this1 >>> 8 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 24 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 1:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >>> 8 & 255;
		data[offset + 2] = this1 >>> 16 & 255;
		data[offset + 3] = this1 >>> 24 & 255;
		break;
	case 2:
		data[offset] = this1 >>> 24 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	}
};
$hx_$exports_lime_math_color_BGRA.__fromARGB = function(argb) {
	var this1 = 0;
	var bgra = this1;
	bgra = (argb & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb >>> 16 & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
	return bgra;
};
$hx_$exports_lime_math_color_BGRA.__fromRGBA = function(rgba) {
	var this1 = 0;
	var bgra = this1;
	bgra = (rgba >>> 8 & 255 & 255) << 24 | (rgba >>> 16 & 255 & 255) << 16 | (rgba >>> 24 & 255 & 255) << 8 | rgba & 255 & 255;
	return bgra;
};
$hx_$exports_lime_math_color_BGRA.get_a = function(this1) {
	return this1 & 255;
};
$hx_$exports_lime_math_color_BGRA.set_a = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
$hx_$exports_lime_math_color_BGRA.get_b = function(this1) {
	return this1 >>> 24 & 255;
};
$hx_$exports_lime_math_color_BGRA.set_b = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
$hx_$exports_lime_math_color_BGRA.get_g = function(this1) {
	return this1 >>> 16 & 255;
};
$hx_$exports_lime_math_color_BGRA.set_g = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
$hx_$exports_lime_math_color_BGRA.get_r = function(this1) {
	return this1 >>> 8 & 255;
};
$hx_$exports_lime_math_color_BGRA.set_r = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
var $hx_$exports_lime_math_color_RGBA = {};
$hxClasses["$hx_exports.lime.math.color.RGBA"] = $hx_$exports_lime_math_color_RGBA;
$hx_$exports_lime_math_color_RGBA.__name__ = ["$hx_exports","lime","math","color","RGBA"];
$hx_$exports_lime_math_color_RGBA.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"};
$hx_$exports_lime_math_color_RGBA.__alpha16 = null;
$hx_$exports_lime_math_color_RGBA.__clamp = null;
$hx_$exports_lime_math_color_RGBA.a16 = null;
$hx_$exports_lime_math_color_RGBA.unmult = null;
$hx_$exports_lime_math_color_RGBA._new = function(rgba) {
	if(rgba == null) {
		rgba = 0;
	}
	var this1 = rgba;
	return this1;
};
$hx_$exports_lime_math_color_RGBA.create = function(r,g,b,a) {
	var this1 = 0;
	var rgba = this1;
	rgba = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
	return rgba;
};
$hx_$exports_lime_math_color_RGBA.multiplyAlpha = function(this1) {
	if((this1 & 255) == 0) {
		if(this1 != 0) {
			this1 = 0;
		}
	} else if((this1 & 255) != 255) {
		$hx_$exports_lime_math_color_RGBA.a16 = $hx_$exports_lime_math_color_RGBA.__alpha16[this1 & 255];
		this1 = ((this1 >>> 24 & 255) * $hx_$exports_lime_math_color_RGBA.a16 >> 16 & 255) << 24 | ((this1 >>> 16 & 255) * $hx_$exports_lime_math_color_RGBA.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * $hx_$exports_lime_math_color_RGBA.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
	}
};
$hx_$exports_lime_math_color_RGBA.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	switch(format) {
	case 0:
		this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 & 255) != 0 && (this1 & 255) != 255) {
			$hx_$exports_lime_math_color_RGBA.unmult = 255.0 / (this1 & 255);
			this1 = ($hx_$exports_lime_math_color_RGBA.__clamp[$hx_exports.Math.round((this1 >>> 24 & 255) * $hx_$exports_lime_math_color_RGBA.unmult)] & 255) << 24 | ($hx_$exports_lime_math_color_RGBA.__clamp[$hx_exports.Math.round((this1 >>> 16 & 255) * $hx_$exports_lime_math_color_RGBA.unmult)] & 255) << 16 | ($hx_$exports_lime_math_color_RGBA.__clamp[$hx_exports.Math.round((this1 >>> 8 & 255) * $hx_$exports_lime_math_color_RGBA.unmult)] & 255) << 8 | this1 & 255 & 255;
		}
	}
};
$hx_$exports_lime_math_color_RGBA.set = function(this1,r,g,b,a) {
	this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
};
$hx_$exports_lime_math_color_RGBA.unmultiplyAlpha = function(this1) {
	if((this1 & 255) != 0 && (this1 & 255) != 255) {
		$hx_$exports_lime_math_color_RGBA.unmult = 255.0 / (this1 & 255);
		this1 = ($hx_$exports_lime_math_color_RGBA.__clamp[$hx_exports.Math.round((this1 >>> 24 & 255) * $hx_$exports_lime_math_color_RGBA.unmult)] & 255) << 24 | ($hx_$exports_lime_math_color_RGBA.__clamp[$hx_exports.Math.round((this1 >>> 16 & 255) * $hx_$exports_lime_math_color_RGBA.unmult)] & 255) << 16 | ($hx_$exports_lime_math_color_RGBA.__clamp[$hx_exports.Math.round((this1 >>> 8 & 255) * $hx_$exports_lime_math_color_RGBA.unmult)] & 255) << 8 | this1 & 255 & 255;
	}
};
$hx_$exports_lime_math_color_RGBA.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	if(premultiplied) {
		if((this1 & 255) == 0) {
			if(this1 != 0) {
				this1 = 0;
			}
		} else if((this1 & 255) != 255) {
			$hx_$exports_lime_math_color_RGBA.a16 = $hx_$exports_lime_math_color_RGBA.__alpha16[this1 & 255];
			this1 = ((this1 >>> 24 & 255) * $hx_$exports_lime_math_color_RGBA.a16 >> 16 & 255) << 24 | ((this1 >>> 16 & 255) * $hx_$exports_lime_math_color_RGBA.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * $hx_$exports_lime_math_color_RGBA.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
		}
	}
	switch(format) {
	case 0:
		data[offset] = this1 >>> 24 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 1:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >>> 24 & 255;
		data[offset + 2] = this1 >>> 16 & 255;
		data[offset + 3] = this1 >>> 8 & 255;
		break;
	case 2:
		data[offset] = this1 >>> 8 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 24 & 255;
		data[offset + 3] = this1 & 255;
		break;
	}
};
$hx_$exports_lime_math_color_RGBA.__fromARGB = function(argb) {
	var this1 = 0;
	var rgba = this1;
	rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
	return rgba;
};
$hx_$exports_lime_math_color_RGBA.__fromBGRA = function(bgra) {
	var this1 = 0;
	var rgba = this1;
	rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
	return rgba;
};
$hx_$exports_lime_math_color_RGBA.get_a = function(this1) {
	return this1 & 255;
};
$hx_$exports_lime_math_color_RGBA.set_a = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
$hx_$exports_lime_math_color_RGBA.get_b = function(this1) {
	return this1 >>> 8 & 255;
};
$hx_$exports_lime_math_color_RGBA.set_b = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
$hx_$exports_lime_math_color_RGBA.get_g = function(this1) {
	return this1 >>> 16 & 255;
};
$hx_$exports_lime_math_color_RGBA.set_g = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
$hx_$exports_lime_math_color_RGBA.get_r = function(this1) {
	return this1 >>> 24 & 255;
};
$hx_$exports_lime_math_color_RGBA.set_r = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
var $hx_$exports_lime_media_openal_ALBuffer = {};
$hxClasses["$hx_exports.lime.media.openal.ALBuffer"] = $hx_$exports_lime_media_openal_ALBuffer;
$hx_$exports_lime_media_openal_ALBuffer.__name__ = ["$hx_exports","lime","media","openal","ALBuffer"];
$hx_$exports_lime_media_openal_ALBuffer._new = function(handle) {
	var this1 = handle;
	return this1;
};
var $hx_$exports_lime_media_openal_ALContext = {};
$hxClasses["$hx_exports.lime.media.openal.ALContext"] = $hx_$exports_lime_media_openal_ALContext;
$hx_$exports_lime_media_openal_ALContext.__name__ = ["$hx_exports","lime","media","openal","ALContext"];
$hx_$exports_lime_media_openal_ALContext._new = function(handle) {
	var this1 = handle;
	return this1;
};
var $hx_$exports_lime_media_openal_ALDevice = {};
$hxClasses["$hx_exports.lime.media.openal.ALDevice"] = $hx_$exports_lime_media_openal_ALDevice;
$hx_$exports_lime_media_openal_ALDevice.__name__ = ["$hx_exports","lime","media","openal","ALDevice"];
$hx_$exports_lime_media_openal_ALDevice._new = function(handle) {
	var this1 = handle;
	return this1;
};
var $hx_$exports_lime_media_openal_ALSource = {};
$hxClasses["$hx_exports.lime.media.openal.ALSource"] = $hx_$exports_lime_media_openal_ALSource;
$hx_$exports_lime_media_openal_ALSource.__name__ = ["$hx_exports","lime","media","openal","ALSource"];
$hx_$exports_lime_media_openal_ALSource._new = function(handle) {
	var this1 = handle;
	return this1;
};
var lime_net__$IHTTPRequest = function() { };
$hxClasses["lime.net._IHTTPRequest"] = lime_net__$IHTTPRequest;
lime_net__$IHTTPRequest.__name__ = ["lime","net","_IHTTPRequest"];
lime_net__$IHTTPRequest.prototype = {
	contentType: null
	,data: null
	,enableResponseHeaders: null
	,followRedirects: null
	,formData: null
	,headers: null
	,method: null
	,responseHeaders: null
	,responseStatus: null
	,timeout: null
	,uri: null
	,userAgent: null
	,withCredentials: null
	,cancel: null
	,__class__: lime_net__$IHTTPRequest
};
var lime_net__$HTTPRequest_AbstractHTTPRequest = function(uri) {
	this.uri = uri;
	this.contentType = "application/x-www-form-urlencoded";
	this.followRedirects = true;
	this.enableResponseHeaders = false;
	this.formData = new haxe_ds_StringMap();
	this.headers = [];
	this.method = "GET";
	this.timeout = 30000;
	this.withCredentials = false;
	this.backend = new $hx_exports.lime._backend.html5.HTML5HTTPRequest();
	this.backend.init(this);
};
$hxClasses["lime.net._HTTPRequest.AbstractHTTPRequest"] = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_AbstractHTTPRequest.__name__ = ["lime","net","_HTTPRequest","AbstractHTTPRequest"];
lime_net__$HTTPRequest_AbstractHTTPRequest.__interfaces__ = [lime_net__$IHTTPRequest];
lime_net__$HTTPRequest_AbstractHTTPRequest.prototype = {
	contentType: null
	,data: null
	,enableResponseHeaders: null
	,followRedirects: null
	,formData: null
	,headers: null
	,method: null
	,responseData: null
	,responseHeaders: null
	,responseStatus: null
	,timeout: null
	,uri: null
	,userAgent: null
	,withCredentials: null
	,backend: null
	,cancel: function() {
		this.backend.cancel();
	}
	,load: function(uri) {
		return null;
	}
	,__class__: lime_net__$HTTPRequest_AbstractHTTPRequest
};
var lime_net__$HTTPRequest_$Bytes = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_Bytes"] = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$Bytes.__name__ = ["lime","net","_HTTPRequest_Bytes"];
lime_net__$HTTPRequest_$Bytes.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_$Bytes.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	fromBytes: function(bytes) {
		return bytes;
	}
	,load: function(uri) {
		var _gthis = this;
		if(uri != null) {
			this.uri = uri;
		}
		var promise = new $hx_exports.lime.app.Promise();
		var future = this.backend.loadData(this.uri);
		future.onProgress($bind(promise,promise.progress));
		future.onError($bind(promise,promise.error));
		future.onComplete(function(bytes) {
			_gthis.responseData = _gthis.fromBytes(bytes);
			promise.complete(_gthis.responseData);
		});
		return promise.future;
	}
	,__class__: lime_net__$HTTPRequest_$Bytes
});
var lime_net__$HTTPRequest_$String = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_String"] = lime_net__$HTTPRequest_$String;
lime_net__$HTTPRequest_$String.__name__ = ["lime","net","_HTTPRequest_String"];
lime_net__$HTTPRequest_$String.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_$String.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	load: function(uri) {
		var _gthis = this;
		if(uri != null) {
			this.uri = uri;
		}
		var promise = new $hx_exports.lime.app.Promise();
		var future = this.backend.loadText(this.uri);
		future.onProgress($bind(promise,promise.progress));
		future.onError($bind(promise,promise.error));
		future.onComplete(function(text) {
			_gthis.responseData = text;
			promise.complete(_gthis.responseData);
		});
		return promise.future;
	}
	,__class__: lime_net__$HTTPRequest_$String
});
var lime_net_HTTPRequestHeader = function(name,value) {
	if(value == null) {
		value = "";
	}
	this.name = name;
	this.value = value;
};
$hxClasses["lime.net.HTTPRequestHeader"] = lime_net_HTTPRequestHeader;
lime_net_HTTPRequestHeader.__name__ = ["lime","net","HTTPRequestHeader"];
lime_net_HTTPRequestHeader.prototype = {
	name: null
	,value: null
	,__class__: lime_net_HTTPRequestHeader
};
var lime_net__$HTTPRequest_$lime_$text_$Font = function(uri) {
	lime_net__$HTTPRequest_$Bytes.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_lime_text_Font"] = lime_net__$HTTPRequest_$lime_$text_$Font;
lime_net__$HTTPRequest_$lime_$text_$Font.__name__ = ["lime","net","_HTTPRequest_lime_text_Font"];
lime_net__$HTTPRequest_$lime_$text_$Font.__super__ = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$lime_$text_$Font.prototype = $extend(lime_net__$HTTPRequest_$Bytes.prototype,{
	fromBytes: function(bytes) {
		return $hx_exports.lime.text.Font.fromBytes(bytes);
	}
	,__class__: lime_net__$HTTPRequest_$lime_$text_$Font
});
var lime_net__$HTTPRequest_$lime_$utils_$Bytes = function(uri) {
	lime_net__$HTTPRequest_$Bytes.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_lime_utils_Bytes"] = lime_net__$HTTPRequest_$lime_$utils_$Bytes;
lime_net__$HTTPRequest_$lime_$utils_$Bytes.__name__ = ["lime","net","_HTTPRequest_lime_utils_Bytes"];
lime_net__$HTTPRequest_$lime_$utils_$Bytes.__super__ = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$lime_$utils_$Bytes.prototype = $extend(lime_net__$HTTPRequest_$Bytes.prototype,{
	fromBytes: function(bytes) {
		return $hx_$exports_lime_utils_Bytes.fromBytes(bytes);
	}
	,__class__: lime_net__$HTTPRequest_$lime_$utils_$Bytes
});
var lime_net__$HTTPRequest_$openfl_$utils_$ByteArray = function(uri) {
	lime_net__$HTTPRequest_$Bytes.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_openfl_utils_ByteArray"] = lime_net__$HTTPRequest_$openfl_$utils_$ByteArray;
lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.__name__ = ["lime","net","_HTTPRequest_openfl_utils_ByteArray"];
lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.__super__ = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.prototype = $extend(lime_net__$HTTPRequest_$Bytes.prototype,{
	fromBytes: function(bytes) {
		return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes);
	}
	,__class__: lime_net__$HTTPRequest_$openfl_$utils_$ByteArray
});
var $hx_$exports_lime_system_CFFIPointer = {};
$hxClasses["$hx_exports.lime.system.CFFIPointer"] = $hx_$exports_lime_system_CFFIPointer;
$hx_$exports_lime_system_CFFIPointer.__name__ = ["$hx_exports","lime","system","CFFIPointer"];
$hx_$exports_lime_system_CFFIPointer._new = function(handle) {
	var this1 = handle;
	return this1;
};
$hx_$exports_lime_system_CFFIPointer.get = function(this1) {
	var tmp = this1 != null;
	return 0;
};
$hx_$exports_lime_system_CFFIPointer.equals = function(a,b) {
	return $hx_$exports_lime_system_CFFIPointer.get(a) == b;
};
$hx_$exports_lime_system_CFFIPointer.equalsPointer = function(a,b) {
	return $hx_$exports_lime_system_CFFIPointer.get(a) == $hx_$exports_lime_system_CFFIPointer.get(b);
};
$hx_$exports_lime_system_CFFIPointer.greaterThan = function(a,b) {
	return $hx_$exports_lime_system_CFFIPointer.get(a) > b;
};
$hx_$exports_lime_system_CFFIPointer.greaterThanPointer = function(a,b) {
	return $hx_$exports_lime_system_CFFIPointer.get(a) > $hx_$exports_lime_system_CFFIPointer.get(b);
};
$hx_$exports_lime_system_CFFIPointer.greaterThanOrEqual = function(a,b) {
	return $hx_$exports_lime_system_CFFIPointer.get(a) >= b;
};
$hx_$exports_lime_system_CFFIPointer.greaterThanOrEqualPointer = function(a,b) {
	return $hx_$exports_lime_system_CFFIPointer.get(a) >= $hx_$exports_lime_system_CFFIPointer.get(b);
};
$hx_$exports_lime_system_CFFIPointer.lessThan = function(a,b) {
	return $hx_$exports_lime_system_CFFIPointer.get(a) < b;
};
$hx_$exports_lime_system_CFFIPointer.lessThanPointer = function(a,b) {
	return $hx_$exports_lime_system_CFFIPointer.get(a) < $hx_$exports_lime_system_CFFIPointer.get(b);
};
$hx_$exports_lime_system_CFFIPointer.lessThanOrEqual = function(a,b) {
	return $hx_$exports_lime_system_CFFIPointer.get(a) <= b;
};
$hx_$exports_lime_system_CFFIPointer.lessThanOrEqualPointer = function(a,b) {
	return $hx_$exports_lime_system_CFFIPointer.get(a) <= $hx_$exports_lime_system_CFFIPointer.get(b);
};
$hx_$exports_lime_system_CFFIPointer.notEquals = function(a,b) {
	return $hx_$exports_lime_system_CFFIPointer.get(a) != b;
};
$hx_$exports_lime_system_CFFIPointer.notEqualsPointer = function(a,b) {
	return $hx_$exports_lime_system_CFFIPointer.get(a) != $hx_$exports_lime_system_CFFIPointer.get(b);
};
var lime_system_Endian = $hxClasses["lime.system.Endian"] = { __ename__ : ["lime","system","Endian"], __constructs__ : ["LITTLE_ENDIAN","BIG_ENDIAN"] };
lime_system_Endian.LITTLE_ENDIAN = ["LITTLE_ENDIAN",0];
lime_system_Endian.LITTLE_ENDIAN.toString = $estr;
lime_system_Endian.LITTLE_ENDIAN.__enum__ = lime_system_Endian;
lime_system_Endian.BIG_ENDIAN = ["BIG_ENDIAN",1];
lime_system_Endian.BIG_ENDIAN.toString = $estr;
lime_system_Endian.BIG_ENDIAN.__enum__ = lime_system_Endian;
lime_system_Endian.__empty_constructs__ = [lime_system_Endian.LITTLE_ENDIAN,lime_system_Endian.BIG_ENDIAN];
var lime_system_JNIMemberField = function(field) {
	this.field = field;
};
$hxClasses["lime.system.JNIMemberField"] = lime_system_JNIMemberField;
lime_system_JNIMemberField.__name__ = ["lime","system","JNIMemberField"];
lime_system_JNIMemberField.prototype = {
	field: null
	,get: function(jobject) {
		return null;
	}
	,set: function(jobject,value) {
		return value;
	}
	,__class__: lime_system_JNIMemberField
};
var lime_system_JNIStaticField = function(field) {
	this.field = field;
};
$hxClasses["lime.system.JNIStaticField"] = lime_system_JNIStaticField;
lime_system_JNIStaticField.__name__ = ["lime","system","JNIStaticField"];
lime_system_JNIStaticField.prototype = {
	field: null
	,get: function() {
		return null;
	}
	,set: function(value) {
		return value;
	}
	,__class__: lime_system_JNIStaticField
};
var lime_system_JNIMethod = function(method) {
	this.method = method;
};
$hxClasses["lime.system.JNIMethod"] = lime_system_JNIMethod;
lime_system_JNIMethod.__name__ = ["lime","system","JNIMethod"];
lime_system_JNIMethod.prototype = {
	method: null
	,callMember: function(args) {
		return null;
	}
	,callStatic: function(args) {
		return null;
	}
	,getMemberMethod: function(useArray) {
		if(useArray) {
			return $bind(this,this.callMember);
		} else {
			return Reflect.makeVarArgs($bind(this,this.callMember));
		}
	}
	,getStaticMethod: function(useArray) {
		if(useArray) {
			return $bind(this,this.callStatic);
		} else {
			return Reflect.makeVarArgs($bind(this,this.callStatic));
		}
	}
	,__class__: lime_system_JNIMethod
};
var $hx_$exports_lime_system_Locale = {};
$hxClasses["$hx_exports.lime.system.Locale"] = $hx_$exports_lime_system_Locale;
$hx_$exports_lime_system_Locale.__name__ = ["$hx_exports","lime","system","Locale"];
$hx_$exports_lime_system_Locale.__properties__ = {get_region:"get_region",get_language:"get_language",get_systemLocale:"get_systemLocale",set_currentLocale:"set_currentLocale",get_currentLocale:"get_currentLocale"};
$hx_$exports_lime_system_Locale.currentLocale = null;
$hx_$exports_lime_system_Locale.__systemLocale = null;
$hx_$exports_lime_system_Locale._new = function(value) {
	var this1 = value;
	return this1;
};
$hx_$exports_lime_system_Locale.equals = function(a,b) {
	var language = $hx_$exports_lime_system_Locale.get_language(a);
	var region = $hx_$exports_lime_system_Locale.get_region(a);
	var language2 = $hx_$exports_lime_system_Locale.get_language(b);
	var region2 = $hx_$exports_lime_system_Locale.get_region(b);
	var languageMatch = language == language2;
	var regionMatch = region == region2;
	if(!languageMatch && language != null && language2 != null) {
		languageMatch = language.toLowerCase() == language2.toLowerCase();
	}
	if(!regionMatch && region != null && region2 != null) {
		regionMatch = region.toLowerCase() == region2.toLowerCase();
	}
	if(languageMatch) {
		return regionMatch;
	} else {
		return false;
	}
};
$hx_$exports_lime_system_Locale.__init = function() {
	if($hx_$exports_lime_system_Locale.__systemLocale == null) {
		var locale = null;
		locale = navigator.language;
		if(locale != null) {
			$hx_$exports_lime_system_Locale.__systemLocale = locale;
		} else {
			$hx_$exports_lime_system_Locale.__systemLocale = "en-US";
		}
		$hx_$exports_lime_system_Locale.set_currentLocale($hx_$exports_lime_system_Locale.__systemLocale);
	}
};
$hx_$exports_lime_system_Locale.get_language = function(this1) {
	if(this1 != null) {
		var index = this1.indexOf("_");
		if(index > -1) {
			return this1.substring(0,index);
		}
		index = this1.indexOf("-");
		if(index > -1) {
			return this1.substring(0,index);
		}
	}
	return this1;
};
$hx_$exports_lime_system_Locale.get_region = function(this1) {
	if(this1 != null) {
		var underscoreIndex = this1.indexOf("_");
		var dotIndex = this1.indexOf(".");
		var dashIndex = this1.indexOf("-");
		if(underscoreIndex > -1) {
			if(dotIndex > -1) {
				return this1.substring(underscoreIndex + 1,dotIndex);
			} else {
				return this1.substring(underscoreIndex + 1);
			}
		} else if(dashIndex > -1) {
			if(dotIndex > -1) {
				return this1.substring(dashIndex + 1,dotIndex);
			} else {
				return this1.substring(dashIndex + 1);
			}
		}
	}
	return null;
};
$hx_$exports_lime_system_Locale.get_currentLocale = function() {
	$hx_$exports_lime_system_Locale.__init();
	return $hx_$exports_lime_system_Locale.currentLocale;
};
$hx_$exports_lime_system_Locale.set_currentLocale = function(value) {
	$hx_$exports_lime_system_Locale.__init();
	return $hx_$exports_lime_system_Locale.currentLocale = value;
};
$hx_$exports_lime_system_Locale.get_systemLocale = function() {
	$hx_$exports_lime_system_Locale.__init();
	return $hx_$exports_lime_system_Locale.__systemLocale;
};
var lime_system_SensorType = $hxClasses["lime.system.SensorType"] = { __ename__ : ["lime","system","SensorType"], __constructs__ : ["ACCELEROMETER"] };
lime_system_SensorType.ACCELEROMETER = ["ACCELEROMETER",0];
lime_system_SensorType.ACCELEROMETER.toString = $estr;
lime_system_SensorType.ACCELEROMETER.__enum__ = lime_system_SensorType;
lime_system_SensorType.__empty_constructs__ = [lime_system_SensorType.ACCELEROMETER];
var lime_system__$ThreadPool_ThreadPoolMessage = function(type,state) {
	this.type = type;
	this.state = state;
};
$hxClasses["lime.system._ThreadPool.ThreadPoolMessage"] = lime_system__$ThreadPool_ThreadPoolMessage;
lime_system__$ThreadPool_ThreadPoolMessage.__name__ = ["lime","system","_ThreadPool","ThreadPoolMessage"];
lime_system__$ThreadPool_ThreadPoolMessage.prototype = {
	state: null
	,type: null
	,__class__: lime_system__$ThreadPool_ThreadPoolMessage
};
var $hx_$exports_lime_text_Glyph = {};
$hxClasses["$hx_exports.lime.text.Glyph"] = $hx_$exports_lime_text_Glyph;
$hx_$exports_lime_text_Glyph.__name__ = ["$hx_exports","lime","text","Glyph"];
$hx_$exports_lime_text_Glyph._new = function(i) {
	var this1 = i;
	return this1;
};
var $hx_$exports_lime_text_TextDirection = {};
$hxClasses["$hx_exports.lime.text.TextDirection"] = $hx_$exports_lime_text_TextDirection;
$hx_$exports_lime_text_TextDirection.__name__ = ["$hx_exports","lime","text","TextDirection"];
$hx_$exports_lime_text_TextDirection.__properties__ = {get_vertical:"get_vertical",get_horizontal:"get_horizontal",get_forward:"get_forward",get_backward:"get_backward"};
$hx_$exports_lime_text_TextDirection.reverse = function(this1) {
	this1 ^= 1;
};
$hx_$exports_lime_text_TextDirection.toString = function(this1) {
	switch(this1) {
	case 4:
		return "leftToRight";
	case 5:
		return "rightToLeft";
	case 6:
		return "topToBottom";
	case 7:
		return "bottomToTop";
	default:
		return "";
	}
};
$hx_$exports_lime_text_TextDirection.get_backward = function(this1) {
	return (this1 & -3) == 5;
};
$hx_$exports_lime_text_TextDirection.get_forward = function(this1) {
	return (this1 & -3) == 4;
};
$hx_$exports_lime_text_TextDirection.get_horizontal = function(this1) {
	return (this1 & -2) == 4;
};
$hx_$exports_lime_text_TextDirection.get_vertical = function(this1) {
	return (this1 & -2) == 6;
};
var $hx_$exports_lime_text_TextScript = {};
$hxClasses["$hx_exports.lime.text.TextScript"] = $hx_$exports_lime_text_TextScript;
$hx_$exports_lime_text_TextScript.__name__ = ["$hx_exports","lime","text","TextScript"];
$hx_$exports_lime_text_TextScript.__properties__ = {get_rightToLeft:"get_rightToLeft"};
$hx_$exports_lime_text_TextScript.get_rightToLeft = function(this1) {
	switch(this1) {
	case "Arab":case "Armi":case "Avst":case "Cprt":case "Hebr":case "Khar":case "Lydi":case "Mand":case "Nkoo":case "Orkh":case "Phli":case "Phlp":case "Phnx":case "Samr":case "Sarb":case "Syrc":case "Thaa":
		return true;
	default:
		return false;
	}
};
var $hx_$exports_lime_text_UTF8String = {};
$hxClasses["$hx_exports.lime.text.UTF8String"] = $hx_$exports_lime_text_UTF8String;
$hx_$exports_lime_text_UTF8String.__name__ = ["$hx_exports","lime","text","UTF8String"];
$hx_$exports_lime_text_UTF8String.__properties__ = {get_length:"get_length"};
$hx_$exports_lime_text_UTF8String._new = function(str) {
	var this1 = new String(str);
	return this1;
};
$hx_$exports_lime_text_UTF8String.charAt = function(this1,index) {
	return $hx_exports.lime.text.unifill.Unifill.uCharAt(this1,index);
};
$hx_$exports_lime_text_UTF8String.charCodeAt = function(this1,index) {
	if(index < 0 || index >= $hx_exports.lime.text.unifill.Unifill.uLength(this1)) {
		return null;
	}
	return $hx_exports.lime.text.unifill.Unifill.uCharCodeAt(this1,index);
};
$hx_$exports_lime_text_UTF8String.fromCharCode = function(code) {
	if(!$hx_exports.lime.text.unifill.Unicode.isScalar(code)) {
		throw new js__$Boot_HaxeError(new lime_text_unifill_InvalidCodePoint(code));
	}
	var this1 = code;
	return $hx_exports.lime.text.unifill.InternalEncoding.fromCodePoint(this1);
};
$hx_$exports_lime_text_UTF8String.fromCharCodes = function(codes) {
	var s = "";
	var _g = 0;
	while(_g < codes.length) {
		var code = codes[_g];
		++_g;
		if(!$hx_exports.lime.text.unifill.Unicode.isScalar(code)) {
			throw new js__$Boot_HaxeError(new lime_text_unifill_InvalidCodePoint(code));
		}
		var this1 = code;
		s += $hx_exports.lime.text.unifill.InternalEncoding.fromCodePoint(this1);
	}
	return s;
};
$hx_$exports_lime_text_UTF8String.indexOf = function(this1,str,startIndex) {
	if(startIndex == null) {
		startIndex = 0;
	}
	return $hx_exports.lime.text.unifill.Unifill.uIndexOf(this1,str,startIndex);
};
$hx_$exports_lime_text_UTF8String.lastIndexOf = function(this1,str,startIndex) {
	return $hx_exports.lime.text.unifill.Unifill.uLastIndexOf(this1,str,startIndex);
};
$hx_$exports_lime_text_UTF8String.split = function(this1,delimiter) {
	return $hx_exports.lime.text.unifill.Unifill.uSplit(this1,delimiter);
};
$hx_$exports_lime_text_UTF8String.substr = function(this1,pos,len) {
	return haxe_Utf8.sub(this1,pos,len);
};
$hx_$exports_lime_text_UTF8String.substring = function(this1,startIndex,endIndex) {
	return $hx_exports.lime.text.unifill.Unifill.uSubstring(this1,startIndex,endIndex);
};
$hx_$exports_lime_text_UTF8String.toLowerCase = function(this1) {
	return this1.toLowerCase();
};
$hx_$exports_lime_text_UTF8String.toString = function(this1) {
	return this1;
};
$hx_$exports_lime_text_UTF8String.toUpperCase = function(this1) {
	return this1.toUpperCase();
};
$hx_$exports_lime_text_UTF8String.equals = function(a,b) {
	if(a == null || b == null) {
		return a == b;
	}
	return $hx_exports.lime.text.unifill.Unifill.uCompare(a,b) == 0;
};
$hx_$exports_lime_text_UTF8String.lt = function(a,b) {
	if(b == null) {
		return false;
	}
	if(a == null) {
		return true;
	}
	return $hx_exports.lime.text.unifill.Unifill.uCompare(a,b) == -1;
};
$hx_$exports_lime_text_UTF8String.gt = function(a,b) {
	if(a == null) {
		return false;
	}
	if(b == null) {
		return true;
	}
	return $hx_exports.lime.text.unifill.Unifill.uCompare(a,b) == 1;
};
$hx_$exports_lime_text_UTF8String.lteq = function(a,b) {
	if(b == null) {
		return a == null;
	}
	if(a == null) {
		return true;
	}
	return $hx_exports.lime.text.unifill.Unifill.uCompare(a,b) != 1;
};
$hx_$exports_lime_text_UTF8String.gteq = function(a,b) {
	if(a == null) {
		return b == null;
	}
	if(b == null) {
		return true;
	}
	return $hx_exports.lime.text.unifill.Unifill.uCompare(a,b) != -1;
};
$hx_$exports_lime_text_UTF8String.plus = function(a,b) {
	if(a == null && b == null) {
		return null;
	}
	if(a == null) {
		return b;
	}
	if(b == null) {
		return a;
	}
	var sb = new $hx_exports.StringBuf();
	sb.add($hx_$exports_lime_text_UTF8String.toString(a));
	sb.add($hx_$exports_lime_text_UTF8String.toString(b));
	return sb.toString();
};
$hx_$exports_lime_text_UTF8String.fromDynamic = function(value) {
	return Std.string(value);
};
$hx_$exports_lime_text_UTF8String.get_length = function(this1) {
	if(this1 == null) {
		return 0;
	} else {
		return this1.length;
	}
};
var lime_text__$UTF8String_Utf8Ext = function() { };
$hxClasses["lime.text._UTF8String.Utf8Ext"] = lime_text__$UTF8String_Utf8Ext;
lime_text__$UTF8String_Utf8Ext.__name__ = ["lime","text","_UTF8String","Utf8Ext"];
lime_text__$UTF8String_Utf8Ext.fillUpperToLowerMap = function(map) {
	var i = 0;
	var _g = 0;
	while(_g < 26) {
		var i1 = _g++;
		var v = 97 + i1;
		map.set(65 + i1,v);
	}
	var _g1 = 0;
	while(_g1 < 23) {
		var i2 = _g1++;
		var v1 = 224 + i2;
		map.set(192 + i2,v1);
	}
	var _g2 = 0;
	while(_g2 < 7) {
		var i3 = _g2++;
		var v2 = 248 + i3;
		map.set(216 + i3,v2);
	}
	while(i < 48) {
		var v3 = 257 + i;
		map.set(256 + i,v3);
		i += 2;
	}
	i = 0;
	map.set(304,105);
	while(i < 6) {
		var v4 = 307 + i;
		map.set(306 + i,v4);
		i += 2;
	}
	i = 0;
	while(i < 16) {
		var v5 = 314 + i;
		map.set(313 + i,v5);
		i += 2;
	}
	i = 0;
	while(i < 46) {
		var v6 = 331 + i;
		map.set(330 + i,v6);
		i += 2;
	}
	i = 0;
	map.set(376,255);
	while(i < 6) {
		var v7 = 378 + i;
		map.set(377 + i,v7);
		i += 2;
	}
	i = 0;
	map.set(385,595);
	while(i < 4) {
		var v8 = 387 + i;
		map.set(386 + i,v8);
		i += 2;
	}
	i = 0;
	map.set(390,596);
	map.set(391,392);
	var _g3 = 0;
	while(_g3 < 2) {
		var i4 = _g3++;
		var v9 = 598 + i4;
		map.set(393 + i4,v9);
	}
	map.set(395,396);
	map.set(398,477);
	map.set(399,601);
	map.set(400,603);
	map.set(401,402);
	map.set(403,608);
	map.set(404,611);
	map.set(406,617);
	map.set(407,616);
	map.set(408,409);
	map.set(412,623);
	map.set(413,626);
	map.set(415,629);
	while(i < 6) {
		var v10 = 417 + i;
		map.set(416 + i,v10);
		i += 2;
	}
	i = 0;
	map.set(422,640);
	map.set(423,424);
	map.set(425,643);
	map.set(428,429);
	map.set(430,648);
	map.set(431,432);
	var _g4 = 0;
	while(_g4 < 2) {
		var i5 = _g4++;
		var v11 = 650 + i5;
		map.set(433 + i5,v11);
	}
	while(i < 4) {
		var v12 = 436 + i;
		map.set(435 + i,v12);
		i += 2;
	}
	i = 0;
	map.set(439,658);
	map.set(440,441);
	map.set(444,445);
	map.set(452,454);
	map.set(455,457);
	map.set(458,460);
	while(i < 16) {
		var v13 = 462 + i;
		map.set(461 + i,v13);
		i += 2;
	}
	i = 0;
	while(i < 18) {
		var v14 = 479 + i;
		map.set(478 + i,v14);
		i += 2;
	}
	i = 0;
	map.set(497,499);
	map.set(500,501);
	map.set(502,405);
	map.set(503,447);
	while(i < 40) {
		var v15 = 505 + i;
		map.set(504 + i,v15);
		i += 2;
	}
	i = 0;
	map.set(544,414);
	while(i < 18) {
		var v16 = 547 + i;
		map.set(546 + i,v16);
		i += 2;
	}
	i = 0;
	map.set(570,11365);
	map.set(571,572);
	map.set(573,410);
	map.set(574,11366);
	map.set(577,578);
	map.set(579,384);
	map.set(580,649);
	map.set(581,652);
	while(i < 10) {
		var v17 = 583 + i;
		map.set(582 + i,v17);
		i += 2;
	}
	i = 0;
	while(i < 4) {
		var v18 = 881 + i;
		map.set(880 + i,v18);
		i += 2;
	}
	i = 0;
	map.set(886,887);
	map.set(895,1011);
	map.set(902,940);
	var _g5 = 0;
	while(_g5 < 3) {
		var i6 = _g5++;
		var v19 = 941 + i6;
		map.set(904 + i6,v19);
	}
	map.set(908,972);
	var _g6 = 0;
	while(_g6 < 2) {
		var i7 = _g6++;
		var v20 = 973 + i7;
		map.set(910 + i7,v20);
	}
	var _g7 = 0;
	while(_g7 < 17) {
		var i8 = _g7++;
		var v21 = 945 + i8;
		map.set(913 + i8,v21);
	}
	var _g8 = 0;
	while(_g8 < 9) {
		var i9 = _g8++;
		var v22 = 963 + i9;
		map.set(931 + i9,v22);
	}
	map.set(975,983);
	while(i < 24) {
		var v23 = 985 + i;
		map.set(984 + i,v23);
		i += 2;
	}
	i = 0;
	map.set(1012,952);
	map.set(1015,1016);
	map.set(1017,1010);
	map.set(1018,1019);
	var _g9 = 0;
	while(_g9 < 3) {
		var i10 = _g9++;
		var v24 = 891 + i10;
		map.set(1021 + i10,v24);
	}
	var _g10 = 0;
	while(_g10 < 16) {
		var i11 = _g10++;
		var v25 = 1104 + i11;
		map.set(1024 + i11,v25);
	}
	var _g11 = 0;
	while(_g11 < 32) {
		var i12 = _g11++;
		var v26 = 1072 + i12;
		map.set(1040 + i12,v26);
	}
	while(i < 34) {
		var v27 = 1121 + i;
		map.set(1120 + i,v27);
		i += 2;
	}
	i = 0;
	while(i < 54) {
		var v28 = 1163 + i;
		map.set(1162 + i,v28);
		i += 2;
	}
	i = 0;
	map.set(1216,1231);
	while(i < 14) {
		var v29 = 1218 + i;
		map.set(1217 + i,v29);
		i += 2;
	}
	i = 0;
	while(i < 96) {
		var v30 = 1233 + i;
		map.set(1232 + i,v30);
		i += 2;
	}
	i = 0;
	var _g12 = 0;
	while(_g12 < 38) {
		var i13 = _g12++;
		var v31 = 1377 + i13;
		map.set(1329 + i13,v31);
	}
	var _g13 = 0;
	while(_g13 < 38) {
		var i14 = _g13++;
		var v32 = 11520 + i14;
		map.set(4256 + i14,v32);
	}
	map.set(4295,11559);
	map.set(4301,11565);
	var _g14 = 0;
	while(_g14 < 80) {
		var i15 = _g14++;
		var v33 = 43888 + i15;
		map.set(5024 + i15,v33);
	}
	var _g15 = 0;
	while(_g15 < 6) {
		var i16 = _g15++;
		var v34 = 5112 + i16;
		map.set(5104 + i16,v34);
	}
	while(i < 150) {
		var v35 = 7681 + i;
		map.set(7680 + i,v35);
		i += 2;
	}
	i = 0;
	map.set(7838,223);
	while(i < 96) {
		var v36 = 7841 + i;
		map.set(7840 + i,v36);
		i += 2;
	}
	i = 0;
	var _g16 = 0;
	while(_g16 < 8) {
		var i17 = _g16++;
		var v37 = 7936 + i17;
		map.set(7944 + i17,v37);
	}
	var _g17 = 0;
	while(_g17 < 6) {
		var i18 = _g17++;
		var v38 = 7952 + i18;
		map.set(7960 + i18,v38);
	}
	var _g18 = 0;
	while(_g18 < 8) {
		var i19 = _g18++;
		var v39 = 7968 + i19;
		map.set(7976 + i19,v39);
	}
	var _g19 = 0;
	while(_g19 < 8) {
		var i20 = _g19++;
		var v40 = 7984 + i20;
		map.set(7992 + i20,v40);
	}
	var _g20 = 0;
	while(_g20 < 6) {
		var i21 = _g20++;
		var v41 = 8000 + i21;
		map.set(8008 + i21,v41);
	}
	while(i < 8) {
		var v42 = 8017 + i;
		map.set(8025 + i,v42);
		i += 2;
	}
	i = 0;
	var _g21 = 0;
	while(_g21 < 8) {
		var i22 = _g21++;
		var v43 = 8032 + i22;
		map.set(8040 + i22,v43);
	}
	var _g22 = 0;
	while(_g22 < 2) {
		var i23 = _g22++;
		var v44 = 8112 + i23;
		map.set(8120 + i23,v44);
	}
	var _g23 = 0;
	while(_g23 < 2) {
		var i24 = _g23++;
		var v45 = 8048 + i24;
		map.set(8122 + i24,v45);
	}
	var _g24 = 0;
	while(_g24 < 4) {
		var i25 = _g24++;
		var v46 = 8050 + i25;
		map.set(8136 + i25,v46);
	}
	var _g25 = 0;
	while(_g25 < 2) {
		var i26 = _g25++;
		var v47 = 8144 + i26;
		map.set(8152 + i26,v47);
	}
	var _g26 = 0;
	while(_g26 < 2) {
		var i27 = _g26++;
		var v48 = 8054 + i27;
		map.set(8154 + i27,v48);
	}
	var _g27 = 0;
	while(_g27 < 2) {
		var i28 = _g27++;
		var v49 = 8160 + i28;
		map.set(8168 + i28,v49);
	}
	var _g28 = 0;
	while(_g28 < 2) {
		var i29 = _g28++;
		var v50 = 8058 + i29;
		map.set(8170 + i29,v50);
	}
	map.set(8172,8165);
	var _g29 = 0;
	while(_g29 < 2) {
		var i30 = _g29++;
		var v51 = 8056 + i30;
		map.set(8184 + i30,v51);
	}
	var _g30 = 0;
	while(_g30 < 2) {
		var i31 = _g30++;
		var v52 = 8060 + i31;
		map.set(8186 + i31,v52);
	}
	map.set(8486,969);
	map.set(8490,107);
	map.set(8491,229);
	map.set(8498,8526);
	map.set(8579,8580);
	var _g31 = 0;
	while(_g31 < 47) {
		var i32 = _g31++;
		var v53 = 11312 + i32;
		map.set(11264 + i32,v53);
	}
	map.set(11360,11361);
	map.set(11362,619);
	map.set(11363,7549);
	map.set(11364,637);
	while(i < 6) {
		var v54 = 11368 + i;
		map.set(11367 + i,v54);
		i += 2;
	}
	i = 0;
	map.set(11373,593);
	map.set(11374,625);
	map.set(11375,592);
	map.set(11376,594);
	map.set(11378,11379);
	map.set(11381,11382);
	var _g32 = 0;
	while(_g32 < 2) {
		var i33 = _g32++;
		var v55 = 575 + i33;
		map.set(11390 + i33,v55);
	}
	while(i < 100) {
		var v56 = 11393 + i;
		map.set(11392 + i,v56);
		i += 2;
	}
	i = 0;
	while(i < 4) {
		var v57 = 11500 + i;
		map.set(11499 + i,v57);
		i += 2;
	}
	i = 0;
	map.set(11506,11507);
	while(i < 46) {
		var v58 = 42561 + i;
		map.set(42560 + i,v58);
		i += 2;
	}
	i = 0;
	while(i < 28) {
		var v59 = 42625 + i;
		map.set(42624 + i,v59);
		i += 2;
	}
	i = 0;
	while(i < 14) {
		var v60 = 42787 + i;
		map.set(42786 + i,v60);
		i += 2;
	}
	i = 0;
	while(i < 62) {
		var v61 = 42803 + i;
		map.set(42802 + i,v61);
		i += 2;
	}
	i = 0;
	while(i < 4) {
		var v62 = 42874 + i;
		map.set(42873 + i,v62);
		i += 2;
	}
	i = 0;
	map.set(42877,7545);
	while(i < 10) {
		var v63 = 42879 + i;
		map.set(42878 + i,v63);
		i += 2;
	}
	i = 0;
	map.set(42891,42892);
	map.set(42893,613);
	while(i < 4) {
		var v64 = 42897 + i;
		map.set(42896 + i,v64);
		i += 2;
	}
	i = 0;
	while(i < 20) {
		var v65 = 42903 + i;
		map.set(42902 + i,v65);
		i += 2;
	}
	i = 0;
	map.set(42922,614);
	map.set(42923,604);
	map.set(42924,609);
	map.set(42925,620);
	map.set(42926,618);
	map.set(42928,670);
	map.set(42929,647);
	map.set(42930,669);
	map.set(42931,43859);
	while(i < 4) {
		var v66 = 42933 + i;
		map.set(42932 + i,v66);
		i += 2;
	}
	i = 0;
	var _g33 = 0;
	while(_g33 < 26) {
		var i34 = _g33++;
		var v67 = 65345 + i34;
		map.set(65313 + i34,v67);
	}
	var _g34 = 0;
	while(_g34 < 40) {
		var i35 = _g34++;
		var v68 = 66600 + i35;
		map.set(66560 + i35,v68);
	}
	var _g35 = 0;
	while(_g35 < 36) {
		var i36 = _g35++;
		var v69 = 66776 + i36;
		map.set(66736 + i36,v69);
	}
	var _g36 = 0;
	while(_g36 < 51) {
		var i37 = _g36++;
		var v70 = 68800 + i37;
		map.set(68736 + i37,v70);
	}
	var _g37 = 0;
	while(_g37 < 32) {
		var i38 = _g37++;
		var v71 = 71872 + i38;
		map.set(71840 + i38,v71);
	}
	var _g38 = 0;
	while(_g38 < 34) {
		var i39 = _g38++;
		var v72 = 125218 + i39;
		map.set(125184 + i39,v72);
	}
};
lime_text__$UTF8String_Utf8Ext.fillLowerToUpperMap = function(map) {
	var i = 0;
	var _g = 0;
	while(_g < 26) {
		var i1 = _g++;
		var v = 65 + i1;
		map.set(97 + i1,v);
	}
	map.set(181,924);
	var _g1 = 0;
	while(_g1 < 23) {
		var i2 = _g1++;
		var v1 = 192 + i2;
		map.set(224 + i2,v1);
	}
	var _g2 = 0;
	while(_g2 < 7) {
		var i3 = _g2++;
		var v2 = 216 + i3;
		map.set(248 + i3,v2);
	}
	map.set(255,376);
	while(i < 48) {
		var v3 = 256 + i;
		map.set(257 + i,v3);
		i += 2;
	}
	i = 0;
	map.set(305,73);
	while(i < 6) {
		var v4 = 306 + i;
		map.set(307 + i,v4);
		i += 2;
	}
	i = 0;
	while(i < 16) {
		var v5 = 313 + i;
		map.set(314 + i,v5);
		i += 2;
	}
	i = 0;
	while(i < 46) {
		var v6 = 330 + i;
		map.set(331 + i,v6);
		i += 2;
	}
	i = 0;
	while(i < 6) {
		var v7 = 377 + i;
		map.set(378 + i,v7);
		i += 2;
	}
	i = 0;
	map.set(383,83);
	map.set(384,579);
	while(i < 4) {
		var v8 = 386 + i;
		map.set(387 + i,v8);
		i += 2;
	}
	i = 0;
	map.set(392,391);
	map.set(396,395);
	map.set(402,401);
	map.set(405,502);
	map.set(409,408);
	map.set(410,573);
	map.set(414,544);
	while(i < 6) {
		var v9 = 416 + i;
		map.set(417 + i,v9);
		i += 2;
	}
	i = 0;
	map.set(424,423);
	map.set(429,428);
	map.set(432,431);
	while(i < 4) {
		var v10 = 435 + i;
		map.set(436 + i,v10);
		i += 2;
	}
	i = 0;
	map.set(441,440);
	map.set(445,444);
	map.set(447,503);
	map.set(454,452);
	map.set(457,455);
	map.set(460,458);
	while(i < 16) {
		var v11 = 461 + i;
		map.set(462 + i,v11);
		i += 2;
	}
	i = 0;
	map.set(477,398);
	while(i < 18) {
		var v12 = 478 + i;
		map.set(479 + i,v12);
		i += 2;
	}
	i = 0;
	map.set(496,74);
	map.set(499,497);
	map.set(501,500);
	while(i < 40) {
		var v13 = 504 + i;
		map.set(505 + i,v13);
		i += 2;
	}
	i = 0;
	while(i < 18) {
		var v14 = 546 + i;
		map.set(547 + i,v14);
		i += 2;
	}
	i = 0;
	map.set(572,571);
	var _g3 = 0;
	while(_g3 < 2) {
		var i4 = _g3++;
		var v15 = 11390 + i4;
		map.set(575 + i4,v15);
	}
	map.set(578,577);
	while(i < 10) {
		var v16 = 582 + i;
		map.set(583 + i,v16);
		i += 2;
	}
	i = 0;
	map.set(592,11375);
	map.set(593,11373);
	map.set(594,11376);
	map.set(595,385);
	map.set(596,390);
	var _g4 = 0;
	while(_g4 < 2) {
		var i5 = _g4++;
		var v17 = 393 + i5;
		map.set(598 + i5,v17);
	}
	map.set(601,399);
	map.set(603,400);
	map.set(604,42923);
	map.set(608,403);
	map.set(609,42924);
	map.set(611,404);
	map.set(613,42893);
	map.set(614,42922);
	map.set(616,407);
	map.set(617,406);
	map.set(618,42926);
	map.set(619,11362);
	map.set(620,42925);
	map.set(623,412);
	map.set(625,11374);
	map.set(626,413);
	map.set(629,415);
	map.set(637,11364);
	map.set(640,422);
	map.set(643,425);
	map.set(647,42929);
	map.set(648,430);
	map.set(649,580);
	var _g5 = 0;
	while(_g5 < 2) {
		var i6 = _g5++;
		var v18 = 433 + i6;
		map.set(650 + i6,v18);
	}
	map.set(652,581);
	map.set(658,439);
	map.set(669,42930);
	map.set(670,42928);
	while(i < 4) {
		var v19 = 880 + i;
		map.set(881 + i,v19);
		i += 2;
	}
	i = 0;
	map.set(887,886);
	var _g6 = 0;
	while(_g6 < 3) {
		var i7 = _g6++;
		var v20 = 1021 + i7;
		map.set(891 + i7,v20);
	}
	map.set(912,938);
	map.set(940,902);
	var _g7 = 0;
	while(_g7 < 3) {
		var i8 = _g7++;
		var v21 = 904 + i8;
		map.set(941 + i8,v21);
	}
	map.set(944,939);
	var _g8 = 0;
	while(_g8 < 17) {
		var i9 = _g8++;
		var v22 = 913 + i9;
		map.set(945 + i9,v22);
	}
	map.set(962,931);
	var _g9 = 0;
	while(_g9 < 9) {
		var i10 = _g9++;
		var v23 = 931 + i10;
		map.set(963 + i10,v23);
	}
	map.set(972,908);
	var _g10 = 0;
	while(_g10 < 2) {
		var i11 = _g10++;
		var v24 = 910 + i11;
		map.set(973 + i11,v24);
	}
	map.set(976,914);
	map.set(977,920);
	map.set(981,934);
	map.set(982,928);
	map.set(983,975);
	while(i < 24) {
		var v25 = 984 + i;
		map.set(985 + i,v25);
		i += 2;
	}
	i = 0;
	map.set(1008,922);
	map.set(1009,929);
	map.set(1010,1017);
	map.set(1011,895);
	map.set(1013,917);
	map.set(1016,1015);
	map.set(1019,1018);
	var _g11 = 0;
	while(_g11 < 32) {
		var i12 = _g11++;
		var v26 = 1040 + i12;
		map.set(1072 + i12,v26);
	}
	var _g12 = 0;
	while(_g12 < 16) {
		var i13 = _g12++;
		var v27 = 1024 + i13;
		map.set(1104 + i13,v27);
	}
	while(i < 34) {
		var v28 = 1120 + i;
		map.set(1121 + i,v28);
		i += 2;
	}
	i = 0;
	while(i < 54) {
		var v29 = 1162 + i;
		map.set(1163 + i,v29);
		i += 2;
	}
	i = 0;
	while(i < 14) {
		var v30 = 1217 + i;
		map.set(1218 + i,v30);
		i += 2;
	}
	i = 0;
	map.set(1231,1216);
	while(i < 96) {
		var v31 = 1232 + i;
		map.set(1233 + i,v31);
		i += 2;
	}
	i = 0;
	var _g13 = 0;
	while(_g13 < 38) {
		var i14 = _g13++;
		var v32 = 1329 + i14;
		map.set(1377 + i14,v32);
	}
	var _g14 = 0;
	while(_g14 < 6) {
		var i15 = _g14++;
		var v33 = 5104 + i15;
		map.set(5112 + i15,v33);
	}
	map.set(7296,1042);
	map.set(7297,1044);
	map.set(7298,1054);
	var _g15 = 0;
	while(_g15 < 2) {
		var i16 = _g15++;
		var v34 = 1057 + i16;
		map.set(7299 + i16,v34);
	}
	map.set(7301,1058);
	map.set(7302,1066);
	map.set(7303,1122);
	map.set(7304,42570);
	map.set(7545,42877);
	map.set(7549,11363);
	while(i < 150) {
		var v35 = 7680 + i;
		map.set(7681 + i,v35);
		i += 2;
	}
	i = 0;
	map.set(7830,72);
	map.set(7831,84);
	map.set(7832,87);
	map.set(7833,89);
	map.set(7835,7776);
	while(i < 96) {
		var v36 = 7840 + i;
		map.set(7841 + i,v36);
		i += 2;
	}
	i = 0;
	var _g16 = 0;
	while(_g16 < 8) {
		var i17 = _g16++;
		var v37 = 7944 + i17;
		map.set(7936 + i17,v37);
	}
	var _g17 = 0;
	while(_g17 < 6) {
		var i18 = _g17++;
		var v38 = 7960 + i18;
		map.set(7952 + i18,v38);
	}
	var _g18 = 0;
	while(_g18 < 8) {
		var i19 = _g18++;
		var v39 = 7976 + i19;
		map.set(7968 + i19,v39);
	}
	var _g19 = 0;
	while(_g19 < 8) {
		var i20 = _g19++;
		var v40 = 7992 + i20;
		map.set(7984 + i20,v40);
	}
	var _g20 = 0;
	while(_g20 < 6) {
		var i21 = _g20++;
		var v41 = 8008 + i21;
		map.set(8000 + i21,v41);
	}
	map.set(8016,933);
	map.set(8017,8025);
	map.set(8018,933);
	map.set(8019,8027);
	map.set(8020,933);
	map.set(8021,8029);
	map.set(8022,933);
	map.set(8023,8031);
	var _g21 = 0;
	while(_g21 < 8) {
		var i22 = _g21++;
		var v42 = 8040 + i22;
		map.set(8032 + i22,v42);
	}
	var _g22 = 0;
	while(_g22 < 2) {
		var i23 = _g22++;
		var v43 = 8122 + i23;
		map.set(8048 + i23,v43);
	}
	var _g23 = 0;
	while(_g23 < 4) {
		var i24 = _g23++;
		var v44 = 8136 + i24;
		map.set(8050 + i24,v44);
	}
	var _g24 = 0;
	while(_g24 < 2) {
		var i25 = _g24++;
		var v45 = 8154 + i25;
		map.set(8054 + i25,v45);
	}
	var _g25 = 0;
	while(_g25 < 2) {
		var i26 = _g25++;
		var v46 = 8184 + i26;
		map.set(8056 + i26,v46);
	}
	var _g26 = 0;
	while(_g26 < 2) {
		var i27 = _g26++;
		var v47 = 8170 + i27;
		map.set(8058 + i27,v47);
	}
	var _g27 = 0;
	while(_g27 < 2) {
		var i28 = _g27++;
		var v48 = 8186 + i28;
		map.set(8060 + i28,v48);
	}
	var _g28 = 0;
	while(_g28 < 8) {
		var i29 = _g28++;
		var v49 = 8072 + i29;
		map.set(8064 + i29,v49);
	}
	var _g29 = 0;
	while(_g29 < 8) {
		var i30 = _g29++;
		var v50 = 8088 + i30;
		map.set(8080 + i30,v50);
	}
	var _g30 = 0;
	while(_g30 < 8) {
		var i31 = _g30++;
		var v51 = 8104 + i31;
		map.set(8096 + i31,v51);
	}
	var _g31 = 0;
	while(_g31 < 3) {
		var i32 = _g31++;
		var v52 = 8120 + i32;
		map.set(8112 + i32,v52);
	}
	map.set(8115,8124);
	map.set(8116,902);
	map.set(8118,913);
	map.set(8119,913);
	map.set(8126,921);
	map.set(8130,8138);
	map.set(8131,8140);
	map.set(8132,905);
	map.set(8134,919);
	map.set(8135,919);
	var _g32 = 0;
	while(_g32 < 2) {
		var i33 = _g32++;
		var v53 = 8152 + i33;
		map.set(8144 + i33,v53);
	}
	map.set(8146,938);
	map.set(8147,938);
	map.set(8150,921);
	map.set(8151,938);
	var _g33 = 0;
	while(_g33 < 2) {
		var i34 = _g33++;
		var v54 = 8168 + i34;
		map.set(8160 + i34,v54);
	}
	map.set(8162,939);
	map.set(8163,939);
	map.set(8164,929);
	map.set(8165,8172);
	map.set(8166,933);
	map.set(8167,939);
	map.set(8178,8186);
	map.set(8179,8188);
	map.set(8180,911);
	map.set(8182,937);
	map.set(8183,937);
	map.set(8526,8498);
	map.set(8580,8579);
	var _g34 = 0;
	while(_g34 < 47) {
		var i35 = _g34++;
		var v55 = 11264 + i35;
		map.set(11312 + i35,v55);
	}
	map.set(11361,11360);
	map.set(11365,570);
	map.set(11366,574);
	while(i < 6) {
		var v56 = 11367 + i;
		map.set(11368 + i,v56);
		i += 2;
	}
	i = 0;
	map.set(11379,11378);
	map.set(11382,11381);
	while(i < 100) {
		var v57 = 11392 + i;
		map.set(11393 + i,v57);
		i += 2;
	}
	i = 0;
	while(i < 4) {
		var v58 = 11499 + i;
		map.set(11500 + i,v58);
		i += 2;
	}
	i = 0;
	map.set(11507,11506);
	var _g35 = 0;
	while(_g35 < 38) {
		var i36 = _g35++;
		var v59 = 4256 + i36;
		map.set(11520 + i36,v59);
	}
	map.set(11559,4295);
	map.set(11565,4301);
	while(i < 46) {
		var v60 = 42560 + i;
		map.set(42561 + i,v60);
		i += 2;
	}
	i = 0;
	while(i < 28) {
		var v61 = 42624 + i;
		map.set(42625 + i,v61);
		i += 2;
	}
	i = 0;
	while(i < 14) {
		var v62 = 42786 + i;
		map.set(42787 + i,v62);
		i += 2;
	}
	i = 0;
	while(i < 62) {
		var v63 = 42802 + i;
		map.set(42803 + i,v63);
		i += 2;
	}
	i = 0;
	while(i < 4) {
		var v64 = 42873 + i;
		map.set(42874 + i,v64);
		i += 2;
	}
	i = 0;
	while(i < 10) {
		var v65 = 42878 + i;
		map.set(42879 + i,v65);
		i += 2;
	}
	i = 0;
	map.set(42892,42891);
	while(i < 4) {
		var v66 = 42896 + i;
		map.set(42897 + i,v66);
		i += 2;
	}
	i = 0;
	while(i < 20) {
		var v67 = 42902 + i;
		map.set(42903 + i,v67);
		i += 2;
	}
	i = 0;
	while(i < 4) {
		var v68 = 42932 + i;
		map.set(42933 + i,v68);
		i += 2;
	}
	i = 0;
	map.set(43859,42931);
	var _g36 = 0;
	while(_g36 < 80) {
		var i37 = _g36++;
		var v69 = 5024 + i37;
		map.set(43888 + i37,v69);
	}
	var _g37 = 0;
	while(_g37 < 26) {
		var i38 = _g37++;
		var v70 = 65313 + i38;
		map.set(65345 + i38,v70);
	}
	var _g38 = 0;
	while(_g38 < 40) {
		var i39 = _g38++;
		var v71 = 66560 + i39;
		map.set(66600 + i39,v71);
	}
	var _g39 = 0;
	while(_g39 < 36) {
		var i40 = _g39++;
		var v72 = 66736 + i40;
		map.set(66776 + i40,v72);
	}
	var _g40 = 0;
	while(_g40 < 51) {
		var i41 = _g40++;
		var v73 = 68736 + i41;
		map.set(68800 + i41,v73);
	}
	var _g41 = 0;
	while(_g41 < 32) {
		var i42 = _g41++;
		var v74 = 71840 + i42;
		map.set(71872 + i42,v74);
	}
	var _g42 = 0;
	while(_g42 < 34) {
		var i43 = _g42++;
		var v75 = 125184 + i43;
		map.set(125218 + i43,v75);
	}
};
var $hx_$exports_lime_text_unifill_CodePoint = {};
$hxClasses["$hx_exports.lime.text.unifill.CodePoint"] = $hx_$exports_lime_text_unifill_CodePoint;
$hx_$exports_lime_text_unifill_CodePoint.__name__ = ["$hx_exports","lime","text","unifill","CodePoint"];
$hx_$exports_lime_text_unifill_CodePoint.fromInt = function(code) {
	if(!$hx_exports.lime.text.unifill.Unicode.isScalar(code)) {
		throw new js__$Boot_HaxeError(new lime_text_unifill_InvalidCodePoint(code));
	}
	var this1 = code;
	return this1;
};
$hx_$exports_lime_text_unifill_CodePoint.cons = function(a,b) {
	return $hx_exports.lime.text.unifill.InternalEncoding.fromCodePoint(a) + b;
};
$hx_$exports_lime_text_unifill_CodePoint.snoc = function(a,b) {
	return a + $hx_exports.lime.text.unifill.InternalEncoding.fromCodePoint(b);
};
$hx_$exports_lime_text_unifill_CodePoint.addInt = function(a,b) {
	var code = a + b;
	if(!$hx_exports.lime.text.unifill.Unicode.isScalar(code)) {
		throw new js__$Boot_HaxeError(new lime_text_unifill_InvalidCodePoint(code));
	}
	var this1 = code;
	return this1;
};
$hx_$exports_lime_text_unifill_CodePoint.sub = function(a,b) {
	return a - b;
};
$hx_$exports_lime_text_unifill_CodePoint.subInt = function(a,b) {
	var code = a - b;
	if(!$hx_exports.lime.text.unifill.Unicode.isScalar(code)) {
		throw new js__$Boot_HaxeError(new lime_text_unifill_InvalidCodePoint(code));
	}
	var this1 = code;
	return this1;
};
$hx_$exports_lime_text_unifill_CodePoint._new = function(code) {
	var this1 = code;
	return this1;
};
$hx_$exports_lime_text_unifill_CodePoint.toString = function(this1) {
	return $hx_exports.lime.text.unifill.InternalEncoding.fromCodePoint(this1);
};
$hx_$exports_lime_text_unifill_CodePoint.toInt = function(this1) {
	return this1;
};
var lime_text_unifill_InvalidCodePoint = function(code) {
	$hx_exports.lime.text.unifill.Exception.call(this);
	this.code = code;
};
$hxClasses["lime.text.unifill.InvalidCodePoint"] = lime_text_unifill_InvalidCodePoint;
lime_text_unifill_InvalidCodePoint.__name__ = ["lime","text","unifill","InvalidCodePoint"];
lime_text_unifill_InvalidCodePoint.__super__ = $hx_exports.lime.text.unifill.Exception;
lime_text_unifill_InvalidCodePoint.prototype = $extend($hx_exports.lime.text.unifill.Exception.prototype,{
	code: null
	,toString: function() {
		return "InvalidCodePoint(code: " + this.code + ")";
	}
	,__class__: lime_text_unifill_InvalidCodePoint
});
var lime_text_unifill_InvalidCodeUnitSequence = function(index) {
	$hx_exports.lime.text.unifill.Exception.call(this);
	this.index = index;
};
$hxClasses["lime.text.unifill.InvalidCodeUnitSequence"] = lime_text_unifill_InvalidCodeUnitSequence;
lime_text_unifill_InvalidCodeUnitSequence.__name__ = ["lime","text","unifill","InvalidCodeUnitSequence"];
lime_text_unifill_InvalidCodeUnitSequence.__super__ = $hx_exports.lime.text.unifill.Exception;
lime_text_unifill_InvalidCodeUnitSequence.prototype = $extend($hx_exports.lime.text.unifill.Exception.prototype,{
	index: null
	,toString: function() {
		return "InvalidCodeUnitSequence(index: " + this.index + ")";
	}
	,__class__: lime_text_unifill_InvalidCodeUnitSequence
});
var $hx_$exports_lime_text_unifill_Utf16 = {};
$hxClasses["$hx_exports.lime.text.unifill.Utf16"] = $hx_$exports_lime_text_unifill_Utf16;
$hx_$exports_lime_text_unifill_Utf16.__name__ = ["$hx_exports","lime","text","unifill","Utf16"];
$hx_$exports_lime_text_unifill_Utf16.__properties__ = {get_length:"get_length"};
$hx_$exports_lime_text_unifill_Utf16.fromCodePoint = function(codePoint) {
	if(codePoint <= 65535) {
		var this1 = String.fromCharCode(codePoint);
		var this2 = this1;
		return this2;
	} else {
		var u0 = $hx_exports.lime.text.unifill.Unicode.encodeHighSurrogate(codePoint);
		var u1 = $hx_exports.lime.text.unifill.Unicode.encodeLowSurrogate(codePoint);
		var this3 = String.fromCharCode(u0) + String.fromCharCode(u1);
		var this4 = this3;
		return this4;
	}
};
$hx_$exports_lime_text_unifill_Utf16.fromCodePoints = function(codePoints) {
	var this1 = new $hx_exports.StringBuf();
	var buf = this1;
	var c = $iterator(codePoints)();
	while(c.hasNext()) {
		var c1 = c.next();
		lime_text_unifill__$Utf16_Utf16Impl.encode_code_point(function(x) {
			buf.addChar(x);
		},c1);
	}
	var this2 = buf.toString();
	var this3 = this2;
	return this3;
};
$hx_$exports_lime_text_unifill_Utf16.fromString = function(s) {
	var this1 = s;
	var this2 = this1;
	return this2;
};
$hx_$exports_lime_text_unifill_Utf16.fromArray = function(a) {
	var buf = new $hx_exports.StringBuf();
	var _g = 0;
	while(_g < a.length) {
		var x = a[_g];
		++_g;
		buf.addChar(x);
	}
	var this1 = buf.toString();
	var this2 = this1;
	return this2;
};
$hx_$exports_lime_text_unifill_Utf16.encodeWith = function(f,c) {
	lime_text_unifill__$Utf16_Utf16Impl.encode_code_point(f,c);
};
$hx_$exports_lime_text_unifill_Utf16.codeUnitAt = function(this1,index) {
	return $hx_exports.StringTools.fastCodeAt(this1,index);
};
$hx_$exports_lime_text_unifill_Utf16.codePointAt = function(this1,index) {
	return lime_text_unifill__$Utf16_Utf16Impl.decode_code_point(this1.length,function(i) {
		return $hx_exports.StringTools.fastCodeAt(this1,i);
	},index);
};
$hx_$exports_lime_text_unifill_Utf16.charAt = function(this1,index) {
	var c = $hx_exports.StringTools.fastCodeAt(this1,index);
	var this2 = $hx_exports.HxOverrides.substr(this1,index,lime_text_unifill__$Utf16_Utf16Impl.code_point_width(c));
	var this3 = this2;
	return this3;
};
$hx_$exports_lime_text_unifill_Utf16.codePointCount = function(this1,beginIndex,endIndex) {
	var index = beginIndex;
	var i = 0;
	while(index < endIndex) {
		var c = $hx_exports.StringTools.fastCodeAt(this1,index);
		index += lime_text_unifill__$Utf16_Utf16Impl.code_point_width(c);
		++i;
	}
	return i;
};
$hx_$exports_lime_text_unifill_Utf16.codePointWidthAt = function(this1,index) {
	var c = $hx_exports.StringTools.fastCodeAt(this1,index);
	return lime_text_unifill__$Utf16_Utf16Impl.code_point_width(c);
};
$hx_$exports_lime_text_unifill_Utf16.codePointWidthBefore = function(this1,index) {
	return lime_text_unifill__$Utf16_Utf16Impl.find_prev_code_point(function(i) {
		return $hx_exports.StringTools.fastCodeAt(this1,i);
	},index);
};
$hx_$exports_lime_text_unifill_Utf16.offsetByCodePoints = function(this1,index,codePointOffset) {
	if(codePointOffset >= 0) {
		var index1 = index;
		var len = this1.length;
		var i = 0;
		while(i < codePointOffset && index1 < len) {
			var c = $hx_exports.StringTools.fastCodeAt(this1,index1);
			index1 += lime_text_unifill__$Utf16_Utf16Impl.code_point_width(c);
			++i;
		}
		return index1;
	} else {
		var index2 = index;
		var count = 0;
		while(count < -codePointOffset && 0 < index2) {
			index2 -= lime_text_unifill__$Utf16_Utf16Impl.find_prev_code_point((function(this2) {
				return function(i1) {
					return $hx_exports.StringTools.fastCodeAt(this2[0],i1);
				};
			})([this1]),index2);
			++count;
		}
		return index2;
	}
};
$hx_$exports_lime_text_unifill_Utf16.substr = function(this1,index,len) {
	var this2 = $hx_exports.HxOverrides.substr(this1,index,len);
	var this3 = this2;
	return this3;
};
$hx_$exports_lime_text_unifill_Utf16.validate = function(this1) {
	var len = this1.length;
	var accessor = function(i) {
		return $hx_exports.StringTools.fastCodeAt(this1,i);
	};
	var i1 = 0;
	while(i1 < len) {
		lime_text_unifill__$Utf16_Utf16Impl.decode_code_point(len,accessor,i1);
		var c = $hx_exports.StringTools.fastCodeAt(this1,i1);
		i1 += lime_text_unifill__$Utf16_Utf16Impl.code_point_width(c);
	}
};
$hx_$exports_lime_text_unifill_Utf16.toString = function(this1) {
	return this1;
};
$hx_$exports_lime_text_unifill_Utf16.toArray = function(this1) {
	var i = 0;
	var len = this1.length;
	var _g = [];
	while(i < len) _g.push($hx_exports.StringTools.fastCodeAt(this1,i++));
	return _g;
};
$hx_$exports_lime_text_unifill_Utf16._new = function(s) {
	var this1 = s;
	return this1;
};
$hx_$exports_lime_text_unifill_Utf16.get_length = function(this1) {
	return this1.length;
};
$hx_$exports_lime_text_unifill_Utf16.forward_offset_by_code_points = function(this1,index,codePointOffset) {
	var len = this1.length;
	var i = 0;
	while(i < codePointOffset && index < len) {
		var c = $hx_exports.StringTools.fastCodeAt(this1,index);
		index += lime_text_unifill__$Utf16_Utf16Impl.code_point_width(c);
		++i;
	}
	return index;
};
$hx_$exports_lime_text_unifill_Utf16.backward_offset_by_code_points = function(this1,index,codePointOffset) {
	var count = 0;
	while(count < codePointOffset && 0 < index) {
		index -= lime_text_unifill__$Utf16_Utf16Impl.find_prev_code_point((function(this2) {
			return function(i) {
				return $hx_exports.StringTools.fastCodeAt(this2[0],i);
			};
		})([this1]),index);
		++count;
	}
	return index;
};
var lime_text_unifill__$Utf16_Utf16Impl = function() { };
$hxClasses["lime.text.unifill._Utf16.Utf16Impl"] = lime_text_unifill__$Utf16_Utf16Impl;
lime_text_unifill__$Utf16_Utf16Impl.__name__ = ["lime","text","unifill","_Utf16","Utf16Impl"];
lime_text_unifill__$Utf16_Utf16Impl.code_point_width = function(c) {
	if(!$hx_exports.lime.text.unifill.Unicode.isHighSurrogate(c)) {
		return 1;
	} else {
		return 2;
	}
};
lime_text_unifill__$Utf16_Utf16Impl.find_prev_code_point = function(accessor,index) {
	var c = accessor(index - 1);
	if(!$hx_exports.lime.text.unifill.Unicode.isLowSurrogate(c)) {
		return 1;
	} else {
		return 2;
	}
};
lime_text_unifill__$Utf16_Utf16Impl.encode_code_point = function(addUnit,codePoint) {
	if(codePoint <= 65535) {
		addUnit(codePoint);
	} else {
		addUnit($hx_exports.lime.text.unifill.Unicode.encodeHighSurrogate(codePoint));
		addUnit($hx_exports.lime.text.unifill.Unicode.encodeLowSurrogate(codePoint));
	}
};
lime_text_unifill__$Utf16_Utf16Impl.decode_code_point = function(len,accessor,index) {
	if(index < 0 || len <= index) {
		throw new js__$Boot_HaxeError(new lime_text_unifill_InvalidCodeUnitSequence(index));
	}
	var hi = accessor(index);
	if($hx_exports.lime.text.unifill.Unicode.isHighSurrogate(hi)) {
		if(index + 1 < 0 || len <= index + 1) {
			throw new js__$Boot_HaxeError(new lime_text_unifill_InvalidCodeUnitSequence(index));
		}
		var lo = accessor(index + 1);
		if($hx_exports.lime.text.unifill.Unicode.isLowSurrogate(lo)) {
			return $hx_exports.lime.text.unifill.Unicode.decodeSurrogate(hi,lo);
		} else {
			throw new js__$Boot_HaxeError(new lime_text_unifill_InvalidCodeUnitSequence(index));
		}
	} else if($hx_exports.lime.text.unifill.Unicode.isLowSurrogate(hi)) {
		throw new js__$Boot_HaxeError(new lime_text_unifill_InvalidCodeUnitSequence(index));
	} else {
		return hi;
	}
};
var lime_text_unifill__$Utf16_StringU16Buffer_$Impl_$ = {};
$hxClasses["lime.text.unifill._Utf16.StringU16Buffer_Impl_"] = lime_text_unifill__$Utf16_StringU16Buffer_$Impl_$;
lime_text_unifill__$Utf16_StringU16Buffer_$Impl_$.__name__ = ["lime","text","unifill","_Utf16","StringU16Buffer_Impl_"];
lime_text_unifill__$Utf16_StringU16Buffer_$Impl_$._new = function() {
	var this1 = new $hx_exports.StringBuf();
	return this1;
};
lime_text_unifill__$Utf16_StringU16Buffer_$Impl_$.addUnit = function(this1,unit) {
	this1.addChar(unit);
};
lime_text_unifill__$Utf16_StringU16Buffer_$Impl_$.getStringU16 = function(this1) {
	var this2 = this1.toString();
	return this2;
};
var lime_text_unifill__$Utf16_StringU16_$Impl_$ = {};
$hxClasses["lime.text.unifill._Utf16.StringU16_Impl_"] = lime_text_unifill__$Utf16_StringU16_$Impl_$;
lime_text_unifill__$Utf16_StringU16_$Impl_$.__name__ = ["lime","text","unifill","_Utf16","StringU16_Impl_"];
lime_text_unifill__$Utf16_StringU16_$Impl_$.__properties__ = {get_length:"get_length"};
lime_text_unifill__$Utf16_StringU16_$Impl_$.fromString = function(s) {
	var this1 = s;
	return this1;
};
lime_text_unifill__$Utf16_StringU16_$Impl_$.fromCodeUnit = function(u) {
	var this1 = String.fromCharCode(u);
	return this1;
};
lime_text_unifill__$Utf16_StringU16_$Impl_$.fromTwoCodeUnits = function(u0,u1) {
	var this1 = String.fromCharCode(u0) + String.fromCharCode(u1);
	return this1;
};
lime_text_unifill__$Utf16_StringU16_$Impl_$.ofArray = function(a) {
	var buf = new $hx_exports.StringBuf();
	var _g = 0;
	while(_g < a.length) {
		var x = a[_g];
		++_g;
		buf.addChar(x);
	}
	var this1 = buf.toString();
	return this1;
};
lime_text_unifill__$Utf16_StringU16_$Impl_$.fromArray = function(a) {
	var buf = new $hx_exports.StringBuf();
	var _g = 0;
	while(_g < a.length) {
		var x = a[_g];
		++_g;
		buf.addChar(x);
	}
	var this1 = buf.toString();
	return this1;
};
lime_text_unifill__$Utf16_StringU16_$Impl_$.codeUnitAt = function(this1,index) {
	return $hx_exports.StringTools.fastCodeAt(this1,index);
};
lime_text_unifill__$Utf16_StringU16_$Impl_$.substr = function(this1,index,len) {
	var this2 = $hx_exports.HxOverrides.substr(this1,index,len);
	return this2;
};
lime_text_unifill__$Utf16_StringU16_$Impl_$.toString = function(this1) {
	return this1;
};
lime_text_unifill__$Utf16_StringU16_$Impl_$.toArray = function(this1) {
	var i = 0;
	var len = this1.length;
	var _g = [];
	while(i < len) _g.push($hx_exports.StringTools.fastCodeAt(this1,i++));
	return _g;
};
lime_text_unifill__$Utf16_StringU16_$Impl_$._new = function(s) {
	var this1 = s;
	return this1;
};
lime_text_unifill__$Utf16_StringU16_$Impl_$.get_length = function(this1) {
	return this1.length;
};
var lime_ui_FileDialogType = $hxClasses["lime.ui.FileDialogType"] = { __ename__ : ["lime","ui","FileDialogType"], __constructs__ : ["OPEN","OPEN_MULTIPLE","SAVE","OPEN_DIRECTORY"] };
lime_ui_FileDialogType.OPEN = ["OPEN",0];
lime_ui_FileDialogType.OPEN.toString = $estr;
lime_ui_FileDialogType.OPEN.__enum__ = lime_ui_FileDialogType;
lime_ui_FileDialogType.OPEN_MULTIPLE = ["OPEN_MULTIPLE",1];
lime_ui_FileDialogType.OPEN_MULTIPLE.toString = $estr;
lime_ui_FileDialogType.OPEN_MULTIPLE.__enum__ = lime_ui_FileDialogType;
lime_ui_FileDialogType.SAVE = ["SAVE",2];
lime_ui_FileDialogType.SAVE.toString = $estr;
lime_ui_FileDialogType.SAVE.__enum__ = lime_ui_FileDialogType;
lime_ui_FileDialogType.OPEN_DIRECTORY = ["OPEN_DIRECTORY",3];
lime_ui_FileDialogType.OPEN_DIRECTORY.toString = $estr;
lime_ui_FileDialogType.OPEN_DIRECTORY.__enum__ = lime_ui_FileDialogType;
lime_ui_FileDialogType.__empty_constructs__ = [lime_ui_FileDialogType.OPEN,lime_ui_FileDialogType.OPEN_MULTIPLE,lime_ui_FileDialogType.SAVE,lime_ui_FileDialogType.OPEN_DIRECTORY];
var $hx_$exports_lime_ui_GamepadAxis = {};
$hxClasses["$hx_exports.lime.ui.GamepadAxis"] = $hx_$exports_lime_ui_GamepadAxis;
$hx_$exports_lime_ui_GamepadAxis.__name__ = ["$hx_exports","lime","ui","GamepadAxis"];
$hx_$exports_lime_ui_GamepadAxis.toString = function(this1) {
	switch(this1) {
	case 0:
		return "LEFT_X";
	case 1:
		return "LEFT_Y";
	case 2:
		return "RIGHT_X";
	case 3:
		return "RIGHT_Y";
	case 4:
		return "TRIGGER_LEFT";
	case 5:
		return "TRIGGER_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
var $hx_$exports_lime_ui_GamepadButton = {};
$hxClasses["$hx_exports.lime.ui.GamepadButton"] = $hx_$exports_lime_ui_GamepadButton;
$hx_$exports_lime_ui_GamepadButton.__name__ = ["$hx_exports","lime","ui","GamepadButton"];
$hx_$exports_lime_ui_GamepadButton.toString = function(this1) {
	switch(this1) {
	case 0:
		return "A";
	case 1:
		return "B";
	case 2:
		return "X";
	case 3:
		return "Y";
	case 4:
		return "BACK";
	case 5:
		return "GUIDE";
	case 6:
		return "START";
	case 7:
		return "LEFT_STICK";
	case 8:
		return "RIGHT_STICK";
	case 9:
		return "LEFT_SHOULDER";
	case 10:
		return "RIGHT_SHOULDER";
	case 11:
		return "DPAD_UP";
	case 12:
		return "DPAD_DOWN";
	case 13:
		return "DPAD_LEFT";
	case 14:
		return "DPAD_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
var $hx_$exports_lime_ui_JoystickHatPosition = {};
$hxClasses["$hx_exports.lime.ui.JoystickHatPosition"] = $hx_$exports_lime_ui_JoystickHatPosition;
$hx_$exports_lime_ui_JoystickHatPosition.__name__ = ["$hx_exports","lime","ui","JoystickHatPosition"];
$hx_$exports_lime_ui_JoystickHatPosition.__properties__ = {set_up:"set_up",get_up:"get_up",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_down:"set_down",get_down:"get_down",set_center:"set_center",get_center:"get_center"};
$hx_$exports_lime_ui_JoystickHatPosition._new = function(value) {
	var this1 = value;
	return this1;
};
$hx_$exports_lime_ui_JoystickHatPosition.get_center = function(this1) {
	return this1 == 0;
};
$hx_$exports_lime_ui_JoystickHatPosition.set_center = function(this1,value) {
	if(value) {
		this1 = 0;
	}
	return value;
};
$hx_$exports_lime_ui_JoystickHatPosition.get_down = function(this1) {
	return (this1 & 4) > 0;
};
$hx_$exports_lime_ui_JoystickHatPosition.set_down = function(this1,value) {
	if(value) {
		this1 |= 4;
	} else {
		this1 &= 268435455 - 4;
	}
	return value;
};
$hx_$exports_lime_ui_JoystickHatPosition.get_left = function(this1) {
	return (this1 & 8) > 0;
};
$hx_$exports_lime_ui_JoystickHatPosition.set_left = function(this1,value) {
	if(value) {
		this1 |= 8;
	} else {
		this1 &= 268435455 - 8;
	}
	return value;
};
$hx_$exports_lime_ui_JoystickHatPosition.get_right = function(this1) {
	return (this1 & 2) > 0;
};
$hx_$exports_lime_ui_JoystickHatPosition.set_right = function(this1,value) {
	if(value) {
		this1 |= 2;
	} else {
		this1 &= 268435455 - 2;
	}
	return value;
};
$hx_$exports_lime_ui_JoystickHatPosition.get_up = function(this1) {
	return (this1 & 1) > 0;
};
$hx_$exports_lime_ui_JoystickHatPosition.set_up = function(this1,value) {
	if(value) {
		this1 |= 1;
	} else {
		this1 &= 268435455 - 1;
	}
	return value;
};
var $hx_$exports_lime_ui_KeyCode = {};
$hxClasses["$hx_exports.lime.ui.KeyCode"] = $hx_$exports_lime_ui_KeyCode;
$hx_$exports_lime_ui_KeyCode.__name__ = ["$hx_exports","lime","ui","KeyCode"];
$hx_$exports_lime_ui_KeyCode.fromScanCode = function(scanCode) {
	return 0;
};
$hx_$exports_lime_ui_KeyCode.toScanCode = function(keyCode) {
	return 0;
};
$hx_$exports_lime_ui_KeyCode.gt = function(a,b) {
	return a > b;
};
$hx_$exports_lime_ui_KeyCode.gte = function(a,b) {
	return a >= b;
};
$hx_$exports_lime_ui_KeyCode.lt = function(a,b) {
	return a < b;
};
$hx_$exports_lime_ui_KeyCode.lte = function(a,b) {
	return a <= b;
};
$hx_$exports_lime_ui_KeyCode.plus = function(a,b) {
	return a + b;
};
var $hx_$exports_lime_ui_KeyModifier = {};
$hxClasses["$hx_exports.lime.ui.KeyModifier"] = $hx_$exports_lime_ui_KeyModifier;
$hx_$exports_lime_ui_KeyModifier.__name__ = ["$hx_exports","lime","ui","KeyModifier"];
$hx_$exports_lime_ui_KeyModifier.__properties__ = {set_shiftKey:"set_shiftKey",get_shiftKey:"get_shiftKey",set_numLock:"set_numLock",get_numLock:"get_numLock",set_metaKey:"set_metaKey",get_metaKey:"get_metaKey",set_ctrlKey:"set_ctrlKey",get_ctrlKey:"get_ctrlKey",set_capsLock:"set_capsLock",get_capsLock:"get_capsLock",set_altKey:"set_altKey",get_altKey:"get_altKey"};
$hx_$exports_lime_ui_KeyModifier.get_altKey = function(this1) {
	if((this1 & 256) <= 0) {
		return (this1 & 512) > 0;
	} else {
		return true;
	}
};
$hx_$exports_lime_ui_KeyModifier.set_altKey = function(this1,value) {
	if(value) {
		this1 |= 768;
	} else {
		this1 &= 268435455 - 768;
	}
	return value;
};
$hx_$exports_lime_ui_KeyModifier.get_capsLock = function(this1) {
	if((this1 & 8192) <= 0) {
		return (this1 & 8192) > 0;
	} else {
		return true;
	}
};
$hx_$exports_lime_ui_KeyModifier.set_capsLock = function(this1,value) {
	if(value) {
		this1 |= 8192;
	} else {
		this1 &= 268435455 - 8192;
	}
	return value;
};
$hx_$exports_lime_ui_KeyModifier.get_ctrlKey = function(this1) {
	if((this1 & 64) <= 0) {
		return (this1 & 128) > 0;
	} else {
		return true;
	}
};
$hx_$exports_lime_ui_KeyModifier.set_ctrlKey = function(this1,value) {
	if(value) {
		this1 |= 192;
	} else {
		this1 &= 268435455 - 192;
	}
	return value;
};
$hx_$exports_lime_ui_KeyModifier.get_metaKey = function(this1) {
	if((this1 & 1024) <= 0) {
		return (this1 & 2048) > 0;
	} else {
		return true;
	}
};
$hx_$exports_lime_ui_KeyModifier.set_metaKey = function(this1,value) {
	if(value) {
		this1 |= 3072;
	} else {
		this1 &= 268435455 - 3072;
	}
	return value;
};
$hx_$exports_lime_ui_KeyModifier.get_numLock = function(this1) {
	if((this1 & 4096) <= 0) {
		return (this1 & 4096) > 0;
	} else {
		return true;
	}
};
$hx_$exports_lime_ui_KeyModifier.set_numLock = function(this1,value) {
	if(value) {
		this1 |= 4096;
	} else {
		this1 &= 268435455 - 4096;
	}
	return value;
};
$hx_$exports_lime_ui_KeyModifier.get_shiftKey = function(this1) {
	if((this1 & 1) <= 0) {
		return (this1 & 2) > 0;
	} else {
		return true;
	}
};
$hx_$exports_lime_ui_KeyModifier.set_shiftKey = function(this1,value) {
	if(value) {
		this1 |= 3;
	} else {
		this1 &= 268435455 - 3;
	}
	return value;
};
var lime_ui_MouseCursor = $hxClasses["lime.ui.MouseCursor"] = { __ename__ : ["lime","ui","MouseCursor"], __constructs__ : ["ARROW","CROSSHAIR","DEFAULT","MOVE","POINTER","RESIZE_NESW","RESIZE_NS","RESIZE_NWSE","RESIZE_WE","TEXT","WAIT","WAIT_ARROW","CUSTOM"] };
lime_ui_MouseCursor.ARROW = ["ARROW",0];
lime_ui_MouseCursor.ARROW.toString = $estr;
lime_ui_MouseCursor.ARROW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.CROSSHAIR = ["CROSSHAIR",1];
lime_ui_MouseCursor.CROSSHAIR.toString = $estr;
lime_ui_MouseCursor.CROSSHAIR.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.DEFAULT = ["DEFAULT",2];
lime_ui_MouseCursor.DEFAULT.toString = $estr;
lime_ui_MouseCursor.DEFAULT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.MOVE = ["MOVE",3];
lime_ui_MouseCursor.MOVE.toString = $estr;
lime_ui_MouseCursor.MOVE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.POINTER = ["POINTER",4];
lime_ui_MouseCursor.POINTER.toString = $estr;
lime_ui_MouseCursor.POINTER.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NESW = ["RESIZE_NESW",5];
lime_ui_MouseCursor.RESIZE_NESW.toString = $estr;
lime_ui_MouseCursor.RESIZE_NESW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NS = ["RESIZE_NS",6];
lime_ui_MouseCursor.RESIZE_NS.toString = $estr;
lime_ui_MouseCursor.RESIZE_NS.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NWSE = ["RESIZE_NWSE",7];
lime_ui_MouseCursor.RESIZE_NWSE.toString = $estr;
lime_ui_MouseCursor.RESIZE_NWSE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_WE = ["RESIZE_WE",8];
lime_ui_MouseCursor.RESIZE_WE.toString = $estr;
lime_ui_MouseCursor.RESIZE_WE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.TEXT = ["TEXT",9];
lime_ui_MouseCursor.TEXT.toString = $estr;
lime_ui_MouseCursor.TEXT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.WAIT = ["WAIT",10];
lime_ui_MouseCursor.WAIT.toString = $estr;
lime_ui_MouseCursor.WAIT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.WAIT_ARROW = ["WAIT_ARROW",11];
lime_ui_MouseCursor.WAIT_ARROW.toString = $estr;
lime_ui_MouseCursor.WAIT_ARROW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.CUSTOM = ["CUSTOM",12];
lime_ui_MouseCursor.CUSTOM.toString = $estr;
lime_ui_MouseCursor.CUSTOM.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.__empty_constructs__ = [lime_ui_MouseCursor.ARROW,lime_ui_MouseCursor.CROSSHAIR,lime_ui_MouseCursor.DEFAULT,lime_ui_MouseCursor.MOVE,lime_ui_MouseCursor.POINTER,lime_ui_MouseCursor.RESIZE_NESW,lime_ui_MouseCursor.RESIZE_NS,lime_ui_MouseCursor.RESIZE_NWSE,lime_ui_MouseCursor.RESIZE_WE,lime_ui_MouseCursor.TEXT,lime_ui_MouseCursor.WAIT,lime_ui_MouseCursor.WAIT_ARROW,lime_ui_MouseCursor.CUSTOM];
var $hx_$exports_lime_ui_ScanCode = {};
$hxClasses["$hx_exports.lime.ui.ScanCode"] = $hx_$exports_lime_ui_ScanCode;
$hx_$exports_lime_ui_ScanCode.__name__ = ["$hx_exports","lime","ui","ScanCode"];
$hx_$exports_lime_ui_ScanCode.fromKeyCode = function(keyCode) {
	return $hx_$exports_lime_ui_KeyCode.toScanCode(keyCode);
};
$hx_$exports_lime_ui_ScanCode.toKeyCode = function(scanCode) {
	return $hx_$exports_lime_ui_KeyCode.fromScanCode(scanCode);
};
$hx_$exports_lime_ui_ScanCode.gt = function(a,b) {
	return a > b;
};
$hx_$exports_lime_ui_ScanCode.gte = function(a,b) {
	return a >= b;
};
$hx_$exports_lime_ui_ScanCode.lt = function(a,b) {
	return a < b;
};
$hx_$exports_lime_ui_ScanCode.lte = function(a,b) {
	return a <= b;
};
$hx_$exports_lime_ui_ScanCode.plus = function(a,b) {
	return a + b;
};
var lime_utils_TAError = $hxClasses["lime.utils.TAError"] = { __ename__ : ["lime","utils","TAError"], __constructs__ : ["RangeError"] };
lime_utils_TAError.RangeError = ["RangeError",0];
lime_utils_TAError.RangeError.toString = $estr;
lime_utils_TAError.RangeError.__enum__ = lime_utils_TAError;
lime_utils_TAError.__empty_constructs__ = [lime_utils_TAError.RangeError];
var lime_utils__$Assets_LibrarySymbol = function(id) {
	var colonIndex = id.indexOf(":");
	this.libraryName = id.substring(0,colonIndex);
	this.symbolName = id.substring(colonIndex + 1);
	this.library = $hx_exports.lime.utils.Assets.getLibrary(this.libraryName);
};
$hxClasses["lime.utils._Assets.LibrarySymbol"] = lime_utils__$Assets_LibrarySymbol;
lime_utils__$Assets_LibrarySymbol.__name__ = ["lime","utils","_Assets","LibrarySymbol"];
lime_utils__$Assets_LibrarySymbol.prototype = {
	library: null
	,libraryName: null
	,symbolName: null
	,isLocal: function(type) {
		return this.library.isLocal(this.symbolName,type);
	}
	,exists: function(type) {
		return this.library.exists(this.symbolName,type);
	}
	,__class__: lime_utils__$Assets_LibrarySymbol
};
var $hx_$exports_lime_utils_BytePointer = {};
$hxClasses["$hx_exports.lime.utils.BytePointer"] = $hx_$exports_lime_utils_BytePointer;
$hx_$exports_lime_utils_BytePointer.__name__ = ["$hx_exports","lime","utils","BytePointer"];
$hx_$exports_lime_utils_BytePointer._new = function(bytes,offset) {
	if(offset == null) {
		offset = 0;
	}
	var this1 = new lime_utils_BytePointerData(bytes,offset);
	return this1;
};
$hx_$exports_lime_utils_BytePointer.set = function(this1,bytes,bufferView,buffer,offset) {
	if(buffer != null) {
		bytes = $hx_exports.haxe.io.Bytes.ofData(buffer);
	}
	if(bytes != null || bufferView == null) {
		this1.bytes = bytes;
		this1.offset = offset != null ? offset : 0;
	} else {
		this1.bytes = $hx_exports.haxe.io.Bytes.ofData(bufferView.buffer);
		this1.offset = offset != null ? bufferView.byteOffset + offset : bufferView.byteOffset;
	}
};
$hx_$exports_lime_utils_BytePointer.__arrayGet = function(this1,index) {
	if(this1.bytes != null) {
		return this1.bytes.get(index + this1.offset);
	} else {
		return 0;
	}
};
$hx_$exports_lime_utils_BytePointer.__arraySet = function(this1,index,value) {
	if(this1.bytes == null) {
		this1.bytes.set(index + this1.offset,value);
	}
	return value;
};
$hx_$exports_lime_utils_BytePointer.fromArrayBufferView = function(arrayBufferView) {
	if(arrayBufferView == null) {
		return null;
	}
	return new lime_utils_BytePointerData($hx_exports.haxe.io.Bytes.ofData(arrayBufferView.buffer),arrayBufferView.byteOffset);
};
$hx_$exports_lime_utils_BytePointer.fromArrayBuffer = function(buffer) {
	if(buffer == null) {
		return null;
	}
	return new lime_utils_BytePointerData($hx_exports.haxe.io.Bytes.ofData(buffer),0);
};
$hx_$exports_lime_utils_BytePointer.fromBytes = function(bytes) {
	return new lime_utils_BytePointerData(bytes,0);
};
$hx_$exports_lime_utils_BytePointer.fromBytesData = function(bytesData) {
	if(bytesData == null) {
		return new lime_utils_BytePointerData(null,0);
	} else {
		return new lime_utils_BytePointerData($hx_exports.haxe.io.Bytes.ofData(bytesData),0);
	}
};
$hx_$exports_lime_utils_BytePointer.fromFile = function(path) {
	return new lime_utils_BytePointerData($hx_$exports_lime_utils_Bytes.fromFile(path),0);
};
$hx_$exports_lime_utils_BytePointer.fromLimeBytes = function(bytes) {
	return new lime_utils_BytePointerData(bytes,0);
};
$hx_$exports_lime_utils_BytePointer.toUInt8Array = function(bytePointer) {
	var buffer = bytePointer.bytes.getData();
	var byteoffset = Std.int(bytePointer.offset / 8);
	var this1;
	if(buffer != null) {
		this1 = new Uint8Array(buffer,byteoffset);
	} else {
		this1 = null;
	}
	return this1;
};
$hx_$exports_lime_utils_BytePointer.toUInt8ClampedArray = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var buffer = bytePointer.bytes.getData();
	var byteoffset = Std.int(bytePointer.offset / 8);
	var this1;
	if(buffer != null) {
		this1 = new Uint8ClampedArray(buffer,byteoffset);
	} else {
		this1 = null;
	}
	return this1;
};
$hx_$exports_lime_utils_BytePointer.toInt8Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var buffer = bytePointer.bytes.getData();
	var byteoffset = Std.int(bytePointer.offset / 8);
	var this1;
	if(buffer != null) {
		this1 = new Int8Array(buffer,byteoffset);
	} else {
		this1 = null;
	}
	return this1;
};
$hx_$exports_lime_utils_BytePointer.toUInt16Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var buffer = bytePointer.bytes.getData();
	var byteoffset = Std.int(bytePointer.offset / 16);
	var this1;
	if(buffer != null) {
		this1 = new Uint16Array(buffer,byteoffset);
	} else {
		this1 = null;
	}
	return this1;
};
$hx_$exports_lime_utils_BytePointer.toInt16Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var buffer = bytePointer.bytes.getData();
	var byteoffset = Std.int(bytePointer.offset / 16);
	var this1;
	if(buffer != null) {
		this1 = new Int16Array(buffer,byteoffset);
	} else {
		this1 = null;
	}
	return this1;
};
$hx_$exports_lime_utils_BytePointer.toUInt32Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var buffer = bytePointer.bytes.getData();
	var byteoffset = Std.int(bytePointer.offset / 32);
	var this1;
	if(buffer != null) {
		this1 = new Uint32Array(buffer,byteoffset);
	} else {
		this1 = null;
	}
	return this1;
};
$hx_$exports_lime_utils_BytePointer.toInt32Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var buffer = bytePointer.bytes.getData();
	var byteoffset = Std.int(bytePointer.offset / 32);
	var this1;
	if(buffer != null) {
		this1 = new Int32Array(buffer,byteoffset);
	} else {
		this1 = null;
	}
	return this1;
};
$hx_$exports_lime_utils_BytePointer.toFloat32Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var buffer = bytePointer.bytes.getData();
	var byteoffset = Std.int(bytePointer.offset / 32);
	var this1;
	if(buffer != null) {
		this1 = new Float32Array(buffer,byteoffset);
	} else {
		this1 = null;
	}
	return this1;
};
$hx_$exports_lime_utils_BytePointer.toFloat64Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var buffer = bytePointer.bytes.getData();
	var byteoffset = Std.int(bytePointer.offset / 64);
	var this1;
	if(buffer != null) {
		this1 = new Float64Array(buffer,byteoffset);
	} else {
		this1 = null;
	}
	return this1;
};
var $hx_$exports_lime_utils_Bytes = {};
$hxClasses["$hx_exports.lime.utils.Bytes"] = $hx_$exports_lime_utils_Bytes;
$hx_$exports_lime_utils_Bytes.__name__ = ["$hx_exports","lime","utils","Bytes"];
$hx_$exports_lime_utils_Bytes._new = function(length,bytesData) {
	var this1 = new $hx_exports.haxe.io.Bytes(bytesData);
	return this1;
};
$hx_$exports_lime_utils_Bytes.alloc = function(length) {
	var bytes = $hx_exports.haxe.io.Bytes.alloc(length);
	return $hx_$exports_lime_utils_Bytes._new(bytes.length,bytes.getData());
};
$hx_$exports_lime_utils_Bytes.fastGet = function(b,pos) {
	return $hx_exports.haxe.io.Bytes.fastGet(b,pos);
};
$hx_$exports_lime_utils_Bytes.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	return $hx_$exports_lime_utils_Bytes._new(bytes.length,bytes.getData());
};
$hx_$exports_lime_utils_Bytes.fromFile = function(path) {
	return null;
};
$hx_$exports_lime_utils_Bytes.loadFromBytes = function(bytes) {
	return $hx_exports.lime.app.Future.withValue($hx_$exports_lime_utils_Bytes.fromBytes(bytes));
};
$hx_$exports_lime_utils_Bytes.loadFromFile = function(path) {
	var request = new lime_net__$HTTPRequest_$lime_$utils_$Bytes();
	return request.load(path);
};
$hx_$exports_lime_utils_Bytes.ofData = function(b) {
	var bytes = $hx_exports.haxe.io.Bytes.ofData(b);
	return $hx_$exports_lime_utils_Bytes._new(bytes.length,bytes.getData());
};
$hx_$exports_lime_utils_Bytes.ofString = function(s) {
	var bytes = $hx_exports.haxe.io.Bytes.ofString(s);
	return $hx_$exports_lime_utils_Bytes._new(bytes.length,bytes.getData());
};
var $hx_$exports_lime_utils_DataPointer = {};
$hxClasses["$hx_exports.lime.utils.DataPointer"] = $hx_$exports_lime_utils_DataPointer;
$hx_$exports_lime_utils_DataPointer.__name__ = ["$hx_exports","lime","utils","DataPointer"];
$hx_$exports_lime_utils_DataPointer._new = function(data) {
	var this1 = data;
	return this1;
};
$hx_$exports_lime_utils_DataPointer.fromInt = function(value) {
	return $hx_$exports_lime_utils_DataPointer._new(new lime_utils_DataPointerObject(null,null,value));
};
$hx_$exports_lime_utils_DataPointer.fromFloat = function(value) {
	return $hx_$exports_lime_utils_DataPointer._new(new lime_utils_DataPointerObject(null,null,Std.int(value)));
};
$hx_$exports_lime_utils_DataPointer.fromBytesPointer = function(pointer) {
	return $hx_$exports_lime_utils_DataPointer._new(new lime_utils_DataPointerObject(null,pointer.bytes.getData(),pointer.offset));
};
$hx_$exports_lime_utils_DataPointer.fromArrayBufferView = function(arrayBufferView) {
	return $hx_$exports_lime_utils_DataPointer._new(new lime_utils_DataPointerObject(arrayBufferView));
};
$hx_$exports_lime_utils_DataPointer.fromArrayBuffer = function(buffer) {
	return $hx_$exports_lime_utils_DataPointer._new(new lime_utils_DataPointerObject(null,buffer));
};
$hx_$exports_lime_utils_DataPointer.fromBytes = function(bytes) {
	return $hx_$exports_lime_utils_DataPointer.fromArrayBuffer(bytes.getData());
};
$hx_$exports_lime_utils_DataPointer.fromBytesData = function(bytesData) {
	return $hx_$exports_lime_utils_DataPointer.fromArrayBuffer(bytesData);
};
$hx_$exports_lime_utils_DataPointer.fromLimeBytes = function(bytes) {
	return $hx_$exports_lime_utils_DataPointer.fromBytes(bytes);
};
$hx_$exports_lime_utils_DataPointer.fromCFFIPointer = function(pointer) {
	return null;
};
$hx_$exports_lime_utils_DataPointer.fromFile = function(path) {
	return null;
};
$hx_$exports_lime_utils_DataPointer.toBufferOrBufferView = function(this1,length) {
	var data = this1;
	if (!data) return null;
	var _g = data.type;
	switch(_g[1]) {
	case 0:
		if(length == null) {
			length = data.buffer.byteLength;
		}
		if(data.offset == 0 && length == data.buffer.byteLength) {
			return data.buffer;
		} else {
			var buffer = data.buffer;
			var byteoffset = data.offset;
			var this2;
			if(buffer != null) {
				if(length == null) {
					this2 = new Uint8Array(buffer,byteoffset);
				} else {
					this2 = new Uint8Array(buffer,byteoffset,length);
				}
			} else {
				this2 = null;
			}
			return this2;
		}
		break;
	case 1:
		if(length == null) {
			length = data.bufferView.byteLength;
		}
		if(data.offset == 0 && length == data.bufferView.byteLength) {
			return data.bufferView;
		} else {
			var buffer1 = data.bufferView.buffer;
			var byteoffset1 = data.bufferView.byteOffset + data.offset;
			var this3;
			if(buffer1 != null) {
				if(length == null) {
					this3 = new Uint8Array(buffer1,byteoffset1);
				} else {
					this3 = new Uint8Array(buffer1,byteoffset1,length);
				}
			} else {
				this3 = null;
			}
			return this3;
		}
		break;
	default:
		return null;
	}
};
$hx_$exports_lime_utils_DataPointer.toBufferView = function(this1,length) {
	var data = this1;
	if (!data) return null;
	var _g = data.type;
	switch(_g[1]) {
	case 0:
		if(length == null) {
			length = data.buffer.byteLength;
		}
		var buffer = data.buffer;
		var byteoffset = data.offset;
		var this2;
		if(buffer != null) {
			if(length == null) {
				this2 = new Uint8Array(buffer,byteoffset);
			} else {
				this2 = new Uint8Array(buffer,byteoffset,length);
			}
		} else {
			this2 = null;
		}
		return this2;
	case 1:
		if(length == null) {
			length = data.bufferView.byteLength;
		}
		if(data.offset == 0 && length == data.bufferView.byteLength) {
			return data.bufferView;
		} else {
			var buffer1 = data.bufferView.buffer;
			var byteoffset1 = data.bufferView.byteOffset + data.offset;
			var this3;
			if(buffer1 != null) {
				if(length == null) {
					this3 = new Uint8Array(buffer1,byteoffset1);
				} else {
					this3 = new Uint8Array(buffer1,byteoffset1,length);
				}
			} else {
				this3 = null;
			}
			return this3;
		}
		break;
	default:
		return null;
	}
};
$hx_$exports_lime_utils_DataPointer.toFloat32Array = function(this1,length) {
	var data = this1;
	if (!data) return null;
	var _g = data.type;
	switch(_g[1]) {
	case 0:
		if(length == null) {
			length = data.buffer.byteLength;
		}
		var buffer = data.buffer;
		var byteoffset = data.offset;
		var len = Std.int(length / 4);
		var this2;
		if(buffer != null) {
			if(len == null) {
				this2 = new Float32Array(buffer,byteoffset);
			} else {
				this2 = new Float32Array(buffer,byteoffset,len);
			}
		} else {
			this2 = null;
		}
		return this2;
	case 1:
		if(length == null) {
			length = data.bufferView.byteLength;
		}
		if(data.offset == 0 && length == data.bufferView.byteLength && data.bufferView.constructor == Float32Array) {
			return data.bufferView;
		} else {
			var buffer1 = data.bufferView.buffer;
			var byteoffset1 = data.bufferView.byteOffset + data.offset;
			var len1 = Std.int(length / 4);
			var this3;
			if(buffer1 != null) {
				if(len1 == null) {
					this3 = new Float32Array(buffer1,byteoffset1);
				} else {
					this3 = new Float32Array(buffer1,byteoffset1,len1);
				}
			} else {
				this3 = null;
			}
			return this3;
		}
		break;
	default:
		return null;
	}
};
$hx_$exports_lime_utils_DataPointer.toInt32Array = function(this1,length) {
	var data = this1;
	if (!data) return null;
	var _g = data.type;
	switch(_g[1]) {
	case 0:
		if(length == null) {
			length = data.buffer.byteLength;
		}
		var buffer = data.buffer;
		var byteoffset = data.offset;
		var len = Std.int(length / 4);
		var this2;
		if(buffer != null) {
			if(len == null) {
				this2 = new Int32Array(buffer,byteoffset);
			} else {
				this2 = new Int32Array(buffer,byteoffset,len);
			}
		} else {
			this2 = null;
		}
		return this2;
	case 1:
		if(length == null) {
			length = data.bufferView.byteLength;
		}
		if(data.offset == 0 && length == data.bufferView.byteLength && data.bufferView.constructor == Int32Array) {
			return data.bufferView;
		} else {
			var buffer1 = data.bufferView.buffer;
			var byteoffset1 = data.bufferView.byteOffset + data.offset;
			var len1 = Std.int(length / 4);
			var this3;
			if(buffer1 != null) {
				if(len1 == null) {
					this3 = new Int32Array(buffer1,byteoffset1);
				} else {
					this3 = new Int32Array(buffer1,byteoffset1,len1);
				}
			} else {
				this3 = null;
			}
			return this3;
		}
		break;
	default:
		return null;
	}
};
$hx_$exports_lime_utils_DataPointer.toUInt8Array = function(this1,length) {
	var data = this1;
	if (!data) return null;
	var _g = data.type;
	switch(_g[1]) {
	case 0:
		if(length == null) {
			length = data.buffer.byteLength;
		}
		var buffer = data.buffer;
		var byteoffset = data.offset;
		var this2;
		if(buffer != null) {
			if(length == null) {
				this2 = new Uint8Array(buffer,byteoffset);
			} else {
				this2 = new Uint8Array(buffer,byteoffset,length);
			}
		} else {
			this2 = null;
		}
		return this2;
	case 1:
		if(length == null) {
			length = data.bufferView.byteLength;
		}
		if(data.offset == 0 && length == data.bufferView.byteLength && data.bufferView.constructor == Uint8Array) {
			return data.bufferView;
		} else {
			var buffer1 = data.bufferView.buffer;
			var byteoffset1 = data.bufferView.byteOffset + data.offset;
			var this3;
			if(buffer1 != null) {
				if(length == null) {
					this3 = new Uint8Array(buffer1,byteoffset1);
				} else {
					this3 = new Uint8Array(buffer1,byteoffset1,length);
				}
			} else {
				this3 = null;
			}
			return this3;
		}
		break;
	default:
		return null;
	}
};
$hx_$exports_lime_utils_DataPointer.toUInt32Array = function(this1,length) {
	var data = this1;
	if (!data) return null;
	var _g = data.type;
	switch(_g[1]) {
	case 0:
		if(length == null) {
			length = data.buffer.byteLength;
		}
		var buffer = data.buffer;
		var byteoffset = data.offset;
		var len = Std.int(length / 4);
		var this2;
		if(buffer != null) {
			if(len == null) {
				this2 = new Uint32Array(buffer,byteoffset);
			} else {
				this2 = new Uint32Array(buffer,byteoffset,len);
			}
		} else {
			this2 = null;
		}
		return this2;
	case 1:
		if(length == null) {
			length = data.bufferView.byteLength;
		}
		if(data.offset == 0 && length == data.bufferView.byteLength && data.bufferView.constructor == Uint32Array) {
			return data.bufferView;
		} else {
			var buffer1 = data.bufferView.buffer;
			var byteoffset1 = data.bufferView.byteOffset + data.offset;
			var len1 = Std.int(length / 4);
			var this3;
			if(buffer1 != null) {
				if(len1 == null) {
					this3 = new Uint32Array(buffer1,byteoffset1);
				} else {
					this3 = new Uint32Array(buffer1,byteoffset1,len1);
				}
			} else {
				this3 = null;
			}
			return this3;
		}
		break;
	default:
		return null;
	}
};
$hx_$exports_lime_utils_DataPointer.toValue = function(this1) {
	var data = this1;
	if (!data) return 0;
	if (typeof data === 'number') return data;
	var _g = data.type;
	if(_g[1] == 2) {
		return data.offset;
	} else {
		return 0;
	}
};
$hx_$exports_lime_utils_DataPointer.__withOffset = function(data,offset) {
	return null;
};
$hx_$exports_lime_utils_DataPointer.equals = function(a,b) {
	return a == b;
};
$hx_$exports_lime_utils_DataPointer.equalsPointer = function(a,b) {
	return a == b;
};
$hx_$exports_lime_utils_DataPointer.greaterThan = function(a,b) {
	return a > b;
};
$hx_$exports_lime_utils_DataPointer.greaterThanPointer = function(a,b) {
	return $hx_$exports_lime_system_CFFIPointer.get(a) > $hx_$exports_lime_system_CFFIPointer.get(b);
};
$hx_$exports_lime_utils_DataPointer.greaterThanOrEqual = function(a,b) {
	return a >= b;
};
$hx_$exports_lime_utils_DataPointer.greaterThanOrEqualPointer = function(a,b) {
	return $hx_$exports_lime_system_CFFIPointer.get(a) >= $hx_$exports_lime_system_CFFIPointer.get(b);
};
$hx_$exports_lime_utils_DataPointer.lessThan = function(a,b) {
	return a < b;
};
$hx_$exports_lime_utils_DataPointer.lessThanPointer = function(a,b) {
	return $hx_$exports_lime_system_CFFIPointer.get(a) < $hx_$exports_lime_system_CFFIPointer.get(b);
};
$hx_$exports_lime_utils_DataPointer.lessThanOrEqual = function(a,b) {
	return a <= b;
};
$hx_$exports_lime_utils_DataPointer.lessThanOrEqualPointer = function(a,b) {
	return $hx_$exports_lime_system_CFFIPointer.get(a) <= $hx_$exports_lime_system_CFFIPointer.get(b);
};
$hx_$exports_lime_utils_DataPointer.notEquals = function(a,b) {
	return a != b;
};
$hx_$exports_lime_utils_DataPointer.notEqualsPointer = function(a,b) {
	return a != b;
};
$hx_$exports_lime_utils_DataPointer.plus = function(a,b) {
	return $hx_$exports_lime_utils_DataPointer.__withOffset(a,b);
};
$hx_$exports_lime_utils_DataPointer.plusPointer = function(a,b) {
	return $hx_$exports_lime_utils_DataPointer.__withOffset(a,Std.int(b));
};
$hx_$exports_lime_utils_DataPointer.minus = function(a,b) {
	return $hx_$exports_lime_utils_DataPointer.__withOffset(a,-b);
};
$hx_$exports_lime_utils_DataPointer.minusPointer = function(a,b) {
	return $hx_$exports_lime_utils_DataPointer.__withOffset(a,-Std.int(b));
};
var lime_utils_DataPointerObject = function(bufferView,buffer,offset) {
	if(offset == null) {
		offset = 0;
	}
	if(bufferView != null) {
		this.bufferView = bufferView;
		this.type = lime_utils_DataPointerObjectType.BUFFER_VIEW;
	} else if(buffer != null) {
		this.buffer = buffer;
		this.type = lime_utils_DataPointerObjectType.BUFFER;
	} else {
		this.type = lime_utils_DataPointerObjectType.VALUE;
	}
	this.offset = offset;
};
$hxClasses["lime.utils.DataPointerObject"] = lime_utils_DataPointerObject;
lime_utils_DataPointerObject.__name__ = ["lime","utils","DataPointerObject"];
lime_utils_DataPointerObject.prototype = {
	buffer: null
	,bufferView: null
	,offset: null
	,type: null
	,__class__: lime_utils_DataPointerObject
};
var lime_utils_DataPointerObjectType = $hxClasses["lime.utils.DataPointerObjectType"] = { __ename__ : ["lime","utils","DataPointerObjectType"], __constructs__ : ["BUFFER","BUFFER_VIEW","VALUE"] };
lime_utils_DataPointerObjectType.BUFFER = ["BUFFER",0];
lime_utils_DataPointerObjectType.BUFFER.toString = $estr;
lime_utils_DataPointerObjectType.BUFFER.__enum__ = lime_utils_DataPointerObjectType;
lime_utils_DataPointerObjectType.BUFFER_VIEW = ["BUFFER_VIEW",1];
lime_utils_DataPointerObjectType.BUFFER_VIEW.toString = $estr;
lime_utils_DataPointerObjectType.BUFFER_VIEW.__enum__ = lime_utils_DataPointerObjectType;
lime_utils_DataPointerObjectType.VALUE = ["VALUE",2];
lime_utils_DataPointerObjectType.VALUE.toString = $estr;
lime_utils_DataPointerObjectType.VALUE.__enum__ = lime_utils_DataPointerObjectType;
lime_utils_DataPointerObjectType.__empty_constructs__ = [lime_utils_DataPointerObjectType.BUFFER,lime_utils_DataPointerObjectType.BUFFER_VIEW,lime_utils_DataPointerObjectType.VALUE];
var $hx_$exports_lime_utils_Float32Array = {};
$hxClasses["$hx_exports.lime.utils.Float32Array"] = $hx_$exports_lime_utils_Float32Array;
$hx_$exports_lime_utils_Float32Array.__name__ = ["$hx_exports","lime","utils","Float32Array"];
$hx_$exports_lime_utils_Float32Array.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Float32Array(bytes.getData());
	}
	if(len == null) {
		return new Float32Array(bytes.getData(),byteOffset);
	}
	return new Float32Array(bytes.getData(),byteOffset,len);
};
$hx_$exports_lime_utils_Float32Array.toBytes = function(this1) {
	return new $hx_exports.haxe.io.Bytes(new Uint8Array(this1.buffer));
};
$hx_$exports_lime_utils_Float32Array.toString = function(this1) {
	if(this1 != null) {
		return "Float32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var $hx_$exports_lime_utils_Float64Array = {};
$hxClasses["$hx_exports.lime.utils.Float64Array"] = $hx_$exports_lime_utils_Float64Array;
$hx_$exports_lime_utils_Float64Array.__name__ = ["$hx_exports","lime","utils","Float64Array"];
$hx_$exports_lime_utils_Float64Array.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Float64Array(bytes.getData());
	}
	if(len == null) {
		return new Float64Array(bytes.getData(),byteOffset);
	}
	return new Float64Array(bytes.getData(),byteOffset,len);
};
$hx_$exports_lime_utils_Float64Array.toBytes = function(this1) {
	return new $hx_exports.haxe.io.Bytes(new Uint8Array(this1.buffer));
};
$hx_$exports_lime_utils_Float64Array.toString = function(this1) {
	if(this1 != null) {
		return "Float64Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var $hx_$exports_lime_utils_Int16Array = {};
$hxClasses["$hx_exports.lime.utils.Int16Array"] = $hx_$exports_lime_utils_Int16Array;
$hx_$exports_lime_utils_Int16Array.__name__ = ["$hx_exports","lime","utils","Int16Array"];
$hx_$exports_lime_utils_Int16Array.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Int16Array(bytes.getData());
	}
	if(len == null) {
		return new Int16Array(bytes.getData(),byteOffset);
	}
	return new Int16Array(bytes.getData(),byteOffset,len);
};
$hx_$exports_lime_utils_Int16Array.toBytes = function(this1) {
	return new $hx_exports.haxe.io.Bytes(new Uint8Array(this1.buffer));
};
$hx_$exports_lime_utils_Int16Array.toString = function(this1) {
	if(this1 != null) {
		return "Int16Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var $hx_$exports_lime_utils_Int32Array = {};
$hxClasses["$hx_exports.lime.utils.Int32Array"] = $hx_$exports_lime_utils_Int32Array;
$hx_$exports_lime_utils_Int32Array.__name__ = ["$hx_exports","lime","utils","Int32Array"];
$hx_$exports_lime_utils_Int32Array.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Int32Array(bytes.getData());
	}
	if(len == null) {
		return new Int32Array(bytes.getData(),byteOffset);
	}
	return new Int32Array(bytes.getData(),byteOffset,len);
};
$hx_$exports_lime_utils_Int32Array.toBytes = function(this1) {
	return new $hx_exports.haxe.io.Bytes(new Uint8Array(this1.buffer));
};
$hx_$exports_lime_utils_Int32Array.toString = function(this1) {
	if(this1 != null) {
		return "Int32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var $hx_$exports_lime_utils_Int8Array = {};
$hxClasses["$hx_exports.lime.utils.Int8Array"] = $hx_$exports_lime_utils_Int8Array;
$hx_$exports_lime_utils_Int8Array.__name__ = ["$hx_exports","lime","utils","Int8Array"];
$hx_$exports_lime_utils_Int8Array.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	return new Int8Array(bytes.getData(),byteOffset,len);
};
$hx_$exports_lime_utils_Int8Array.toBytes = function(this1) {
	return new $hx_exports.haxe.io.Bytes(new Uint8Array(this1.buffer));
};
$hx_$exports_lime_utils_Int8Array.toString = function(this1) {
	if(this1 != null) {
		return "Int8Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils__$Log_LogLevel_$Impl_$ = {};
$hxClasses["lime.utils._Log.LogLevel_Impl_"] = lime_utils__$Log_LogLevel_$Impl_$;
lime_utils__$Log_LogLevel_$Impl_$.__name__ = ["lime","utils","_Log","LogLevel_Impl_"];
lime_utils__$Log_LogLevel_$Impl_$.gt = function(a,b) {
	return a > b;
};
lime_utils__$Log_LogLevel_$Impl_$.gte = function(a,b) {
	return a >= b;
};
lime_utils__$Log_LogLevel_$Impl_$.lt = function(a,b) {
	return a < b;
};
lime_utils__$Log_LogLevel_$Impl_$.lte = function(a,b) {
	return a <= b;
};
var lime_utils_ObjectPool_$openfl_$Vector_$openfl_$display_$DisplayObject = function(create,clean,size) {
	if(create != null) {
		this.create = create;
	}
	if(clean != null) {
		this.clean = clean;
	}
	if(size != null) {
		this.set_size(size);
	}
	this.__pool = new $hx_exports.haxe.ds.ObjectMap();
	this.activeObjects = 0;
	this.inactiveObjects = 0;
	this.__inactiveObject0 = null;
	this.__inactiveObject1 = null;
	this.__inactiveObjectList = new $hx_exports.List();
};
$hxClasses["lime.utils.ObjectPool_openfl_Vector_openfl_display_DisplayObject"] = lime_utils_ObjectPool_$openfl_$Vector_$openfl_$display_$DisplayObject;
lime_utils_ObjectPool_$openfl_$Vector_$openfl_$display_$DisplayObject.__name__ = ["lime","utils","ObjectPool_openfl_Vector_openfl_display_DisplayObject"];
lime_utils_ObjectPool_$openfl_$Vector_$openfl_$display_$DisplayObject.prototype = {
	activeObjects: null
	,inactiveObjects: null
	,__inactiveObject0: null
	,__inactiveObject1: null
	,__inactiveObjectList: null
	,__pool: null
	,__size: null
	,add: function(object) {
		if(!this.__pool.exists(object)) {
			this.__pool.set(object,false);
			this.clean(object);
			this.__addInactive(object);
		}
	}
	,clean: function(object) {
	}
	,clear: function() {
		this.__pool = new $hx_exports.haxe.ds.ObjectMap();
		this.activeObjects = 0;
		this.inactiveObjects = 0;
		this.__inactiveObject0 = null;
		this.__inactiveObject1 = null;
		this.__inactiveObjectList.clear();
	}
	,create: function() {
		return null;
	}
	,get: function() {
		var object = null;
		if(this.inactiveObjects > 0) {
			object = this.__getInactive();
		} else if(this.__size == null || this.activeObjects < this.__size) {
			object = this.create();
			if(object != null) {
				this.__pool.set(object,true);
				this.activeObjects++;
			}
		}
		return object;
	}
	,release: function(object) {
		this.activeObjects--;
		if(this.__size == null || this.activeObjects + this.inactiveObjects < this.__size) {
			this.clean(object);
			this.__addInactive(object);
		} else {
			this.__pool.remove(object);
		}
	}
	,__addInactive: function(object) {
		if(this.__inactiveObject0 == null) {
			this.__inactiveObject0 = object;
		} else if(this.__inactiveObject1 == null) {
			this.__inactiveObject1 = object;
		} else {
			this.__inactiveObjectList.add(object);
		}
		this.inactiveObjects++;
	}
	,__getInactive: function() {
		var object = null;
		if(this.__inactiveObject0 != null) {
			object = this.__inactiveObject0;
			this.__inactiveObject0 = null;
		} else if(this.__inactiveObject1 != null) {
			object = this.__inactiveObject1;
			this.__inactiveObject1 = null;
		} else {
			object = this.__inactiveObjectList.pop();
			if(this.__inactiveObjectList.length > 0) {
				this.__inactiveObject0 = this.__inactiveObjectList.pop();
			}
			if(this.__inactiveObjectList.length > 0) {
				this.__inactiveObject1 = this.__inactiveObjectList.pop();
			}
		}
		this.inactiveObjects--;
		this.activeObjects++;
		return object;
	}
	,__removeInactive: function(count) {
		if(count <= 0 || this.inactiveObjects == 0) {
			return;
		}
		if(this.__inactiveObject0 != null) {
			this.__pool.remove(this.__inactiveObject0);
			this.__inactiveObject0 = null;
			this.inactiveObjects--;
			--count;
		}
		if(count == 0 || this.inactiveObjects == 0) {
			return;
		}
		if(this.__inactiveObject1 != null) {
			this.__pool.remove(this.__inactiveObject1);
			this.__inactiveObject1 = null;
			this.inactiveObjects--;
			--count;
		}
		if(count == 0 || this.inactiveObjects == 0) {
			return;
		}
		var object = this.__inactiveObjectList.iterator();
		while(object.hasNext()) {
			var object1 = object.next();
			this.__pool.remove(object1);
			this.__inactiveObjectList.remove(object1);
			this.inactiveObjects--;
			--count;
			if(count == 0 || this.inactiveObjects == 0) {
				return;
			}
		}
	}
	,get_size: function() {
		return this.__size;
	}
	,set_size: function(value) {
		if(value == null) {
			this.__size = null;
		} else {
			var current = this.inactiveObjects + this.activeObjects;
			this.__size = value;
			if(current > value) {
				this.__removeInactive(current - value);
			} else if(value > current) {
				var object;
				var _g1 = 0;
				var _g = value - current;
				while(_g1 < _g) {
					var i = _g1++;
					object = this.create();
					if(object != null) {
						this.__pool.set(object,false);
						this.__inactiveObjectList.add(object);
						this.inactiveObjects++;
					} else {
						break;
					}
				}
			}
		}
		return value;
	}
	,__class__: lime_utils_ObjectPool_$openfl_$Vector_$openfl_$display_$DisplayObject
	,__properties__: {set_size:"set_size",get_size:"get_size"}
};
var lime_utils_ObjectPool_$openfl_$_$internal_$TouchData = function(create,clean,size) {
	if(create != null) {
		this.create = create;
	}
	if(clean != null) {
		this.clean = clean;
	}
	if(size != null) {
		this.set_size(size);
	}
	this.__pool = new $hx_exports.haxe.ds.ObjectMap();
	this.activeObjects = 0;
	this.inactiveObjects = 0;
	this.__inactiveObject0 = null;
	this.__inactiveObject1 = null;
	this.__inactiveObjectList = new $hx_exports.List();
};
$hxClasses["lime.utils.ObjectPool_openfl__internal_TouchData"] = lime_utils_ObjectPool_$openfl_$_$internal_$TouchData;
lime_utils_ObjectPool_$openfl_$_$internal_$TouchData.__name__ = ["lime","utils","ObjectPool_openfl__internal_TouchData"];
lime_utils_ObjectPool_$openfl_$_$internal_$TouchData.prototype = {
	activeObjects: null
	,inactiveObjects: null
	,__inactiveObject0: null
	,__inactiveObject1: null
	,__inactiveObjectList: null
	,__pool: null
	,__size: null
	,add: function(object) {
		if(!this.__pool.exists(object)) {
			this.__pool.set(object,false);
			this.clean(object);
			this.__addInactive(object);
		}
	}
	,clean: function(object) {
	}
	,clear: function() {
		this.__pool = new $hx_exports.haxe.ds.ObjectMap();
		this.activeObjects = 0;
		this.inactiveObjects = 0;
		this.__inactiveObject0 = null;
		this.__inactiveObject1 = null;
		this.__inactiveObjectList.clear();
	}
	,create: function() {
		return null;
	}
	,get: function() {
		var object = null;
		if(this.inactiveObjects > 0) {
			object = this.__getInactive();
		} else if(this.__size == null || this.activeObjects < this.__size) {
			object = this.create();
			if(object != null) {
				this.__pool.set(object,true);
				this.activeObjects++;
			}
		}
		return object;
	}
	,release: function(object) {
		this.activeObjects--;
		if(this.__size == null || this.activeObjects + this.inactiveObjects < this.__size) {
			this.clean(object);
			this.__addInactive(object);
		} else {
			this.__pool.remove(object);
		}
	}
	,__addInactive: function(object) {
		if(this.__inactiveObject0 == null) {
			this.__inactiveObject0 = object;
		} else if(this.__inactiveObject1 == null) {
			this.__inactiveObject1 = object;
		} else {
			this.__inactiveObjectList.add(object);
		}
		this.inactiveObjects++;
	}
	,__getInactive: function() {
		var object = null;
		if(this.__inactiveObject0 != null) {
			object = this.__inactiveObject0;
			this.__inactiveObject0 = null;
		} else if(this.__inactiveObject1 != null) {
			object = this.__inactiveObject1;
			this.__inactiveObject1 = null;
		} else {
			object = this.__inactiveObjectList.pop();
			if(this.__inactiveObjectList.length > 0) {
				this.__inactiveObject0 = this.__inactiveObjectList.pop();
			}
			if(this.__inactiveObjectList.length > 0) {
				this.__inactiveObject1 = this.__inactiveObjectList.pop();
			}
		}
		this.inactiveObjects--;
		this.activeObjects++;
		return object;
	}
	,__removeInactive: function(count) {
		if(count <= 0 || this.inactiveObjects == 0) {
			return;
		}
		if(this.__inactiveObject0 != null) {
			this.__pool.remove(this.__inactiveObject0);
			this.__inactiveObject0 = null;
			this.inactiveObjects--;
			--count;
		}
		if(count == 0 || this.inactiveObjects == 0) {
			return;
		}
		if(this.__inactiveObject1 != null) {
			this.__pool.remove(this.__inactiveObject1);
			this.__inactiveObject1 = null;
			this.inactiveObjects--;
			--count;
		}
		if(count == 0 || this.inactiveObjects == 0) {
			return;
		}
		var object = this.__inactiveObjectList.iterator();
		while(object.hasNext()) {
			var object1 = object.next();
			this.__pool.remove(object1);
			this.__inactiveObjectList.remove(object1);
			this.inactiveObjects--;
			--count;
			if(count == 0 || this.inactiveObjects == 0) {
				return;
			}
		}
	}
	,get_size: function() {
		return this.__size;
	}
	,set_size: function(value) {
		if(value == null) {
			this.__size = null;
		} else {
			var current = this.inactiveObjects + this.activeObjects;
			this.__size = value;
			if(current > value) {
				this.__removeInactive(current - value);
			} else if(value > current) {
				var object;
				var _g1 = 0;
				var _g = value - current;
				while(_g1 < _g) {
					var i = _g1++;
					object = this.create();
					if(object != null) {
						this.__pool.set(object,false);
						this.__inactiveObjectList.add(object);
						this.inactiveObjects++;
					} else {
						break;
					}
				}
			}
		}
		return value;
	}
	,__class__: lime_utils_ObjectPool_$openfl_$_$internal_$TouchData
	,__properties__: {set_size:"set_size",get_size:"get_size"}
};
var lime_utils_ObjectPool_$openfl_$geom_$Matrix = function(create,clean,size) {
	if(create != null) {
		this.create = create;
	}
	if(clean != null) {
		this.clean = clean;
	}
	if(size != null) {
		this.set_size(size);
	}
	this.__pool = new $hx_exports.haxe.ds.ObjectMap();
	this.activeObjects = 0;
	this.inactiveObjects = 0;
	this.__inactiveObject0 = null;
	this.__inactiveObject1 = null;
	this.__inactiveObjectList = new $hx_exports.List();
};
$hxClasses["lime.utils.ObjectPool_openfl_geom_Matrix"] = lime_utils_ObjectPool_$openfl_$geom_$Matrix;
lime_utils_ObjectPool_$openfl_$geom_$Matrix.__name__ = ["lime","utils","ObjectPool_openfl_geom_Matrix"];
lime_utils_ObjectPool_$openfl_$geom_$Matrix.prototype = {
	activeObjects: null
	,inactiveObjects: null
	,__inactiveObject0: null
	,__inactiveObject1: null
	,__inactiveObjectList: null
	,__pool: null
	,__size: null
	,add: function(object) {
		if(!this.__pool.exists(object)) {
			this.__pool.set(object,false);
			this.clean(object);
			this.__addInactive(object);
		}
	}
	,clean: function(object) {
	}
	,clear: function() {
		this.__pool = new $hx_exports.haxe.ds.ObjectMap();
		this.activeObjects = 0;
		this.inactiveObjects = 0;
		this.__inactiveObject0 = null;
		this.__inactiveObject1 = null;
		this.__inactiveObjectList.clear();
	}
	,create: function() {
		return null;
	}
	,get: function() {
		var object = null;
		if(this.inactiveObjects > 0) {
			object = this.__getInactive();
		} else if(this.__size == null || this.activeObjects < this.__size) {
			object = this.create();
			if(object != null) {
				this.__pool.set(object,true);
				this.activeObjects++;
			}
		}
		return object;
	}
	,release: function(object) {
		this.activeObjects--;
		if(this.__size == null || this.activeObjects + this.inactiveObjects < this.__size) {
			this.clean(object);
			this.__addInactive(object);
		} else {
			this.__pool.remove(object);
		}
	}
	,__addInactive: function(object) {
		if(this.__inactiveObject0 == null) {
			this.__inactiveObject0 = object;
		} else if(this.__inactiveObject1 == null) {
			this.__inactiveObject1 = object;
		} else {
			this.__inactiveObjectList.add(object);
		}
		this.inactiveObjects++;
	}
	,__getInactive: function() {
		var object = null;
		if(this.__inactiveObject0 != null) {
			object = this.__inactiveObject0;
			this.__inactiveObject0 = null;
		} else if(this.__inactiveObject1 != null) {
			object = this.__inactiveObject1;
			this.__inactiveObject1 = null;
		} else {
			object = this.__inactiveObjectList.pop();
			if(this.__inactiveObjectList.length > 0) {
				this.__inactiveObject0 = this.__inactiveObjectList.pop();
			}
			if(this.__inactiveObjectList.length > 0) {
				this.__inactiveObject1 = this.__inactiveObjectList.pop();
			}
		}
		this.inactiveObjects--;
		this.activeObjects++;
		return object;
	}
	,__removeInactive: function(count) {
		if(count <= 0 || this.inactiveObjects == 0) {
			return;
		}
		if(this.__inactiveObject0 != null) {
			this.__pool.remove(this.__inactiveObject0);
			this.__inactiveObject0 = null;
			this.inactiveObjects--;
			--count;
		}
		if(count == 0 || this.inactiveObjects == 0) {
			return;
		}
		if(this.__inactiveObject1 != null) {
			this.__pool.remove(this.__inactiveObject1);
			this.__inactiveObject1 = null;
			this.inactiveObjects--;
			--count;
		}
		if(count == 0 || this.inactiveObjects == 0) {
			return;
		}
		var object = this.__inactiveObjectList.iterator();
		while(object.hasNext()) {
			var object1 = object.next();
			this.__pool.remove(object1);
			this.__inactiveObjectList.remove(object1);
			this.inactiveObjects--;
			--count;
			if(count == 0 || this.inactiveObjects == 0) {
				return;
			}
		}
	}
	,get_size: function() {
		return this.__size;
	}
	,set_size: function(value) {
		if(value == null) {
			this.__size = null;
		} else {
			var current = this.inactiveObjects + this.activeObjects;
			this.__size = value;
			if(current > value) {
				this.__removeInactive(current - value);
			} else if(value > current) {
				var object;
				var _g1 = 0;
				var _g = value - current;
				while(_g1 < _g) {
					var i = _g1++;
					object = this.create();
					if(object != null) {
						this.__pool.set(object,false);
						this.__inactiveObjectList.add(object);
						this.inactiveObjects++;
					} else {
						break;
					}
				}
			}
		}
		return value;
	}
	,__class__: lime_utils_ObjectPool_$openfl_$geom_$Matrix
	,__properties__: {set_size:"set_size",get_size:"get_size"}
};
var lime_utils_ObjectPool_$openfl_$geom_$Point = function(create,clean,size) {
	if(create != null) {
		this.create = create;
	}
	if(clean != null) {
		this.clean = clean;
	}
	if(size != null) {
		this.set_size(size);
	}
	this.__pool = new $hx_exports.haxe.ds.ObjectMap();
	this.activeObjects = 0;
	this.inactiveObjects = 0;
	this.__inactiveObject0 = null;
	this.__inactiveObject1 = null;
	this.__inactiveObjectList = new $hx_exports.List();
};
$hxClasses["lime.utils.ObjectPool_openfl_geom_Point"] = lime_utils_ObjectPool_$openfl_$geom_$Point;
lime_utils_ObjectPool_$openfl_$geom_$Point.__name__ = ["lime","utils","ObjectPool_openfl_geom_Point"];
lime_utils_ObjectPool_$openfl_$geom_$Point.prototype = {
	activeObjects: null
	,inactiveObjects: null
	,__inactiveObject0: null
	,__inactiveObject1: null
	,__inactiveObjectList: null
	,__pool: null
	,__size: null
	,add: function(object) {
		if(!this.__pool.exists(object)) {
			this.__pool.set(object,false);
			this.clean(object);
			this.__addInactive(object);
		}
	}
	,clean: function(object) {
	}
	,clear: function() {
		this.__pool = new $hx_exports.haxe.ds.ObjectMap();
		this.activeObjects = 0;
		this.inactiveObjects = 0;
		this.__inactiveObject0 = null;
		this.__inactiveObject1 = null;
		this.__inactiveObjectList.clear();
	}
	,create: function() {
		return null;
	}
	,get: function() {
		var object = null;
		if(this.inactiveObjects > 0) {
			object = this.__getInactive();
		} else if(this.__size == null || this.activeObjects < this.__size) {
			object = this.create();
			if(object != null) {
				this.__pool.set(object,true);
				this.activeObjects++;
			}
		}
		return object;
	}
	,release: function(object) {
		this.activeObjects--;
		if(this.__size == null || this.activeObjects + this.inactiveObjects < this.__size) {
			this.clean(object);
			this.__addInactive(object);
		} else {
			this.__pool.remove(object);
		}
	}
	,__addInactive: function(object) {
		if(this.__inactiveObject0 == null) {
			this.__inactiveObject0 = object;
		} else if(this.__inactiveObject1 == null) {
			this.__inactiveObject1 = object;
		} else {
			this.__inactiveObjectList.add(object);
		}
		this.inactiveObjects++;
	}
	,__getInactive: function() {
		var object = null;
		if(this.__inactiveObject0 != null) {
			object = this.__inactiveObject0;
			this.__inactiveObject0 = null;
		} else if(this.__inactiveObject1 != null) {
			object = this.__inactiveObject1;
			this.__inactiveObject1 = null;
		} else {
			object = this.__inactiveObjectList.pop();
			if(this.__inactiveObjectList.length > 0) {
				this.__inactiveObject0 = this.__inactiveObjectList.pop();
			}
			if(this.__inactiveObjectList.length > 0) {
				this.__inactiveObject1 = this.__inactiveObjectList.pop();
			}
		}
		this.inactiveObjects--;
		this.activeObjects++;
		return object;
	}
	,__removeInactive: function(count) {
		if(count <= 0 || this.inactiveObjects == 0) {
			return;
		}
		if(this.__inactiveObject0 != null) {
			this.__pool.remove(this.__inactiveObject0);
			this.__inactiveObject0 = null;
			this.inactiveObjects--;
			--count;
		}
		if(count == 0 || this.inactiveObjects == 0) {
			return;
		}
		if(this.__inactiveObject1 != null) {
			this.__pool.remove(this.__inactiveObject1);
			this.__inactiveObject1 = null;
			this.inactiveObjects--;
			--count;
		}
		if(count == 0 || this.inactiveObjects == 0) {
			return;
		}
		var object = this.__inactiveObjectList.iterator();
		while(object.hasNext()) {
			var object1 = object.next();
			this.__pool.remove(object1);
			this.__inactiveObjectList.remove(object1);
			this.inactiveObjects--;
			--count;
			if(count == 0 || this.inactiveObjects == 0) {
				return;
			}
		}
	}
	,get_size: function() {
		return this.__size;
	}
	,set_size: function(value) {
		if(value == null) {
			this.__size = null;
		} else {
			var current = this.inactiveObjects + this.activeObjects;
			this.__size = value;
			if(current > value) {
				this.__removeInactive(current - value);
			} else if(value > current) {
				var object;
				var _g1 = 0;
				var _g = value - current;
				while(_g1 < _g) {
					var i = _g1++;
					object = this.create();
					if(object != null) {
						this.__pool.set(object,false);
						this.__inactiveObjectList.add(object);
						this.inactiveObjects++;
					} else {
						break;
					}
				}
			}
		}
		return value;
	}
	,__class__: lime_utils_ObjectPool_$openfl_$geom_$Point
	,__properties__: {set_size:"set_size",get_size:"get_size"}
};
var lime_utils_ObjectPool_$openfl_$geom_$Rectangle = function(create,clean,size) {
	if(create != null) {
		this.create = create;
	}
	if(clean != null) {
		this.clean = clean;
	}
	if(size != null) {
		this.set_size(size);
	}
	this.__pool = new $hx_exports.haxe.ds.ObjectMap();
	this.activeObjects = 0;
	this.inactiveObjects = 0;
	this.__inactiveObject0 = null;
	this.__inactiveObject1 = null;
	this.__inactiveObjectList = new $hx_exports.List();
};
$hxClasses["lime.utils.ObjectPool_openfl_geom_Rectangle"] = lime_utils_ObjectPool_$openfl_$geom_$Rectangle;
lime_utils_ObjectPool_$openfl_$geom_$Rectangle.__name__ = ["lime","utils","ObjectPool_openfl_geom_Rectangle"];
lime_utils_ObjectPool_$openfl_$geom_$Rectangle.prototype = {
	activeObjects: null
	,inactiveObjects: null
	,__inactiveObject0: null
	,__inactiveObject1: null
	,__inactiveObjectList: null
	,__pool: null
	,__size: null
	,add: function(object) {
		if(!this.__pool.exists(object)) {
			this.__pool.set(object,false);
			this.clean(object);
			this.__addInactive(object);
		}
	}
	,clean: function(object) {
	}
	,clear: function() {
		this.__pool = new $hx_exports.haxe.ds.ObjectMap();
		this.activeObjects = 0;
		this.inactiveObjects = 0;
		this.__inactiveObject0 = null;
		this.__inactiveObject1 = null;
		this.__inactiveObjectList.clear();
	}
	,create: function() {
		return null;
	}
	,get: function() {
		var object = null;
		if(this.inactiveObjects > 0) {
			object = this.__getInactive();
		} else if(this.__size == null || this.activeObjects < this.__size) {
			object = this.create();
			if(object != null) {
				this.__pool.set(object,true);
				this.activeObjects++;
			}
		}
		return object;
	}
	,release: function(object) {
		this.activeObjects--;
		if(this.__size == null || this.activeObjects + this.inactiveObjects < this.__size) {
			this.clean(object);
			this.__addInactive(object);
		} else {
			this.__pool.remove(object);
		}
	}
	,__addInactive: function(object) {
		if(this.__inactiveObject0 == null) {
			this.__inactiveObject0 = object;
		} else if(this.__inactiveObject1 == null) {
			this.__inactiveObject1 = object;
		} else {
			this.__inactiveObjectList.add(object);
		}
		this.inactiveObjects++;
	}
	,__getInactive: function() {
		var object = null;
		if(this.__inactiveObject0 != null) {
			object = this.__inactiveObject0;
			this.__inactiveObject0 = null;
		} else if(this.__inactiveObject1 != null) {
			object = this.__inactiveObject1;
			this.__inactiveObject1 = null;
		} else {
			object = this.__inactiveObjectList.pop();
			if(this.__inactiveObjectList.length > 0) {
				this.__inactiveObject0 = this.__inactiveObjectList.pop();
			}
			if(this.__inactiveObjectList.length > 0) {
				this.__inactiveObject1 = this.__inactiveObjectList.pop();
			}
		}
		this.inactiveObjects--;
		this.activeObjects++;
		return object;
	}
	,__removeInactive: function(count) {
		if(count <= 0 || this.inactiveObjects == 0) {
			return;
		}
		if(this.__inactiveObject0 != null) {
			this.__pool.remove(this.__inactiveObject0);
			this.__inactiveObject0 = null;
			this.inactiveObjects--;
			--count;
		}
		if(count == 0 || this.inactiveObjects == 0) {
			return;
		}
		if(this.__inactiveObject1 != null) {
			this.__pool.remove(this.__inactiveObject1);
			this.__inactiveObject1 = null;
			this.inactiveObjects--;
			--count;
		}
		if(count == 0 || this.inactiveObjects == 0) {
			return;
		}
		var object = this.__inactiveObjectList.iterator();
		while(object.hasNext()) {
			var object1 = object.next();
			this.__pool.remove(object1);
			this.__inactiveObjectList.remove(object1);
			this.inactiveObjects--;
			--count;
			if(count == 0 || this.inactiveObjects == 0) {
				return;
			}
		}
	}
	,get_size: function() {
		return this.__size;
	}
	,set_size: function(value) {
		if(value == null) {
			this.__size = null;
		} else {
			var current = this.inactiveObjects + this.activeObjects;
			this.__size = value;
			if(current > value) {
				this.__removeInactive(current - value);
			} else if(value > current) {
				var object;
				var _g1 = 0;
				var _g = value - current;
				while(_g1 < _g) {
					var i = _g1++;
					object = this.create();
					if(object != null) {
						this.__pool.set(object,false);
						this.__inactiveObjectList.add(object);
						this.inactiveObjects++;
					} else {
						break;
					}
				}
			}
		}
		return value;
	}
	,__class__: lime_utils_ObjectPool_$openfl_$geom_$Rectangle
	,__properties__: {set_size:"set_size",get_size:"get_size"}
};
var lime_utils_ObjectPool_$openfl_$utils_$TouchData = function(create,clean,size) {
	if(create != null) {
		this.create = create;
	}
	if(clean != null) {
		this.clean = clean;
	}
	if(size != null) {
		this.set_size(size);
	}
	this.__pool = new $hx_exports.haxe.ds.ObjectMap();
	this.activeObjects = 0;
	this.inactiveObjects = 0;
	this.__inactiveObject0 = null;
	this.__inactiveObject1 = null;
	this.__inactiveObjectList = new $hx_exports.List();
};
$hxClasses["lime.utils.ObjectPool_openfl_utils_TouchData"] = lime_utils_ObjectPool_$openfl_$utils_$TouchData;
lime_utils_ObjectPool_$openfl_$utils_$TouchData.__name__ = ["lime","utils","ObjectPool_openfl_utils_TouchData"];
lime_utils_ObjectPool_$openfl_$utils_$TouchData.prototype = {
	activeObjects: null
	,inactiveObjects: null
	,__inactiveObject0: null
	,__inactiveObject1: null
	,__inactiveObjectList: null
	,__pool: null
	,__size: null
	,add: function(object) {
		if(!this.__pool.exists(object)) {
			this.__pool.set(object,false);
			this.clean(object);
			this.__addInactive(object);
		}
	}
	,clean: function(object) {
	}
	,clear: function() {
		this.__pool = new $hx_exports.haxe.ds.ObjectMap();
		this.activeObjects = 0;
		this.inactiveObjects = 0;
		this.__inactiveObject0 = null;
		this.__inactiveObject1 = null;
		this.__inactiveObjectList.clear();
	}
	,create: function() {
		return null;
	}
	,get: function() {
		var object = null;
		if(this.inactiveObjects > 0) {
			object = this.__getInactive();
		} else if(this.__size == null || this.activeObjects < this.__size) {
			object = this.create();
			if(object != null) {
				this.__pool.set(object,true);
				this.activeObjects++;
			}
		}
		return object;
	}
	,release: function(object) {
		this.activeObjects--;
		if(this.__size == null || this.activeObjects + this.inactiveObjects < this.__size) {
			this.clean(object);
			this.__addInactive(object);
		} else {
			this.__pool.remove(object);
		}
	}
	,__addInactive: function(object) {
		if(this.__inactiveObject0 == null) {
			this.__inactiveObject0 = object;
		} else if(this.__inactiveObject1 == null) {
			this.__inactiveObject1 = object;
		} else {
			this.__inactiveObjectList.add(object);
		}
		this.inactiveObjects++;
	}
	,__getInactive: function() {
		var object = null;
		if(this.__inactiveObject0 != null) {
			object = this.__inactiveObject0;
			this.__inactiveObject0 = null;
		} else if(this.__inactiveObject1 != null) {
			object = this.__inactiveObject1;
			this.__inactiveObject1 = null;
		} else {
			object = this.__inactiveObjectList.pop();
			if(this.__inactiveObjectList.length > 0) {
				this.__inactiveObject0 = this.__inactiveObjectList.pop();
			}
			if(this.__inactiveObjectList.length > 0) {
				this.__inactiveObject1 = this.__inactiveObjectList.pop();
			}
		}
		this.inactiveObjects--;
		this.activeObjects++;
		return object;
	}
	,__removeInactive: function(count) {
		if(count <= 0 || this.inactiveObjects == 0) {
			return;
		}
		if(this.__inactiveObject0 != null) {
			this.__pool.remove(this.__inactiveObject0);
			this.__inactiveObject0 = null;
			this.inactiveObjects--;
			--count;
		}
		if(count == 0 || this.inactiveObjects == 0) {
			return;
		}
		if(this.__inactiveObject1 != null) {
			this.__pool.remove(this.__inactiveObject1);
			this.__inactiveObject1 = null;
			this.inactiveObjects--;
			--count;
		}
		if(count == 0 || this.inactiveObjects == 0) {
			return;
		}
		var object = this.__inactiveObjectList.iterator();
		while(object.hasNext()) {
			var object1 = object.next();
			this.__pool.remove(object1);
			this.__inactiveObjectList.remove(object1);
			this.inactiveObjects--;
			--count;
			if(count == 0 || this.inactiveObjects == 0) {
				return;
			}
		}
	}
	,get_size: function() {
		return this.__size;
	}
	,set_size: function(value) {
		if(value == null) {
			this.__size = null;
		} else {
			var current = this.inactiveObjects + this.activeObjects;
			this.__size = value;
			if(current > value) {
				this.__removeInactive(current - value);
			} else if(value > current) {
				var object;
				var _g1 = 0;
				var _g = value - current;
				while(_g1 < _g) {
					var i = _g1++;
					object = this.create();
					if(object != null) {
						this.__pool.set(object,false);
						this.__inactiveObjectList.add(object);
						this.inactiveObjects++;
					} else {
						break;
					}
				}
			}
		}
		return value;
	}
	,__class__: lime_utils_ObjectPool_$openfl_$utils_$TouchData
	,__properties__: {set_size:"set_size",get_size:"get_size"}
};
var $hx_$exports_lime_utils_Resource = {};
$hxClasses["$hx_exports.lime.utils.Resource"] = $hx_$exports_lime_utils_Resource;
$hx_$exports_lime_utils_Resource.__name__ = ["$hx_exports","lime","utils","Resource"];
$hx_$exports_lime_utils_Resource._new = function(size) {
	if(size == null) {
		size = 0;
	}
	var this1 = $hx_exports.haxe.io.Bytes.alloc(size);
	return this1;
};
$hx_$exports_lime_utils_Resource.__fromString = function(value) {
	return $hx_exports.haxe.io.Bytes.ofString(value);
};
$hx_$exports_lime_utils_Resource.__toString = function(value) {
	return value.toString();
};
var $hx_$exports_lime_utils_UInt16Array = {};
$hxClasses["$hx_exports.lime.utils.UInt16Array"] = $hx_$exports_lime_utils_UInt16Array;
$hx_$exports_lime_utils_UInt16Array.__name__ = ["$hx_exports","lime","utils","UInt16Array"];
$hx_$exports_lime_utils_UInt16Array.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Uint16Array(bytes.getData());
	}
	if(len == null) {
		return new Uint16Array(bytes.getData(),byteOffset);
	}
	return new Uint16Array(bytes.getData(),byteOffset,len);
};
$hx_$exports_lime_utils_UInt16Array.toBytes = function(this1) {
	return new $hx_exports.haxe.io.Bytes(new Uint8Array(this1.buffer));
};
$hx_$exports_lime_utils_UInt16Array.toString = function(this1) {
	if(this1 != null) {
		return "UInt16Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var $hx_$exports_lime_utils_UInt32Array = {};
$hxClasses["$hx_exports.lime.utils.UInt32Array"] = $hx_$exports_lime_utils_UInt32Array;
$hx_$exports_lime_utils_UInt32Array.__name__ = ["$hx_exports","lime","utils","UInt32Array"];
$hx_$exports_lime_utils_UInt32Array.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Uint32Array(bytes.getData());
	}
	if(len == null) {
		return new Uint32Array(bytes.getData(),byteOffset);
	}
	return new Uint32Array(bytes.getData(),byteOffset,len);
};
$hx_$exports_lime_utils_UInt32Array.toBytes = function(this1) {
	return new $hx_exports.haxe.io.Bytes(new Uint8Array(this1.buffer));
};
$hx_$exports_lime_utils_UInt32Array.toString = function(this1) {
	if(this1 != null) {
		return "UInt32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var $hx_$exports_lime_utils_UInt8Array = {};
$hxClasses["$hx_exports.lime.utils.UInt8Array"] = $hx_$exports_lime_utils_UInt8Array;
$hx_$exports_lime_utils_UInt8Array.__name__ = ["$hx_exports","lime","utils","UInt8Array"];
$hx_$exports_lime_utils_UInt8Array.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		return new Uint8Array(bytes.getData());
	}
	if(len == null) {
		return new Uint8Array(bytes.getData(),byteOffset);
	}
	return new Uint8Array(bytes.getData(),byteOffset,len);
};
$hx_$exports_lime_utils_UInt8Array.toBytes = function(this1) {
	return new $hx_exports.haxe.io.Bytes(new Uint8Array(this1.buffer));
};
$hx_$exports_lime_utils_UInt8Array.toString = function(this1) {
	if(this1 != null) {
		return "UInt8Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var $hx_$exports_lime_utils_UInt8ClampedArray = {};
$hxClasses["$hx_exports.lime.utils.UInt8ClampedArray"] = $hx_$exports_lime_utils_UInt8ClampedArray;
$hx_$exports_lime_utils_UInt8ClampedArray.__name__ = ["$hx_exports","lime","utils","UInt8ClampedArray"];
$hx_$exports_lime_utils_UInt8ClampedArray.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Uint8ClampedArray(bytes.getData());
	}
	if(len == null) {
		return new Uint8ClampedArray(bytes.getData(),byteOffset);
	}
	return new Uint8ClampedArray(bytes.getData(),byteOffset,len);
};
$hx_$exports_lime_utils_UInt8ClampedArray.toBytes = function(this1) {
	return new $hx_exports.haxe.io.Bytes(new Uint8Array(this1.buffer));
};
$hx_$exports_lime_utils_UInt8ClampedArray.toString = function(this1) {
	if(this1 != null) {
		return "UInt8ClampedArray [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
$hx_$exports_lime_utils_UInt8ClampedArray._clamp = function(_in) {
	var _out = Std.int(_in);
	_out = _out > 255 ? 255 : _out;
	if(_out < 0) {
		return 0;
	} else {
		return _out;
	}
};
var openfl_Lib = $hx_exports["openfl"]["Lib"] = function() { };
$hxClasses["openfl.Lib"] = openfl_Lib;
openfl_Lib.__name__ = ["openfl","Lib"];
openfl_Lib.__properties__ = {get_current:"get_current",get_application:"get_application"};
openfl_Lib.as = function(v,c) {
	if(Std.is(v,c)) {
		return v;
	} else {
		return null;
	}
};
openfl_Lib.attach = function(name) {
	return new openfl_display_MovieClip();
};
openfl_Lib.getTimer = function() {
	return $hx_exports.lime.system.System.getTimer();
};
openfl_Lib.getURL = function(request,target) {
	if(target == null) {
		target = "_blank";
	}
	var uri = request.url;
	if(Std.is(request.data,openfl_net_URLVariables)) {
		var query = "";
		var fields = Reflect.fields(request.data);
		var _g = 0;
		while(_g < fields.length) {
			var field = fields[_g];
			++_g;
			if(query.length > 0) {
				query += "&";
			}
			query += $hx_exports.StringTools.urlEncode(field) + "=" + $hx_exports.StringTools.urlEncode(Std.string(Reflect.field(request.data,field)));
		}
		if(uri.indexOf("?") > -1) {
			uri += "&" + query;
		} else {
			uri += "?" + query;
		}
	}
	$hx_exports.lime.system.System.openURL(uri,target);
};
openfl_Lib.notImplemented = function(posInfo) {
	var api = posInfo.className + "." + posInfo.methodName;
	if(!openfl_Lib.__sentWarnings.exists(api)) {
		openfl_Lib.__sentWarnings.set(api,true);
		$hx_exports.lime.utils.Log.warn(posInfo.methodName + " is not implemented",posInfo,{ fileName : "Lib.hx", lineNumber : 155, className : "openfl.Lib", methodName : "notImplemented"});
	}
};
openfl_Lib.preventDefaultTouchMove = function() {
	$hx_exports.js.Browser.get_document().addEventListener("touchmove",function(evt) {
		evt.preventDefault();
	},false);
};
openfl_Lib.trace = function(arg) {
	$hx_exports.haxe.Log.trace(arg,{ fileName : "Lib.hx", lineNumber : 186, className : "openfl.Lib", methodName : "trace"});
};
openfl_Lib.get_application = function() {
	return openfl__$internal_Lib.application;
};
openfl_Lib.get_current = function() {
	if(openfl__$internal_Lib.current == null) {
		openfl__$internal_Lib.current = new openfl_display_MovieClip();
	}
	return openfl__$internal_Lib.current;
};
var openfl_Memory = $hx_exports["openfl"]["Memory"] = function() { };
$hxClasses["openfl.Memory"] = openfl_Memory;
openfl_Memory.__name__ = ["openfl","Memory"];
openfl_Memory.gcRef = null;
openfl_Memory.len = null;
openfl_Memory._setPositionTemporarily = function(position,action) {
	var oldPosition = openfl_Memory.gcRef.position;
	openfl_Memory.gcRef.position = position;
	var value = action();
	openfl_Memory.gcRef.position = oldPosition;
	return value;
};
openfl_Memory.getByte = function(addr) {
	return openfl_Memory.gcRef.get(addr);
};
openfl_Memory.getDouble = function(addr) {
	return openfl_Memory._setPositionTemporarily(addr,function() {
		return openfl_Memory.gcRef.readDouble();
	});
};
openfl_Memory.getFloat = function(addr) {
	return openfl_Memory._setPositionTemporarily(addr,function() {
		return openfl_Memory.gcRef.readFloat();
	});
};
openfl_Memory.getI32 = function(addr) {
	return openfl_Memory._setPositionTemporarily(addr,function() {
		return openfl_Memory.gcRef.readInt();
	});
};
openfl_Memory.getUI16 = function(addr) {
	return openfl_Memory._setPositionTemporarily(addr,function() {
		return openfl_Memory.gcRef.readUnsignedShort();
	});
};
openfl_Memory.select = function(inBytes) {
	openfl_Memory.gcRef = inBytes;
	openfl_Memory.len = inBytes != null ? openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(inBytes) : 0;
};
openfl_Memory.setByte = function(addr,v) {
	var this1 = openfl_Memory.gcRef;
	this1.__resize(addr + 1);
	this1.set(addr,v);
};
openfl_Memory.setDouble = function(addr,v) {
	openfl_Memory._setPositionTemporarily(addr,function() {
		openfl_Memory.gcRef.writeDouble(v);
	});
};
openfl_Memory.setFloat = function(addr,v) {
	openfl_Memory._setPositionTemporarily(addr,function() {
		openfl_Memory.gcRef.writeFloat(v);
	});
};
openfl_Memory.setI16 = function(addr,v) {
	openfl_Memory._setPositionTemporarily(addr,function() {
		openfl_Memory.gcRef.writeShort(v);
	});
};
openfl_Memory.setI32 = function(addr,v) {
	openfl_Memory._setPositionTemporarily(addr,function() {
		openfl_Memory.gcRef.writeInt(v);
	});
};
var openfl__$Vector_Vector_$Impl_$ = $hx_exports["openfl"]["Vector"] = {};
$hxClasses["openfl._Vector.Vector_Impl_"] = openfl__$Vector_Vector_$Impl_$;
openfl__$Vector_Vector_$Impl_$.__name__ = ["openfl","_Vector","Vector_Impl_"];
openfl__$Vector_Vector_$Impl_$.__properties__ = {set_length:"set_length",get_length:"get_length",set_fixed:"set_fixed",get_fixed:"get_fixed"};
openfl__$Vector_Vector_$Impl_$.concat = function(this1,a) {
	var data = a != null ? a.data : null;
	return new openfl__$Vector_AbstractVector(this1.data.concat(data));
};
openfl__$Vector_Vector_$Impl_$.copy = function(this1) {
	return new openfl__$Vector_AbstractVector(this1.data.copy());
};
openfl__$Vector_Vector_$Impl_$.get = function(this1,index) {
	return this1.data.get(index);
};
openfl__$Vector_Vector_$Impl_$.indexOf = function(this1,x,from) {
	if(from == null) {
		from = 0;
	}
	return this1.data.indexOf(x,from);
};
openfl__$Vector_Vector_$Impl_$.insertAt = function(this1,index,element) {
	this1.data.insertAt(index,element);
};
openfl__$Vector_Vector_$Impl_$.iterator = function(this1) {
	return this1.data.iterator();
};
openfl__$Vector_Vector_$Impl_$.join = function(this1,sep) {
	if(sep == null) {
		sep = ",";
	}
	return this1.data.join(sep);
};
openfl__$Vector_Vector_$Impl_$.lastIndexOf = function(this1,x,from) {
	if(from == null) {
		from = 0;
	}
	return this1.data.lastIndexOf(x,from);
};
openfl__$Vector_Vector_$Impl_$.pop = function(this1) {
	return this1.data.pop();
};
openfl__$Vector_Vector_$Impl_$.push = function(this1,x) {
	return this1.data.push(x);
};
openfl__$Vector_Vector_$Impl_$.removeAt = function(this1,index) {
	return this1.data.removeAt(index);
};
openfl__$Vector_Vector_$Impl_$.reverse = function(this1) {
	return new openfl__$Vector_AbstractVector(this1.data.reverse());
};
openfl__$Vector_Vector_$Impl_$.set = function(this1,index,value) {
	return this1.data.set(index,value);
};
openfl__$Vector_Vector_$Impl_$.shift = function(this1) {
	return this1.data.shift();
};
openfl__$Vector_Vector_$Impl_$.slice = function(this1,pos,end) {
	return new openfl__$Vector_AbstractVector(this1.data.slice(pos,end));
};
openfl__$Vector_Vector_$Impl_$.sort = function(this1,f) {
	this1.data.sort(f);
};
openfl__$Vector_Vector_$Impl_$.splice = function(this1,pos,len) {
	return new openfl__$Vector_AbstractVector(this1.data.splice(pos,len));
};
openfl__$Vector_Vector_$Impl_$.toString = function(this1) {
	if(this1 != null && this1.data != null) {
		return this1.data.toString();
	} else {
		return null;
	}
};
openfl__$Vector_Vector_$Impl_$.unshift = function(this1,x) {
	this1.data.unshift(x);
};
openfl__$Vector_Vector_$Impl_$.ofArray = function(a) {
	var vector = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vector.data.set(i,a[i]);
	}
	return vector;
};
openfl__$Vector_Vector_$Impl_$.convert = function(v) {
	return v;
};
openfl__$Vector_Vector_$Impl_$.toBoolVector = function(t,length,fixed,array) {
	return new openfl__$Vector_AbstractVector(new openfl__$Vector_BoolVector(length,fixed),array);
};
openfl__$Vector_Vector_$Impl_$.toIntVector = function(t,length,fixed,array) {
	return new openfl__$Vector_AbstractVector(new openfl__$Vector_IntVector(length,fixed),array);
};
openfl__$Vector_Vector_$Impl_$.toFloatVector = function(t,length,fixed,array) {
	return new openfl__$Vector_AbstractVector(new openfl__$Vector_FloatVector(length,fixed),array);
};
openfl__$Vector_Vector_$Impl_$.toFunctionVector = function(t,length,fixed,array) {
	return new openfl__$Vector_AbstractVector(new openfl__$Vector_FunctionVector(length,fixed),array);
};
openfl__$Vector_Vector_$Impl_$.toObjectVector = function(t,length,fixed,array) {
	return new openfl__$Vector_AbstractVector(new openfl__$Vector_ObjectVector(length,fixed),array);
};
openfl__$Vector_Vector_$Impl_$.get_fixed = function(this1) {
	return this1.data.fixed;
};
openfl__$Vector_Vector_$Impl_$.set_fixed = function(this1,value) {
	return this1.data.fixed = value;
};
openfl__$Vector_Vector_$Impl_$.get_length = function(this1) {
	return this1.data.get_length();
};
openfl__$Vector_Vector_$Impl_$.set_length = function(this1,value) {
	return this1.data.set_length(value);
};
var openfl__$Vector_AbstractVector = function(data,array) {
	this.data = data;
	if(array != null) {
		var cacheFixed = data.fixed;
		data.fixed = false;
		var _g1 = 0;
		var _g = array.length;
		while(_g1 < _g) {
			var i = _g1++;
			data.set(i,array[i]);
		}
		data.fixed = cacheFixed;
	}
};
$hxClasses["openfl._Vector.AbstractVector"] = openfl__$Vector_AbstractVector;
openfl__$Vector_AbstractVector.__name__ = ["openfl","_Vector","AbstractVector"];
openfl__$Vector_AbstractVector.prototype = {
	data: null
	,toJSON: function() {
		return this.data.toJSON();
	}
	,__class__: openfl__$Vector_AbstractVector
};
var openfl__$Vector_IVector = $hx_exports["openfl"]["_Vector"]["IVector"] = function() { };
$hxClasses["openfl._Vector.IVector"] = openfl__$Vector_IVector;
openfl__$Vector_IVector.__name__ = ["openfl","_Vector","IVector"];
openfl__$Vector_IVector.prototype = {
	get_length: null
	,set_length: null
	,fixed: null
	,concat: null
	,copy: null
	,get: null
	,indexOf: null
	,insertAt: null
	,iterator: null
	,join: null
	,lastIndexOf: null
	,pop: null
	,push: null
	,removeAt: null
	,reverse: null
	,set: null
	,shift: null
	,slice: null
	,sort: null
	,splice: null
	,toString: null
	,unshift: null
	,toJSON: null
	,__class__: openfl__$Vector_IVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_BoolVector = $hx_exports["openfl"]["_Vector"]["BoolVector"] = function(length,fixed,array) {
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length != null) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.BoolVector"] = openfl__$Vector_BoolVector;
openfl__$Vector_BoolVector.__name__ = ["openfl","_Vector","BoolVector"];
openfl__$Vector_BoolVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_BoolVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_BoolVector(null,null,this.__array.slice());
		} else {
			return new openfl__$Vector_BoolVector(null,null,this.__array.concat((js_Boot.__cast(a , openfl__$Vector_BoolVector)).__array));
		}
	}
	,copy: function() {
		return new openfl__$Vector_BoolVector(null,this.fixed,this.__array.slice());
	}
	,get: function(index) {
		if(index >= this.__array.length) {
			return false;
		} else {
			return this.__array[index];
		}
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return $hx_exports.HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		if(sep == null) {
			sep = ",";
		}
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var i = this.__array.length - 1;
		while(i >= from) {
			if(this.__array[i] == x) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,removeAt: function(index) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array.splice(index,1)[0];
		}
		return false;
	}
	,reverse: function() {
		this.__array.reverse();
		return this;
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 16777215;
		}
		if(startIndex == null) {
			startIndex = 0;
		}
		return new openfl__$Vector_BoolVector(null,null,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_BoolVector(null,null,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,toString: function() {
		if(this.__array != null) {
			return this.__array.toString();
		} else {
			return null;
		}
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g1 = currentLength;
				var _g = value;
				while(_g1 < _g) {
					var i = _g1++;
					this.__array[i] = false;
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_BoolVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_FloatVector = $hx_exports["openfl"]["_Vector"]["FloatVector"] = function(length,fixed,array) {
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length != null) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.FloatVector"] = openfl__$Vector_FloatVector;
openfl__$Vector_FloatVector.__name__ = ["openfl","_Vector","FloatVector"];
openfl__$Vector_FloatVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_FloatVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_FloatVector(null,null,this.__array.slice());
		} else {
			return new openfl__$Vector_FloatVector(null,null,this.__array.concat((js_Boot.__cast(a , openfl__$Vector_FloatVector)).__array));
		}
	}
	,copy: function() {
		return new openfl__$Vector_FloatVector(null,this.fixed,this.__array.slice());
	}
	,get: function(index) {
		return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return $hx_exports.HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		if(sep == null) {
			sep = ",";
		}
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var i = this.__array.length - 1;
		while(i >= from) {
			if(this.__array[i] == x) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,removeAt: function(index) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array.splice(index,1)[0];
		}
		return 0;
	}
	,reverse: function() {
		this.__array.reverse();
		return this;
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 16777215;
		}
		if(startIndex == null) {
			startIndex = 0;
		}
		return new openfl__$Vector_FloatVector(null,null,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_FloatVector(null,null,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,toString: function() {
		if(this.__array != null) {
			return this.__array.toString();
		} else {
			return null;
		}
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g1 = currentLength;
				var _g = value;
				while(_g1 < _g) {
					var i = _g1++;
					this.__array[i] = 0;
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_FloatVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_FunctionVector = $hx_exports["openfl"]["_Vector"]["FunctionVector"] = function(length,fixed,array) {
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length != null) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.FunctionVector"] = openfl__$Vector_FunctionVector;
openfl__$Vector_FunctionVector.__name__ = ["openfl","_Vector","FunctionVector"];
openfl__$Vector_FunctionVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_FunctionVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_FunctionVector(null,null,this.__array.slice());
		} else {
			return new openfl__$Vector_FunctionVector(null,null,this.__array.concat((js_Boot.__cast(a , openfl__$Vector_FunctionVector)).__array));
		}
	}
	,copy: function() {
		return new openfl__$Vector_FunctionVector(null,this.fixed,this.__array.slice());
	}
	,get: function(index) {
		if(index >= this.__array.length) {
			return null;
		} else {
			return this.__array[index];
		}
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(Reflect.compareMethods(this.__array[i],x)) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return $hx_exports.HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		if(sep == null) {
			sep = ",";
		}
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var i = this.__array.length - 1;
		while(i >= from) {
			if(Reflect.compareMethods(this.__array[i],x)) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,removeAt: function(index) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array.splice(index,1)[0];
		}
		return null;
	}
	,reverse: function() {
		this.__array.reverse();
		return this;
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 16777215;
		}
		if(startIndex == null) {
			startIndex = 0;
		}
		return new openfl__$Vector_FunctionVector(null,null,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_FunctionVector(null,null,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,toString: function() {
		if(this.__array != null) {
			return this.__array.toString();
		} else {
			return null;
		}
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g1 = currentLength;
				var _g = value;
				while(_g1 < _g) {
					var i = _g1++;
					this.__array[i] = null;
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_FunctionVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_IntVector = $hx_exports["openfl"]["_Vector"]["IntVector"] = function(length,fixed,array) {
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length != null) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.IntVector"] = openfl__$Vector_IntVector;
openfl__$Vector_IntVector.__name__ = ["openfl","_Vector","IntVector"];
openfl__$Vector_IntVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_IntVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_IntVector(null,null,this.__array.slice());
		} else {
			return new openfl__$Vector_IntVector(null,null,this.__array.concat((js_Boot.__cast(a , openfl__$Vector_IntVector)).__array));
		}
	}
	,copy: function() {
		return new openfl__$Vector_IntVector(null,this.fixed,this.__array.slice());
	}
	,get: function(index) {
		return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return $hx_exports.HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		if(sep == null) {
			sep = ",";
		}
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var i = this.__array.length - 1;
		while(i >= from) {
			if(this.__array[i] == x) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,removeAt: function(index) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array.splice(index,1)[0];
		}
		return 0;
	}
	,reverse: function() {
		this.__array.reverse();
		return this;
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 16777215;
		}
		if(startIndex == null) {
			startIndex = 0;
		}
		return new openfl__$Vector_IntVector(null,null,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_IntVector(null,null,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,toString: function() {
		if(this.__array != null) {
			return this.__array.toString();
		} else {
			return null;
		}
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g1 = currentLength;
				var _g = value;
				while(_g1 < _g) {
					var i = _g1++;
					this.__array[i] = 0;
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_IntVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_ObjectVector = $hx_exports["openfl"]["_Vector"]["ObjectVector"] = function(length,fixed,array) {
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length != null) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.ObjectVector"] = openfl__$Vector_ObjectVector;
openfl__$Vector_ObjectVector.__name__ = ["openfl","_Vector","ObjectVector"];
openfl__$Vector_ObjectVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_ObjectVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_ObjectVector(null,null,this.__array.slice());
		} else {
			return new openfl__$Vector_ObjectVector(null,null,this.__array.concat((js_Boot.__cast(a , openfl__$Vector_ObjectVector)).__array));
		}
	}
	,copy: function() {
		return new openfl__$Vector_ObjectVector(null,null,this.__array.slice());
	}
	,get: function(index) {
		return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return $hx_exports.HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		if(sep == null) {
			sep = ",";
		}
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var i = this.__array.length - 1;
		while(i >= from) {
			if(this.__array[i] == x) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,removeAt: function(index) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array.splice(index,1)[0];
		}
		return null;
	}
	,reverse: function() {
		this.__array.reverse();
		return this;
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 16777215;
		}
		if(startIndex == null) {
			startIndex = 0;
		}
		return new openfl__$Vector_ObjectVector(null,null,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_ObjectVector(null,null,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,toString: function() {
		if(this.__array != null) {
			return this.__array.toString();
		} else {
			return null;
		}
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g1 = currentLength;
				var _g = value;
				while(_g1 < _g) {
					var i = _g1++;
					this.__array.push(null);
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_ObjectVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$internal_Lib = $hx_exports["openfl"]["_internal"]["Lib"] = function() { };
$hxClasses["openfl._internal.Lib"] = openfl__$internal_Lib;
openfl__$internal_Lib.__name__ = ["openfl","_internal","Lib"];
openfl__$internal_Lib.application = null;
openfl__$internal_Lib.current = null;
openfl__$internal_Lib.notImplemented = function(posInfo) {
	var api = posInfo.className + "." + posInfo.methodName;
	if(!openfl__$internal_Lib.__sentWarnings.exists(api)) {
		openfl__$internal_Lib.__sentWarnings.set(api,true);
		$hx_exports.lime.utils.Log.warn(posInfo.methodName + " is not implemented",posInfo,{ fileName : "Lib.hx", lineNumber : 27, className : "openfl._internal.Lib", methodName : "notImplemented"});
	}
};
var openfl__$internal_TouchData = $hx_exports["openfl"]["_internal"]["TouchData"] = function() {
	this.rollOutStack = [];
};
$hxClasses["openfl._internal.TouchData"] = openfl__$internal_TouchData;
openfl__$internal_TouchData.__name__ = ["openfl","_internal","TouchData"];
openfl__$internal_TouchData.prototype = {
	rollOutStack: null
	,touch: null
	,touchDownTarget: null
	,touchOverTarget: null
	,reset: function() {
		this.touch = null;
		this.touchDownTarget = null;
		this.touchOverTarget = null;
		this.rollOutStack.splice(0,this.rollOutStack.length);
	}
	,__class__: openfl__$internal_TouchData
};
var openfl__$internal_renderer_AbstractBlendModeManager = $hx_exports["openfl"]["_internal"]["renderer"]["AbstractBlendModeManager"] = function() {
};
$hxClasses["openfl._internal.renderer.AbstractBlendModeManager"] = openfl__$internal_renderer_AbstractBlendModeManager;
openfl__$internal_renderer_AbstractBlendModeManager.__name__ = ["openfl","_internal","renderer","AbstractBlendModeManager"];
openfl__$internal_renderer_AbstractBlendModeManager.prototype = {
	setBlendMode: function(blendMode) {
	}
	,__class__: openfl__$internal_renderer_AbstractBlendModeManager
};
var openfl__$internal_renderer_AbstractFilterManager = $hx_exports["openfl"]["_internal"]["renderer"]["AbstractFilterManager"] = function(renderSession) {
	this.renderSession = renderSession;
};
$hxClasses["openfl._internal.renderer.AbstractFilterManager"] = openfl__$internal_renderer_AbstractFilterManager;
openfl__$internal_renderer_AbstractFilterManager.__name__ = ["openfl","_internal","renderer","AbstractFilterManager"];
openfl__$internal_renderer_AbstractFilterManager.prototype = {
	renderSession: null
	,pushObject: function(object) {
		return null;
	}
	,popObject: function(object) {
	}
	,__class__: openfl__$internal_renderer_AbstractFilterManager
};
var openfl__$internal_renderer_AbstractMaskManager = $hx_exports["openfl"]["_internal"]["renderer"]["AbstractMaskManager"] = function(renderSession) {
	this.renderSession = renderSession;
};
$hxClasses["openfl._internal.renderer.AbstractMaskManager"] = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_AbstractMaskManager.__name__ = ["openfl","_internal","renderer","AbstractMaskManager"];
openfl__$internal_renderer_AbstractMaskManager.prototype = {
	renderSession: null
	,pushMask: function(mask) {
	}
	,pushObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
	}
	,pushRect: function(rect,transform) {
	}
	,popMask: function() {
	}
	,popObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
	}
	,popRect: function() {
	}
	,saveState: function() {
	}
	,restoreState: function() {
	}
	,__class__: openfl__$internal_renderer_AbstractMaskManager
};
var openfl__$internal_renderer_AbstractRenderer = $hx_exports["openfl"]["_internal"]["renderer"]["AbstractRenderer"] = function(stage) {
	this.stage = stage;
	this.width = stage.stageWidth;
	this.height = stage.stageHeight;
};
$hxClasses["openfl._internal.renderer.AbstractRenderer"] = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_AbstractRenderer.__name__ = ["openfl","_internal","renderer","AbstractRenderer"];
openfl__$internal_renderer_AbstractRenderer.prototype = {
	height: null
	,width: null
	,transparent: null
	,viewport: null
	,renderSession: null
	,stage: null
	,clear: function() {
	}
	,render: function() {
	}
	,renderStage3D: function() {
	}
	,resize: function(width,height) {
		this.width = width;
		this.height = height;
	}
	,__class__: openfl__$internal_renderer_AbstractRenderer
};
var openfl__$internal_renderer_AbstractShaderManager = $hx_exports["openfl"]["_internal"]["renderer"]["AbstractShaderManager"] = function() {
};
$hxClasses["openfl._internal.renderer.AbstractShaderManager"] = openfl__$internal_renderer_AbstractShaderManager;
openfl__$internal_renderer_AbstractShaderManager.__name__ = ["openfl","_internal","renderer","AbstractShaderManager"];
openfl__$internal_renderer_AbstractShaderManager.prototype = {
	currentShader: null
	,defaultShader: null
	,initShader: function(shader) {
		return shader;
	}
	,setShader: function(shader) {
	}
	,updateShader: function(shader) {
	}
	,__class__: openfl__$internal_renderer_AbstractShaderManager
};
var openfl__$internal_renderer_DrawCommandBuffer = $hx_exports["openfl"]["_internal"]["renderer"]["DrawCommandBuffer"] = function() {
	if(openfl__$internal_renderer_DrawCommandBuffer.empty == null) {
		this.types = [];
		this.b = [];
		this.i = [];
		this.f = [];
		this.o = [];
		this.ff = [];
		this.ii = [];
		this.copyOnWrite = true;
	} else {
		this.clear();
	}
};
$hxClasses["openfl._internal.renderer.DrawCommandBuffer"] = openfl__$internal_renderer_DrawCommandBuffer;
openfl__$internal_renderer_DrawCommandBuffer.__name__ = ["openfl","_internal","renderer","DrawCommandBuffer"];
openfl__$internal_renderer_DrawCommandBuffer.prototype = {
	types: null
	,b: null
	,copyOnWrite: null
	,f: null
	,ff: null
	,i: null
	,ii: null
	,o: null
	,append: function(other) {
		if(this.get_length() == 0) {
			this.types = other.types;
			this.b = other.b;
			this.i = other.i;
			this.f = other.f;
			this.o = other.o;
			this.ff = other.ff;
			this.ii = other.ii;
			this.copyOnWrite = other.copyOnWrite = true;
			return other;
		}
		var data = new openfl__$internal_renderer_DrawCommandReader(other);
		var _g = 0;
		var _g1 = other.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 0:
				var c = data.readBeginBitmapFill();
				this.beginBitmapFill(c.obj(0),c.obj(1),c.bool(0),c.bool(1));
				break;
			case 1:
				var c1 = data.readBeginFill();
				this.beginFill(c1.int(0),c1.float(0));
				break;
			case 2:
				var c2 = data.readBeginGradientFill();
				this.beginGradientFill(c2.obj(0),c2.iArr(0),c2.fArr(0),c2.iArr(1),c2.obj(1),c2.obj(2),c2.obj(3),c2.float(0));
				break;
			case 3:
				var c3 = data.readCubicCurveTo();
				this.cubicCurveTo(c3.float(0),c3.float(1),c3.float(2),c3.float(3),c3.float(4),c3.float(5));
				break;
			case 4:
				var c4 = data.readCurveTo();
				this.curveTo(c4.float(0),c4.float(1),c4.float(2),c4.float(3));
				break;
			case 5:
				var c5 = data.readDrawCircle();
				this.drawCircle(c5.float(0),c5.float(1),c5.float(2));
				break;
			case 6:
				var c6 = data.readDrawEllipse();
				this.drawEllipse(c6.float(0),c6.float(1),c6.float(2),c6.float(3));
				break;
			case 7:
				var c7 = data.readDrawRect();
				this.drawRect(c7.float(0),c7.float(1),c7.float(2),c7.float(3));
				break;
			case 8:
				var c8 = data.readDrawRoundRect();
				this.drawRoundRect(c8.float(0),c8.float(1),c8.float(2),c8.float(3),c8.float(4),c8.obj(0));
				break;
			case 10:
				var c9 = data.readDrawTriangles();
				this.drawTriangles(c9.obj(0),c9.obj(1),c9.obj(2),c9.obj(3));
				break;
			case 11:
				var c10 = data.readEndFill();
				this.endFill();
				break;
			case 12:
				var c11 = data.readLineBitmapStyle();
				this.lineBitmapStyle(c11.obj(0),c11.obj(1),c11.bool(0),c11.bool(1));
				break;
			case 13:
				var c12 = data.readLineGradientStyle();
				this.lineGradientStyle(c12.obj(0),c12.iArr(0),c12.fArr(0),c12.iArr(1),c12.obj(1),c12.obj(2),c12.obj(3),c12.float(0));
				break;
			case 14:
				var c13 = data.readLineStyle();
				this.lineStyle(c13.obj(0),c13.int(0),c13.float(0),c13.bool(0),c13.obj(1),c13.obj(2),c13.obj(3),c13.float(1));
				break;
			case 15:
				var c14 = data.readLineTo();
				this.lineTo(c14.float(0),c14.float(1));
				break;
			case 16:
				var c15 = data.readMoveTo();
				this.moveTo(c15.float(0),c15.float(1));
				break;
			case 17:
				var c16 = data.readOverrideMatrix();
				this.overrideMatrix(c16.obj(0));
				break;
			case 18:
				var c17 = data.readWindingEvenOdd();
				this.windingEvenOdd();
				break;
			case 19:
				var c18 = data.readWindingNonZero();
				this.windingNonZero();
				break;
			default:
			}
		}
		data.destroy();
		return other;
	}
	,beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL);
		this.o.push(bitmap);
		this.o.push(matrix);
		this.b.push(repeat);
		this.b.push(smooth);
	}
	,beginFill: function(color,alpha) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_FILL);
		this.i.push(color);
		this.f.push(alpha);
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL);
		this.o.push(type);
		this.ii.push(colors);
		this.ff.push(alphas);
		this.ii.push(ratios);
		this.o.push(matrix);
		this.o.push(spreadMethod);
		this.o.push(interpolationMethod);
		this.f.push(focalPointRatio);
	}
	,clear: function() {
		this.types = openfl__$internal_renderer_DrawCommandBuffer.empty.types;
		this.b = openfl__$internal_renderer_DrawCommandBuffer.empty.b;
		this.i = openfl__$internal_renderer_DrawCommandBuffer.empty.i;
		this.f = openfl__$internal_renderer_DrawCommandBuffer.empty.f;
		this.o = openfl__$internal_renderer_DrawCommandBuffer.empty.o;
		this.ff = openfl__$internal_renderer_DrawCommandBuffer.empty.ff;
		this.ii = openfl__$internal_renderer_DrawCommandBuffer.empty.ii;
		this.copyOnWrite = true;
	}
	,copy: function() {
		var copy = new openfl__$internal_renderer_DrawCommandBuffer();
		copy.append(this);
		return copy;
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO);
		this.f.push(controlX1);
		this.f.push(controlY1);
		this.f.push(controlX2);
		this.f.push(controlY2);
		this.f.push(anchorX);
		this.f.push(anchorY);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.CURVE_TO);
		this.f.push(controlX);
		this.f.push(controlY);
		this.f.push(anchorX);
		this.f.push(anchorY);
	}
	,destroy: function() {
		this.clear();
		this.types = null;
		this.b = null;
		this.i = null;
		this.f = null;
		this.o = null;
		this.ff = null;
		this.ii = null;
	}
	,drawCircle: function(x,y,radius) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE);
		this.f.push(x);
		this.f.push(y);
		this.f.push(radius);
	}
	,drawEllipse: function(x,y,width,height) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
	}
	,drawRect: function(x,y,width,height) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_RECT);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
	}
	,drawRoundRect: function(x,y,width,height,ellipseWidth,ellipseHeight) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
		this.f.push(ellipseWidth);
		this.o.push(ellipseHeight);
	}
	,drawTriangles: function(vertices,indices,uvtData,culling) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES);
		this.o.push(vertices);
		this.o.push(indices);
		this.o.push(uvtData);
		this.o.push(culling);
	}
	,endFill: function() {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.END_FILL);
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE);
		this.o.push(bitmap);
		this.o.push(matrix);
		this.b.push(repeat);
		this.b.push(smooth);
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE);
		this.o.push(type);
		this.ii.push(colors);
		this.ff.push(alphas);
		this.ii.push(ratios);
		this.o.push(matrix);
		this.o.push(spreadMethod);
		this.o.push(interpolationMethod);
		this.f.push(focalPointRatio);
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_STYLE);
		this.o.push(thickness);
		this.i.push(color);
		this.f.push(alpha);
		this.b.push(pixelHinting);
		this.o.push(scaleMode);
		this.o.push(caps);
		this.o.push(joints);
		this.f.push(miterLimit);
	}
	,lineTo: function(x,y) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_TO);
		this.f.push(x);
		this.f.push(y);
	}
	,moveTo: function(x,y) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.MOVE_TO);
		this.f.push(x);
		this.f.push(y);
	}
	,prepareWrite: function() {
		if(this.copyOnWrite) {
			this.types = this.types.slice();
			this.b = this.b.slice();
			this.i = this.i.slice();
			this.f = this.f.slice();
			this.o = this.o.slice();
			this.ff = this.ff.slice();
			this.ii = this.ii.slice();
			this.copyOnWrite = false;
		}
	}
	,overrideMatrix: function(matrix) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX);
		this.o.push(matrix);
	}
	,windingEvenOdd: function() {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD);
	}
	,windingNonZero: function() {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO);
	}
	,get_length: function() {
		return this.types.length;
	}
	,__class__: openfl__$internal_renderer_DrawCommandBuffer
	,__properties__: {get_length:"get_length"}
};
var openfl__$internal_renderer_DrawCommandReader = $hx_exports["openfl"]["_internal"]["renderer"]["DrawCommandReader"] = function(buffer) {
	this.buffer = buffer;
	this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
	this.prev = openfl__$internal_renderer_DrawCommandType.UNKNOWN;
};
$hxClasses["openfl._internal.renderer.DrawCommandReader"] = openfl__$internal_renderer_DrawCommandReader;
openfl__$internal_renderer_DrawCommandReader.__name__ = ["openfl","_internal","renderer","DrawCommandReader"];
openfl__$internal_renderer_DrawCommandReader.prototype = {
	buffer: null
	,bPos: null
	,iiPos: null
	,iPos: null
	,ffPos: null
	,fPos: null
	,oPos: null
	,prev: null
	,tsPos: null
	,advance: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.oPos += 4;
			break;
		case 11:
			break;
		case 12:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 13:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 14:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 15:
			this.fPos += 2;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.oPos += 1;
			break;
		case 18:case 19:
			break;
		default:
		}
	}
	,bool: function(index) {
		return this.buffer.b[this.bPos + index];
	}
	,destroy: function() {
		this.buffer = null;
		this.reset();
	}
	,fArr: function(index) {
		return this.buffer.ff[this.ffPos + index];
	}
	,float: function(index) {
		return this.buffer.f[this.fPos + index];
	}
	,iArr: function(index) {
		return this.buffer.ii[this.iiPos + index];
	}
	,int: function(index) {
		return this.buffer.i[this.iPos + index];
	}
	,obj: function(index) {
		return this.buffer.o[this.oPos + index];
	}
	,readBeginBitmapFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
		var this1 = this;
		return this1;
	}
	,readBeginFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
		var this1 = this;
		return this1;
	}
	,readBeginGradientFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
		var this1 = this;
		return this1;
	}
	,readCubicCurveTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
		var this1 = this;
		return this1;
	}
	,readCurveTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
		var this1 = this;
		return this1;
	}
	,readDrawCircle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
		var this1 = this;
		return this1;
	}
	,readDrawEllipse: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
		var this1 = this;
		return this1;
	}
	,readDrawRect: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
		var this1 = this;
		return this1;
	}
	,readDrawRoundRect: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
		var this1 = this;
		return this1;
	}
	,readDrawTriangles: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
		var this1 = this;
		return this1;
	}
	,readEndFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
		var this1 = this;
		return this1;
	}
	,readLineBitmapStyle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
		var this1 = this;
		return this1;
	}
	,readLineGradientStyle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
		var this1 = this;
		return this1;
	}
	,readLineStyle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
		var this1 = this;
		return this1;
	}
	,readLineTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
		var this1 = this;
		return this1;
	}
	,readMoveTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
		var this1 = this;
		return this1;
	}
	,readOverrideMatrix: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX;
		var this1 = this;
		return this1;
	}
	,readWindingEvenOdd: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD;
		var this1 = this;
		return this1;
	}
	,readWindingNonZero: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO;
		var this1 = this;
		return this1;
	}
	,reset: function() {
		this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
	}
	,skip: function(type) {
		this.advance();
		this.prev = type;
	}
	,__class__: openfl__$internal_renderer_DrawCommandReader
};
var openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginBitmapFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","BeginBitmapFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.__properties__ = {get_smooth:"get_smooth",get_repeat:"get_repeat",get_matrix:"get_matrix",get_bitmap:"get_bitmap"};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap = function(this1) {
	return this1.obj(0);
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix = function(this1) {
	return this1.obj(1);
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat = function(this1) {
	return this1.bool(0);
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth = function(this1) {
	return this1.bool(1);
};
var openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","BeginFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.__properties__ = {get_alpha:"get_alpha",get_color:"get_color"};
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color = function(this1) {
	return this1.int(0);
};
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha = function(this1) {
	return this1.float(0);
};
var openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginGradientFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","BeginGradientFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.__properties__ = {get_focalPointRatio:"get_focalPointRatio",get_interpolationMethod:"get_interpolationMethod",get_spreadMethod:"get_spreadMethod",get_matrix:"get_matrix",get_ratios:"get_ratios",get_alphas:"get_alphas",get_colors:"get_colors",get_type:"get_type"};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type = function(this1) {
	return this1.obj(0);
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors = function(this1) {
	return this1.iArr(0);
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas = function(this1) {
	return this1.fArr(0);
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios = function(this1) {
	return this1.iArr(1);
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix = function(this1) {
	return this1.obj(1);
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod = function(this1) {
	return this1.obj(2);
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod = function(this1) {
	return this1.obj(3);
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio = function(this1) {
	return this1.float(0);
};
var openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.CubicCurveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","CubicCurveToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.__properties__ = {get_anchorY:"get_anchorY",get_anchorX:"get_anchorX",get_controlY2:"get_controlY2",get_controlX2:"get_controlX2",get_controlY1:"get_controlY1",get_controlX1:"get_controlX1"};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1 = function(this1) {
	return this1.float(0);
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1 = function(this1) {
	return this1.float(1);
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2 = function(this1) {
	return this1.float(2);
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2 = function(this1) {
	return this1.float(3);
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX = function(this1) {
	return this1.float(4);
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY = function(this1) {
	return this1.float(5);
};
var openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.CurveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","CurveToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.__properties__ = {get_anchorY:"get_anchorY",get_anchorX:"get_anchorX",get_controlY:"get_controlY",get_controlX:"get_controlX"};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX = function(this1) {
	return this1.float(0);
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY = function(this1) {
	return this1.float(1);
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX = function(this1) {
	return this1.float(2);
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY = function(this1) {
	return this1.float(3);
};
var openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawCircleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawCircleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.__properties__ = {get_radius:"get_radius",get_y:"get_y",get_x:"get_x"};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x = function(this1) {
	return this1.float(0);
};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y = function(this1) {
	return this1.float(1);
};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius = function(this1) {
	return this1.float(2);
};
var openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawEllipseView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawEllipseView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.__properties__ = {get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x = function(this1) {
	return this1.float(0);
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y = function(this1) {
	return this1.float(1);
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width = function(this1) {
	return this1.float(2);
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height = function(this1) {
	return this1.float(3);
};
var openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawRectView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawRectView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.__properties__ = {get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x = function(this1) {
	return this1.float(0);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y = function(this1) {
	return this1.float(1);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width = function(this1) {
	return this1.float(2);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height = function(this1) {
	return this1.float(3);
};
var openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawRoundRectView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawRoundRectView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.__properties__ = {get_ellipseHeight:"get_ellipseHeight",get_ellipseWidth:"get_ellipseWidth",get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x = function(this1) {
	return this1.float(0);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y = function(this1) {
	return this1.float(1);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width = function(this1) {
	return this1.float(2);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height = function(this1) {
	return this1.float(3);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth = function(this1) {
	return this1.float(4);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight = function(this1) {
	return this1.obj(0);
};
var openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawTrianglesView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawTrianglesView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.__properties__ = {get_culling:"get_culling",get_uvtData:"get_uvtData",get_indices:"get_indices",get_vertices:"get_vertices"};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_vertices = function(this1) {
	return this1.obj(0);
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_indices = function(this1) {
	return this1.obj(1);
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_uvtData = function(this1) {
	return this1.obj(2);
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_culling = function(this1) {
	return this1.obj(3);
};
var openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.EndFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","EndFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
var openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineBitmapStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineBitmapStyleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.__properties__ = {get_smooth:"get_smooth",get_repeat:"get_repeat",get_matrix:"get_matrix",get_bitmap:"get_bitmap"};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap = function(this1) {
	return this1.obj(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_matrix = function(this1) {
	return this1.obj(1);
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat = function(this1) {
	return this1.bool(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_smooth = function(this1) {
	return this1.bool(1);
};
var openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineGradientStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineGradientStyleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.__properties__ = {get_focalPointRatio:"get_focalPointRatio",get_interpolationMethod:"get_interpolationMethod",get_spreadMethod:"get_spreadMethod",get_matrix:"get_matrix",get_ratios:"get_ratios",get_alphas:"get_alphas",get_colors:"get_colors",get_type:"get_type"};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type = function(this1) {
	return this1.obj(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors = function(this1) {
	return this1.iArr(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas = function(this1) {
	return this1.fArr(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios = function(this1) {
	return this1.iArr(1);
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix = function(this1) {
	return this1.obj(1);
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod = function(this1) {
	return this1.obj(2);
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod = function(this1) {
	return this1.obj(3);
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio = function(this1) {
	return this1.float(0);
};
var openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineStyleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.__properties__ = {get_miterLimit:"get_miterLimit",get_joints:"get_joints",get_caps:"get_caps",get_scaleMode:"get_scaleMode",get_pixelHinting:"get_pixelHinting",get_alpha:"get_alpha",get_color:"get_color",get_thickness:"get_thickness"};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness = function(this1) {
	return this1.obj(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color = function(this1) {
	return this1.int(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha = function(this1) {
	return this1.float(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_pixelHinting = function(this1) {
	return this1.bool(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_scaleMode = function(this1) {
	return this1.obj(1);
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps = function(this1) {
	return this1.obj(2);
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints = function(this1) {
	return this1.obj(3);
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit = function(this1) {
	return this1.float(1);
};
var openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.__properties__ = {get_y:"get_y",get_x:"get_x"};
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x = function(this1) {
	return this1.float(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y = function(this1) {
	return this1.float(1);
};
var openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.MoveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","MoveToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.__properties__ = {get_y:"get_y",get_x:"get_x"};
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x = function(this1) {
	return this1.float(0);
};
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y = function(this1) {
	return this1.float(1);
};
var openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.OverrideMatrixView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","OverrideMatrixView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.__properties__ = {get_matrix:"get_matrix"};
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.get_matrix = function(this1) {
	return this1.obj(0);
};
var openfl__$internal_renderer__$DrawCommandReader_WindingEvenOddView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.WindingEvenOddView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_WindingEvenOddView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_WindingEvenOddView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","WindingEvenOddView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_WindingEvenOddView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
var openfl__$internal_renderer__$DrawCommandReader_WindingNonZeroView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.WindingNonZeroView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_WindingNonZeroView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_WindingNonZeroView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","WindingNonZeroView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_WindingNonZeroView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
var openfl__$internal_renderer_DrawCommandType = $hxClasses["openfl._internal.renderer.DrawCommandType"] = { __ename__ : ["openfl","_internal","renderer","DrawCommandType"], __constructs__ : ["BEGIN_BITMAP_FILL","BEGIN_FILL","BEGIN_GRADIENT_FILL","CUBIC_CURVE_TO","CURVE_TO","DRAW_CIRCLE","DRAW_ELLIPSE","DRAW_RECT","DRAW_ROUND_RECT","DRAW_TILES","DRAW_TRIANGLES","END_FILL","LINE_BITMAP_STYLE","LINE_GRADIENT_STYLE","LINE_STYLE","LINE_TO","MOVE_TO","OVERRIDE_MATRIX","WINDING_EVEN_ODD","WINDING_NON_ZERO","UNKNOWN"] };
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL = ["BEGIN_BITMAP_FILL",0];
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL = ["BEGIN_FILL",1];
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL = ["BEGIN_GRADIENT_FILL",2];
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO = ["CUBIC_CURVE_TO",3];
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.CURVE_TO = ["CURVE_TO",4];
openfl__$internal_renderer_DrawCommandType.CURVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.CURVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE = ["DRAW_CIRCLE",5];
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE = ["DRAW_ELLIPSE",6];
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_RECT = ["DRAW_RECT",7];
openfl__$internal_renderer_DrawCommandType.DRAW_RECT.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_RECT.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT = ["DRAW_ROUND_RECT",8];
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_TILES = ["DRAW_TILES",9];
openfl__$internal_renderer_DrawCommandType.DRAW_TILES.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_TILES.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES = ["DRAW_TRIANGLES",10];
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.END_FILL = ["END_FILL",11];
openfl__$internal_renderer_DrawCommandType.END_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.END_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE = ["LINE_BITMAP_STYLE",12];
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE = ["LINE_GRADIENT_STYLE",13];
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_STYLE = ["LINE_STYLE",14];
openfl__$internal_renderer_DrawCommandType.LINE_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_TO = ["LINE_TO",15];
openfl__$internal_renderer_DrawCommandType.LINE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.MOVE_TO = ["MOVE_TO",16];
openfl__$internal_renderer_DrawCommandType.MOVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.MOVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX = ["OVERRIDE_MATRIX",17];
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX.toString = $estr;
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD = ["WINDING_EVEN_ODD",18];
openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD.toString = $estr;
openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO = ["WINDING_NON_ZERO",19];
openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.UNKNOWN = ["UNKNOWN",20];
openfl__$internal_renderer_DrawCommandType.UNKNOWN.toString = $estr;
openfl__$internal_renderer_DrawCommandType.UNKNOWN.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.__empty_constructs__ = [openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL,openfl__$internal_renderer_DrawCommandType.BEGIN_FILL,openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL,openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO,openfl__$internal_renderer_DrawCommandType.CURVE_TO,openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE,openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE,openfl__$internal_renderer_DrawCommandType.DRAW_RECT,openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT,openfl__$internal_renderer_DrawCommandType.DRAW_TILES,openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES,openfl__$internal_renderer_DrawCommandType.END_FILL,openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE,openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE,openfl__$internal_renderer_DrawCommandType.LINE_STYLE,openfl__$internal_renderer_DrawCommandType.LINE_TO,openfl__$internal_renderer_DrawCommandType.MOVE_TO,openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX,openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD,openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO,openfl__$internal_renderer_DrawCommandType.UNKNOWN];
var openfl__$internal_renderer_RenderSession = $hx_exports["openfl"]["_internal"]["renderer"]["RenderSession"] = function() {
	this.activeTextures = 0;
	this.allowSmoothing = true;
	this.clearRenderDirty = false;
};
$hxClasses["openfl._internal.renderer.RenderSession"] = openfl__$internal_renderer_RenderSession;
openfl__$internal_renderer_RenderSession.__name__ = ["openfl","_internal","renderer","RenderSession"];
openfl__$internal_renderer_RenderSession.prototype = {
	allowSmoothing: null
	,cairo: null
	,clearRenderDirty: null
	,context: null
	,element: null
	,gl: null
	,renderer: null
	,roundPixels: null
	,transformProperty: null
	,transformOriginProperty: null
	,upscaled: null
	,vendorPrefix: null
	,projectionMatrix: null
	,z: null
	,drawCount: null
	,currentBlendMode: null
	,activeTextures: null
	,blendModeManager: null
	,filterManager: null
	,maskManager: null
	,shaderManager: null
	,__class__: openfl__$internal_renderer_RenderSession
};
var openfl__$internal_renderer_cairo_CairoBitmap = $hx_exports["openfl"]["_internal"]["renderer"]["cairo"]["CairoBitmap"] = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoBitmap"] = openfl__$internal_renderer_cairo_CairoBitmap;
openfl__$internal_renderer_cairo_CairoBitmap.__name__ = ["openfl","_internal","renderer","cairo","CairoBitmap"];
openfl__$internal_renderer_cairo_CairoBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) {
		return;
	}
	var cairo = renderSession.cairo;
	if(bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid) {
		renderSession.blendModeManager.setBlendMode(bitmap.__worldBlendMode);
		renderSession.maskManager.pushObject(bitmap);
		var transform = bitmap.__renderTransform;
		if(renderSession.roundPixels) {
			var matrix = transform.__toMatrix3();
			matrix.tx = $hx_exports.Math.round(matrix.tx);
			matrix.ty = $hx_exports.Math.round(matrix.ty);
			cairo.set_matrix(matrix);
		} else {
			cairo.set_matrix(transform.__toMatrix3());
		}
		var surface = bitmap.__bitmapData.getSurface();
		if(surface != null) {
			var pattern = $hx_$exports_lime_graphics_cairo_CairoPattern.createForSurface(surface);
			$hx_$exports_lime_graphics_cairo_CairoPattern.set_filter(pattern,renderSession.allowSmoothing && bitmap.smoothing ? 1 : 3);
			cairo.set_source(pattern);
			if(bitmap.__worldAlpha == 1) {
				cairo.paint();
			} else {
				cairo.paintWithAlpha(bitmap.__worldAlpha);
			}
		}
		renderSession.maskManager.popObject(bitmap);
	}
};
var openfl__$internal_renderer_cairo_CairoBlendModeManager = $hx_exports["openfl"]["_internal"]["renderer"]["cairo"]["CairoBlendModeManager"] = function(renderSession) {
	openfl__$internal_renderer_AbstractBlendModeManager.call(this);
	this.renderSession = renderSession;
};
$hxClasses["openfl._internal.renderer.cairo.CairoBlendModeManager"] = openfl__$internal_renderer_cairo_CairoBlendModeManager;
openfl__$internal_renderer_cairo_CairoBlendModeManager.__name__ = ["openfl","_internal","renderer","cairo","CairoBlendModeManager"];
openfl__$internal_renderer_cairo_CairoBlendModeManager.__super__ = openfl__$internal_renderer_AbstractBlendModeManager;
openfl__$internal_renderer_cairo_CairoBlendModeManager.prototype = $extend(openfl__$internal_renderer_AbstractBlendModeManager.prototype,{
	currentBlendMode: null
	,renderSession: null
	,setBlendMode: function(blendMode) {
		if(this.currentBlendMode == blendMode) {
			return;
		}
		this.currentBlendMode = blendMode;
		switch(blendMode) {
		case 0:
			this.renderSession.cairo.set_operator(12);
			break;
		case 2:
			this.renderSession.cairo.set_operator(17);
			break;
		case 3:
			this.renderSession.cairo.set_operator(23);
			break;
		case 5:
			this.renderSession.cairo.set_operator(21);
			break;
		case 7:
			this.renderSession.cairo.set_operator(2);
			break;
		case 8:
			this.renderSession.cairo.set_operator(18);
			break;
		case 9:
			this.renderSession.cairo.set_operator(14);
			break;
		case 11:
			this.renderSession.cairo.set_operator(16);
			break;
		case 12:
			this.renderSession.cairo.set_operator(15);
			break;
		default:
			this.renderSession.cairo.set_operator(2);
		}
	}
	,__class__: openfl__$internal_renderer_cairo_CairoBlendModeManager
});
var openfl__$internal_renderer_cairo_CairoDisplayObject = $hx_exports["openfl"]["_internal"]["renderer"]["cairo"]["CairoDisplayObject"] = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoDisplayObject"] = openfl__$internal_renderer_cairo_CairoDisplayObject;
openfl__$internal_renderer_cairo_CairoDisplayObject.__name__ = ["openfl","_internal","renderer","cairo","CairoDisplayObject"];
openfl__$internal_renderer_cairo_CairoDisplayObject.render = function(displayObject,renderSession) {
};
var openfl__$internal_renderer_cairo_CairoGraphics = $hx_exports["openfl"]["_internal"]["renderer"]["cairo"]["CairoGraphics"] = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoGraphics"] = openfl__$internal_renderer_cairo_CairoGraphics;
openfl__$internal_renderer_cairo_CairoGraphics.__name__ = ["openfl","_internal","renderer","cairo","CairoGraphics"];
openfl__$internal_renderer_cairo_CairoGraphics.allowSmoothing = null;
openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = null;
openfl__$internal_renderer_cairo_CairoGraphics.bitmapRepeat = null;
openfl__$internal_renderer_cairo_CairoGraphics.bounds = null;
openfl__$internal_renderer_cairo_CairoGraphics.cairo = null;
openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = null;
openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = null;
openfl__$internal_renderer_cairo_CairoGraphics.graphics = null;
openfl__$internal_renderer_cairo_CairoGraphics.hasFill = null;
openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = null;
openfl__$internal_renderer_cairo_CairoGraphics.hitTesting = null;
openfl__$internal_renderer_cairo_CairoGraphics.inversePendingMatrix = null;
openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix = null;
openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = null;
openfl__$internal_renderer_cairo_CairoGraphics.closePath = function(strokeBefore) {
	if(strokeBefore == null) {
		strokeBefore = false;
	}
	if(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern == null) {
		return;
	}
	if(!strokeBefore) {
		openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
	}
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern);
	if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) {
		openfl__$internal_renderer_cairo_CairoGraphics.cairo.strokePreserve();
	}
	if(strokeBefore) {
		openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
	}
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
};
openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	var pattern = null;
	var point = null;
	var point2 = null;
	var releaseMatrix = false;
	if(matrix == null) {
		matrix = openfl_geom_Matrix.__pool.get();
		releaseMatrix = true;
	}
	switch(type) {
	case 0:
		point = openfl_geom_Point.__pool.get();
		point.setTo(-819.2,0);
		matrix.__transformPoint(point);
		point2 = openfl_geom_Point.__pool.get();
		point2.setTo(819.2,0);
		matrix.__transformPoint(point2);
		point.x += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
		point2.x += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
		point.y += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
		point2.y += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
		pattern = $hx_$exports_lime_graphics_cairo_CairoPattern.createLinear(point.x,point.y,point2.x,point2.y);
		break;
	case 1:
		point = openfl_geom_Point.__pool.get();
		point.setTo(1638.4,0);
		matrix.__transformPoint(point);
		var x = matrix.tx + openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
		var y = matrix.ty + openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
		pattern = $hx_$exports_lime_graphics_cairo_CairoPattern.createRadial(x,y,0,x,y,$hx_exports.Math.abs((point.x - matrix.tx) / 2));
		break;
	}
	var rgb;
	var alpha;
	var r;
	var g;
	var b;
	var ratio;
	var _g1 = 0;
	var _g = colors.length;
	while(_g1 < _g) {
		var i = _g1++;
		rgb = colors[i];
		alpha = alphas[i];
		r = ((rgb & 16711680) >>> 16) / 255;
		g = ((rgb & 65280) >>> 8) / 255;
		b = (rgb & 255) / 255;
		ratio = ratios[i] / 255;
		if(ratio < 0) {
			ratio = 0;
		}
		if(ratio > 1) {
			ratio = 1;
		}
		$hx_$exports_lime_graphics_cairo_CairoPattern.addColorStopRGBA(pattern,ratio,r,g,b,alpha);
	}
	if(point != null) {
		openfl_geom_Point.__pool.release(point);
	}
	if(point2 != null) {
		openfl_geom_Point.__pool.release(point2);
	}
	if(releaseMatrix) {
		openfl_geom_Matrix.__pool.release(matrix);
	}
	var mat = $hx_$exports_lime_graphics_cairo_CairoPattern.get_matrix(pattern);
	mat.tx = openfl__$internal_renderer_cairo_CairoGraphics.bounds.x;
	mat.ty = openfl__$internal_renderer_cairo_CairoGraphics.bounds.y;
	$hx_$exports_lime_graphics_cairo_CairoPattern.set_matrix(pattern,mat);
	return pattern;
};
openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern = function(bitmapFill,matrix,bitmapRepeat,smooth) {
	var pattern = $hx_$exports_lime_graphics_cairo_CairoPattern.createForSurface(bitmapFill.getSurface());
	$hx_$exports_lime_graphics_cairo_CairoPattern.set_filter(pattern,smooth && openfl__$internal_renderer_cairo_CairoGraphics.allowSmoothing ? 1 : 3);
	if(bitmapRepeat) {
		$hx_$exports_lime_graphics_cairo_CairoPattern.set_extend(pattern,1);
	}
	openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = matrix;
	return pattern;
};
openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect = function(x,y,width,height,ellipseWidth,ellipseHeight) {
	if(ellipseHeight == null) {
		ellipseHeight = ellipseWidth;
	}
	ellipseWidth *= 0.5;
	ellipseHeight *= 0.5;
	if(ellipseWidth > width / 2) {
		ellipseWidth = width / 2;
	}
	if(ellipseHeight > height / 2) {
		ellipseHeight = height / 2;
	}
	var xe = x + width;
	var ye = y + height;
	var cx1 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_cairo_CairoGraphics.SIN45;
	var cx2 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_cairo_CairoGraphics.TAN22;
	var cy1 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_cairo_CairoGraphics.SIN45;
	var cy2 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_cairo_CairoGraphics.TAN22;
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(xe,ye - ellipseHeight);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe + cx2,ye,xe - ellipseWidth,ye);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x + ellipseWidth,ye);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x,ye + cy2,x,ye - ellipseHeight);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x,y + ellipseHeight);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x - cx2,y,x + ellipseWidth,y);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(xe - ellipseWidth,y);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe,y - cy2,xe,y + ellipseHeight);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(xe,ye - ellipseHeight);
};
openfl__$internal_renderer_cairo_CairoGraphics.endFill = function() {
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
	openfl__$internal_renderer_cairo_CairoGraphics.playCommands(openfl__$internal_renderer_cairo_CairoGraphics.fillCommands,false);
	openfl__$internal_renderer_cairo_CairoGraphics.fillCommands.clear();
};
openfl__$internal_renderer_cairo_CairoGraphics.endStroke = function() {
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
	openfl__$internal_renderer_cairo_CairoGraphics.playCommands(openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands,true);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
	openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands.clear();
};
openfl__$internal_renderer_cairo_CairoGraphics.hitTest = function(graphics,x,y) {
	return false;
};
openfl__$internal_renderer_cairo_CairoGraphics.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl__$internal_renderer_cairo_CairoGraphics.normalizeUVT = function(uvt,skipT) {
	if(skipT == null) {
		skipT = false;
	}
	var max = -Infinity;
	var tmp = -Infinity;
	var len = uvt.data.get_length();
	var _g1 = 1;
	var _g = len + 1;
	while(_g1 < _g) {
		var t = _g1++;
		if(skipT && t % 3 == 0) {
			continue;
		}
		tmp = uvt.data.get(t - 1);
		if(max < tmp) {
			max = tmp;
		}
	}
	if(!skipT) {
		return { max : max, uvt : uvt};
	}
	var result = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g11 = 1;
	var _g2 = len + 1;
	while(_g11 < _g2) {
		var t1 = _g11++;
		if(skipT && t1 % 3 == 0) {
			continue;
		}
		var x = uvt.data.get(t1 - 1);
		result.data.push(x);
	}
	return { max : max, uvt : result};
};
openfl__$internal_renderer_cairo_CairoGraphics.playCommands = function(commands,stroke) {
	if(stroke == null) {
		stroke = false;
	}
	if(commands.get_length() == 0) {
		return;
	}
	openfl__$internal_renderer_cairo_CairoGraphics.bounds = openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds;
	var offsetX = openfl__$internal_renderer_cairo_CairoGraphics.bounds.x;
	var offsetY = openfl__$internal_renderer_cairo_CairoGraphics.bounds.y;
	var positionX = 0.0;
	var positionY = 0.0;
	var closeGap = false;
	var startX = 0.0;
	var startY = 0.0;
	var setStart = false;
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_fillRule(1);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_antialias(3);
	var hasPath = false;
	var data = new openfl__$internal_renderer_DrawCommandReader(commands);
	var x;
	var y;
	var width;
	var height;
	var kappa = .5522848;
	var ox;
	var oy;
	var xe;
	var ye;
	var xm;
	var ym;
	var r;
	var g;
	var b;
	var _g = 0;
	var _g1 = commands.types;
	_hx_loop1: while(_g < _g1.length) {
		var type = _g1[_g];
		++_g;
		switch(type[1]) {
		case 0:
			var c = data.readBeginBitmapFill();
			openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern(c.obj(0),c.obj(1),c.bool(0),c.bool(1));
			openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = c.obj(0);
			openfl__$internal_renderer_cairo_CairoGraphics.bitmapRepeat = c.bool(0);
			openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
			break;
		case 1:
			var c1 = data.readBeginFill();
			if(c1.float(0) < 0.005) {
				openfl__$internal_renderer_cairo_CairoGraphics.hasFill = false;
			} else {
				if(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern != null) {
					openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = null;
				}
				openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = $hx_$exports_lime_graphics_cairo_CairoPattern.createRGBA(((c1.int(0) & 16711680) >>> 16) / 255,((c1.int(0) & 65280) >>> 8) / 255,(c1.int(0) & 255) / 255,c1.float(0));
				openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
			}
			openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = null;
			break;
		case 2:
			var c2 = data.readBeginGradientFill();
			if(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern != null) {
				openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = null;
			}
			openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern(c2.obj(0),c2.iArr(0),c2.fArr(0),c2.iArr(1),c2.obj(1),c2.obj(2),c2.obj(3),c2.float(0));
			openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
			openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = null;
			break;
		case 3:
			var c3 = data.readCubicCurveTo();
			hasPath = true;
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(c3.float(0) - offsetX,c3.float(1) - offsetY,c3.float(2) - offsetX,c3.float(3) - offsetY,c3.float(4) - offsetX,c3.float(5) - offsetY);
			break;
		case 4:
			var c4 = data.readCurveTo();
			hasPath = true;
			openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(c4.float(0) - offsetX,c4.float(1) - offsetY,c4.float(2) - offsetX,c4.float(3) - offsetY);
			break;
		case 5:
			var c5 = data.readDrawCircle();
			hasPath = true;
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(c5.float(0) - offsetX + c5.float(2),c5.float(1) - offsetY);
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.arc(c5.float(0) - offsetX,c5.float(1) - offsetY,c5.float(2),0,$hx_exports.Math.PI * 2);
			break;
		case 6:
			var c6 = data.readDrawEllipse();
			hasPath = true;
			x = c6.float(0);
			y = c6.float(1);
			width = c6.float(2);
			height = c6.float(3);
			x -= offsetX;
			y -= offsetY;
			ox = width / 2 * kappa;
			oy = height / 2 * kappa;
			xe = x + width;
			ye = y + height;
			xm = x + width / 2;
			ym = y + height / 2;
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x,ym);
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(x,ym - oy,xm - ox,y,xm,y);
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(xm + ox,y,xe,ym - oy,xe,ym);
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(xe,ym + oy,xm + ox,ye,xm,ye);
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(xm - ox,ye,x,ym + oy,x,ym);
			break;
		case 7:
			var c7 = data.readDrawRect();
			hasPath = true;
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.rectangle(c7.float(0) - offsetX,c7.float(1) - offsetY,c7.float(2),c7.float(3));
			break;
		case 8:
			var c8 = data.readDrawRoundRect();
			hasPath = true;
			openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect(c8.float(0) - offsetX,c8.float(1) - offsetY,c8.float(2),c8.float(3),c8.float(4),c8.obj(0));
			break;
		case 10:
			var c9 = data.readDrawTriangles();
			var v = c9.obj(0);
			var ind = c9.obj(1);
			var uvt = c9.obj(2);
			var colorFill = openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill == null;
			if(colorFill && uvt != null) {
				break _hx_loop1;
			}
			var width1 = 0;
			var height1 = 0;
			var currentMatrix = openfl__$internal_renderer_cairo_CairoGraphics.graphics.__renderTransform.__toMatrix3();
			if(!colorFill) {
				if(uvt == null) {
					uvt = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
					var _g3 = 0;
					var _g2 = Std.int(v.data.get_length() / 2);
					while(_g3 < _g2) {
						var i = _g3++;
						var x1 = v.data.get(i * 2);
						uvt.data.push(x1 - offsetX / openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.width);
						var x2 = v.data.get(i * 2 + 1);
						uvt.data.push(x2 - offsetY / openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.height);
					}
				}
				var skipT = c9.obj(2).data.get_length() != v.data.get_length();
				var normalizedUVT = openfl__$internal_renderer_cairo_CairoGraphics.normalizeUVT(uvt,skipT);
				var maxUVT = normalizedUVT.max;
				uvt = normalizedUVT.uvt;
				if(maxUVT > 1) {
					width1 = Std.int(openfl__$internal_renderer_cairo_CairoGraphics.bounds.width);
					height1 = Std.int(openfl__$internal_renderer_cairo_CairoGraphics.bounds.height);
				} else {
					width1 = openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.width;
					height1 = openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.height;
				}
			}
			var i1 = 0;
			var l = ind.data.get_length();
			var a_;
			var b_;
			var c_;
			var iax;
			var iay;
			var ibx;
			var iby;
			var icx;
			var icy;
			var x11;
			var y1;
			var x21;
			var y2;
			var x3;
			var y3;
			var uvx1;
			var uvy1;
			var uvx2;
			var uvy2;
			var uvx3;
			var uvy3;
			var denom;
			var t1;
			var t2;
			var t3;
			var t4;
			var dx;
			var dy;
			var matrix = new $hx_exports.lime.math.Matrix3();
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_antialias(1);
			while(i1 < l) {
				a_ = i1;
				b_ = i1 + 1;
				c_ = i1 + 2;
				iax = ind.data.get(a_) * 2;
				iay = ind.data.get(a_) * 2 + 1;
				ibx = ind.data.get(b_) * 2;
				iby = ind.data.get(b_) * 2 + 1;
				icx = ind.data.get(c_) * 2;
				icy = ind.data.get(c_) * 2 + 1;
				x11 = v.data.get(iax) - offsetX;
				y1 = v.data.get(iay) - offsetY;
				x21 = v.data.get(ibx) - offsetX;
				y2 = v.data.get(iby) - offsetY;
				x3 = v.data.get(icx) - offsetX;
				y3 = v.data.get(icy) - offsetY;
				var _g21 = c9.obj(3);
				switch(_g21) {
				case 0:
					if(openfl__$internal_renderer_cairo_CairoGraphics.isCCW(x11,y1,x21,y2,x3,y3)) {
						i1 += 3;
						continue;
					}
					break;
				case 2:
					if(!openfl__$internal_renderer_cairo_CairoGraphics.isCCW(x11,y1,x21,y2,x3,y3)) {
						i1 += 3;
						continue;
					}
					break;
				default:
				}
				if(colorFill) {
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x11,y1);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x21,y2);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x3,y3);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
					if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) {
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.fillPreserve();
					}
					i1 += 3;
					continue;
				}
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_matrix(openfl__$internal_renderer_cairo_CairoGraphics.graphics.__renderTransform.__toMatrix3());
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x11,y1);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x21,y2);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x3,y3);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
				uvx1 = uvt.data.get(iax) * width1;
				uvx2 = uvt.data.get(ibx) * width1;
				uvx3 = uvt.data.get(icx) * width1;
				uvy1 = uvt.data.get(iay) * height1;
				uvy2 = uvt.data.get(iby) * height1;
				uvy3 = uvt.data.get(icy) * height1;
				denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
				if(denom == 0) {
					i1 += 3;
					continue;
				}
				x11 *= currentMatrix.a;
				x21 *= currentMatrix.a;
				x3 *= currentMatrix.a;
				y1 *= currentMatrix.d;
				y2 *= currentMatrix.d;
				y3 *= currentMatrix.d;
				t1 = -(uvy1 * (x3 - x21) - uvy2 * x3 + uvy3 * x21 + (uvy2 - uvy3) * x11) / denom;
				t2 = (uvy2 * y3 + uvy1 * (y2 - y3) - uvy3 * y2 + (uvy3 - uvy2) * y1) / denom;
				t3 = (uvx1 * (x3 - x21) - uvx2 * x3 + uvx3 * x21 + (uvx2 - uvx3) * x11) / denom;
				t4 = -(uvx2 * y3 + uvx1 * (y2 - y3) - uvx3 * y2 + (uvx3 - uvx2) * y1) / denom;
				dx = (uvx1 * (uvy3 * x21 - uvy2 * x3) + uvy1 * (uvx2 * x3 - uvx3 * x21) + (uvx3 * uvy2 - uvx2 * uvy3) * x11) / denom;
				dy = (uvx1 * (uvy3 * y2 - uvy2 * y3) + uvy1 * (uvx2 * y3 - uvx3 * y2) + (uvx3 * uvy2 - uvx2 * uvy3) * y1) / denom;
				matrix.setTo(t1,t2,t3,t4,dx,dy);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_matrix(matrix);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern);
				if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) {
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.fill();
				}
				i1 += 3;
			}
			break;
		case 12:
			var c10 = data.readLineBitmapStyle();
			if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) {
				openfl__$internal_renderer_cairo_CairoGraphics.closePath();
			}
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(positionX - offsetX,positionY - offsetY);
			openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern(c10.obj(0),c10.obj(1),c10.bool(0),c10.bool(1));
			openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
			break;
		case 13:
			var c11 = data.readLineGradientStyle();
			if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) {
				openfl__$internal_renderer_cairo_CairoGraphics.closePath();
			}
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(positionX - offsetX,positionY - offsetY);
			openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern(c11.obj(0),c11.iArr(0),c11.fArr(0),c11.iArr(1),c11.obj(1),c11.obj(2),c11.obj(3),c11.float(0));
			openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
			break;
		case 14:
			var c12 = data.readLineStyle();
			if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) {
				openfl__$internal_renderer_cairo_CairoGraphics.closePath(true);
			}
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(positionX - offsetX,positionY - offsetY);
			if(c12.obj(0) == null) {
				openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = false;
			} else {
				openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineWidth(c12.obj(0) > 0 ? c12.obj(0) : 1);
				if(c12.obj(3) == null) {
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineJoin(1);
				} else {
					var tmp = openfl__$internal_renderer_cairo_CairoGraphics.cairo;
					var _g22 = c12.obj(3);
					var tmp1;
					switch(_g22) {
					case 0:
						tmp1 = 2;
						break;
					case 1:
						tmp1 = 0;
						break;
					default:
						tmp1 = 1;
					}
					tmp.set_lineJoin(tmp1);
				}
				if(c12.obj(2) == null) {
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineCap(1);
				} else {
					var tmp2 = openfl__$internal_renderer_cairo_CairoGraphics.cairo;
					var _g23 = c12.obj(2);
					var tmp3;
					switch(_g23) {
					case 0:
						tmp3 = 0;
						break;
					case 2:
						tmp3 = 2;
						break;
					default:
						tmp3 = 1;
					}
					tmp2.set_lineCap(tmp3);
				}
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_miterLimit(c12.float(1));
				r = ((c12.int(0) & 16711680) >>> 16) / 255;
				g = ((c12.int(0) & 65280) >>> 8) / 255;
				b = (c12.int(0) & 255) / 255;
				if(c12.float(0) == 1) {
					openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = $hx_$exports_lime_graphics_cairo_CairoPattern.createRGB(r,g,b);
				} else {
					openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = $hx_$exports_lime_graphics_cairo_CairoPattern.createRGBA(r,g,b,c12.float(0));
				}
			}
			break;
		case 15:
			var c13 = data.readLineTo();
			hasPath = true;
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(c13.float(0) - offsetX,c13.float(1) - offsetY);
			positionX = c13.float(0);
			positionY = c13.float(1);
			if(positionX == startX && positionY == startY) {
				closeGap = true;
			}
			break;
		case 16:
			var c14 = data.readMoveTo();
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(c14.float(0) - offsetX,c14.float(1) - offsetY);
			positionX = c14.float(0);
			positionY = c14.float(1);
			if(setStart) {
				closeGap = true;
			}
			startX = c14.float(0);
			startY = c14.float(1);
			setStart = true;
			break;
		case 18:
			data.readWindingEvenOdd();
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_fillRule(1);
			break;
		case 19:
			data.readWindingNonZero();
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_fillRule(0);
			break;
		default:
			data.skip(type);
		}
	}
	data.destroy();
	if(hasPath) {
		if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) {
			if(openfl__$internal_renderer_cairo_CairoGraphics.hasFill && closeGap) {
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(startX - offsetX,startY - offsetY);
				openfl__$internal_renderer_cairo_CairoGraphics.closePath(false);
			} else if(closeGap && positionX == startX && positionY == startY) {
				openfl__$internal_renderer_cairo_CairoGraphics.closePath(false);
			}
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern);
			if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) {
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.strokePreserve();
			}
		}
		if(!stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasFill) {
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.translate(-openfl__$internal_renderer_cairo_CairoGraphics.bounds.x,-openfl__$internal_renderer_cairo_CairoGraphics.bounds.y);
			if(openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix != null) {
				var matrix1 = openfl_geom_Matrix.__pool.get();
				matrix1.copyFrom(openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix);
				matrix1.invert();
				if(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix != null) {
					matrix1.concat(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix);
				}
				$hx_$exports_lime_graphics_cairo_CairoPattern.set_matrix(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern,matrix1.__toMatrix3());
				openfl_geom_Matrix.__pool.release(matrix1);
			}
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern);
			if(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix != null) {
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.transform(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix.__toMatrix3());
				if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) {
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.fillPreserve();
				}
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.transform(openfl__$internal_renderer_cairo_CairoGraphics.inversePendingMatrix.__toMatrix3());
			} else if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) {
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.fillPreserve();
			}
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.translate(openfl__$internal_renderer_cairo_CairoGraphics.bounds.x,openfl__$internal_renderer_cairo_CairoGraphics.bounds.y);
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
		}
	}
};
openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo = function(cx,cy,x,y) {
	var current = null;
	if(!openfl__$internal_renderer_cairo_CairoGraphics.cairo.get_hasCurrentPoint()) {
		openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(cx,cy);
		current = new $hx_exports.lime.math.Vector2(cx,cy);
	} else {
		current = openfl__$internal_renderer_cairo_CairoGraphics.cairo.get_currentPoint();
	}
	var cx1 = current.x + 0.66666666666666663 * (cx - current.x);
	var cy1 = current.y + 0.66666666666666663 * (cy - current.y);
	var cx2 = x + 0.66666666666666663 * (cx - x);
	var cy2 = y + 0.66666666666666663 * (cy - y);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(cx1,cy1,cx2,cy2,x,y);
};
openfl__$internal_renderer_cairo_CairoGraphics.render = function(graphics,renderSession,parentTransform) {
};
openfl__$internal_renderer_cairo_CairoGraphics.renderMask = function(graphics,renderSession) {
	if(graphics.__commands.get_length() != 0) {
		var cairo = renderSession.cairo;
		var positionX = 0.0;
		var positionY = 0.0;
		var offsetX = 0;
		var offsetY = 0;
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var x;
		var y;
		var width;
		var height;
		var kappa = .5522848;
		var ox;
		var oy;
		var xe;
		var ye;
		var xm;
		var ym;
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 3:
				var c = data.readCubicCurveTo();
				cairo.curveTo(c.float(0) - offsetX,c.float(1) - offsetY,c.float(2) - offsetX,c.float(3) - offsetY,c.float(4) - offsetX,c.float(5) - offsetY);
				positionX = c.float(4);
				positionY = c.float(4);
				break;
			case 4:
				var c1 = data.readCurveTo();
				openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(c1.float(0) - offsetX,c1.float(1) - offsetY,c1.float(2) - offsetX,c1.float(3) - offsetY);
				positionX = c1.float(2);
				positionY = c1.float(3);
				break;
			case 5:
				var c2 = data.readDrawCircle();
				cairo.arc(c2.float(0) - offsetX,c2.float(1) - offsetY,c2.float(2),0,$hx_exports.Math.PI * 2);
				break;
			case 6:
				var c3 = data.readDrawEllipse();
				x = c3.float(0);
				y = c3.float(1);
				width = c3.float(2);
				height = c3.float(3);
				x -= offsetX;
				y -= offsetY;
				ox = width / 2 * kappa;
				oy = height / 2 * kappa;
				xe = x + width;
				ye = y + height;
				xm = x + width / 2;
				ym = y + height / 2;
				cairo.moveTo(x,ym);
				cairo.curveTo(x,ym - oy,xm - ox,y,xm,y);
				cairo.curveTo(xm + ox,y,xe,ym - oy,xe,ym);
				cairo.curveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				cairo.curveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 7:
				var c4 = data.readDrawRect();
				cairo.rectangle(c4.float(0) - offsetX,c4.float(1) - offsetY,c4.float(2),c4.float(3));
				break;
			case 8:
				var c5 = data.readDrawRoundRect();
				openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect(c5.float(0) - offsetX,c5.float(1) - offsetY,c5.float(2),c5.float(3),c5.float(4),c5.obj(0));
				break;
			case 15:
				var c6 = data.readLineTo();
				cairo.lineTo(c6.float(0) - offsetX,c6.float(1) - offsetY);
				positionX = c6.float(0);
				positionY = c6.float(1);
				break;
			case 16:
				var c7 = data.readMoveTo();
				cairo.moveTo(c7.float(0) - offsetX,c7.float(1) - offsetY);
				positionX = c7.float(0);
				positionY = c7.float(1);
				break;
			default:
				data.skip(type);
			}
		}
		data.destroy();
	}
};
var openfl__$internal_renderer_cairo_CairoMaskManager = $hx_exports["openfl"]["_internal"]["renderer"]["cairo"]["CairoMaskManager"] = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
};
$hxClasses["openfl._internal.renderer.cairo.CairoMaskManager"] = openfl__$internal_renderer_cairo_CairoMaskManager;
openfl__$internal_renderer_cairo_CairoMaskManager.__name__ = ["openfl","_internal","renderer","cairo","CairoMaskManager"];
openfl__$internal_renderer_cairo_CairoMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_cairo_CairoMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	pushMask: function(mask) {
		var cairo = this.renderSession.cairo;
		cairo.save();
		var transform = mask.__getRenderTransform();
		cairo.set_matrix(transform.__toMatrix3());
		cairo.newPath();
		mask.__renderCairoMask(this.renderSession);
		cairo.clip();
	}
	,pushObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.pushRect(object.__scrollRect,object.__renderTransform);
		}
		if(!object.__cacheBitmapRender && object.__mask != null) {
			this.pushMask(object.__mask);
		}
	}
	,pushRect: function(rect,transform) {
		var cairo = this.renderSession.cairo;
		cairo.save();
		cairo.set_matrix(new $hx_exports.lime.math.Matrix3(transform.a,transform.c,transform.b,transform.d,transform.tx,transform.ty));
		cairo.newPath();
		cairo.rectangle(rect.x,rect.y,rect.width,rect.height);
		cairo.clip();
	}
	,popMask: function() {
		this.renderSession.cairo.restore();
	}
	,popObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(!object.__cacheBitmapRender && object.__mask != null) {
			this.popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.popRect();
		}
	}
	,popRect: function() {
		this.renderSession.cairo.restore();
	}
	,__class__: openfl__$internal_renderer_cairo_CairoMaskManager
});
var openfl__$internal_renderer_cairo_CairoRenderer = $hx_exports["openfl"]["_internal"]["renderer"]["cairo"]["CairoRenderer"] = function(stage,cairo) {
	openfl__$internal_renderer_AbstractRenderer.call(this,stage);
};
$hxClasses["openfl._internal.renderer.cairo.CairoRenderer"] = openfl__$internal_renderer_cairo_CairoRenderer;
openfl__$internal_renderer_cairo_CairoRenderer.__name__ = ["openfl","_internal","renderer","cairo","CairoRenderer"];
openfl__$internal_renderer_cairo_CairoRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_cairo_CairoRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	cairo: null
	,clear: function() {
		this.cairo.identityMatrix();
		if(this.stage.__clearBeforeRender) {
			this.cairo.setSourceRGB(this.stage.__colorSplit[0],this.stage.__colorSplit[1],this.stage.__colorSplit[2]);
			this.cairo.paint();
		}
	}
	,render: function() {
		this.renderSession.allowSmoothing = this.stage.quality != 2;
		this.stage.__renderCairo(this.renderSession);
	}
	,renderStage3D: function() {
		var _g = 0;
		var _g1 = this.stage.stage3Ds;
		while(_g < _g1.data.get_length()) {
			var stage3D = _g1.data.get(_g);
			++_g;
			stage3D.__renderCairo(this.stage,this.renderSession);
		}
	}
	,__class__: openfl__$internal_renderer_cairo_CairoRenderer
});
var openfl__$internal_renderer_cairo_CairoShape = $hx_exports["openfl"]["_internal"]["renderer"]["cairo"]["CairoShape"] = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoShape"] = openfl__$internal_renderer_cairo_CairoShape;
openfl__$internal_renderer_cairo_CairoShape.__name__ = ["openfl","_internal","renderer","cairo","CairoShape"];
openfl__$internal_renderer_cairo_CairoShape.render = function(shape,renderSession) {
};
var openfl__$internal_renderer_cairo_CairoTextField = $hx_exports["openfl"]["_internal"]["renderer"]["cairo"]["CairoTextField"] = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoTextField"] = openfl__$internal_renderer_cairo_CairoTextField;
openfl__$internal_renderer_cairo_CairoTextField.__name__ = ["openfl","_internal","renderer","cairo","CairoTextField"];
openfl__$internal_renderer_cairo_CairoTextField.render = function(textField,renderSession,transform) {
};
var openfl__$internal_renderer_cairo_CairoTilemap = $hx_exports["openfl"]["_internal"]["renderer"]["cairo"]["CairoTilemap"] = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoTilemap"] = openfl__$internal_renderer_cairo_CairoTilemap;
openfl__$internal_renderer_cairo_CairoTilemap.__name__ = ["openfl","_internal","renderer","cairo","CairoTilemap"];
openfl__$internal_renderer_cairo_CairoTilemap.render = function(tilemap,renderSession) {
	if(!tilemap.__renderable || tilemap.__worldAlpha <= 0) {
		return;
	}
	tilemap.__updateTileArray();
	if(tilemap.__tileArray == null || tilemap.__tileArray.get_length() == 0) {
		return;
	}
	var cairo = renderSession.cairo;
	renderSession.blendModeManager.setBlendMode(tilemap.__worldBlendMode);
	renderSession.maskManager.pushObject(tilemap);
	var rect = openfl_geom_Rectangle.__pool.get();
	rect.setTo(0,0,tilemap.__width,tilemap.__height);
	renderSession.maskManager.pushRect(rect,tilemap.__renderTransform);
	var transform = tilemap.__renderTransform;
	var roundPixels = renderSession.roundPixels;
	var defaultTileset = tilemap.__tileset;
	var cacheBitmapData = null;
	var surface = null;
	var pattern = null;
	var alpha;
	var visible;
	var tileset;
	var id;
	var tileData;
	var bitmapData;
	var tileArray = tilemap.__tileArray;
	var matrix = new $hx_exports.lime.math.Matrix3();
	var tileTransform;
	var tileRect = null;
	var tile = tileArray.iterator();
	while(tile.hasNext()) {
		var tile1 = tile.next();
		alpha = tile1.get_alpha();
		visible = tile1.get_visible();
		if(!visible || alpha <= 0) {
			continue;
		}
		tileset = tile1.get_tileset();
		if(tileset == null) {
			tileset = defaultTileset;
		}
		if(tileset == null) {
			continue;
		}
		id = tile1.get_id();
		if(id == -1) {
			tileRect = tile1.get_rect();
			if(tileRect.width <= 0 || tileRect.height <= 0) {
				continue;
			}
		} else {
			tileData = tileset.__data[id];
			if(tileData == null) {
				continue;
			}
			rect.setTo(tileData.x,tileData.y,tileData.width,tileData.height);
			tile1.set_rect(rect);
			tileRect = rect;
		}
		bitmapData = tileset.get_bitmapData();
		if(bitmapData == null) {
			continue;
		}
		if(bitmapData != cacheBitmapData) {
			surface = bitmapData.getSurface();
			pattern = $hx_$exports_lime_graphics_cairo_CairoPattern.createForSurface(surface);
			$hx_$exports_lime_graphics_cairo_CairoPattern.set_filter(pattern,renderSession.allowSmoothing && tilemap.smoothing ? 1 : 3);
			cairo.set_source(pattern);
			cacheBitmapData = bitmapData;
		}
		tileTransform = tile1.get_matrix();
		tileTransform.concat(transform);
		if(roundPixels) {
			tileTransform.tx = $hx_exports.Math.round(tileTransform.tx);
			tileTransform.ty = $hx_exports.Math.round(tileTransform.ty);
		}
		cairo.set_matrix(tileTransform.__toMatrix3());
		matrix.tx = tileRect.x;
		matrix.ty = tileRect.y;
		$hx_$exports_lime_graphics_cairo_CairoPattern.set_matrix(pattern,matrix);
		cairo.set_source(pattern);
		cairo.save();
		cairo.newPath();
		cairo.rectangle(0,0,tileRect.width,tileRect.height);
		cairo.clip();
		if(tilemap.__worldAlpha == 1 && alpha == 1) {
			cairo.paint();
		} else {
			cairo.paintWithAlpha(tilemap.__worldAlpha * alpha);
		}
		cairo.restore();
	}
	renderSession.maskManager.popRect();
	renderSession.maskManager.popObject(tilemap);
	openfl_geom_Rectangle.__pool.release(rect);
};
var openfl__$internal_renderer_canvas_CanvasBitmap = $hx_exports["openfl"]["_internal"]["renderer"]["canvas"]["CanvasBitmap"] = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasBitmap"] = openfl__$internal_renderer_canvas_CanvasBitmap;
openfl__$internal_renderer_canvas_CanvasBitmap.__name__ = ["openfl","_internal","renderer","canvas","CanvasBitmap"];
openfl__$internal_renderer_canvas_CanvasBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) {
		return;
	}
	var context = renderSession.context;
	if(bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
		renderSession.blendModeManager.setBlendMode(bitmap.__worldBlendMode);
		renderSession.maskManager.pushObject(bitmap,false);
		$hx_exports.lime.graphics.utils.ImageCanvasUtil.convertToCanvas(bitmap.__bitmapData.image);
		context.globalAlpha = bitmap.__worldAlpha;
		var transform = bitmap.__renderTransform;
		var scrollRect = bitmap.__scrollRect;
		if(renderSession.roundPixels) {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,Std.int(transform.tx),Std.int(transform.ty));
		} else {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		}
		if(!renderSession.allowSmoothing || !bitmap.smoothing) {
			context.mozImageSmoothingEnabled = false;
			context.msImageSmoothingEnabled = false;
			context.imageSmoothingEnabled = false;
		}
		if(scrollRect == null) {
			context.drawImage(bitmap.__bitmapData.image.get_src(),0,0);
		} else {
			context.drawImage(bitmap.__bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
		}
		if(!renderSession.allowSmoothing || !bitmap.smoothing) {
			context.mozImageSmoothingEnabled = true;
			context.msImageSmoothingEnabled = true;
			context.imageSmoothingEnabled = true;
		}
		renderSession.maskManager.popObject(bitmap,false);
	}
};
var openfl__$internal_renderer_canvas_CanvasBlendModeManager = $hx_exports["openfl"]["_internal"]["renderer"]["canvas"]["CanvasBlendModeManager"] = function(renderSession) {
	openfl__$internal_renderer_AbstractBlendModeManager.call(this);
	this.renderSession = renderSession;
};
$hxClasses["openfl._internal.renderer.canvas.CanvasBlendModeManager"] = openfl__$internal_renderer_canvas_CanvasBlendModeManager;
openfl__$internal_renderer_canvas_CanvasBlendModeManager.__name__ = ["openfl","_internal","renderer","canvas","CanvasBlendModeManager"];
openfl__$internal_renderer_canvas_CanvasBlendModeManager.__super__ = openfl__$internal_renderer_AbstractBlendModeManager;
openfl__$internal_renderer_canvas_CanvasBlendModeManager.prototype = $extend(openfl__$internal_renderer_AbstractBlendModeManager.prototype,{
	currentBlendMode: null
	,renderSession: null
	,setBlendMode: function(blendMode) {
		if(this.currentBlendMode == blendMode) {
			return;
		}
		this.currentBlendMode = blendMode;
		switch(blendMode) {
		case 0:
			this.renderSession.context.globalCompositeOperation = "lighter";
			break;
		case 1:
			this.renderSession.context.globalCompositeOperation = "destination-in";
			break;
		case 2:
			this.renderSession.context.globalCompositeOperation = "darken";
			break;
		case 3:
			this.renderSession.context.globalCompositeOperation = "difference";
			break;
		case 4:
			this.renderSession.context.globalCompositeOperation = "destination-out";
			break;
		case 5:
			this.renderSession.context.globalCompositeOperation = "hard-light";
			break;
		case 7:
			this.renderSession.context.globalCompositeOperation = "source-over";
			break;
		case 8:
			this.renderSession.context.globalCompositeOperation = "lighten";
			break;
		case 9:
			this.renderSession.context.globalCompositeOperation = "multiply";
			break;
		case 11:
			this.renderSession.context.globalCompositeOperation = "overlay";
			break;
		case 12:
			this.renderSession.context.globalCompositeOperation = "screen";
			break;
		default:
			this.renderSession.context.globalCompositeOperation = "source-over";
		}
	}
	,__class__: openfl__$internal_renderer_canvas_CanvasBlendModeManager
});
var openfl__$internal_renderer_canvas_CanvasDisplayObject = $hx_exports["openfl"]["_internal"]["renderer"]["canvas"]["CanvasDisplayObject"] = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasDisplayObject"] = openfl__$internal_renderer_canvas_CanvasDisplayObject;
openfl__$internal_renderer_canvas_CanvasDisplayObject.__name__ = ["openfl","_internal","renderer","canvas","CanvasDisplayObject"];
openfl__$internal_renderer_canvas_CanvasDisplayObject.render = function(displayObject,renderSession) {
	if(displayObject.opaqueBackground == null && displayObject.__graphics == null) {
		return;
	}
	if(!displayObject.__renderable || displayObject.__worldAlpha <= 0) {
		return;
	}
	var gBounds = displayObject.__graphics.__bounds;
	var rX = gBounds == null ? NaN : displayObject.__worldTransform.tx + gBounds.x;
	var rY = gBounds == null ? NaN : displayObject.__worldTransform.ty + gBounds.y;
	if(!isNaN(rX) && !isNaN(rY) && (rX < 0 && rX * -1 > gBounds.width) || rY < 0 && rY * -1 > gBounds.height || renderSession.renderer != null && (rX > renderSession.renderer.width || rY > renderSession.renderer.height)) {
		return;
	}
	if(displayObject.opaqueBackground != null && !displayObject.__cacheBitmapRender && displayObject.get_width() > 0 && displayObject.get_height() > 0) {
		renderSession.blendModeManager.setBlendMode(displayObject.__worldBlendMode);
		renderSession.maskManager.pushObject(displayObject);
		var context = renderSession.context;
		var transform = displayObject.__renderTransform;
		if(renderSession.roundPixels) {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,Std.int(transform.tx),Std.int(transform.ty));
		} else {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		}
		var color = displayObject.opaqueBackground;
		context.fillStyle = "rgb(" + (color >>> 16 & 255) + "," + (color >>> 8 & 255) + "," + (color & 255) + ")";
		context.fillRect(0,0,displayObject.get_width(),displayObject.get_height());
		renderSession.maskManager.popObject(displayObject);
	}
	if(displayObject.__graphics != null) {
		openfl__$internal_renderer_canvas_CanvasShape.render(displayObject,renderSession);
	}
};
var openfl__$internal_renderer_canvas_CanvasGraphics = $hx_exports["openfl"]["_internal"]["renderer"]["canvas"]["CanvasGraphics"] = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasGraphics"] = openfl__$internal_renderer_canvas_CanvasGraphics;
openfl__$internal_renderer_canvas_CanvasGraphics.__name__ = ["openfl","_internal","renderer","canvas","CanvasGraphics"];
openfl__$internal_renderer_canvas_CanvasGraphics.allowSmoothing = null;
openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
openfl__$internal_renderer_canvas_CanvasGraphics.bitmapStroke = null;
openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = null;
openfl__$internal_renderer_canvas_CanvasGraphics.bounds = null;
openfl__$internal_renderer_canvas_CanvasGraphics.graphics = null;
openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = null;
openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = null;
openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = null;
openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = null;
openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = null;
openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = null;
openfl__$internal_renderer_canvas_CanvasGraphics.context = null;
openfl__$internal_renderer_canvas_CanvasGraphics.hitTestCanvas = null;
openfl__$internal_renderer_canvas_CanvasGraphics.hitTestContext = null;
openfl__$internal_renderer_canvas_CanvasGraphics.closePath = function(strokeBefore) {
	if(strokeBefore == null) {
		strokeBefore = false;
	}
	if(openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle == null) {
		return;
	}
	if(!strokeBefore) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	}
	openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
	if(strokeBefore) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	}
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
};
openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill = function(bitmap,bitmapRepeat,smooth) {
	$hx_exports.lime.graphics.utils.ImageCanvasUtil.convertToCanvas(bitmap.image);
	openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(smooth);
	return openfl__$internal_renderer_canvas_CanvasGraphics.context.createPattern(bitmap.image.get_src(),bitmapRepeat ? "repeat" : "no-repeat");
};
openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	var gradientFill = null;
	var point = null;
	var point2 = null;
	var releaseMatrix = false;
	if(matrix == null) {
		matrix = openfl_geom_Matrix.__pool.get();
		releaseMatrix = true;
	}
	switch(type) {
	case 0:
		point = openfl_geom_Point.__pool.get();
		point.setTo(-819.2,0);
		matrix.__transformPoint(point);
		point2 = openfl_geom_Point.__pool.get();
		point2.setTo(819.2,0);
		matrix.__transformPoint(point2);
		gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createLinearGradient(point.x,point.y,point2.x,point2.y);
		break;
	case 1:
		point = openfl_geom_Point.__pool.get();
		point.setTo(1638.4,0);
		matrix.__transformPoint(point);
		gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createRadialGradient(matrix.tx,matrix.ty,0,matrix.tx,matrix.ty,$hx_exports.Math.abs((point.x - matrix.tx) / 2));
		break;
	}
	var rgb;
	var alpha;
	var r;
	var g;
	var b;
	var ratio;
	var _g1 = 0;
	var _g = colors.length;
	while(_g1 < _g) {
		var i = _g1++;
		rgb = colors[i];
		alpha = alphas[i];
		r = (rgb & 16711680) >>> 16;
		g = (rgb & 65280) >>> 8;
		b = rgb & 255;
		ratio = ratios[i] / 255;
		if(ratio < 0) {
			ratio = 0;
		}
		if(ratio > 1) {
			ratio = 1;
		}
		gradientFill.addColorStop(ratio,"rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")");
	}
	if(point != null) {
		openfl_geom_Point.__pool.release(point);
	}
	if(point2 != null) {
		openfl_geom_Point.__pool.release(point2);
	}
	if(releaseMatrix) {
		openfl_geom_Matrix.__pool.release(matrix);
	}
	return gradientFill;
};
openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas = function(bitmap,repeat,width,height) {
	var canvas = $hx_exports.js.Browser.get_document().createElement("canvas");
	var context = canvas.getContext("2d");
	canvas.width = width;
	canvas.height = height;
	var tmp = bitmap.image.get_src();
	context.fillStyle = context.createPattern(tmp,repeat ? "repeat" : "no-repeat");
	context.beginPath();
	context.moveTo(0,0);
	context.lineTo(0,height);
	context.lineTo(width,height);
	context.lineTo(width,0);
	context.lineTo(0,0);
	context.closePath();
	if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
		context.fill(openfl__$internal_renderer_canvas_CanvasGraphics.windingRule);
	}
	return canvas;
};
openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect = function(x,y,width,height,ellipseWidth,ellipseHeight) {
	if(ellipseHeight == null) {
		ellipseHeight = ellipseWidth;
	}
	ellipseWidth *= 0.5;
	ellipseHeight *= 0.5;
	if(ellipseWidth > width / 2) {
		ellipseWidth = width / 2;
	}
	if(ellipseHeight > height / 2) {
		ellipseHeight = height / 2;
	}
	var xe = x + width;
	var ye = y + height;
	var cx1 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_canvas_CanvasGraphics.SIN45;
	var cx2 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_canvas_CanvasGraphics.TAN22;
	var cy1 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_canvas_CanvasGraphics.SIN45;
	var cy2 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_canvas_CanvasGraphics.TAN22;
	openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(xe,ye - ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2,ye,xe - ellipseWidth,ye);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x + ellipseWidth,ye);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x,ye + cy2,x,ye - ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x,y + ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2,y,x + ellipseWidth,y);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe - ellipseWidth,y);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe,y - cy2,xe,y + ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe,ye - ellipseHeight);
};
openfl__$internal_renderer_canvas_CanvasGraphics.endFill = function() {
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
	openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands,false);
	openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
};
openfl__$internal_renderer_canvas_CanvasGraphics.endStroke = function() {
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
	openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands,true);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
};
openfl__$internal_renderer_canvas_CanvasGraphics.hitTest = function(graphics,x,y) {
	openfl__$internal_renderer_canvas_CanvasGraphics.bounds = graphics.__bounds;
	openfl__$internal_renderer_canvas_CanvasGraphics.graphics = graphics;
	if(graphics.__commands.get_length() == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width <= 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height <= 0) {
		return false;
	} else {
		openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = true;
		var transform = graphics.__renderTransform;
		var px = transform.__transformX(x,y);
		var py = transform.__transformY(x,y);
		x = px;
		y = py;
		x -= transform.__transformX(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
		y -= transform.__transformY(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
		var cacheCanvas = graphics.__canvas;
		var cacheContext = graphics.__context;
		graphics.__canvas = openfl__$internal_renderer_canvas_CanvasGraphics.hitTestCanvas;
		graphics.__context = openfl__$internal_renderer_canvas_CanvasGraphics.hitTestContext;
		openfl__$internal_renderer_canvas_CanvasGraphics.context = graphics.__context;
		openfl__$internal_renderer_canvas_CanvasGraphics.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
		openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
		openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
		openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 0:case 1:case 2:
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y,openfl__$internal_renderer_canvas_CanvasGraphics.windingRule)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL) {
					var c = data.readBeginBitmapFill();
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginBitmapFill(c.obj(0),c.obj(1),c.bool(0),c.bool(1));
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginBitmapFill(c.obj(0),c.obj(1),c.bool(0),c.bool(1));
				} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL) {
					var c1 = data.readBeginGradientFill();
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginGradientFill(c1.obj(0),c1.iArr(0),c1.fArr(0),c1.iArr(1),c1.obj(1),c1.obj(2),c1.obj(3),c1.float(0));
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginGradientFill(c1.obj(0),c1.iArr(0),c1.fArr(0),c1.iArr(1),c1.obj(1),c1.obj(2),c1.obj(3),c1.float(0));
				} else {
					var c2 = data.readBeginFill();
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginFill(c2.int(0),1);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginFill(c2.int(0),1);
				}
				break;
			case 3:
				var c3 = data.readCubicCurveTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.cubicCurveTo(c3.float(0),c3.float(1),c3.float(2),c3.float(3),c3.float(4),c3.float(5));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.cubicCurveTo(c3.float(0),c3.float(1),c3.float(2),c3.float(3),c3.float(4),c3.float(5));
				break;
			case 4:
				var c4 = data.readCurveTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.curveTo(c4.float(0),c4.float(1),c4.float(2),c4.float(3));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.curveTo(c4.float(0),c4.float(1),c4.float(2),c4.float(3));
				break;
			case 5:
				var c5 = data.readDrawCircle();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawCircle(c5.float(0),c5.float(1),c5.float(2));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawCircle(c5.float(0),c5.float(1),c5.float(2));
				break;
			case 6:
				var c6 = data.readDrawEllipse();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawEllipse(c6.float(0),c6.float(1),c6.float(2),c6.float(3));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawEllipse(c6.float(0),c6.float(1),c6.float(2),c6.float(3));
				break;
			case 7:
				var c7 = data.readDrawRect();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRect(c7.float(0),c7.float(1),c7.float(2),c7.float(3));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRect(c7.float(0),c7.float(1),c7.float(2),c7.float(3));
				break;
			case 8:
				var c8 = data.readDrawRoundRect();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRoundRect(c8.float(0),c8.float(1),c8.float(2),c8.float(3),c8.float(4),c8.obj(0));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRoundRect(c8.float(0),c8.float(1),c8.float(2),c8.float(3),c8.float(4),c8.obj(0));
				break;
			case 11:
				data.readEndFill();
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y,openfl__$internal_renderer_canvas_CanvasGraphics.windingRule)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
				break;
			case 12:
				var c9 = data.readLineBitmapStyle();
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineBitmapStyle(c9.obj(0),c9.obj(1),c9.bool(0),c9.bool(1));
				break;
			case 13:
				var c10 = data.readLineGradientStyle();
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineGradientStyle(c10.obj(0),c10.iArr(0),c10.fArr(0),c10.iArr(1),c10.obj(1),c10.obj(2),c10.obj(3),c10.float(0));
				break;
			case 14:
				var c11 = data.readLineStyle();
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineStyle(c11.obj(0),c11.int(0),1,c11.bool(0),c11.obj(1),c11.obj(2),c11.obj(3),c11.float(1));
				break;
			case 15:
				var c12 = data.readLineTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.lineTo(c12.float(0),c12.float(1));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineTo(c12.float(0),c12.float(1));
				break;
			case 16:
				var c13 = data.readMoveTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.moveTo(c13.float(0),c13.float(1));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(c13.float(0),c13.float(1));
				break;
			case 18:
				openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
				break;
			case 19:
				openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "nonzero";
				break;
			default:
				data.skip(type);
			}
		}
		var hitTest = false;
		if(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.get_length() > 0) {
			openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
		}
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y,openfl__$internal_renderer_canvas_CanvasGraphics.windingRule)) {
			hitTest = true;
		}
		if(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.get_length() > 0) {
			openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
		}
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
			hitTest = true;
		}
		data.destroy();
		graphics.__canvas = cacheCanvas;
		graphics.__context = cacheContext;
		return hitTest;
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT = function(uvt,skipT) {
	if(skipT == null) {
		skipT = false;
	}
	var max = -Infinity;
	var tmp = -Infinity;
	var len = uvt.data.get_length();
	var _g1 = 1;
	var _g = len + 1;
	while(_g1 < _g) {
		var t = _g1++;
		if(skipT && t % 3 == 0) {
			continue;
		}
		tmp = uvt.data.get(t - 1);
		if(max < tmp) {
			max = tmp;
		}
	}
	if(!skipT) {
		return { max : max, uvt : uvt};
	}
	var result = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g11 = 1;
	var _g2 = len + 1;
	while(_g11 < _g2) {
		var t1 = _g11++;
		if(skipT && t1 % 3 == 0) {
			continue;
		}
		var x = uvt.data.get(t1 - 1);
		result.data.push(x);
	}
	return { max : max, uvt : result};
};
openfl__$internal_renderer_canvas_CanvasGraphics.playCommands = function(commands,stroke) {
	if(stroke == null) {
		stroke = false;
	}
	openfl__$internal_renderer_canvas_CanvasGraphics.bounds = openfl__$internal_renderer_canvas_CanvasGraphics.graphics.__bounds;
	var offsetX = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x;
	var offsetY = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y;
	var positionX = 0.0;
	var positionY = 0.0;
	var closeGap = false;
	var startX = 0.0;
	var startY = 0.0;
	var setStart = false;
	openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
	openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
	var data = new openfl__$internal_renderer_DrawCommandReader(commands);
	var x;
	var y;
	var width;
	var height;
	var kappa = .5522848;
	var ox;
	var oy;
	var xe;
	var ye;
	var xm;
	var ym;
	var r;
	var g;
	var b;
	var optimizationUsed;
	var canOptimizeMatrix;
	var st;
	var sr;
	var sb;
	var sl;
	var stl = null;
	var sbr = null;
	var _g = 0;
	var _g1 = commands.types;
	_hx_loop1: while(_g < _g1.length) {
		var type = _g1[_g];
		++_g;
		switch(type[1]) {
		case 0:
			var c = data.readBeginBitmapFill();
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = c.obj(0);
			var tmp = c.obj(0);
			var tmp1 = c.bool(1);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(tmp,true,tmp1);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			if(c.obj(1) != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = c.obj(1);
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = c.obj(1).clone();
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.invert();
			} else {
				openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = null;
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = null;
			}
			break;
		case 1:
			var c1 = data.readBeginFill();
			if(c1.float(0) < 0.005) {
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
			} else {
				if(c1.float(0) == 1) {
					var tmp2 = $hx_exports.StringTools.hex(c1.int(0) & 16777215,6);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = "#" + tmp2;
				} else {
					r = (c1.int(0) & 16711680) >>> 16;
					g = (c1.int(0) & 65280) >>> 8;
					b = c1.int(0) & 255;
					var tmp3 = "rgba(" + r + ", " + g + ", " + b + ", " + c1.float(0);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = tmp3 + ")";
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
				openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			}
			break;
		case 2:
			var c2 = data.readBeginGradientFill();
			var tmp4 = c2.obj(0);
			var tmp5 = c2.iArr(0);
			var tmp6 = c2.fArr(0);
			var tmp7 = c2.iArr(1);
			var tmp8 = c2.obj(1);
			var tmp9 = c2.obj(2);
			var tmp10 = c2.obj(3);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(tmp4,tmp5,tmp6,tmp7,tmp8,tmp9,tmp10,c2.float(0));
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
			openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			break;
		case 3:
			var c3 = data.readCubicCurveTo();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(c3.float(0) - offsetX,c3.float(1) - offsetY,c3.float(2) - offsetX,c3.float(3) - offsetY,c3.float(4) - offsetX,c3.float(5) - offsetY);
			break;
		case 4:
			var c4 = data.readCurveTo();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(c4.float(0) - offsetX,c4.float(1) - offsetY,c4.float(2) - offsetX,c4.float(3) - offsetY);
			break;
		case 5:
			var c5 = data.readDrawCircle();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(c5.float(0) - offsetX + c5.float(2),c5.float(1) - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(c5.float(0) - offsetX,c5.float(1) - offsetY,c5.float(2),0,$hx_exports.Math.PI * 2,true);
			break;
		case 6:
			var c6 = data.readDrawEllipse();
			x = c6.float(0);
			y = c6.float(1);
			width = c6.float(2);
			height = c6.float(3);
			x -= offsetX;
			y -= offsetY;
			ox = width / 2 * kappa;
			oy = height / 2 * kappa;
			xe = x + width;
			ye = y + height;
			xm = x + width / 2;
			ym = y + height / 2;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x,ym);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(x,ym - oy,xm - ox,y,xm,y);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm + ox,y,xe,ym - oy,xe,ym);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x,ym + oy,x,ym);
			break;
		case 7:
			var c7 = data.readDrawRect();
			optimizationUsed = false;
			if(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null && !openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
				st = 0;
				sr = 0;
				sb = 0;
				sl = 0;
				canOptimizeMatrix = true;
				if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
					if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b != 0 || openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c != 0) {
						canOptimizeMatrix = false;
					} else {
						if(stl == null) {
							stl = openfl_geom_Point.__pool.get();
						}
						if(sbr == null) {
							sbr = openfl_geom_Point.__pool.get();
						}
						stl.setTo(c7.float(0),c7.float(1));
						openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.__transformPoint(stl);
						sbr.setTo(c7.float(0) + c7.float(2),c7.float(1) + c7.float(3));
						openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.__transformPoint(sbr);
						st = stl.y;
						sl = stl.x;
						sb = sbr.y;
						sr = sbr.x;
					}
				} else {
					st = c7.float(1);
					sl = c7.float(0);
					sb = c7.float(1) + c7.float(3);
					sr = c7.float(0) + c7.float(2);
				}
				if(canOptimizeMatrix && st >= 0 && sl >= 0 && sr <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width && sb <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height) {
					optimizationUsed = true;
					if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
						openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.image.get_src(),sl,st,sr - sl,sb - st,c7.float(0) - offsetX,c7.float(1) - offsetY,c7.float(2),c7.float(3));
					}
				}
			}
			if(!optimizationUsed) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(c7.float(0) - offsetX,c7.float(1) - offsetY,c7.float(2),c7.float(3));
			}
			break;
		case 8:
			var c8 = data.readDrawRoundRect();
			openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(c8.float(0) - offsetX,c8.float(1) - offsetY,c8.float(2),c8.float(3),c8.float(4),c8.obj(0));
			break;
		case 10:
			var c9 = data.readDrawTriangles();
			var v = c9.obj(0);
			var ind = c9.obj(1);
			var uvt = c9.obj(2);
			var pattern = null;
			var colorFill = openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill == null;
			if(colorFill && uvt != null) {
				break _hx_loop1;
			}
			if(!colorFill) {
				if(uvt == null) {
					uvt = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
					var _g3 = 0;
					var _g2 = Std.int(v.data.get_length() / 2);
					while(_g3 < _g2) {
						var i = _g3++;
						var x1 = v.data.get(i * 2);
						uvt.data.push(x1 - offsetX / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width);
						var x2 = v.data.get(i * 2 + 1);
						uvt.data.push(x2 - offsetY / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height);
					}
				}
				var skipT = uvt.data.get_length() != v.data.get_length();
				var normalizedUVT = openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT(uvt,skipT);
				var maxUVT = normalizedUVT.max;
				uvt = normalizedUVT.uvt;
				if(maxUVT > 1) {
					pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,Std.int(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width),Std.int(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height));
				} else {
					pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height);
				}
			}
			var i1 = 0;
			var l = ind.data.get_length();
			var a_;
			var b_;
			var c_;
			var iax;
			var iay;
			var ibx;
			var iby;
			var icx;
			var icy;
			var x11;
			var y1;
			var x21;
			var y2;
			var x3;
			var y3;
			var uvx1;
			var uvy1;
			var uvx2;
			var uvy2;
			var uvx3;
			var uvy3;
			var denom;
			var t1;
			var t2;
			var t3;
			var t4;
			var dx;
			var dy;
			while(i1 < l) {
				a_ = i1;
				b_ = i1 + 1;
				c_ = i1 + 2;
				iax = ind.data.get(a_) * 2;
				iay = ind.data.get(a_) * 2 + 1;
				ibx = ind.data.get(b_) * 2;
				iby = ind.data.get(b_) * 2 + 1;
				icx = ind.data.get(c_) * 2;
				icy = ind.data.get(c_) * 2 + 1;
				x11 = v.data.get(iax) - offsetX;
				y1 = v.data.get(iay) - offsetY;
				x21 = v.data.get(ibx) - offsetX;
				y2 = v.data.get(iby) - offsetY;
				x3 = v.data.get(icx) - offsetX;
				y3 = v.data.get(icy) - offsetY;
				var _g21 = c9.obj(3);
				switch(_g21) {
				case 0:
					if(openfl__$internal_renderer_canvas_CanvasGraphics.isCCW(x11,y1,x21,y2,x3,y3)) {
						i1 += 3;
						continue;
					}
					break;
				case 2:
					if(!openfl__$internal_renderer_canvas_CanvasGraphics.isCCW(x11,y1,x21,y2,x3,y3)) {
						i1 += 3;
						continue;
					}
					break;
				default:
				}
				if(colorFill) {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
					openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x11,y1);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x21,y2);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3,y3);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
					if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
						openfl__$internal_renderer_canvas_CanvasGraphics.context.fill(openfl__$internal_renderer_canvas_CanvasGraphics.windingRule);
					}
					i1 += 3;
					continue;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context.save();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x11,y1);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x21,y2);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3,y3);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.clip();
				uvx1 = uvt.data.get(iax) * pattern.width;
				uvx2 = uvt.data.get(ibx) * pattern.width;
				uvx3 = uvt.data.get(icx) * pattern.width;
				uvy1 = uvt.data.get(iay) * pattern.height;
				uvy2 = uvt.data.get(iby) * pattern.height;
				uvy3 = uvt.data.get(icy) * pattern.height;
				denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
				if(denom == 0) {
					i1 += 3;
					continue;
				}
				t1 = -(uvy1 * (x3 - x21) - uvy2 * x3 + uvy3 * x21 + (uvy2 - uvy3) * x11) / denom;
				t2 = (uvy2 * y3 + uvy1 * (y2 - y3) - uvy3 * y2 + (uvy3 - uvy2) * y1) / denom;
				t3 = (uvx1 * (x3 - x21) - uvx2 * x3 + uvx3 * x21 + (uvx2 - uvx3) * x11) / denom;
				t4 = -(uvx2 * y3 + uvx1 * (y2 - y3) - uvx3 * y2 + (uvx3 - uvx2) * y1) / denom;
				dx = (uvx1 * (uvy3 * x21 - uvy2 * x3) + uvy1 * (uvx2 * x3 - uvx3 * x21) + (uvx3 * uvy2 - uvx2 * uvy3) * x11) / denom;
				dy = (uvx1 * (uvy3 * y2 - uvy2 * y3) + uvy1 * (uvx2 * y3 - uvx3 * y2) + (uvx3 * uvy2 - uvx2 * uvy3) * y1) / denom;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(t1,t2,t3,t4,dx,dy);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(pattern,0,0);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.restore();
				i1 += 3;
			}
			break;
		case 12:
			var c10 = data.readLineBitmapStyle();
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
				openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			var tmp11 = c10.obj(0);
			var tmp12 = c10.bool(0);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(tmp11,tmp12,c10.bool(1));
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			break;
		case 13:
			var c11 = data.readLineGradientStyle();
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
				openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			var tmp13 = c11.obj(0);
			var tmp14 = c11.iArr(0);
			var tmp15 = c11.fArr(0);
			var tmp16 = c11.iArr(1);
			var tmp17 = c11.obj(1);
			var tmp18 = c11.obj(2);
			var tmp19 = c11.obj(3);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(tmp13,tmp14,tmp15,tmp16,tmp17,tmp18,tmp19,c11.float(0));
			openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			break;
		case 14:
			var c12 = data.readLineStyle();
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
				openfl__$internal_renderer_canvas_CanvasGraphics.closePath(true);
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			if(c12.obj(0) == null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
			} else {
				var tmp20 = c12.obj(0) > 0 ? c12.obj(0) : 1;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineWidth = tmp20;
				var tmp21 = c12.obj(3) == null ? "round" : openfl_display__$JointStyle_JointStyle_$Impl_$.toString(c12.obj(3)).toLowerCase();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineJoin = tmp21;
				var tmp22;
				if(c12.obj(2) == null) {
					tmp22 = "round";
				} else {
					var _g22 = c12.obj(2);
					tmp22 = _g22 == 0 ? "butt" : openfl_display__$CapsStyle_CapsStyle_$Impl_$.toString(c12.obj(2)).toLowerCase();
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = tmp22;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.miterLimit = c12.float(1);
				if(c12.float(0) == 1) {
					var tmp23 = $hx_exports.StringTools.hex(c12.int(0) & 16777215,6);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "#" + tmp23;
				} else {
					r = (c12.int(0) & 16711680) >>> 16;
					g = (c12.int(0) & 65280) >>> 8;
					b = c12.int(0) & 255;
					var tmp24 = "rgba(" + r + ", " + g + ", " + b + ", " + c12.float(0);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = tmp24 + ")";
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
				openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			}
			break;
		case 15:
			var c13 = data.readLineTo();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(c13.float(0) - offsetX,c13.float(1) - offsetY);
			positionX = c13.float(0);
			positionY = c13.float(1);
			if(positionX == startX && positionY == startY) {
				closeGap = true;
			}
			break;
		case 16:
			var c14 = data.readMoveTo();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(c14.float(0) - offsetX,c14.float(1) - offsetY);
			positionX = c14.float(0);
			positionY = c14.float(1);
			if(setStart) {
				closeGap = true;
			}
			startX = c14.float(0);
			startY = c14.float(1);
			setStart = true;
			break;
		case 18:
			openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
			break;
		case 19:
			openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "nonzero";
			break;
		default:
			data.skip(type);
		}
	}
	if(stl != null) {
		openfl_geom_Point.__pool.release(stl);
	}
	if(sbr != null) {
		openfl_geom_Point.__pool.release(sbr);
	}
	data.destroy();
	if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && closeGap) {
			openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(startX - offsetX,startY - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.closePath(false);
		} else if(closeGap && positionX == startX && positionY == startY) {
			openfl__$internal_renderer_canvas_CanvasGraphics.closePath(false);
		}
		if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
			openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
		}
	}
	if(!stroke) {
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill || openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(-openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,-openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
			if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.a,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.d,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.tx,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.ty);
				if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.fill(openfl__$internal_renderer_canvas_CanvasGraphics.windingRule);
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.a,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.b,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.c,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.d,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.tx,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.ty);
			} else if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.fill(openfl__$internal_renderer_canvas_CanvasGraphics.windingRule);
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
		}
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.render = function(graphics,renderSession,parentTransform) {
	graphics.__update();
	if(graphics.__dirty) {
		openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.graphics = graphics;
		openfl__$internal_renderer_canvas_CanvasGraphics.allowSmoothing = renderSession.allowSmoothing;
		openfl__$internal_renderer_canvas_CanvasGraphics.bounds = graphics.__bounds;
		var width = graphics.__width;
		var height = graphics.__height;
		if(!graphics.__visible || graphics.__commands.get_length() == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null || width < 1 || height < 1) {
			graphics.__canvas = null;
			graphics.__context = null;
			graphics.__bitmap = null;
		} else {
			if(graphics.__canvas == null) {
				graphics.__canvas = $hx_exports.js.Browser.get_document().createElement("canvas");
				graphics.__context = graphics.__canvas.getContext("2d");
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context = graphics.__context;
			var transform = graphics.__renderTransform;
			var canvas = graphics.__canvas;
			var scale = openfl__$internal_renderer_canvas_CanvasRenderer.scale;
			var scaledWidth = Std.int(width * scale);
			var scaledHeight = Std.int(height * scale);
			if(canvas.width == scaledWidth && canvas.height == scaledHeight) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.clearRect(0,0,scaledWidth,scaledHeight);
			} else {
				canvas.width = width;
				canvas.height = height;
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
			openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
			openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
			var hasLineStyle = false;
			var initStrokeX = 0.0;
			var initStrokeY = 0.0;
			openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
			var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
			var _g = 0;
			var _g1 = graphics.__commands.types;
			while(_g < _g1.length) {
				var type = _g1[_g];
				++_g;
				switch(type[1]) {
				case 0:case 1:case 2:
					openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
					openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
					if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL) {
						var c = data.readBeginBitmapFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginBitmapFill(c.obj(0),c.obj(1),c.bool(0),c.bool(1));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginBitmapFill(c.obj(0),c.obj(1),c.bool(0),c.bool(1));
					} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL) {
						var c1 = data.readBeginGradientFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginGradientFill(c1.obj(0),c1.iArr(0),c1.fArr(0),c1.iArr(1),c1.obj(1),c1.obj(2),c1.obj(3),c1.float(0));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginGradientFill(c1.obj(0),c1.iArr(0),c1.fArr(0),c1.iArr(1),c1.obj(1),c1.obj(2),c1.obj(3),c1.float(0));
					} else {
						var c2 = data.readBeginFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginFill(c2.int(0),c2.float(0));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginFill(c2.int(0),c2.float(0));
					}
					break;
				case 3:
					var c3 = data.readCubicCurveTo();
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.cubicCurveTo(c3.float(0),c3.float(1),c3.float(2),c3.float(3),c3.float(4),c3.float(5));
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.cubicCurveTo(c3.float(0),c3.float(1),c3.float(2),c3.float(3),c3.float(4),c3.float(5));
					} else {
						initStrokeX = c3.float(4);
						initStrokeY = c3.float(5);
					}
					break;
				case 4:
					var c4 = data.readCurveTo();
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.curveTo(c4.float(0),c4.float(1),c4.float(2),c4.float(3));
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.curveTo(c4.float(0),c4.float(1),c4.float(2),c4.float(3));
					} else {
						initStrokeX = c4.float(2);
						initStrokeY = c4.float(3);
					}
					break;
				case 5:
					var c5 = data.readDrawCircle();
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawCircle(c5.float(0),c5.float(1),c5.float(2));
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawCircle(c5.float(0),c5.float(1),c5.float(2));
					}
					break;
				case 6:
					var c6 = data.readDrawEllipse();
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawEllipse(c6.float(0),c6.float(1),c6.float(2),c6.float(3));
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawEllipse(c6.float(0),c6.float(1),c6.float(2),c6.float(3));
					}
					break;
				case 7:
					var c7 = data.readDrawRect();
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRect(c7.float(0),c7.float(1),c7.float(2),c7.float(3));
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRect(c7.float(0),c7.float(1),c7.float(2),c7.float(3));
					}
					break;
				case 8:
					var c8 = data.readDrawRoundRect();
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRoundRect(c8.float(0),c8.float(1),c8.float(2),c8.float(3),c8.float(4),c8.obj(0));
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRoundRect(c8.float(0),c8.float(1),c8.float(2),c8.float(3),c8.float(4),c8.obj(0));
					}
					break;
				case 10:
					var c9 = data.readDrawTriangles();
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawTriangles(c9.obj(0),c9.obj(1),c9.obj(2),c9.obj(3));
					break;
				case 11:
					data.readEndFill();
					openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
					openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
					openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
					hasLineStyle = false;
					openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
					initStrokeX = 0;
					initStrokeY = 0;
					break;
				case 12:
					var c10 = data.readLineBitmapStyle();
					if(!hasLineStyle && (initStrokeX != 0 || initStrokeY != 0)) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(initStrokeX,initStrokeY);
						initStrokeX = 0;
						initStrokeY = 0;
					}
					hasLineStyle = true;
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineBitmapStyle(c10.obj(0),c10.obj(1),c10.bool(0),c10.bool(1));
					break;
				case 13:
					var c11 = data.readLineGradientStyle();
					if(!hasLineStyle && (initStrokeX != 0 || initStrokeY != 0)) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(initStrokeX,initStrokeY);
						initStrokeX = 0;
						initStrokeY = 0;
					}
					hasLineStyle = true;
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineGradientStyle(c11.obj(0),c11.iArr(0),c11.fArr(0),c11.iArr(1),c11.obj(1),c11.obj(2),c11.obj(3),c11.float(0));
					break;
				case 14:
					var c12 = data.readLineStyle();
					if(!hasLineStyle && c12.obj(0) != null) {
						if(initStrokeX != 0 || initStrokeY != 0) {
							openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(initStrokeX,initStrokeY);
							initStrokeX = 0;
							initStrokeY = 0;
						}
					}
					hasLineStyle = c12.obj(0) != null;
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineStyle(c12.obj(0),c12.int(0),c12.float(0),c12.bool(0),c12.obj(1),c12.obj(2),c12.obj(3),c12.float(1));
					break;
				case 15:
					var c13 = data.readLineTo();
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.lineTo(c13.float(0),c13.float(1));
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineTo(c13.float(0),c13.float(1));
					} else {
						initStrokeX = c13.float(0);
						initStrokeY = c13.float(1);
					}
					break;
				case 16:
					var c14 = data.readMoveTo();
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.moveTo(c14.float(0),c14.float(1));
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(c14.float(0),c14.float(1));
					} else {
						initStrokeX = c14.float(0);
						initStrokeY = c14.float(1);
					}
					break;
				case 18:
					data.readWindingEvenOdd();
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.windingEvenOdd();
					openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
					break;
				case 19:
					data.readWindingNonZero();
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.windingNonZero();
					openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "nonzero";
					break;
				default:
					data.skip(type);
				}
			}
			if(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.get_length() > 0) {
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
			}
			if(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.get_length() > 0) {
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
			}
			data.destroy();
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(graphics.__canvas);
		}
		graphics.set___dirty(false);
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.renderMask = function(graphics,renderSession) {
	if(graphics.__commands.get_length() != 0) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context = renderSession.context;
		var positionX = 0.0;
		var positionY = 0.0;
		var offsetX = 0;
		var offsetY = 0;
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var x;
		var y;
		var width;
		var height;
		var kappa = .5522848;
		var ox;
		var oy;
		var xe;
		var ye;
		var xm;
		var ym;
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 3:
				var c = data.readCubicCurveTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(c.float(0) - offsetX,c.float(1) - offsetY,c.float(2) - offsetX,c.float(3) - offsetY,c.float(4) - offsetX,c.float(5) - offsetY);
				positionX = c.float(4);
				positionY = c.float(5);
				break;
			case 4:
				var c1 = data.readCurveTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(c1.float(0) - offsetX,c1.float(1) - offsetY,c1.float(2) - offsetX,c1.float(3) - offsetY);
				positionX = c1.float(2);
				positionY = c1.float(3);
				break;
			case 5:
				var c2 = data.readDrawCircle();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(c2.float(0) - offsetX,c2.float(1) - offsetY,c2.float(2),0,$hx_exports.Math.PI * 2,true);
				break;
			case 6:
				var c3 = data.readDrawEllipse();
				x = c3.float(0);
				y = c3.float(1);
				width = c3.float(2);
				height = c3.float(3);
				x -= offsetX;
				y -= offsetY;
				ox = width / 2 * kappa;
				oy = height / 2 * kappa;
				xe = x + width;
				ye = y + height;
				xm = x + width / 2;
				ym = y + height / 2;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(x,ym - oy,xm - ox,y,xm,y);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm + ox,y,xe,ym - oy,xe,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 7:
				var c4 = data.readDrawRect();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(c4.float(0) - offsetX,c4.float(1) - offsetY,c4.float(2),c4.float(3));
				break;
			case 8:
				var c5 = data.readDrawRoundRect();
				openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(c5.float(0) - offsetX,c5.float(1) - offsetY,c5.float(2),c5.float(3),c5.float(4),c5.obj(0));
				break;
			case 15:
				var c6 = data.readLineTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(c6.float(0) - offsetX,c6.float(1) - offsetY);
				positionX = c6.float(0);
				positionY = c6.float(1);
				break;
			case 16:
				var c7 = data.readMoveTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(c7.float(0) - offsetX,c7.float(1) - offsetY);
				positionX = c7.float(0);
				positionY = c7.float(1);
				break;
			default:
				data.skip(type);
			}
		}
		data.destroy();
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing = function(smooth) {
	if(!openfl__$internal_renderer_canvas_CanvasGraphics.allowSmoothing) {
		smooth = false;
	}
	if(openfl__$internal_renderer_canvas_CanvasGraphics.context.imageSmoothingEnabled != smooth) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context.mozImageSmoothingEnabled = smooth;
		openfl__$internal_renderer_canvas_CanvasGraphics.context.msImageSmoothingEnabled = smooth;
		openfl__$internal_renderer_canvas_CanvasGraphics.context.imageSmoothingEnabled = smooth;
	}
};
var openfl__$internal_renderer_canvas_CanvasMaskManager = $hx_exports["openfl"]["_internal"]["renderer"]["canvas"]["CanvasMaskManager"] = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
};
$hxClasses["openfl._internal.renderer.canvas.CanvasMaskManager"] = openfl__$internal_renderer_canvas_CanvasMaskManager;
openfl__$internal_renderer_canvas_CanvasMaskManager.__name__ = ["openfl","_internal","renderer","canvas","CanvasMaskManager"];
openfl__$internal_renderer_canvas_CanvasMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_canvas_CanvasMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	pushMask: function(mask) {
		var context = this.renderSession.context;
		context.save();
		var transform = mask.__getRenderTransform();
		context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		context.beginPath();
		mask.__renderCanvasMask(this.renderSession);
		context.clip();
	}
	,pushObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.pushRect(object.__scrollRect,object.__renderTransform);
		}
		if(!object.__cacheBitmapRender && object.__mask != null) {
			this.pushMask(object.__mask);
		}
	}
	,pushRect: function(rect,transform) {
		var context = this.renderSession.context;
		context.save();
		context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		context.beginPath();
		context.rect(rect.x,rect.y,rect.width,rect.height);
		context.clip();
	}
	,popMask: function() {
		this.renderSession.context.restore();
	}
	,popObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(!object.__cacheBitmapRender && object.__mask != null) {
			this.popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.popRect();
		}
	}
	,popRect: function() {
		this.renderSession.context.restore();
	}
	,__class__: openfl__$internal_renderer_canvas_CanvasMaskManager
});
var openfl__$internal_renderer_canvas_CanvasRenderer = $hx_exports["openfl"]["_internal"]["renderer"]["canvas"]["CanvasRenderer"] = function(stage,context) {
	openfl__$internal_renderer_AbstractRenderer.call(this,stage);
	this.context = context;
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.clearRenderDirty = true;
	this.renderSession.context = context;
	this.renderSession.renderer = this;
	this.renderSession.blendModeManager = new openfl__$internal_renderer_canvas_CanvasBlendModeManager(this.renderSession);
	this.renderSession.maskManager = new openfl__$internal_renderer_canvas_CanvasMaskManager(this.renderSession);
	var config = stage.window.config;
	if(config != null && Reflect.hasField(config,"allowHighDPI") && config.allowHighDPI) {
		openfl__$internal_renderer_canvas_CanvasRenderer.scale = window.devicePixelRatio || 1;
	}
};
$hxClasses["openfl._internal.renderer.canvas.CanvasRenderer"] = openfl__$internal_renderer_canvas_CanvasRenderer;
openfl__$internal_renderer_canvas_CanvasRenderer.__name__ = ["openfl","_internal","renderer","canvas","CanvasRenderer"];
openfl__$internal_renderer_canvas_CanvasRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_canvas_CanvasRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	context: null
	,clear: function() {
		this.renderSession.blendModeManager.setBlendMode(10);
		this.context.setTransform(1,0,0,1,0,0);
		this.context.globalAlpha = 1;
		if(!this.stage.__transparent && this.stage.__clearBeforeRender) {
			this.context.fillStyle = this.stage.__colorString;
			this.context.fillRect(0,0,this.stage.stageWidth * this.stage.window.get_scale(),this.stage.stageHeight * this.stage.window.get_scale());
		} else if(this.stage.__transparent && this.stage.__clearBeforeRender) {
			this.context.clearRect(0,0,this.stage.stageWidth * this.stage.window.get_scale(),this.stage.stageHeight * this.stage.window.get_scale());
		}
	}
	,render: function() {
		this.renderSession.allowSmoothing = this.stage.quality != 2;
		this.stage.__renderCanvas(this.renderSession);
	}
	,renderStage3D: function() {
		var _g = 0;
		var _g1 = this.stage.stage3Ds;
		while(_g < _g1.data.get_length()) {
			var stage3D = _g1.data.get(_g);
			++_g;
			stage3D.__renderCanvas(this.stage,this.renderSession);
		}
	}
	,__class__: openfl__$internal_renderer_canvas_CanvasRenderer
});
var openfl__$internal_renderer_canvas_CanvasShape = $hx_exports["openfl"]["_internal"]["renderer"]["canvas"]["CanvasShape"] = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasShape"] = openfl__$internal_renderer_canvas_CanvasShape;
openfl__$internal_renderer_canvas_CanvasShape.__name__ = ["openfl","_internal","renderer","canvas","CanvasShape"];
openfl__$internal_renderer_canvas_CanvasShape.render = function(shape,renderSession) {
	if(!shape.__renderable || shape.__worldAlpha <= 0) {
		return;
	}
	var graphics = shape.__graphics;
	if(graphics != null) {
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,shape.__renderTransform);
		var bounds = graphics.__bounds;
		var width = graphics.__width;
		var height = graphics.__height;
		if(graphics.__canvas != null) {
			var context = renderSession.context;
			var scrollRect = shape.__scrollRect;
			if(width > 0 && height > 0 && (scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0)) {
				renderSession.blendModeManager.setBlendMode(shape.__worldBlendMode);
				renderSession.maskManager.pushObject(shape);
				context.globalAlpha = shape.__worldAlpha;
				var transform = graphics.__worldTransform;
				if(renderSession.roundPixels) {
					context.setTransform(transform.a,transform.b,transform.c,transform.d,Std.int(transform.tx),Std.int(transform.ty));
				} else {
					context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
				}
				context.drawImage(graphics.__canvas,0,0);
				renderSession.maskManager.popObject(shape);
			}
		}
	}
};
var openfl__$internal_renderer_canvas_CanvasTextField = $hx_exports["openfl"]["_internal"]["renderer"]["canvas"]["CanvasTextField"] = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasTextField"] = openfl__$internal_renderer_canvas_CanvasTextField;
openfl__$internal_renderer_canvas_CanvasTextField.__name__ = ["openfl","_internal","renderer","canvas","CanvasTextField"];
openfl__$internal_renderer_canvas_CanvasTextField.context = null;
openfl__$internal_renderer_canvas_CanvasTextField.clearRect = null;
openfl__$internal_renderer_canvas_CanvasTextField.render = function(textField,renderSession,transform) {
	var textEngine = textField.__textEngine;
	var bounds = textEngine.bounds;
	var graphics = textField.__graphics;
	if(textField.__dirty) {
		textField.__updateLayout();
		if(graphics.__bounds == null) {
			graphics.__bounds = new openfl_geom_Rectangle();
		}
		graphics.__bounds.copyFrom(bounds);
	}
	graphics.__update();
	if(textField.__dirty || graphics.__dirty) {
		var width = graphics.__width;
		var height = graphics.__height;
		if((textEngine.text == null || $hx_$exports_lime_text_UTF8String.equals(textEngine.text,"")) && !textEngine.background && !textEngine.border && !textEngine.__hasFocus && (textEngine.type != 1 || !textEngine.selectable) || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
			textField.__graphics.__canvas = null;
			textField.__graphics.__context = null;
			textField.__graphics.__bitmap = null;
			textField.__graphics.set___dirty(false);
			textField.__dirty = false;
		} else {
			if(textField.__graphics.__canvas == null) {
				textField.__graphics.__canvas = $hx_exports.js.Browser.get_document().createElement("canvas");
				textField.__graphics.__context = textField.__graphics.__canvas.getContext("2d");
			}
			openfl__$internal_renderer_canvas_CanvasTextField.context = graphics.__context;
			var transform1 = graphics.__renderTransform;
			graphics.__canvas.width = width;
			graphics.__canvas.height = height;
			openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx,transform1.ty);
			if(openfl__$internal_renderer_canvas_CanvasTextField.clearRect == null) {
				openfl__$internal_renderer_canvas_CanvasTextField.clearRect = (typeof navigator !== 'undefined' && typeof navigator['isCocoonJS'] !== 'undefined');
			}
			if(openfl__$internal_renderer_canvas_CanvasTextField.clearRect) {
				openfl__$internal_renderer_canvas_CanvasTextField.context.clearRect(0,0,graphics.__canvas.width,graphics.__canvas.height);
			}
			if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
				var text = textEngine.text;
				if(!renderSession.allowSmoothing || textEngine.antiAliasType == 0 && textEngine.sharpness == 400) {
					graphics.__context.mozImageSmoothingEnabled = false;
					graphics.__context.msImageSmoothingEnabled = false;
					graphics.__context.imageSmoothingEnabled = false;
				} else {
					graphics.__context.mozImageSmoothingEnabled = true;
					graphics.__context.msImageSmoothingEnabled = true;
					graphics.__context.imageSmoothingEnabled = true;
				}
				if(textEngine.border || textEngine.background) {
					openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					if(textEngine.background) {
						var tmp = $hx_exports.StringTools.hex(textEngine.backgroundColor & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp;
						openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						var tmp1 = $hx_exports.StringTools.hex(textEngine.borderColor & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
				}
				openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline = "top";
				openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "start";
				var scrollX = -textField.get_scrollH();
				var scrollY = 0.0;
				var _g1 = 0;
				var _g = textField.get_scrollV() - 1;
				while(_g1 < _g) {
					var i = _g1++;
					scrollY -= textEngine.lineHeights.data.get(i);
				}
				var advance;
				var offsetY = 0.0;
				var applyHack = new $hx_exports.EReg("(iPad|iPhone|iPod|Firefox)","g").match($hx_exports.js.Browser.get_window().navigator.userAgent);
				var _g2 = 0;
				var _g11 = textEngine.layoutGroups;
				while(_g2 < _g11.data.get_length()) {
					var group = _g11.data.get(_g2);
					++_g2;
					if(group.lineIndex < textField.get_scrollV() - 1) {
						continue;
					}
					if(group.lineIndex > textField.get_scrollV() + textEngine.bottomScrollV - 2) {
						break;
					}
					if(group.format.underline) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#000000";
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = .5;
						var x = group.offsetX + scrollX;
						var y = group.offsetY + offsetY + scrollY + group.ascent;
						openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(x,y);
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(x + group.width,y);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.font = openfl__$internal_text_TextEngine.getFont(group.format);
					var tmp2 = $hx_exports.StringTools.hex(group.format.color & 16777215,6);
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp2;
					if(applyHack) {
						offsetY = group.format.size * 0.185;
					}
					if(textField.__filters != null && textField.__filters.length > 0) {
						if(Std.is(textField.__filters[0],openfl_filters_GlowFilter)) {
							var glowFilter = textField.__filters[0];
							var cacheAlpha = openfl__$internal_renderer_canvas_CanvasTextField.context.globalAlpha;
							var tmp3 = glowFilter.get_alpha();
							openfl__$internal_renderer_canvas_CanvasTextField.context.globalAlpha = cacheAlpha * tmp3;
							var tmp4 = $hx_exports.StringTools.hex(glowFilter.get_color() & 16777215,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp4;
							var tmp5 = glowFilter.get_blurX();
							var tmp6 = glowFilter.get_blurY();
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = $hx_exports.Math.max(tmp5,tmp6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeText($hx_$exports_lime_text_UTF8String.substring(text,group.startIndex,group.endIndex),group.offsetX + scrollX,group.offsetY + offsetY + scrollY);
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = null;
							openfl__$internal_renderer_canvas_CanvasTextField.context.globalAlpha = cacheAlpha;
						}
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillText($hx_$exports_lime_text_UTF8String.substring(text,group.startIndex,group.endIndex),group.offsetX + scrollX,group.offsetY + offsetY + scrollY);
					if(textField.__caretIndex > -1 && textEngine.selectable) {
						if(textField.__selectionIndex == textField.__caretIndex) {
							if(textField.__showCursor && group.startIndex <= textField.__caretIndex && group.endIndex >= textField.__caretIndex) {
								advance = 0.0;
								var _g3 = 0;
								var _g21 = textField.__caretIndex - group.startIndex;
								while(_g3 < _g21) {
									var i1 = _g3++;
									if(group.positions.length <= i1) {
										break;
									}
									advance += group.getAdvance(i1);
								}
								var scrollY1 = 0.0;
								var _g31 = 0;
								var _g22 = textField.get_scrollV() - 1;
								while(_g31 < _g22) {
									var i2 = _g31++;
									scrollY1 -= textEngine.lineHeights.data.get(i2);
								}
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(group.offsetX + advance - textField.get_scrollH(),scrollY1 + 2,1,openfl__$internal_text_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1);
							}
						} else if(group.startIndex <= textField.__caretIndex && group.endIndex >= textField.__caretIndex || group.startIndex <= textField.__selectionIndex && group.endIndex >= textField.__selectionIndex || group.startIndex > textField.__caretIndex && group.endIndex < textField.__selectionIndex || group.startIndex > textField.__selectionIndex && group.endIndex < textField.__caretIndex) {
							var selectionStart = Std.int($hx_exports.Math.min(textField.__selectionIndex,textField.__caretIndex));
							var selectionEnd = Std.int($hx_exports.Math.max(textField.__selectionIndex,textField.__caretIndex));
							if(group.startIndex > selectionStart) {
								selectionStart = group.startIndex;
							}
							if(group.endIndex < selectionEnd) {
								selectionEnd = group.endIndex;
							}
							var end;
							var start = textField.getCharBoundaries(selectionStart);
							if(selectionEnd >= $hx_$exports_lime_text_UTF8String.get_length(textEngine.text)) {
								end = textField.getCharBoundaries($hx_$exports_lime_text_UTF8String.get_length(textEngine.text) - 1);
								end.x += end.width + 2;
							} else {
								end = textField.getCharBoundaries(selectionEnd);
							}
							if(start != null && end != null) {
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#000000";
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(start.x + scrollX,start.y + scrollY,end.x - start.x,group.height);
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#FFFFFF";
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillText($hx_$exports_lime_text_UTF8String.substring(text,selectionStart,selectionEnd),scrollX + start.x,group.offsetY + offsetY + scrollY);
							}
						}
					}
				}
			} else {
				if(textEngine.border || textEngine.background) {
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					} else {
						openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
					}
					if(textEngine.background) {
						var tmp7 = $hx_exports.StringTools.hex(textEngine.backgroundColor & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp7;
						openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap = "square";
						var tmp8 = $hx_exports.StringTools.hex(textEngine.borderColor & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp8;
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
				}
				if(textField.__caretIndex > -1 && textEngine.selectable && textField.__showCursor) {
					var scrollX1 = -textField.get_scrollH();
					var scrollY2 = 0.0;
					var _g12 = 0;
					var _g4 = textField.get_scrollV() - 1;
					while(_g12 < _g4) {
						var i3 = _g12++;
						scrollY2 -= textEngine.lineHeights.data.get(i3);
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
					var tmp9 = $hx_exports.StringTools.hex(textField.get_defaultTextFormat().color & 16777215,6);
					openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp9;
					openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(scrollX1 + 2.5,scrollY2 + 2.5);
					openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
					openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(scrollX1 + 2.5,scrollY2 + openfl__$internal_text_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1);
					openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
				}
			}
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(textField.__graphics.__canvas);
			graphics.__visible = true;
			textField.__dirty = false;
			graphics.set___dirty(false);
		}
	}
};
var openfl__$internal_renderer_canvas_CanvasTilemap = $hx_exports["openfl"]["_internal"]["renderer"]["canvas"]["CanvasTilemap"] = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasTilemap"] = openfl__$internal_renderer_canvas_CanvasTilemap;
openfl__$internal_renderer_canvas_CanvasTilemap.__name__ = ["openfl","_internal","renderer","canvas","CanvasTilemap"];
openfl__$internal_renderer_canvas_CanvasTilemap.render = function(tilemap,renderSession) {
	if(!tilemap.__renderable || tilemap.__worldAlpha <= 0) {
		return;
	}
	tilemap.__updateTileArray();
	if(tilemap.__tileArray == null || tilemap.__tileArray.get_length() == 0) {
		return;
	}
	var context = renderSession.context;
	renderSession.blendModeManager.setBlendMode(tilemap.__worldBlendMode);
	renderSession.maskManager.pushObject(tilemap);
	var rect = openfl_geom_Rectangle.__pool.get();
	rect.setTo(0,0,tilemap.__width,tilemap.__height);
	renderSession.maskManager.pushRect(rect,tilemap.__renderTransform);
	var transform = tilemap.__renderTransform;
	var roundPixels = renderSession.roundPixels;
	if(!renderSession.allowSmoothing || !tilemap.smoothing) {
		context.mozImageSmoothingEnabled = false;
		context.msImageSmoothingEnabled = false;
		context.imageSmoothingEnabled = false;
	}
	var defaultTileset = tilemap.__tileset;
	var cacheBitmapData = null;
	var source = null;
	var alpha;
	var visible;
	var tileset;
	var id;
	var tileData;
	var bitmapData;
	var tileArray = tilemap.__tileArray;
	var tileTransform;
	var tileRect = openfl_geom_Rectangle.__pool.get();
	var tile = tileArray.iterator();
	while(tile.hasNext()) {
		var tile1 = tile.next();
		alpha = tile1.get_alpha();
		visible = tile1.get_visible();
		if(!visible || alpha <= 0) {
			continue;
		}
		tileset = tile1.get_tileset();
		if(tileset == null) {
			tileset = defaultTileset;
		}
		if(tileset == null) {
			continue;
		}
		id = tile1.get_id();
		if(id == -1) {
			tileRect.copyFrom(tile1.get_rect());
			if(tileRect.width <= 0 || tileRect.height <= 0) {
				continue;
			}
		} else {
			tileData = tileset.__data[id];
			if(tileData == null) {
				continue;
			}
			tileRect.setTo(tileData.x,tileData.y,tileData.width,tileData.height);
		}
		bitmapData = tileset.get_bitmapData();
		if(bitmapData == null || !bitmapData.readable) {
			continue;
		}
		if(bitmapData != cacheBitmapData) {
			if(bitmapData.image.buffer.__srcImage == null) {
				$hx_exports.lime.graphics.utils.ImageCanvasUtil.convertToCanvas(bitmapData.image);
			}
			source = bitmapData.image.get_src();
			cacheBitmapData = bitmapData;
		}
		context.globalAlpha = tilemap.__worldAlpha * alpha;
		tileTransform = tile1.get_matrix();
		tileTransform.concat(transform);
		if(roundPixels) {
			context.setTransform(tileTransform.a,tileTransform.b,tileTransform.c,tileTransform.d,Std.int(tileTransform.tx),Std.int(tileTransform.ty));
		} else {
			context.setTransform(tileTransform.a,tileTransform.b,tileTransform.c,tileTransform.d,tileTransform.tx,tileTransform.ty);
		}
		context.drawImage(source,tileRect.x,tileRect.y,tileRect.width,tileRect.height,0,0,tileRect.width,tileRect.height);
	}
	if(!renderSession.allowSmoothing || !tilemap.smoothing) {
		context.mozImageSmoothingEnabled = true;
		context.msImageSmoothingEnabled = true;
		context.imageSmoothingEnabled = true;
	}
	renderSession.maskManager.popRect();
	renderSession.maskManager.popObject(tilemap);
	openfl_geom_Rectangle.__pool.release(rect);
	openfl_geom_Rectangle.__pool.release(tileRect);
};
var openfl__$internal_renderer_canvas_CanvasVideo = $hx_exports["openfl"]["_internal"]["renderer"]["canvas"]["CanvasVideo"] = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasVideo"] = openfl__$internal_renderer_canvas_CanvasVideo;
openfl__$internal_renderer_canvas_CanvasVideo.__name__ = ["openfl","_internal","renderer","canvas","CanvasVideo"];
openfl__$internal_renderer_canvas_CanvasVideo.render = function(video,renderSession) {
	if(!video.__renderable || video.__worldAlpha <= 0 || video.__stream == null) {
		return;
	}
	var context = renderSession.context;
	if(video.__stream.__video != null) {
		renderSession.blendModeManager.setBlendMode(video.__worldBlendMode);
		renderSession.maskManager.pushObject(video);
		context.globalAlpha = video.__worldAlpha;
		var transform = video.__worldTransform;
		var scrollRect = video.__scrollRect;
		var smoothing = video.smoothing;
		if(renderSession.roundPixels) {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,Std.int(transform.tx),Std.int(transform.ty));
		} else {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		}
		if(!smoothing) {
			context.mozImageSmoothingEnabled = false;
			context.msImageSmoothingEnabled = false;
			context.imageSmoothingEnabled = false;
		}
		if(scrollRect == null) {
			context.drawImage(video.__stream.__video,0,0,video.get_width(),video.get_height());
		} else {
			context.drawImage(video.__stream.__video,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
		}
		if(!smoothing) {
			context.mozImageSmoothingEnabled = true;
			context.msImageSmoothingEnabled = true;
			context.imageSmoothingEnabled = true;
		}
		renderSession.maskManager.popObject(video);
	}
};
var openfl__$internal_renderer_console_ConsoleRenderer = $hx_exports["openfl"]["_internal"]["renderer"]["console"]["ConsoleRenderer"] = function(stage,ctx) {
	openfl__$internal_renderer_AbstractRenderer.call(this,stage);
	throw new js__$Boot_HaxeError("ConsoleRenderer not supported");
};
$hxClasses["openfl._internal.renderer.console.ConsoleRenderer"] = openfl__$internal_renderer_console_ConsoleRenderer;
openfl__$internal_renderer_console_ConsoleRenderer.__name__ = ["openfl","_internal","renderer","console","ConsoleRenderer"];
openfl__$internal_renderer_console_ConsoleRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_console_ConsoleRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	render: function() {
	}
	,__class__: openfl__$internal_renderer_console_ConsoleRenderer
});
var openfl__$internal_renderer_dom_DOMBitmap = $hx_exports["openfl"]["_internal"]["renderer"]["dom"]["DOMBitmap"] = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMBitmap"] = openfl__$internal_renderer_dom_DOMBitmap;
openfl__$internal_renderer_dom_DOMBitmap.__name__ = ["openfl","_internal","renderer","dom","DOMBitmap"];
openfl__$internal_renderer_dom_DOMBitmap.clear = function(bitmap,renderSession) {
	if(bitmap.__image != null) {
		renderSession.element.removeChild(bitmap.__image);
		bitmap.__image = null;
		bitmap.__style = null;
	}
	if(bitmap.__canvas != null) {
		renderSession.element.removeChild(bitmap.__canvas);
		bitmap.__canvas = null;
		bitmap.__style = null;
	}
};
openfl__$internal_renderer_dom_DOMBitmap.render = function(bitmap,renderSession) {
	if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
		renderSession.maskManager.pushObject(bitmap);
		if(bitmap.__bitmapData.image.buffer.__srcImage != null) {
			openfl__$internal_renderer_dom_DOMBitmap.renderImage(bitmap,renderSession);
		} else {
			openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(bitmap,renderSession);
		}
		renderSession.maskManager.popObject(bitmap);
	} else {
		openfl__$internal_renderer_dom_DOMBitmap.clear(bitmap,renderSession);
	}
};
openfl__$internal_renderer_dom_DOMBitmap.renderCanvas = function(bitmap,renderSession) {
	if(bitmap.__image != null) {
		renderSession.element.removeChild(bitmap.__image);
		bitmap.__image = null;
	}
	if(bitmap.__canvas == null) {
		bitmap.__canvas = $hx_exports.js.Browser.get_document().createElement("canvas");
		bitmap.__context = bitmap.__canvas.getContext("2d");
		bitmap.__imageVersion = -1;
		if(!renderSession.allowSmoothing || !bitmap.smoothing) {
			bitmap.__context.mozImageSmoothingEnabled = false;
			bitmap.__context.msImageSmoothingEnabled = false;
			bitmap.__context.imageSmoothingEnabled = false;
		}
		openfl__$internal_renderer_dom_DOMRenderer.initializeElement(bitmap,bitmap.__canvas,renderSession);
	}
	if(bitmap.__imageVersion != bitmap.__bitmapData.image.version) {
		$hx_exports.lime.graphics.utils.ImageCanvasUtil.convertToCanvas(bitmap.__bitmapData.image);
		bitmap.__canvas.width = bitmap.__bitmapData.width + 1;
		bitmap.__canvas.width = bitmap.__bitmapData.width;
		bitmap.__canvas.height = bitmap.__bitmapData.height;
		bitmap.__context.drawImage(bitmap.__bitmapData.image.buffer.__srcCanvas,0,0);
		bitmap.__imageVersion = bitmap.__bitmapData.image.version;
	}
	openfl__$internal_renderer_dom_DOMRenderer.updateClip(bitmap,renderSession);
	openfl__$internal_renderer_dom_DOMRenderer.applyStyle(bitmap,renderSession,true,true,true);
};
openfl__$internal_renderer_dom_DOMBitmap.renderImage = function(bitmap,renderSession) {
	if(bitmap.__canvas != null) {
		renderSession.element.removeChild(bitmap.__canvas);
		bitmap.__canvas = null;
	}
	if(bitmap.__image == null) {
		bitmap.__image = $hx_exports.js.Browser.get_document().createElement("img");
		bitmap.__image.crossOrigin = "Anonymous";
		bitmap.__image.src = bitmap.__bitmapData.image.buffer.__srcImage.src;
		openfl__$internal_renderer_dom_DOMRenderer.initializeElement(bitmap,bitmap.__image,renderSession);
	}
	openfl__$internal_renderer_dom_DOMRenderer.updateClip(bitmap,renderSession);
	openfl__$internal_renderer_dom_DOMRenderer.applyStyle(bitmap,renderSession,true,true,true);
};
var openfl__$internal_renderer_dom_DOMBlendModeManager = $hx_exports["openfl"]["_internal"]["renderer"]["dom"]["DOMBlendModeManager"] = function(renderSession) {
	openfl__$internal_renderer_AbstractBlendModeManager.call(this);
	this.renderSession = renderSession;
};
$hxClasses["openfl._internal.renderer.dom.DOMBlendModeManager"] = openfl__$internal_renderer_dom_DOMBlendModeManager;
openfl__$internal_renderer_dom_DOMBlendModeManager.__name__ = ["openfl","_internal","renderer","dom","DOMBlendModeManager"];
openfl__$internal_renderer_dom_DOMBlendModeManager.__super__ = openfl__$internal_renderer_AbstractBlendModeManager;
openfl__$internal_renderer_dom_DOMBlendModeManager.prototype = $extend(openfl__$internal_renderer_AbstractBlendModeManager.prototype,{
	currentBlendMode: null
	,renderSession: null
	,setBlendMode: function(blendMode) {
		if(this.currentBlendMode == blendMode) {
			return;
		}
		this.currentBlendMode = blendMode;
		if(this.renderSession.context != null) {
			switch(blendMode) {
			case 0:
				this.renderSession.context.globalCompositeOperation = "lighter";
				break;
			case 1:
				this.renderSession.context.globalCompositeOperation = "destination-in";
				break;
			case 2:
				this.renderSession.context.globalCompositeOperation = "darken";
				break;
			case 3:
				this.renderSession.context.globalCompositeOperation = "difference";
				break;
			case 4:
				this.renderSession.context.globalCompositeOperation = "destination-out";
				break;
			case 5:
				this.renderSession.context.globalCompositeOperation = "hard-light";
				break;
			case 7:
				this.renderSession.context.globalCompositeOperation = "source-over";
				break;
			case 8:
				this.renderSession.context.globalCompositeOperation = "lighten";
				break;
			case 9:
				this.renderSession.context.globalCompositeOperation = "multiply";
				break;
			case 11:
				this.renderSession.context.globalCompositeOperation = "overlay";
				break;
			case 12:
				this.renderSession.context.globalCompositeOperation = "screen";
				break;
			default:
				this.renderSession.context.globalCompositeOperation = "source-over";
			}
		}
	}
	,__class__: openfl__$internal_renderer_dom_DOMBlendModeManager
});
var openfl__$internal_renderer_dom_DOMDisplayObject = $hx_exports["openfl"]["_internal"]["renderer"]["dom"]["DOMDisplayObject"] = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMDisplayObject"] = openfl__$internal_renderer_dom_DOMDisplayObject;
openfl__$internal_renderer_dom_DOMDisplayObject.__name__ = ["openfl","_internal","renderer","dom","DOMDisplayObject"];
openfl__$internal_renderer_dom_DOMDisplayObject.clear = function(displayObject,renderSession) {
	openfl__$internal_renderer_dom_DOMShape.clear(displayObject,renderSession);
};
openfl__$internal_renderer_dom_DOMDisplayObject.render = function(displayObject,renderSession) {
	var tmp = displayObject.opaqueBackground != null && !displayObject.__cacheBitmapRender && displayObject.get_width() > 0 && displayObject.get_height() > 0;
	openfl__$internal_renderer_dom_DOMShape.render(displayObject,renderSession);
};
var openfl__$internal_renderer_dom_DOMMaskManager = $hx_exports["openfl"]["_internal"]["renderer"]["dom"]["DOMMaskManager"] = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
	this.clipRects = [];
	this.numClipRects = 0;
};
$hxClasses["openfl._internal.renderer.dom.DOMMaskManager"] = openfl__$internal_renderer_dom_DOMMaskManager;
openfl__$internal_renderer_dom_DOMMaskManager.__name__ = ["openfl","_internal","renderer","dom","DOMMaskManager"];
openfl__$internal_renderer_dom_DOMMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_dom_DOMMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	currentClipRect: null
	,clipRects: null
	,numClipRects: null
	,pushMask: function(mask) {
		this.pushRect(mask.getBounds(mask),mask.__getRenderTransform());
	}
	,pushObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.pushRect(object.__scrollRect,object.__renderTransform);
		}
		if(object.__mask != null) {
			this.pushMask(object.__mask);
		}
	}
	,pushRect: function(rect,transform) {
		if(this.numClipRects == this.clipRects.length) {
			this.clipRects[this.numClipRects] = new openfl_geom_Rectangle();
		}
		var clipRect = this.clipRects[this.numClipRects];
		rect.__transform(clipRect,transform);
		if(this.numClipRects > 0) {
			var parentClipRect = this.clipRects[this.numClipRects - 1];
			clipRect.__contract(parentClipRect.x,parentClipRect.y,parentClipRect.width,parentClipRect.height);
		}
		if(clipRect.height < 0) {
			clipRect.height = 0;
		}
		if(clipRect.width < 0) {
			clipRect.width = 0;
		}
		this.currentClipRect = clipRect;
		this.numClipRects++;
	}
	,popMask: function() {
		this.popRect();
	}
	,popObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(object.__mask != null) {
			this.popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.popRect();
		}
	}
	,popRect: function() {
		if(this.numClipRects > 0) {
			this.numClipRects--;
			if(this.numClipRects > 0) {
				this.currentClipRect = this.clipRects[this.numClipRects - 1];
			} else {
				this.currentClipRect = null;
			}
		}
	}
	,updateClip: function(displayObject) {
		if(this.currentClipRect == null) {
			displayObject.__worldClipChanged = displayObject.__worldClip != null;
			displayObject.__worldClip = null;
		} else {
			if(displayObject.__worldClip == null) {
				displayObject.__worldClip = new openfl_geom_Rectangle();
			}
			var clip = openfl_geom_Rectangle.__pool.get();
			var matrix = openfl_geom_Matrix.__pool.get();
			matrix.copyFrom(displayObject.__renderTransform);
			matrix.invert();
			this.currentClipRect.__transform(clip,matrix);
			if(clip.equals(displayObject.__worldClip)) {
				displayObject.__worldClipChanged = false;
			} else {
				displayObject.__worldClip.copyFrom(clip);
				displayObject.__worldClipChanged = true;
			}
			openfl_geom_Rectangle.__pool.release(clip);
			openfl_geom_Matrix.__pool.release(matrix);
		}
	}
	,__class__: openfl__$internal_renderer_dom_DOMMaskManager
});
var openfl__$internal_renderer_dom_DOMRenderer = $hx_exports["openfl"]["_internal"]["renderer"]["dom"]["DOMRenderer"] = function(stage,element) {
	openfl__$internal_renderer_AbstractRenderer.call(this,stage);
};
$hxClasses["openfl._internal.renderer.dom.DOMRenderer"] = openfl__$internal_renderer_dom_DOMRenderer;
openfl__$internal_renderer_dom_DOMRenderer.__name__ = ["openfl","_internal","renderer","dom","DOMRenderer"];
openfl__$internal_renderer_dom_DOMRenderer.applyStyle = function(displayObject,renderSession,setTransform,setAlpha,setClip) {
	var style = displayObject.__style;
	if(setTransform && displayObject.__renderTransformChanged) {
		style.setProperty(renderSession.transformProperty,displayObject.__renderTransform.to3DString(renderSession.roundPixels),null);
	}
	if(displayObject.__worldZ != ++renderSession.z) {
		displayObject.__worldZ = renderSession.z;
		style.setProperty("z-index",displayObject.__worldZ == null ? "null" : "" + displayObject.__worldZ,null);
	}
	if(setAlpha && displayObject.__worldAlphaChanged) {
		if(displayObject.__worldAlpha < 1) {
			style.setProperty("opacity",displayObject.__worldAlpha == null ? "null" : "" + displayObject.__worldAlpha,null);
		} else {
			style.removeProperty("opacity");
		}
	}
	if(setClip && displayObject.__worldClipChanged) {
		if(displayObject.__worldClip == null) {
			style.removeProperty("clip");
		} else {
			var clip = displayObject.__worldClip;
			style.setProperty("clip","rect(" + clip.y + "px, " + clip.get_right() + "px, " + clip.get_bottom() + "px, " + clip.x + "px)",null);
		}
	}
};
openfl__$internal_renderer_dom_DOMRenderer.initializeElement = function(displayObject,element,renderSession) {
	var style = displayObject.__style = element.style;
	style.setProperty("position","absolute",null);
	style.setProperty("top","0",null);
	style.setProperty("left","0",null);
	style.setProperty(renderSession.transformOriginProperty,"0 0 0",null);
	renderSession.element.appendChild(element);
	displayObject.__worldAlphaChanged = true;
	displayObject.__renderTransformChanged = true;
	displayObject.__worldVisibleChanged = true;
	displayObject.__worldClipChanged = true;
	displayObject.__worldClip = null;
	displayObject.__worldZ = -1;
};
openfl__$internal_renderer_dom_DOMRenderer.updateClip = function(displayObject,renderSession) {
	var maskManager = renderSession.maskManager;
	maskManager.updateClip(displayObject);
};
openfl__$internal_renderer_dom_DOMRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_dom_DOMRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	element: null
	,render: function() {
		this.renderSession.allowSmoothing = this.stage.quality != 2;
		if(!this.stage.__transparent) {
			this.element.style.background = this.stage.__colorString;
		} else {
			this.element.style.background = "none";
		}
		this.renderSession.z = 1;
		this.stage.__renderDOM(this.renderSession);
	}
	,renderStage3D: function() {
		var _g = 0;
		var _g1 = this.stage.stage3Ds;
		while(_g < _g1.data.get_length()) {
			var stage3D = _g1.data.get(_g);
			++_g;
			stage3D.__renderDOM(this.stage,this.renderSession);
		}
	}
	,__class__: openfl__$internal_renderer_dom_DOMRenderer
});
var openfl__$internal_renderer_dom_DOMShape = $hx_exports["openfl"]["_internal"]["renderer"]["dom"]["DOMShape"] = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMShape"] = openfl__$internal_renderer_dom_DOMShape;
openfl__$internal_renderer_dom_DOMShape.__name__ = ["openfl","_internal","renderer","dom","DOMShape"];
openfl__$internal_renderer_dom_DOMShape.clear = function(shape,renderSession) {
	if(shape.__canvas != null) {
		renderSession.element.removeChild(shape.__canvas);
		shape.__canvas = null;
		shape.__style = null;
	}
};
openfl__$internal_renderer_dom_DOMShape.render = function(shape,renderSession) {
	var graphics = shape.__graphics;
	if(shape.stage != null && shape.__worldVisible && shape.__renderable && graphics != null) {
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,shape.__renderTransform);
		if(graphics.__dirty || shape.__worldAlphaChanged || shape.__canvas != graphics.__canvas) {
			if(graphics.__canvas != null) {
				if(shape.__canvas != graphics.__canvas) {
					if(shape.__canvas != null) {
						renderSession.element.removeChild(shape.__canvas);
					}
					shape.__canvas = graphics.__canvas;
					shape.__context = graphics.__context;
					openfl__$internal_renderer_dom_DOMRenderer.initializeElement(shape,shape.__canvas,renderSession);
				}
			} else {
				openfl__$internal_renderer_dom_DOMShape.clear(shape,renderSession);
			}
		}
		if(shape.__canvas != null) {
			renderSession.maskManager.pushObject(shape);
			var cacheTransform = shape.__renderTransform;
			shape.__renderTransform = graphics.__worldTransform;
			if(graphics.__transformDirty) {
				graphics.__transformDirty = false;
				shape.__renderTransformChanged = true;
			}
			openfl__$internal_renderer_dom_DOMRenderer.updateClip(shape,renderSession);
			openfl__$internal_renderer_dom_DOMRenderer.applyStyle(shape,renderSession,true,true,true);
			shape.__renderTransform = cacheTransform;
			renderSession.maskManager.popObject(shape);
		}
	} else {
		openfl__$internal_renderer_dom_DOMShape.clear(shape,renderSession);
	}
};
var openfl__$internal_renderer_dom_DOMTextField = $hx_exports["openfl"]["_internal"]["renderer"]["dom"]["DOMTextField"] = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMTextField"] = openfl__$internal_renderer_dom_DOMTextField;
openfl__$internal_renderer_dom_DOMTextField.__name__ = ["openfl","_internal","renderer","dom","DOMTextField"];
openfl__$internal_renderer_dom_DOMTextField.clear = function(textField,renderSession) {
	if(textField.__div != null) {
		renderSession.element.removeChild(textField.__div);
		textField.__div = null;
		textField.__style = null;
	}
};
openfl__$internal_renderer_dom_DOMTextField.measureText = function(textField) {
	var textEngine = textField.__textEngine;
	var div = textField.__div;
	if(div == null) {
		div = $hx_exports.js.Browser.get_document().createElement("div");
		div.innerHTML = new $hx_exports.EReg("\n","g").replace(textEngine.text,"<br>");
		div.style.setProperty("font",openfl__$internal_text_TextEngine.getFont(textField.__textFormat),null);
		div.style.setProperty("pointer-events","none",null);
		div.style.position = "absolute";
		div.style.top = "110%";
		$hx_exports.js.Browser.get_document().body.appendChild(div);
	}
	textEngine.__measuredWidth = div.clientWidth;
	if(textField.__div == null) {
		div.style.width = Std.string(textEngine.width - 4) + "px";
	}
	textEngine.__measuredHeight = div.clientHeight;
	if(textField.__div == null) {
		$hx_exports.js.Browser.get_document().body.removeChild(div);
	}
};
openfl__$internal_renderer_dom_DOMTextField.render = function(textField,renderSession) {
	var textEngine = textField.__textEngine;
	if(textField.stage != null && textField.__worldVisible && textField.__renderable) {
		if(textField.__dirty || textField.__renderTransformChanged || textField.__div == null) {
			if(textEngine.text != "" || textEngine.background || textEngine.border || textEngine.type == 1) {
				if(textField.__div == null) {
					textField.__div = $hx_exports.js.Browser.get_document().createElement("div");
					openfl__$internal_renderer_dom_DOMRenderer.initializeElement(textField,textField.__div,renderSession);
					textField.__style.setProperty("outline","none",null);
					textField.__div.addEventListener("input",function(event) {
						event.preventDefault();
						if(textField.get_htmlText() != textField.__div.innerHTML) {
							textField.set_htmlText(textField.__div.innerHTML);
							var textField1 = textField.__displayAsPassword;
							textField.__dirty = false;
						}
					},true);
				}
				if(!textEngine.wordWrap) {
					textField.__style.setProperty("white-space","nowrap",null);
				} else {
					textField.__style.setProperty("word-wrap","break-word",null);
				}
				textField.__style.setProperty("overflow","hidden",null);
				if(textEngine.selectable) {
					textField.__style.setProperty("cursor","text",null);
					textField.__style.setProperty("-webkit-user-select","text",null);
					textField.__style.setProperty("-moz-user-select","text",null);
					textField.__style.setProperty("-ms-user-select","text",null);
					textField.__style.setProperty("-o-user-select","text",null);
				} else {
					textField.__style.setProperty("cursor","inherit",null);
				}
				textField.__div.contentEditable = textEngine.type == 1;
				var style = textField.__style;
				if(textEngine.background) {
					style.setProperty("background-color","#" + $hx_exports.StringTools.hex(textEngine.backgroundColor & 16777215,6),null);
				} else {
					style.removeProperty("background-color");
				}
				var w = textEngine.width;
				var h = textEngine.height;
				var scale = 1;
				var unscaledSize = textField.__textFormat.size;
				var scaledSize = unscaledSize;
				var t = textField.__renderTransform;
				if(t.a != 1.0 || t.d != 1.0) {
					if(t.a == t.d) {
						scale = t.a;
						t.a = t.d = 1.0;
					} else if(t.a > t.d) {
						scale = t.a;
						t.d /= t.a;
						t.a = 1.0;
					} else {
						scale = t.d;
						t.a /= t.d;
						t.d = 1.0;
					}
					scaledSize *= scale;
					w = $hx_exports.Math.ceil(w * scale);
					h = $hx_exports.Math.ceil(h * scale);
				}
				textField.__textFormat.size = scaledSize;
				var text = textEngine.text;
				var adjustment = 0;
				if(!textField.__isHTML) {
					text = $hx_exports.StringTools.htmlEscape(text);
				} else {
					var matchText = text;
					while(openfl__$internal_renderer_dom_DOMTextField.__regexFont.match(matchText)) {
						var fontText = openfl__$internal_renderer_dom_DOMTextField.__regexFont.matched(0);
						var style1 = "";
						if(openfl__$internal_renderer_dom_DOMTextField.__regexFace.match(fontText)) {
							style1 += "font-family:'" + openfl__$internal_renderer_dom_DOMTextField.__getAttributeMatch(openfl__$internal_renderer_dom_DOMTextField.__regexFace) + "';";
						}
						if(openfl__$internal_renderer_dom_DOMTextField.__regexColor.match(fontText)) {
							style1 += "color:#" + openfl__$internal_renderer_dom_DOMTextField.__getAttributeMatch(openfl__$internal_renderer_dom_DOMTextField.__regexColor) + ";";
						}
						if(openfl__$internal_renderer_dom_DOMTextField.__regexSize.match(fontText)) {
							var sizeAttr = openfl__$internal_renderer_dom_DOMTextField.__getAttributeMatch(openfl__$internal_renderer_dom_DOMTextField.__regexSize);
							var firstChar = $hx_exports.HxOverrides.cca(sizeAttr,0);
							var size;
							adjustment = Std.parseFloat(sizeAttr) * scale;
							if(firstChar == 43 || firstChar == 45) {
								size = scaledSize + adjustment;
							} else {
								size = adjustment;
							}
							style1 += "font-size:" + size + "px;";
						}
						text = $hx_exports.StringTools.replace(text,fontText,"<span style='" + style1 + "'>");
						matchText = openfl__$internal_renderer_dom_DOMTextField.__regexFont.matchedRight();
					}
					text = openfl__$internal_renderer_dom_DOMTextField.__regexCloseFont.replace(text,"</span>");
				}
				text = $hx_exports.StringTools.replace(text,"<p ","<p style='margin-top:0; margin-bottom:0;' ");
				var unscaledLeading = textField.__textFormat.leading;
				textField.__textFormat.leading += Std.int(adjustment);
				textField.__div.innerHTML = new $hx_exports.EReg("\r\n","g").replace(text,"<br>");
				textField.__div.innerHTML = new $hx_exports.EReg("\n","g").replace(textField.__div.innerHTML,"<br>");
				textField.__div.innerHTML = new $hx_exports.EReg("\r","g").replace(textField.__div.innerHTML,"<br>");
				style.setProperty("font",openfl__$internal_text_TextEngine.getFont(textField.__textFormat),null);
				textField.__textFormat.size = unscaledSize;
				textField.__textFormat.leading = unscaledLeading;
				style.setProperty("top","3px",null);
				if(textEngine.border) {
					style.setProperty("border","solid 1px #" + $hx_exports.StringTools.hex(textEngine.borderColor & 16777215,6),null);
					textField.__renderTransform.translate(-1,-1);
					textField.__renderTransformChanged = true;
					textField.__transformDirty = true;
				} else if(style.border != "") {
					style.removeProperty("border");
					textField.__renderTransformChanged = true;
				}
				style.setProperty("color","#" + $hx_exports.StringTools.hex(textField.__textFormat.color & 16777215,6),null);
				style.setProperty("width",w + "px",null);
				style.setProperty("height",h + "px",null);
				var _g = textField.__textFormat.align;
				switch(_g) {
				case 0:
					style.setProperty("text-align","center",null);
					break;
				case 4:
					style.setProperty("text-align","right",null);
					break;
				default:
					style.setProperty("text-align","left",null);
				}
				textField.__dirty = false;
			} else if(textField.__div != null) {
				renderSession.element.removeChild(textField.__div);
				textField.__div = null;
			}
		}
		if(textField.__div != null) {
			var old = renderSession.roundPixels;
			renderSession.roundPixels = true;
			openfl__$internal_renderer_dom_DOMRenderer.updateClip(textField,renderSession);
			openfl__$internal_renderer_dom_DOMRenderer.applyStyle(textField,renderSession,true,true,true);
			renderSession.roundPixels = old;
		}
	} else {
		openfl__$internal_renderer_dom_DOMTextField.clear(textField,renderSession);
	}
};
openfl__$internal_renderer_dom_DOMTextField.__getAttributeMatch = function(regex) {
	if(regex.matched(2) != null) {
		return regex.matched(2);
	} else {
		return regex.matched(3);
	}
};
var openfl__$internal_renderer_dom_DOMTilemap = $hx_exports["openfl"]["_internal"]["renderer"]["dom"]["DOMTilemap"] = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMTilemap"] = openfl__$internal_renderer_dom_DOMTilemap;
openfl__$internal_renderer_dom_DOMTilemap.__name__ = ["openfl","_internal","renderer","dom","DOMTilemap"];
openfl__$internal_renderer_dom_DOMTilemap.clear = function(tilemap,renderSession) {
	if(tilemap.__canvas != null) {
		renderSession.element.removeChild(tilemap.__canvas);
		tilemap.__canvas = null;
		tilemap.__style = null;
	}
};
openfl__$internal_renderer_dom_DOMTilemap.render = function(tilemap,renderSession) {
	if(tilemap.stage != null && tilemap.__worldVisible && tilemap.__renderable && tilemap.__tiles.data.get_length() > 0) {
		if(tilemap.__canvas == null) {
			tilemap.__canvas = $hx_exports.js.Browser.get_document().createElement("canvas");
			tilemap.__context = tilemap.__canvas.getContext("2d");
			openfl__$internal_renderer_dom_DOMRenderer.initializeElement(tilemap,tilemap.__canvas,renderSession);
		}
		tilemap.__canvas.width = tilemap.__width;
		tilemap.__canvas.height = tilemap.__height;
		tilemap.__context.globalAlpha = tilemap.__worldAlpha;
		renderSession.context = tilemap.__context;
		openfl__$internal_renderer_canvas_CanvasTilemap.render(tilemap,renderSession);
		renderSession.context = null;
		openfl__$internal_renderer_dom_DOMRenderer.updateClip(tilemap,renderSession);
		openfl__$internal_renderer_dom_DOMRenderer.applyStyle(tilemap,renderSession,true,false,true);
	} else {
		openfl__$internal_renderer_dom_DOMTilemap.clear(tilemap,renderSession);
	}
};
var openfl__$internal_renderer_dom_DOMVideo = $hx_exports["openfl"]["_internal"]["renderer"]["dom"]["DOMVideo"] = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMVideo"] = openfl__$internal_renderer_dom_DOMVideo;
openfl__$internal_renderer_dom_DOMVideo.__name__ = ["openfl","_internal","renderer","dom","DOMVideo"];
openfl__$internal_renderer_dom_DOMVideo.clear = function(video,renderSession) {
	if(video.__active) {
		renderSession.element.removeChild(video.__stream.__video);
		video.__active = false;
	}
};
openfl__$internal_renderer_dom_DOMVideo.render = function(video,renderSession) {
	if(video.stage != null && video.__stream != null && video.__worldVisible && video.__renderable) {
		if(!video.__active) {
			openfl__$internal_renderer_dom_DOMRenderer.initializeElement(video,video.__stream.__video,renderSession);
			video.__active = true;
			video.__dirty = true;
		}
		if(video.__dirty) {
			video.__stream.__video.width = Std.int(video.__width);
			video.__stream.__video.height = Std.int(video.__height);
			video.__dirty = false;
		}
		openfl__$internal_renderer_dom_DOMRenderer.updateClip(video,renderSession);
		openfl__$internal_renderer_dom_DOMRenderer.applyStyle(video,renderSession,true,true,true);
	} else {
		openfl__$internal_renderer_dom_DOMVideo.clear(video,renderSession);
	}
};
var openfl__$internal_renderer_flash_FlashRenderer = $hx_exports["openfl"]["_internal"]["renderer"]["flash"]["FlashRenderer"] = function() { };
$hxClasses["openfl._internal.renderer.flash.FlashRenderer"] = openfl__$internal_renderer_flash_FlashRenderer;
openfl__$internal_renderer_flash_FlashRenderer.__name__ = ["openfl","_internal","renderer","flash","FlashRenderer"];
openfl__$internal_renderer_flash_FlashRenderer.instances = null;
openfl__$internal_renderer_flash_FlashRenderer.register = function(renderObject) {
	if(openfl__$internal_renderer_flash_FlashRenderer.instances == null) {
		openfl__$internal_renderer_flash_FlashRenderer.instances = openfl_utils__$Dictionary_Dictionary_$Impl_$.toObjectMap(null,true);
		openfl_Lib.get_current().stage.addEventListener("enterFrame",openfl__$internal_renderer_flash_FlashRenderer.render,false,-2147483648);
	}
	openfl__$internal_renderer_flash_FlashRenderer.instances.set(renderObject,true);
};
openfl__$internal_renderer_flash_FlashRenderer.render = function(_) {
	var instance = openfl__$internal_renderer_flash_FlashRenderer.instances.keys();
	while(instance.hasNext()) {
		var instance1 = instance.next();
		instance1.__renderFlash();
	}
};
var openfl__$internal_renderer_flash_IDisplayObject = function() { };
$hxClasses["openfl._internal.renderer.flash.IDisplayObject"] = openfl__$internal_renderer_flash_IDisplayObject;
openfl__$internal_renderer_flash_IDisplayObject.__name__ = ["openfl","_internal","renderer","flash","IDisplayObject"];
openfl__$internal_renderer_flash_IDisplayObject.prototype = {
	__renderFlash: null
	,__class__: openfl__$internal_renderer_flash_IDisplayObject
};
var openfl_geom_ColorTransform = $hx_exports["openfl"]["geom"]["ColorTransform"] = function(redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset) {
	if(alphaOffset == null) {
		alphaOffset = 0;
	}
	if(blueOffset == null) {
		blueOffset = 0;
	}
	if(greenOffset == null) {
		greenOffset = 0;
	}
	if(redOffset == null) {
		redOffset = 0;
	}
	if(alphaMultiplier == null) {
		alphaMultiplier = 1;
	}
	if(blueMultiplier == null) {
		blueMultiplier = 1;
	}
	if(greenMultiplier == null) {
		greenMultiplier = 1;
	}
	if(redMultiplier == null) {
		redMultiplier = 1;
	}
	this.redMultiplier = redMultiplier;
	this.greenMultiplier = greenMultiplier;
	this.blueMultiplier = blueMultiplier;
	this.alphaMultiplier = alphaMultiplier;
	this.redOffset = redOffset;
	this.greenOffset = greenOffset;
	this.blueOffset = blueOffset;
	this.alphaOffset = alphaOffset;
};
$hxClasses["openfl.geom.ColorTransform"] = openfl_geom_ColorTransform;
openfl_geom_ColorTransform.__name__ = ["openfl","geom","ColorTransform"];
openfl_geom_ColorTransform.__limeColorMatrix = null;
openfl_geom_ColorTransform.prototype = {
	alphaMultiplier: null
	,alphaOffset: null
	,blueMultiplier: null
	,blueOffset: null
	,greenMultiplier: null
	,greenOffset: null
	,redMultiplier: null
	,redOffset: null
	,concat: function(second) {
		this.redMultiplier *= second.redMultiplier;
		this.greenMultiplier *= second.greenMultiplier;
		this.blueMultiplier *= second.blueMultiplier;
		this.alphaMultiplier *= second.alphaMultiplier;
		this.redOffset = second.redMultiplier * this.redOffset + second.redOffset;
		this.greenOffset = second.greenMultiplier * this.greenOffset + second.greenOffset;
		this.blueOffset = second.blueMultiplier * this.blueOffset + second.blueOffset;
		this.alphaOffset = second.alphaMultiplier * this.alphaOffset + second.alphaOffset;
	}
	,toString: function() {
		return "(redMultiplier=" + this.redMultiplier + ", greenMultiplier=" + this.greenMultiplier + ", blueMultiplier=" + this.blueMultiplier + ", alphaMultiplier=" + this.alphaMultiplier + ", redOffset=" + this.redOffset + ", greenOffset=" + this.greenOffset + ", blueOffset=" + this.blueOffset + ", alphaOffset=" + this.alphaOffset + ")";
	}
	,__clone: function() {
		return new openfl_geom_ColorTransform(this.redMultiplier,this.greenMultiplier,this.blueMultiplier,this.alphaMultiplier,this.redOffset,this.greenOffset,this.blueOffset,this.alphaOffset);
	}
	,__copyFrom: function(ct) {
		this.redMultiplier = ct.redMultiplier;
		this.greenMultiplier = ct.greenMultiplier;
		this.blueMultiplier = ct.blueMultiplier;
		this.alphaMultiplier = ct.alphaMultiplier;
		this.redOffset = ct.redOffset;
		this.greenOffset = ct.greenOffset;
		this.blueOffset = ct.blueOffset;
		this.alphaOffset = ct.alphaOffset;
	}
	,__combine: function(ct) {
		this.redMultiplier *= ct.redMultiplier;
		this.greenMultiplier *= ct.greenMultiplier;
		this.blueMultiplier *= ct.blueMultiplier;
		this.alphaMultiplier *= ct.alphaMultiplier;
		this.redOffset += ct.redOffset;
		this.greenOffset += ct.greenOffset;
		this.blueOffset += ct.blueOffset;
		this.alphaOffset += ct.alphaOffset;
	}
	,__identity: function() {
		this.redMultiplier = 1;
		this.greenMultiplier = 1;
		this.blueMultiplier = 1;
		this.alphaMultiplier = 1;
		this.redOffset = 0;
		this.greenOffset = 0;
		this.blueOffset = 0;
		this.alphaOffset = 0;
	}
	,__equals: function(ct,skipAlphaMultiplier) {
		if(skipAlphaMultiplier == null) {
			skipAlphaMultiplier = false;
		}
		if(ct != null && this.redMultiplier == ct.redMultiplier && this.greenMultiplier == ct.greenMultiplier && this.blueMultiplier == ct.blueMultiplier && (skipAlphaMultiplier || this.alphaMultiplier == ct.alphaMultiplier) && this.redOffset == ct.redOffset && this.greenOffset == ct.greenOffset && this.blueOffset == ct.blueOffset) {
			return this.alphaOffset == ct.alphaOffset;
		} else {
			return false;
		}
	}
	,__isDefault: function() {
		if(this.redMultiplier == 1 && this.greenMultiplier == 1 && this.blueMultiplier == 1 && this.alphaMultiplier == 1 && this.redOffset == 0 && this.greenOffset == 0 && this.blueOffset == 0) {
			return this.alphaOffset == 0;
		} else {
			return false;
		}
	}
	,get_color: function() {
		return Std.int(this.redOffset) << 16 | Std.int(this.greenOffset) << 8 | Std.int(this.blueOffset);
	}
	,set_color: function(value) {
		this.redOffset = value >> 16 & 255;
		this.greenOffset = value >> 8 & 255;
		this.blueOffset = value & 255;
		this.redMultiplier = 0;
		this.greenMultiplier = 0;
		this.blueMultiplier = 0;
		return this.get_color();
	}
	,__toLimeColorMatrix: function() {
		if(openfl_geom_ColorTransform.__limeColorMatrix == null) {
			var this1 = new Float32Array(20);
			openfl_geom_ColorTransform.__limeColorMatrix = this1;
		}
		openfl_geom_ColorTransform.__limeColorMatrix[0] = this.redMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[4] = this.redOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[6] = this.greenMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[9] = this.greenOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[12] = this.blueMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[14] = this.blueOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[18] = this.alphaMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[19] = this.alphaOffset / 255;
		return openfl_geom_ColorTransform.__limeColorMatrix;
	}
	,__class__: openfl_geom_ColorTransform
	,__properties__: {set_color:"set_color",get_color:"get_color"}
};
var openfl_geom_Point = $hx_exports["openfl"]["geom"]["Point"] = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["openfl.geom.Point"] = openfl_geom_Point;
openfl_geom_Point.__name__ = ["openfl","geom","Point"];
openfl_geom_Point.__limeVector2 = null;
openfl_geom_Point.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return $hx_exports.Math.sqrt(dx * dx + dy * dy);
};
openfl_geom_Point.interpolate = function(pt1,pt2,f) {
	return new openfl_geom_Point(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
openfl_geom_Point.polar = function(len,angle) {
	return new openfl_geom_Point(len * $hx_exports.Math.cos(angle),len * $hx_exports.Math.sin(angle));
};
openfl_geom_Point.prototype = {
	x: null
	,y: null
	,add: function(v) {
		return new openfl_geom_Point(v.x + this.x,v.y + this.y);
	}
	,clone: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,copyFrom: function(sourcePoint) {
		this.x = sourcePoint.x;
		this.y = sourcePoint.y;
	}
	,equals: function(toCompare) {
		if(toCompare != null && toCompare.x == this.x) {
			return toCompare.y == this.y;
		} else {
			return false;
		}
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) {
			return;
		} else {
			var norm = thickness / $hx_exports.Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v) {
		return new openfl_geom_Point(this.x - v.x,this.y - v.y);
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ")";
	}
	,__toLimeVector2: function() {
		if(openfl_geom_Point.__limeVector2 == null) {
			openfl_geom_Point.__limeVector2 = new $hx_exports.lime.math.Vector2();
		}
		openfl_geom_Point.__limeVector2.setTo(this.x,this.y);
		return openfl_geom_Point.__limeVector2;
	}
	,get_length: function() {
		return $hx_exports.Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: openfl_geom_Point
	,__properties__: {get_length:"get_length"}
};
var openfl_geom_Rectangle = $hx_exports["openfl"]["geom"]["Rectangle"] = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["openfl.geom.Rectangle"] = openfl_geom_Rectangle;
openfl_geom_Rectangle.__name__ = ["openfl","geom","Rectangle"];
openfl_geom_Rectangle.__limeRectangle = null;
openfl_geom_Rectangle.prototype = {
	height: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		return new openfl_geom_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		if(x >= this.x && y >= this.y && x < this.get_right()) {
			return y < this.get_bottom();
		} else {
			return false;
		}
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) {
			if(rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right()) {
				return rect.get_bottom() < this.get_bottom();
			} else {
				return false;
			}
		} else if(rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right()) {
			return rect.get_bottom() <= this.get_bottom();
		} else {
			return false;
		}
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		if(toCompare == this) {
			return true;
		} else if(toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width) {
			return this.height == toCompare.height;
		} else {
			return false;
		}
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,intersection: function(toIntersect) {
		var x0 = this.x < toIntersect.x ? toIntersect.x : this.x;
		var x1 = this.get_right() > toIntersect.get_right() ? toIntersect.get_right() : this.get_right();
		if(x1 <= x0) {
			return new openfl_geom_Rectangle();
		}
		var y0 = this.y < toIntersect.y ? toIntersect.y : this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom() ? toIntersect.get_bottom() : this.get_bottom();
		if(y1 <= y0) {
			return new openfl_geom_Rectangle();
		}
		return new openfl_geom_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,intersects: function(toIntersect) {
		var x0 = this.x < toIntersect.x ? toIntersect.x : this.x;
		var x1 = this.get_right() > toIntersect.get_right() ? toIntersect.get_right() : this.get_right();
		if(x1 <= x0) {
			return false;
		}
		var y0 = this.y < toIntersect.y ? toIntersect.y : this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom() ? toIntersect.get_bottom() : this.get_bottom();
		return y1 > y0;
	}
	,isEmpty: function() {
		if(!(this.width <= 0)) {
			return this.height <= 0;
		} else {
			return true;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ", width=" + this.width + ", height=" + this.height + ")";
	}
	,union: function(toUnion) {
		if(this.width == 0 || this.height == 0) {
			return toUnion.clone();
		} else if(toUnion.width == 0 || toUnion.height == 0) {
			return this.clone();
		}
		var x0 = this.x > toUnion.x ? toUnion.x : this.x;
		var x1 = this.get_right() < toUnion.get_right() ? toUnion.get_right() : this.get_right();
		var y0 = this.y > toUnion.y ? toUnion.y : this.y;
		var y1 = this.get_bottom() < toUnion.get_bottom() ? toUnion.get_bottom() : this.get_bottom();
		return new openfl_geom_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			return;
		}
		var offsetX = 0.0;
		var offsetY = 0.0;
		var offsetRight = 0.0;
		var offsetBottom = 0.0;
		if(this.x < x) {
			offsetX = x - this.x;
		}
		if(this.y < y) {
			offsetY = y - this.y;
		}
		if(this.get_right() > x + width) {
			offsetRight = x + width - this.get_right();
		}
		if(this.get_bottom() > y + height) {
			offsetBottom = y + height - this.get_bottom();
		}
		this.x += offsetX;
		this.y += offsetY;
		this.width += offsetRight - offsetX;
		this.height += offsetBottom - offsetY;
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) {
			this.x = x;
			this.width = cacheRight - x;
		}
		if(this.y > y) {
			this.y = y;
			this.height = cacheBottom - y;
		}
		if(cacheRight < x + width) {
			this.width = x + width - this.x;
		}
		if(cacheBottom < y + height) {
			this.height = y + height - this.y;
		}
	}
	,__toLimeRectangle: function() {
		if(openfl_geom_Rectangle.__limeRectangle == null) {
			openfl_geom_Rectangle.__limeRectangle = new $hx_exports.lime.math.Rectangle();
		}
		openfl_geom_Rectangle.__limeRectangle.setTo(this.x,this.y,this.width,this.height);
		return openfl_geom_Rectangle.__limeRectangle;
	}
	,__transform: function(rect,m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = ty0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		rect.setTo(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new openfl_geom_Point(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new openfl_geom_Point(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: openfl_geom_Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
var openfl__$internal_renderer_flash_FlashTilemap = $hx_exports["openfl"]["_internal"]["renderer"]["flash"]["FlashTilemap"] = function() { };
$hxClasses["openfl._internal.renderer.flash.FlashTilemap"] = openfl__$internal_renderer_flash_FlashTilemap;
openfl__$internal_renderer_flash_FlashTilemap.__name__ = ["openfl","_internal","renderer","flash","FlashTilemap"];
openfl__$internal_renderer_flash_FlashTilemap.render = function(tilemap) {
};
var openfl__$internal_renderer_opengl_GLBitmap = $hx_exports["openfl"]["_internal"]["renderer"]["opengl"]["GLBitmap"] = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLBitmap"] = openfl__$internal_renderer_opengl_GLBitmap;
openfl__$internal_renderer_opengl_GLBitmap.__name__ = ["openfl","_internal","renderer","opengl","GLBitmap"];
openfl__$internal_renderer_opengl_GLBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) {
		return;
	}
	if(bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid) {
		var renderer = renderSession.renderer;
		var gl = renderSession.gl;
		renderSession.blendModeManager.setBlendMode(bitmap.__worldBlendMode);
		renderSession.maskManager.pushObject(bitmap);
		renderSession.filterManager.pushObject(bitmap);
		var shader = renderSession.shaderManager.initShader(bitmap.shader);
		renderSession.shaderManager.setShader(shader);
		shader.get_data().uImage0.input = bitmap.__bitmapData;
		var tmp = renderSession.allowSmoothing && (bitmap.smoothing || renderSession.upscaled);
		shader.get_data().uImage0.smoothing = tmp;
		shader.get_data().uMatrix.value = renderer.getMatrix(bitmap.__renderTransform);
		var useColorTransform = !bitmap.__worldColorTransform.__isDefault();
		if(shader.get_data().uColorTransform.value == null) {
			shader.get_data().uColorTransform.value = [];
		}
		shader.get_data().uColorTransform.value[0] = useColorTransform;
		renderSession.shaderManager.updateShader(shader);
		gl.bindBuffer(gl.ARRAY_BUFFER,bitmap.__bitmapData.getBuffer(gl,bitmap.__worldAlpha,bitmap.__worldColorTransform));
		gl.vertexAttribPointer(shader.get_data().aPosition.index,3,gl.FLOAT,false,104,$hx_$exports_lime_utils_DataPointer.fromInt(0));
		gl.vertexAttribPointer(shader.get_data().aTexCoord.index,2,gl.FLOAT,false,104,$hx_$exports_lime_utils_DataPointer.fromInt(12));
		gl.vertexAttribPointer(shader.get_data().aAlpha.index,1,gl.FLOAT,false,104,$hx_$exports_lime_utils_DataPointer.fromInt(20));
		gl.vertexAttribPointer(shader.get_data().aColorMultipliers.index,4,gl.FLOAT,false,104,$hx_$exports_lime_utils_DataPointer.fromInt(24));
		gl.vertexAttribPointer(shader.get_data().aColorMultipliers.index + 1,4,gl.FLOAT,false,104,$hx_$exports_lime_utils_DataPointer.fromInt(40));
		gl.vertexAttribPointer(shader.get_data().aColorMultipliers.index + 2,4,gl.FLOAT,false,104,$hx_$exports_lime_utils_DataPointer.fromInt(56));
		gl.vertexAttribPointer(shader.get_data().aColorMultipliers.index + 3,4,gl.FLOAT,false,104,$hx_$exports_lime_utils_DataPointer.fromInt(72));
		gl.vertexAttribPointer(shader.get_data().aColorOffsets.index,4,gl.FLOAT,false,104,$hx_$exports_lime_utils_DataPointer.fromInt(88));
		gl.drawArrays(gl.TRIANGLE_STRIP,0,4);
		renderSession.filterManager.popObject(bitmap);
		renderSession.maskManager.popObject(bitmap);
	}
};
openfl__$internal_renderer_opengl_GLBitmap.renderMask = function(bitmap,renderSession) {
	if(bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid) {
		var renderer = renderSession.renderer;
		var gl = renderSession.gl;
		var shader = openfl__$internal_renderer_opengl_GLMaskManager.maskShader;
		renderSession.shaderManager.setShader(shader);
		shader.get_data().uImage0.input = bitmap.__bitmapData;
		var tmp = renderSession.allowSmoothing && (bitmap.smoothing || renderSession.upscaled);
		shader.get_data().uImage0.smoothing = tmp;
		shader.get_data().uMatrix.value = renderer.getMatrix(bitmap.__renderTransform);
		renderSession.shaderManager.updateShader(shader);
		gl.bindBuffer(gl.ARRAY_BUFFER,bitmap.__bitmapData.getBuffer(gl,bitmap.__worldAlpha,bitmap.__worldColorTransform));
		gl.vertexAttribPointer(shader.get_data().aPosition.index,3,gl.FLOAT,false,104,$hx_$exports_lime_utils_DataPointer.fromInt(0));
		gl.vertexAttribPointer(shader.get_data().aTexCoord.index,2,gl.FLOAT,false,104,$hx_$exports_lime_utils_DataPointer.fromInt(12));
		gl.drawArrays(gl.TRIANGLE_STRIP,0,4);
	}
};
var openfl__$internal_renderer_opengl_GLBlendModeManager = $hx_exports["openfl"]["_internal"]["renderer"]["opengl"]["GLBlendModeManager"] = function(gl) {
	openfl__$internal_renderer_AbstractBlendModeManager.call(this);
	this.gl = gl;
	this.setBlendMode(10);
	gl.enable(gl.BLEND);
};
$hxClasses["openfl._internal.renderer.opengl.GLBlendModeManager"] = openfl__$internal_renderer_opengl_GLBlendModeManager;
openfl__$internal_renderer_opengl_GLBlendModeManager.__name__ = ["openfl","_internal","renderer","opengl","GLBlendModeManager"];
openfl__$internal_renderer_opengl_GLBlendModeManager.__super__ = openfl__$internal_renderer_AbstractBlendModeManager;
openfl__$internal_renderer_opengl_GLBlendModeManager.prototype = $extend(openfl__$internal_renderer_AbstractBlendModeManager.prototype,{
	currentBlendMode: null
	,gl: null
	,setBlendMode: function(blendMode) {
		if(this.currentBlendMode == blendMode) {
			return;
		}
		this.currentBlendMode = blendMode;
		switch(blendMode) {
		case 0:
			this.gl.blendEquation(this.gl.FUNC_ADD);
			this.gl.blendFunc(this.gl.ONE,this.gl.ONE);
			break;
		case 9:
			this.gl.blendEquation(this.gl.FUNC_ADD);
			this.gl.blendFunc(this.gl.DST_COLOR,this.gl.ONE_MINUS_SRC_ALPHA);
			break;
		case 12:
			this.gl.blendEquation(this.gl.FUNC_ADD);
			this.gl.blendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_COLOR);
			break;
		case 14:
			this.gl.blendEquation(this.gl.FUNC_REVERSE_SUBTRACT);
			this.gl.blendFunc(this.gl.ONE,this.gl.ONE);
			break;
		default:
			this.gl.blendEquation(this.gl.FUNC_ADD);
			this.gl.blendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA);
		}
	}
	,__class__: openfl__$internal_renderer_opengl_GLBlendModeManager
});
var openfl__$internal_renderer_opengl_GLDisplayObject = $hx_exports["openfl"]["_internal"]["renderer"]["opengl"]["GLDisplayObject"] = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLDisplayObject"] = openfl__$internal_renderer_opengl_GLDisplayObject;
openfl__$internal_renderer_opengl_GLDisplayObject.__name__ = ["openfl","_internal","renderer","opengl","GLDisplayObject"];
openfl__$internal_renderer_opengl_GLDisplayObject.render = function(displayObject,renderSession) {
	if(displayObject.opaqueBackground == null && displayObject.__graphics == null) {
		return;
	}
	if(!displayObject.__renderable || displayObject.__worldAlpha <= 0) {
		return;
	}
	if(displayObject.opaqueBackground != null && !displayObject.__cacheBitmapRender && displayObject.get_width() > 0 && displayObject.get_height() > 0) {
		renderSession.blendModeManager.setBlendMode(displayObject.__worldBlendMode);
		renderSession.maskManager.pushObject(displayObject);
		var gl = renderSession.gl;
		var rect = openfl_geom_Rectangle.__pool.get();
		rect.setTo(0,0,displayObject.get_width(),displayObject.get_height());
		renderSession.maskManager.pushRect(rect,displayObject.__renderTransform);
		var color = displayObject.opaqueBackground;
		gl.clearColor((color >>> 16 & 255) / 255,(color >>> 8 & 255) / 255,(color & 255) / 255,1);
		gl.clear(gl.COLOR_BUFFER_BIT);
		renderSession.maskManager.popRect();
		renderSession.maskManager.popObject(displayObject);
		openfl_geom_Rectangle.__pool.release(rect);
	}
	if(displayObject.__graphics != null) {
		openfl__$internal_renderer_opengl_GLShape.render(displayObject,renderSession);
	}
};
openfl__$internal_renderer_opengl_GLDisplayObject.renderMask = function(displayObject,renderSession) {
	if(displayObject.opaqueBackground == null && displayObject.__graphics == null) {
		return;
	}
	if(displayObject.opaqueBackground != null && !displayObject.__cacheBitmapRender && displayObject.get_width() > 0 && displayObject.get_height() > 0) {
		var gl = renderSession.gl;
	}
	if(displayObject.__graphics != null) {
		openfl__$internal_renderer_opengl_GLShape.renderMask(displayObject,renderSession);
	}
};
var openfl__$internal_renderer_opengl_GLFilterManager = $hx_exports["openfl"]["_internal"]["renderer"]["opengl"]["GLFilterManager"] = function(renderer,renderSession) {
	openfl__$internal_renderer_AbstractFilterManager.call(this,renderSession);
	this.renderer = renderer;
	this.gl = renderSession.gl;
	this.filterDepth = 0;
	this.matrix = new openfl_geom_Matrix();
};
$hxClasses["openfl._internal.renderer.opengl.GLFilterManager"] = openfl__$internal_renderer_opengl_GLFilterManager;
openfl__$internal_renderer_opengl_GLFilterManager.__name__ = ["openfl","_internal","renderer","opengl","GLFilterManager"];
openfl__$internal_renderer_opengl_GLFilterManager.__super__ = openfl__$internal_renderer_AbstractFilterManager;
openfl__$internal_renderer_opengl_GLFilterManager.prototype = $extend(openfl__$internal_renderer_AbstractFilterManager.prototype,{
	filterDepth: null
	,gl: null
	,matrix: null
	,renderer: null
	,pushObject: function(object) {
		return this.renderSession.shaderManager.defaultShader;
	}
	,popObject: function(object) {
		return;
	}
	,renderPass: function(target,shader) {
		if(target == null || shader == null) {
			return;
		}
		shader.get_data().uImage0.input = target;
		var tmp = this.renderSession.allowSmoothing && this.renderSession.upscaled;
		shader.get_data().uImage0.smoothing = tmp;
		shader.get_data().uMatrix.value = this.renderer.getMatrix(this.matrix);
		if(shader.get_data().uColorTransform != null) {
			if(shader.get_data().uColorTransform.value == null) {
				shader.get_data().uColorTransform.value = [];
			}
			shader.get_data().uColorTransform.value[0] = false;
		}
		this.renderSession.shaderManager.setShader(shader);
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,target.getBuffer(this.gl,1,null));
		this.gl.vertexAttribPointer(shader.get_data().aPosition.index,3,this.gl.FLOAT,false,104,$hx_$exports_lime_utils_DataPointer.fromInt(0));
		this.gl.vertexAttribPointer(shader.get_data().aTexCoord.index,2,this.gl.FLOAT,false,104,$hx_$exports_lime_utils_DataPointer.fromInt(12));
		this.gl.vertexAttribPointer(shader.get_data().aAlpha.index,1,this.gl.FLOAT,false,104,$hx_$exports_lime_utils_DataPointer.fromInt(20));
		this.gl.drawArrays(this.gl.TRIANGLE_STRIP,0,4);
	}
	,__class__: openfl__$internal_renderer_opengl_GLFilterManager
});
var openfl_display_Shader = $hx_exports["openfl"]["display"]["Shader"] = function(code) {
	this.__data = new openfl_display_ShaderData(null);
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying float vAlpha;\n\t\tvarying mat4 vColorMultipliers;\n\t\tvarying vec4 vColorOffsets;\n\t\tvarying vec2 vTexCoord;\n\t\t\n\t\tuniform bool uColorTransform;\n\t\tuniform sampler2D uImage0;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 color = texture2D (uImage0, vTexCoord);\n\t\t\t\n\t\t\tif (color.a == 0.0) {\n\t\t\t\t\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\t\t\t\t\n\t\t\t} else if (uColorTransform) {\n\t\t\t\t\n\t\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\t\t\t\tcolor = vColorOffsets + (color * vColorMultipliers);\n\t\t\t\t\n\t\t\t\tif (color.a > 0.0) {\n\t\t\t\t\t\n\t\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a * vAlpha, color.a * vAlpha);\n\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\t\n\t\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tgl_FragColor = color * vAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute float aAlpha;\n\t\tattribute mat4 aColorMultipliers;\n\t\tattribute vec4 aColorOffsets;\n\t\tattribute vec4 aPosition;\n\t\tattribute vec2 aTexCoord;\n\t\tvarying float vAlpha;\n\t\tvarying mat4 vColorMultipliers;\n\t\tvarying vec4 vColorOffsets;\n\t\tvarying vec2 vTexCoord;\n\t\t\n\t\tuniform mat4 uMatrix;\n\t\tuniform bool uColorTransform;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvAlpha = aAlpha;\n\t\t\tvTexCoord = aTexCoord;\n\t\t\t\n\t\t\tif (uColorTransform) {\n\t\t\t\t\n\t\t\t\tvColorMultipliers = aColorMultipliers;\n\t\t\t\tvColorOffsets = aColorOffsets;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tgl_Position = uMatrix * aPosition;\n\t\t\t\n\t\t}";
	}
	this.byteCode = code;
	this.precisionHint = 1;
	this.__glSourceDirty = true;
	this.__numPasses = 1;
};
$hxClasses["openfl.display.Shader"] = openfl_display_Shader;
openfl_display_Shader.__name__ = ["openfl","display","Shader"];
openfl_display_Shader.prototype = {
	byteCode: null
	,glProgram: null
	,precisionHint: null
	,gl: null
	,__data: null
	,__glFragmentSource: null
	,__glSourceDirty: null
	,__glVertexSource: null
	,__isUniform: null
	,__inputBitmapData: null
	,__numPasses: null
	,__paramBool: null
	,__paramFloat: null
	,__paramInt: null
	,__uniformMatrix2: null
	,__uniformMatrix3: null
	,__uniformMatrix4: null
	,__disable: function() {
		if(this.glProgram != null) {
			this.__disableGL();
		}
	}
	,__disableGL: function() {
		if(this.get_data().uImage0 != null) {
			this.get_data().uImage0.input = null;
		}
		var _g = 0;
		var _g1 = this.__paramBool;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			this.gl.disableVertexAttribArray(parameter.index);
		}
		var _g2 = 0;
		var _g11 = this.__paramFloat;
		while(_g2 < _g11.length) {
			var parameter1 = _g11[_g2];
			++_g2;
			this.gl.disableVertexAttribArray(parameter1.index);
		}
		var _g3 = 0;
		var _g12 = this.__paramInt;
		while(_g3 < _g12.length) {
			var parameter2 = _g12[_g3];
			++_g3;
			this.gl.disableVertexAttribArray(parameter2.index);
		}
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,null);
		this.gl.bindTexture(this.gl.TEXTURE_2D,null);
		if(this.gl.type == lime_graphics_opengl_GLContextType.OPENGL) {
			this.gl.disable(this.gl.TEXTURE_2D);
		}
	}
	,__enable: function() {
		this.__init();
		if(this.glProgram != null) {
			this.__enableGL();
		}
	}
	,__enableGL: function() {
		var textureCount = 0;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			this.gl.uniform1i(input.index,textureCount);
			++textureCount;
		}
		if(this.gl.type == lime_graphics_opengl_GLContextType.OPENGL && textureCount > 0) {
			this.gl.enable(this.gl.TEXTURE_2D);
		}
	}
	,__init: function() {
		if(this.__data == null) {
			this.__data = new openfl_display_ShaderData(null);
		}
		if(this.__glFragmentSource != null && this.__glVertexSource != null && (this.glProgram == null || this.__glSourceDirty)) {
			this.__initGL();
		}
	}
	,__initGL: function() {
		if(this.__glSourceDirty || this.__isUniform == null) {
			this.__glSourceDirty = false;
			this.glProgram = null;
			this.__isUniform = new haxe_ds_StringMap();
			this.__inputBitmapData = [];
			this.__paramBool = [];
			this.__paramFloat = [];
			this.__paramInt = [];
			var this1 = new Float32Array(4);
			this.__uniformMatrix2 = this1;
			var this2 = new Float32Array(9);
			this.__uniformMatrix3 = this2;
			var this3 = new Float32Array(16);
			this.__uniformMatrix4 = this3;
			this.__processGLData(this.get_glVertexSource(),"attribute");
			this.__processGLData(this.get_glVertexSource(),"uniform");
			this.__processGLData(this.get_glFragmentSource(),"uniform");
		}
		if(this.gl != null && this.glProgram == null) {
			var fragment = "#ifdef GL_ES\n\t\t\t\tprecision " + (this.precisionHint == 1 ? "mediump" : "lowp") + " float;\n\t\t\t\t#endif\n\t\t\t\t" + this.get_glFragmentSource();
			this.glProgram = $hx_exports.lime.utils.GLUtils.createProgram(this.get_glVertexSource(),fragment);
			if(this.glProgram != null) {
				var _g = 0;
				var _g1 = this.__inputBitmapData;
				while(_g < _g1.length) {
					var input = _g1[_g];
					++_g;
					if(this.__isUniform.get(input.name)) {
						input.index = this.gl.getUniformLocation(this.glProgram,input.name);
					} else {
						input.index = this.gl.getAttribLocation(this.glProgram,input.name);
					}
				}
				var _g2 = 0;
				var _g11 = this.__paramBool;
				while(_g2 < _g11.length) {
					var parameter = _g11[_g2];
					++_g2;
					if(this.__isUniform.get(parameter.name)) {
						parameter.index = this.gl.getUniformLocation(this.glProgram,parameter.name);
					} else {
						parameter.index = this.gl.getAttribLocation(this.glProgram,parameter.name);
					}
				}
				var _g3 = 0;
				var _g12 = this.__paramFloat;
				while(_g3 < _g12.length) {
					var parameter1 = _g12[_g3];
					++_g3;
					if(this.__isUniform.get(parameter1.name)) {
						parameter1.index = this.gl.getUniformLocation(this.glProgram,parameter1.name);
					} else {
						parameter1.index = this.gl.getAttribLocation(this.glProgram,parameter1.name);
					}
				}
				var _g4 = 0;
				var _g13 = this.__paramInt;
				while(_g4 < _g13.length) {
					var parameter2 = _g13[_g4];
					++_g4;
					if(this.__isUniform.get(parameter2.name)) {
						parameter2.index = this.gl.getUniformLocation(this.glProgram,parameter2.name);
					} else {
						parameter2.index = this.gl.getAttribLocation(this.glProgram,parameter2.name);
					}
				}
			}
		}
	}
	,__processGLData: function(source,storageType) {
		var lastMatch = 0;
		var position;
		var regex;
		var name;
		var type;
		if(storageType == "uniform") {
			regex = new $hx_exports.EReg("uniform ([A-Za-z0-9]+) ([A-Za-z0-9]+)","");
		} else {
			regex = new $hx_exports.EReg("attribute ([A-Za-z0-9]+) ([A-Za-z0-9]+)","");
		}
		while(regex.matchSub(source,lastMatch)) {
			type = regex.matched(1);
			name = regex.matched(2);
			if($hx_exports.StringTools.startsWith(type,"sampler")) {
				var input = new openfl_display_ShaderInput();
				input.name = name;
				this.__inputBitmapData.push(input);
				Reflect.setField(this.get_data(),name,input);
			} else {
				var parameterType;
				switch(type) {
				case "bool":
					parameterType = 0;
					break;
				case "bvec2":
					parameterType = 1;
					break;
				case "bvec3":
					parameterType = 2;
					break;
				case "bvec4":
					parameterType = 3;
					break;
				case "dvec2":case "vec2":
					parameterType = 5;
					break;
				case "dvec3":case "vec3":
					parameterType = 6;
					break;
				case "double":case "float":
					parameterType = 4;
					break;
				case "ivec3":case "uvec3":
					parameterType = 10;
					break;
				case "ivec4":case "uvec4":
					parameterType = 11;
					break;
				case "mat2":case "mat2x2":
					parameterType = 12;
					break;
				case "mat2x3":
					parameterType = 13;
					break;
				case "mat2x4":
					parameterType = 14;
					break;
				case "mat3x2":
					parameterType = 15;
					break;
				case "mat3":case "mat3x3":
					parameterType = 16;
					break;
				case "mat3x4":
					parameterType = 17;
					break;
				case "mat4":case "mat4x4":
					parameterType = 20;
					break;
				case "mat4x2":
					parameterType = 18;
					break;
				case "mat4x3":
					parameterType = 19;
					break;
				case "int":case "uint":
					parameterType = 8;
					break;
				case "ivec2":case "uvec2":
					parameterType = 9;
					break;
				case "dvec4":case "vec4":
					parameterType = 7;
					break;
				default:
					parameterType = null;
				}
				switch(parameterType) {
				case 0:case 1:case 2:case 3:
					var parameter = new openfl_display_ShaderParameter();
					parameter.name = name;
					parameter.type = parameterType;
					this.__paramBool.push(parameter);
					Reflect.setField(this.get_data(),name,parameter);
					break;
				case 8:case 9:case 10:case 11:
					var parameter1 = new openfl_display_ShaderParameter();
					parameter1.name = name;
					parameter1.type = parameterType;
					this.__paramInt.push(parameter1);
					Reflect.setField(this.get_data(),name,parameter1);
					break;
				default:
					var parameter2 = new openfl_display_ShaderParameter();
					parameter2.name = name;
					parameter2.type = parameterType;
					this.__paramFloat.push(parameter2);
					Reflect.setField(this.get_data(),name,parameter2);
				}
			}
			this.__isUniform.set(name,storageType == "uniform");
			position = regex.matchedPos();
			lastMatch = position.pos + position.len;
		}
	}
	,__update: function() {
		if(this.glProgram != null) {
			this.__updateGL();
		}
	}
	,__updateGL: function() {
		var textureCount = 0;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			if(input.input != null) {
				this.gl.activeTexture(this.gl.TEXTURE0 + textureCount);
				this.gl.bindTexture(this.gl.TEXTURE_2D,input.input.getTexture(this.gl));
				if(input.smoothing) {
					this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.LINEAR);
					this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.LINEAR);
				} else {
					this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.NEAREST);
					this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.NEAREST);
				}
			}
			++textureCount;
		}
		var value;
		var index;
		var _g2 = 0;
		var _g11 = this.__paramBool;
		while(_g2 < _g11.length) {
			var parameter = _g11[_g2];
			++_g2;
			value = parameter.value;
			index = parameter.index;
			if(value != null) {
				var _g21 = parameter.type;
				switch(_g21) {
				case 0:
					this.gl.uniform1i(index,value[0] ? 1 : 0);
					break;
				case 1:
					this.gl.uniform2i(index,value[0] ? 1 : 0,value[1] ? 1 : 0);
					break;
				case 2:
					this.gl.uniform3i(index,value[0] ? 1 : 0,value[1] ? 1 : 0,value[2] ? 1 : 0);
					break;
				case 3:
					this.gl.uniform4i(index,value[0] ? 1 : 0,value[1] ? 1 : 0,value[2] ? 1 : 0,value[3] ? 1 : 0);
					break;
				default:
				}
			} else if(!this.__isUniform.get(parameter.name)) {
				this.gl.enableVertexAttribArray(parameter.index);
			}
		}
		var value1;
		var index1;
		var _g3 = 0;
		var _g12 = this.__paramFloat;
		while(_g3 < _g12.length) {
			var parameter1 = _g12[_g3];
			++_g3;
			value1 = parameter1.value;
			index1 = parameter1.index;
			if(value1 != null) {
				var _g22 = parameter1.type;
				switch(_g22) {
				case 4:
					this.gl.uniform1f(index1,value1[0]);
					break;
				case 5:
					this.gl.uniform2f(index1,value1[0],value1[1]);
					break;
				case 6:
					this.gl.uniform3f(index1,value1[0],value1[1],value1[2]);
					break;
				case 7:
					this.gl.uniform4f(index1,value1[0],value1[1],value1[2],value1[3]);
					break;
				case 12:
					var _g23 = 0;
					while(_g23 < 4) {
						var i = _g23++;
						this.__uniformMatrix2[i] = value1[i];
					}
					this.gl.uniformMatrix2fv(index1,1,false,$hx_$exports_lime_utils_DataPointer.fromArrayBufferView(this.__uniformMatrix2));
					break;
				case 16:
					var _g24 = 0;
					while(_g24 < 9) {
						var i1 = _g24++;
						this.__uniformMatrix3[i1] = value1[i1];
					}
					this.gl.uniformMatrix3fv(index1,1,false,$hx_$exports_lime_utils_DataPointer.fromArrayBufferView(this.__uniformMatrix3));
					break;
				case 20:
					var _g25 = 0;
					while(_g25 < 16) {
						var i2 = _g25++;
						this.__uniformMatrix4[i2] = value1[i2];
					}
					this.gl.uniformMatrix4fv(index1,1,false,$hx_$exports_lime_utils_DataPointer.fromArrayBufferView(this.__uniformMatrix4));
					break;
				default:
				}
			} else if(!this.__isUniform.get(parameter1.name)) {
				this.gl.enableVertexAttribArray(parameter1.index);
				var _g26 = parameter1.type;
				switch(_g26) {
				case 12:
					this.gl.enableVertexAttribArray(parameter1.index + 1);
					break;
				case 16:
					this.gl.enableVertexAttribArray(parameter1.index + 1);
					this.gl.enableVertexAttribArray(parameter1.index + 2);
					break;
				case 20:
					this.gl.enableVertexAttribArray(parameter1.index + 1);
					this.gl.enableVertexAttribArray(parameter1.index + 2);
					this.gl.enableVertexAttribArray(parameter1.index + 3);
					break;
				default:
				}
			}
		}
		var value2;
		var index2;
		var _g4 = 0;
		var _g13 = this.__paramInt;
		while(_g4 < _g13.length) {
			var parameter2 = _g13[_g4];
			++_g4;
			value2 = parameter2.value;
			index2 = parameter2.index;
			if(value2 != null) {
				var _g27 = parameter2.type;
				switch(_g27) {
				case 8:
					this.gl.uniform1i(index2,value2[0]);
					break;
				case 9:
					this.gl.uniform2i(index2,value2[0],value2[1]);
					break;
				case 10:
					this.gl.uniform3i(index2,value2[0],value2[1],value2[2]);
					break;
				case 11:
					this.gl.uniform4i(index2,value2[0],value2[1],value2[2],value2[3]);
					break;
				default:
				}
			} else if(!this.__isUniform.get(parameter2.name)) {
				this.gl.enableVertexAttribArray(parameter2.index);
			}
		}
	}
	,get_data: function() {
		if(this.__glSourceDirty || this.__data == null) {
			this.__init();
		}
		return this.__data;
	}
	,set_data: function(value) {
		return this.__data = value;
	}
	,get_glFragmentSource: function() {
		return this.__glFragmentSource;
	}
	,set_glFragmentSource: function(value) {
		if(value != this.__glFragmentSource) {
			this.__glSourceDirty = true;
		}
		return this.__glFragmentSource = value;
	}
	,get_glVertexSource: function() {
		return this.__glVertexSource;
	}
	,set_glVertexSource: function(value) {
		if(value != this.__glVertexSource) {
			this.__glSourceDirty = true;
		}
		return this.__glVertexSource = value;
	}
	,__class__: openfl_display_Shader
	,__properties__: {set_glVertexSource:"set_glVertexSource",get_glVertexSource:"get_glVertexSource",set_glFragmentSource:"set_glFragmentSource",get_glFragmentSource:"get_glFragmentSource",set_data:"set_data",get_data:"get_data"}
};
var openfl__$internal_renderer_opengl_GLMaskShader = function(code) {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying vec2 vTexCoord;\n\t\t\n\t\tuniform sampler2D uImage0;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 color = texture2D (uImage0, vTexCoord);\n\t\t\t\n\t\t\tif (color.a == 0.0) {\n\t\t\t\t\n\t\t\t\tdiscard;\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tgl_FragColor = color;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute vec4 aPosition;\n\t\tattribute vec2 aTexCoord;\n\t\tvarying vec2 vTexCoord;\n\t\t\n\t\tuniform mat4 uMatrix;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvTexCoord = aTexCoord;\n\t\t\t\n\t\t\tgl_Position = uMatrix * aPosition;\n\t\t\t\n\t\t}";
	}
	openfl_display_Shader.call(this,code);
};
$hxClasses["openfl._internal.renderer.opengl.GLMaskShader"] = openfl__$internal_renderer_opengl_GLMaskShader;
openfl__$internal_renderer_opengl_GLMaskShader.__name__ = ["openfl","_internal","renderer","opengl","GLMaskShader"];
openfl__$internal_renderer_opengl_GLMaskShader.__super__ = openfl_display_Shader;
openfl__$internal_renderer_opengl_GLMaskShader.prototype = $extend(openfl_display_Shader.prototype,{
	__class__: openfl__$internal_renderer_opengl_GLMaskShader
});
var openfl__$internal_renderer_opengl_GLMaskManager = $hx_exports["openfl"]["_internal"]["renderer"]["opengl"]["GLMaskManager"] = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
	this.gl = renderSession.gl;
	this.clipRects = [];
	this.maskObjects = [];
	this.numClipRects = 0;
	this.stencilReference = 0;
	this.tempRect = new openfl_geom_Rectangle();
};
$hxClasses["openfl._internal.renderer.opengl.GLMaskManager"] = openfl__$internal_renderer_opengl_GLMaskManager;
openfl__$internal_renderer_opengl_GLMaskManager.__name__ = ["openfl","_internal","renderer","opengl","GLMaskManager"];
openfl__$internal_renderer_opengl_GLMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_opengl_GLMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	clipRects: null
	,gl: null
	,maskObjects: null
	,numClipRects: null
	,stencilReference: null
	,tempRect: null
	,pushMask: function(mask) {
		if(this.stencilReference == 0) {
			this.gl.enable(this.gl.STENCIL_TEST);
			this.gl.stencilMask(255);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
		}
		this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
		this.gl.stencilFunc(this.gl.EQUAL,this.stencilReference,255);
		this.gl.colorMask(false,false,false,false);
		mask.__renderGLMask(this.renderSession);
		this.maskObjects.push(mask);
		this.stencilReference++;
		this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
		this.gl.stencilFunc(this.gl.EQUAL,this.stencilReference,255);
		this.gl.colorMask(true,true,true,true);
	}
	,pushObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.pushRect(object.__scrollRect,object.__renderTransform);
		}
		if(object.__mask != null) {
			this.pushMask(object.__mask);
		}
	}
	,pushRect: function(rect,transform) {
		if(this.numClipRects == this.clipRects.length) {
			this.clipRects[this.numClipRects] = new openfl_geom_Rectangle();
		}
		var clipRect = this.clipRects[this.numClipRects];
		rect.__transform(clipRect,transform);
		if(this.numClipRects > 0) {
			var parentClipRect = this.clipRects[this.numClipRects - 1];
			clipRect.__contract(parentClipRect.x,parentClipRect.y,parentClipRect.width,parentClipRect.height);
		}
		if(clipRect.height < 0) {
			clipRect.height = 0;
		}
		if(clipRect.width < 0) {
			clipRect.width = 0;
		}
		this.scissorRect(clipRect);
		this.numClipRects++;
	}
	,popMask: function() {
		if(this.stencilReference == 0) {
			return;
		}
		if(this.stencilReference > 1) {
			this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
			this.gl.stencilFunc(this.gl.EQUAL,this.stencilReference,255);
			this.gl.colorMask(false,false,false,false);
			var mask = this.maskObjects.pop();
			mask.__renderGLMask(this.renderSession);
			this.stencilReference--;
			this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
			this.gl.stencilFunc(this.gl.EQUAL,this.stencilReference,255);
			this.gl.colorMask(true,true,true,true);
		} else {
			this.stencilReference = 0;
			this.gl.disable(this.gl.STENCIL_TEST);
		}
	}
	,popObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(object.__mask != null) {
			this.popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.popRect();
		}
	}
	,popRect: function() {
		if(this.numClipRects > 0) {
			this.numClipRects--;
			if(this.numClipRects > 0) {
				this.scissorRect(this.clipRects[this.numClipRects - 1]);
			} else {
				this.scissorRect();
			}
		}
	}
	,scissorRect: function(rect) {
		if(rect != null) {
			var renderer = this.renderSession.renderer;
			this.gl.enable(this.gl.SCISSOR_TEST);
			var clipRect = this.tempRect;
			rect.__transform(clipRect,renderer.displayMatrix);
			var x = $hx_exports.Math.floor(clipRect.x);
			var y = $hx_exports.Math.floor(renderer.height - clipRect.y - clipRect.height);
			var width = $hx_exports.Math.ceil(clipRect.width);
			var height = $hx_exports.Math.ceil(clipRect.height);
			if(width < 0) {
				width = 0;
			}
			if(height < 0) {
				height = 0;
			}
			this.gl.scissor(x,y,width,height);
		} else {
			this.gl.disable(this.gl.SCISSOR_TEST);
		}
	}
	,__class__: openfl__$internal_renderer_opengl_GLMaskManager
});
var openfl__$internal_renderer_opengl_GLRenderer = $hx_exports["openfl"]["_internal"]["renderer"]["opengl"]["GLRenderer"] = function(stage,gl,defaultRenderTarget) {
	openfl__$internal_renderer_AbstractRenderer.call(this,stage);
	this.gl = gl;
	this.defaultRenderTarget = defaultRenderTarget;
	this.flipped = defaultRenderTarget == null;
	if(openfl_display_Graphics.maxTextureWidth == null) {
		openfl_display_Graphics.maxTextureWidth = openfl_display_Graphics.maxTextureHeight = gl.getInteger(gl.MAX_TEXTURE_SIZE);
	}
	this.matrix = $hx_$exports_lime_math_Matrix4._new();
	this.values = [];
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.clearRenderDirty = true;
	this.renderSession.gl = gl;
	this.renderSession.renderer = this;
	this.renderSession.blendModeManager = new openfl__$internal_renderer_opengl_GLBlendModeManager(gl);
	this.renderSession.filterManager = new openfl__$internal_renderer_opengl_GLFilterManager(this,this.renderSession);
	this.renderSession.shaderManager = new openfl__$internal_renderer_opengl_GLShaderManager(gl);
	this.renderSession.maskManager = new openfl__$internal_renderer_opengl_GLMaskManager(this.renderSession);
	if(stage.window != null) {
		if(stage.stage3Ds.data.get(0).context3D == null) {
			stage.stage3Ds.data.get(0).__createContext(stage,this.renderSession);
		}
		var width = defaultRenderTarget != null ? defaultRenderTarget.width : $hx_exports.Math.ceil(stage.window.get_width() * stage.window.get_scale());
		var height = defaultRenderTarget != null ? defaultRenderTarget.height : $hx_exports.Math.ceil(stage.window.get_height() * stage.window.get_scale());
		this.resize(width,height);
	}
};
$hxClasses["openfl._internal.renderer.opengl.GLRenderer"] = openfl__$internal_renderer_opengl_GLRenderer;
openfl__$internal_renderer_opengl_GLRenderer.__name__ = ["openfl","_internal","renderer","opengl","GLRenderer"];
openfl__$internal_renderer_opengl_GLRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_opengl_GLRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	projection: null
	,projectionFlipped: null
	,defaultRenderTarget: null
	,currentRenderTarget: null
	,displayHeight: null
	,displayMatrix: null
	,displayWidth: null
	,flipped: null
	,gl: null
	,matrix: null
	,renderTargetA: null
	,renderTargetB: null
	,offsetX: null
	,offsetY: null
	,values: null
	,clear: function() {
		if(this.stage.__transparent) {
			this.gl.clearColor(0,0,0,0);
		} else {
			this.gl.clearColor(this.stage.__colorSplit[0],this.stage.__colorSplit[1],this.stage.__colorSplit[2],1);
		}
		this.gl.clear(this.gl.COLOR_BUFFER_BIT);
	}
	,getCacheObject: function() {
	}
	,getMatrix: function(transform) {
		var _matrix = openfl_geom_Matrix.__pool.get();
		_matrix.copyFrom(transform);
		_matrix.concat(this.displayMatrix);
		if(this.renderSession.roundPixels) {
			_matrix.tx = $hx_exports.Math.round(_matrix.tx);
			_matrix.ty = $hx_exports.Math.round(_matrix.ty);
		}
		$hx_$exports_lime_math_Matrix4.identity(this.matrix);
		$hx_$exports_lime_math_Matrix4.set(this.matrix,0,_matrix.a);
		$hx_$exports_lime_math_Matrix4.set(this.matrix,1,_matrix.b);
		$hx_$exports_lime_math_Matrix4.set(this.matrix,4,_matrix.c);
		$hx_$exports_lime_math_Matrix4.set(this.matrix,5,_matrix.d);
		$hx_$exports_lime_math_Matrix4.set(this.matrix,12,_matrix.tx);
		$hx_$exports_lime_math_Matrix4.set(this.matrix,13,_matrix.ty);
		$hx_$exports_lime_math_Matrix4.append(this.matrix,this.flipped ? this.projectionFlipped : this.projection);
		var _g = 0;
		while(_g < 16) {
			var i = _g++;
			this.values[i] = $hx_$exports_lime_math_Matrix4.get(this.matrix,i);
		}
		openfl_geom_Matrix.__pool.release(_matrix);
		return this.values;
	}
	,getRenderTarget: function(framebuffer) {
		if(framebuffer) {
			if(this.renderTargetA == null) {
				this.renderTargetA = openfl_display_BitmapData.fromTexture(this.stage.stage3Ds.data.get(0).context3D.createRectangleTexture(this.width,this.height,1,true));
				this.gl.bindTexture(this.gl.TEXTURE_2D,this.renderTargetA.getTexture(this.gl));
				this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE);
				this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE);
			}
			if(this.renderTargetB == null) {
				this.renderTargetB = openfl_display_BitmapData.fromTexture(this.stage.stage3Ds.data.get(0).context3D.createRectangleTexture(this.width,this.height,1,true));
				this.gl.bindTexture(this.gl.TEXTURE_2D,this.renderTargetB.getTexture(this.gl));
				this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE);
				this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE);
			}
			if(this.currentRenderTarget == this.renderTargetA) {
				this.currentRenderTarget = this.renderTargetB;
			} else {
				this.currentRenderTarget = this.renderTargetA;
			}
			this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,this.currentRenderTarget.__getFramebuffer(this.gl));
			this.gl.viewport(0,0,this.width,this.height);
			this.gl.clearColor(0,0,0,0);
			this.gl.clear(this.gl.COLOR_BUFFER_BIT);
			this.flipped = false;
		} else {
			this.currentRenderTarget = this.defaultRenderTarget;
			var frameBuffer = this.currentRenderTarget != null ? this.currentRenderTarget.__getFramebuffer(this.gl) : null;
			this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,frameBuffer);
			this.flipped = this.currentRenderTarget == null;
		}
	}
	,render: function() {
		this.gl.viewport(this.offsetX,this.offsetY,this.displayWidth,this.displayHeight);
		this.renderSession.allowSmoothing = this.stage.quality != 2;
		this.renderSession.upscaled = this.displayMatrix.a != 1 || this.displayMatrix.d != 1;
		this.stage.__renderGL(this.renderSession);
		if(this.offsetX > 0 || this.offsetY > 0) {
			this.gl.clearColor(0,0,0,1);
			this.gl.enable(this.gl.SCISSOR_TEST);
			if(this.offsetX > 0) {
				this.gl.scissor(0,0,this.offsetX,this.height);
				this.gl.clear(this.gl.COLOR_BUFFER_BIT);
				this.gl.scissor(this.offsetX + this.displayWidth,0,this.width,this.height);
				this.gl.clear(this.gl.COLOR_BUFFER_BIT);
			}
			if(this.offsetY > 0) {
				this.gl.scissor(0,0,this.width,this.offsetY);
				this.gl.clear(this.gl.COLOR_BUFFER_BIT);
				this.gl.scissor(0,this.offsetY + this.displayHeight,this.width,this.height);
				this.gl.clear(this.gl.COLOR_BUFFER_BIT);
			}
			this.gl.disable(this.gl.SCISSOR_TEST);
		}
	}
	,renderStage3D: function() {
		var _g = 0;
		var _g1 = this.stage.stage3Ds;
		while(_g < _g1.data.get_length()) {
			var stage3D = _g1.data.get(_g);
			++_g;
			stage3D.__renderGL(this.stage,this.renderSession);
		}
	}
	,resize: function(width,height) {
		openfl__$internal_renderer_AbstractRenderer.prototype.resize.call(this,width,height);
		if(width > 0 && height > 0) {
			if(this.renderTargetA != null && (this.renderTargetA.width != width || this.renderTargetA.height != height)) {
				this.renderTargetA = openfl_display_BitmapData.fromTexture(this.stage.stage3Ds.data.get(0).context3D.createRectangleTexture(width,height,1,true));
				this.gl.bindTexture(this.gl.TEXTURE_2D,this.renderTargetA.getTexture(this.gl));
				this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE);
				this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE);
			}
			if(this.renderTargetB != null && (this.renderTargetB.width != width || this.renderTargetB.height != height)) {
				this.renderTargetB = openfl_display_BitmapData.fromTexture(this.stage.stage3Ds.data.get(0).context3D.createRectangleTexture(width,height,1,true));
				this.gl.bindTexture(this.gl.TEXTURE_2D,this.renderTargetB.getTexture(this.gl));
				this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE);
				this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE);
			}
		}
		this.displayMatrix = this.defaultRenderTarget == null ? this.stage.__displayMatrix : new openfl_geom_Matrix();
		var w = this.defaultRenderTarget == null ? this.stage.stageWidth : this.defaultRenderTarget.width;
		var h = this.defaultRenderTarget == null ? this.stage.stageHeight : this.defaultRenderTarget.height;
		this.offsetX = $hx_exports.Math.round(this.displayMatrix.__transformX(0,0));
		this.offsetY = $hx_exports.Math.round(this.displayMatrix.__transformY(0,0));
		this.displayWidth = $hx_exports.Math.round(this.displayMatrix.__transformX(w,0) - this.offsetX);
		this.displayHeight = $hx_exports.Math.round(this.displayMatrix.__transformY(0,h) - this.offsetY);
		this.projection = $hx_$exports_lime_math_Matrix4.createOrtho(this.offsetX,this.displayWidth + this.offsetX,this.offsetY,this.displayHeight + this.offsetY,-1000,1000);
		this.projectionFlipped = $hx_$exports_lime_math_Matrix4.createOrtho(this.offsetX,this.displayWidth + this.offsetX,this.displayHeight + this.offsetY,this.offsetY,-1000,1000);
	}
	,__class__: openfl__$internal_renderer_opengl_GLRenderer
});
var openfl__$internal_renderer_opengl_GLShaderManager = $hx_exports["openfl"]["_internal"]["renderer"]["opengl"]["GLShaderManager"] = function(gl) {
	openfl__$internal_renderer_AbstractShaderManager.call(this);
	this.gl = gl;
	this.defaultShader = new openfl_display_Shader();
	this.initShader(this.defaultShader);
};
$hxClasses["openfl._internal.renderer.opengl.GLShaderManager"] = openfl__$internal_renderer_opengl_GLShaderManager;
openfl__$internal_renderer_opengl_GLShaderManager.__name__ = ["openfl","_internal","renderer","opengl","GLShaderManager"];
openfl__$internal_renderer_opengl_GLShaderManager.__super__ = openfl__$internal_renderer_AbstractShaderManager;
openfl__$internal_renderer_opengl_GLShaderManager.prototype = $extend(openfl__$internal_renderer_AbstractShaderManager.prototype,{
	gl: null
	,initShader: function(shader) {
		if(shader != null) {
			if(shader.gl == null) {
				shader.gl = this.gl;
				shader.__init();
			}
			return shader;
		}
		return this.defaultShader;
	}
	,setShader: function(shader) {
		if(this.currentShader == shader) {
			return;
		}
		if(this.currentShader != null) {
			this.currentShader.__disable();
		}
		if(shader == null) {
			this.currentShader = null;
			this.gl.useProgram(null);
			return;
		} else {
			this.currentShader = shader;
			this.initShader(shader);
			this.gl.useProgram(shader.glProgram);
			this.currentShader.__enable();
		}
	}
	,updateShader: function(shader) {
		if(this.currentShader != null) {
			this.currentShader.__update();
		}
	}
	,__class__: openfl__$internal_renderer_opengl_GLShaderManager
});
var openfl__$internal_renderer_opengl_GLShape = $hx_exports["openfl"]["_internal"]["renderer"]["opengl"]["GLShape"] = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLShape"] = openfl__$internal_renderer_opengl_GLShape;
openfl__$internal_renderer_opengl_GLShape.__name__ = ["openfl","_internal","renderer","opengl","GLShape"];
openfl__$internal_renderer_opengl_GLShape.render = function(shape,renderSession) {
	if(!shape.__renderable || shape.__worldAlpha <= 0) {
		return;
	}
	var graphics = shape.__graphics;
	if(graphics != null) {
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,shape.__renderTransform);
		var bounds = graphics.__bounds;
		if(graphics.__bitmap != null && graphics.__visible) {
			var renderer = renderSession.renderer;
			var gl = renderSession.gl;
			renderSession.blendModeManager.setBlendMode(shape.__worldBlendMode);
			renderSession.maskManager.pushObject(shape);
			var shader = renderSession.filterManager.pushObject(shape);
			renderSession.shaderManager.setShader(shader);
			shader.get_data().uImage0.input = graphics.__bitmap;
			shader.get_data().uImage0.smoothing = renderSession.allowSmoothing;
			shader.get_data().uMatrix.value = renderer.getMatrix(graphics.__worldTransform);
			var useColorTransform = !shape.__worldColorTransform.__isDefault();
			if(shader.get_data().uColorTransform.value == null) {
				shader.get_data().uColorTransform.value = [];
			}
			shader.get_data().uColorTransform.value[0] = useColorTransform;
			renderSession.shaderManager.updateShader(shader);
			gl.bindBuffer(gl.ARRAY_BUFFER,graphics.__bitmap.getBuffer(gl,shape.__worldAlpha,shape.__worldColorTransform));
			gl.vertexAttribPointer(shader.get_data().aPosition.index,3,gl.FLOAT,false,104,$hx_$exports_lime_utils_DataPointer.fromInt(0));
			gl.vertexAttribPointer(shader.get_data().aTexCoord.index,2,gl.FLOAT,false,104,$hx_$exports_lime_utils_DataPointer.fromInt(12));
			gl.vertexAttribPointer(shader.get_data().aAlpha.index,1,gl.FLOAT,false,104,$hx_$exports_lime_utils_DataPointer.fromInt(20));
			gl.vertexAttribPointer(shader.get_data().aColorMultipliers.index,4,gl.FLOAT,false,104,$hx_$exports_lime_utils_DataPointer.fromInt(24));
			gl.vertexAttribPointer(shader.get_data().aColorMultipliers.index + 1,4,gl.FLOAT,false,104,$hx_$exports_lime_utils_DataPointer.fromInt(40));
			gl.vertexAttribPointer(shader.get_data().aColorMultipliers.index + 2,4,gl.FLOAT,false,104,$hx_$exports_lime_utils_DataPointer.fromInt(56));
			gl.vertexAttribPointer(shader.get_data().aColorMultipliers.index + 3,4,gl.FLOAT,false,104,$hx_$exports_lime_utils_DataPointer.fromInt(72));
			gl.vertexAttribPointer(shader.get_data().aColorOffsets.index,4,gl.FLOAT,false,104,$hx_$exports_lime_utils_DataPointer.fromInt(88));
			gl.drawArrays(gl.TRIANGLE_STRIP,0,4);
			renderSession.filterManager.popObject(shape);
			renderSession.maskManager.popObject(shape);
		}
	}
};
openfl__$internal_renderer_opengl_GLShape.renderMask = function(shape,renderSession) {
	var graphics = shape.__graphics;
	if(graphics != null) {
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,shape.__renderTransform);
		var bounds = graphics.__bounds;
		if(graphics.__bitmap != null) {
			var renderer = renderSession.renderer;
			var gl = renderSession.gl;
			var shader = openfl__$internal_renderer_opengl_GLMaskManager.maskShader;
			renderSession.shaderManager.setShader(shader);
			shader.get_data().uImage0.input = graphics.__bitmap;
			shader.get_data().uImage0.smoothing = renderSession.allowSmoothing;
			shader.get_data().uMatrix.value = renderer.getMatrix(graphics.__worldTransform);
			renderSession.shaderManager.updateShader(shader);
			gl.bindBuffer(gl.ARRAY_BUFFER,graphics.__bitmap.getBuffer(gl,shape.__worldAlpha,shape.__worldColorTransform));
			gl.vertexAttribPointer(shader.get_data().aPosition.index,3,gl.FLOAT,false,104,$hx_$exports_lime_utils_DataPointer.fromInt(0));
			gl.vertexAttribPointer(shader.get_data().aTexCoord.index,2,gl.FLOAT,false,104,$hx_$exports_lime_utils_DataPointer.fromInt(12));
			gl.drawArrays(gl.TRIANGLE_STRIP,0,4);
		}
	}
};
var openfl__$internal_renderer_opengl_GLTilemap = $hx_exports["openfl"]["_internal"]["renderer"]["opengl"]["GLTilemap"] = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLTilemap"] = openfl__$internal_renderer_opengl_GLTilemap;
openfl__$internal_renderer_opengl_GLTilemap.__name__ = ["openfl","_internal","renderer","opengl","GLTilemap"];
openfl__$internal_renderer_opengl_GLTilemap.render = function(tilemap,renderSession) {
	if(!tilemap.__renderable || tilemap.__worldAlpha <= 0) {
		return;
	}
	tilemap.__updateTileArray();
	if(tilemap.__tileArray == null || tilemap.__tileArray.get_length() == 0) {
		return;
	}
	var renderer = renderSession.renderer;
	var gl = renderSession.gl;
	renderSession.blendModeManager.setBlendMode(tilemap.__worldBlendMode);
	renderSession.maskManager.pushObject(tilemap);
	renderSession.filterManager.pushObject(tilemap);
	var shader = renderSession.shaderManager.initShader(tilemap.shader);
	var uMatrix = renderer.getMatrix(tilemap.__renderTransform);
	var smoothing = renderSession.allowSmoothing && tilemap.smoothing;
	var useColorTransform = true;
	var rect = openfl_geom_Rectangle.__pool.get();
	rect.setTo(0,0,tilemap.__width,tilemap.__height);
	renderSession.maskManager.pushRect(rect,tilemap.__renderTransform);
	var tileArray = tilemap.__tileArray;
	var defaultShader = shader;
	var defaultTileset = tilemap.__tileset;
	tileArray.__updateGLBuffer(gl,defaultTileset,tilemap.__worldAlpha,tilemap.__worldColorTransform);
	gl.vertexAttribPointer(shader.get_data().aPosition.index,2,gl.FLOAT,false,100,$hx_$exports_lime_utils_DataPointer.fromInt(0));
	gl.vertexAttribPointer(shader.get_data().aTexCoord.index,2,gl.FLOAT,false,100,$hx_$exports_lime_utils_DataPointer.fromInt(8));
	gl.vertexAttribPointer(shader.get_data().aAlpha.index,1,gl.FLOAT,false,100,$hx_$exports_lime_utils_DataPointer.fromInt(16));
	gl.vertexAttribPointer(shader.get_data().aColorMultipliers.index,4,gl.FLOAT,false,100,$hx_$exports_lime_utils_DataPointer.fromInt(20));
	gl.vertexAttribPointer(shader.get_data().aColorMultipliers.index + 1,4,gl.FLOAT,false,100,$hx_$exports_lime_utils_DataPointer.fromInt(36));
	gl.vertexAttribPointer(shader.get_data().aColorMultipliers.index + 2,4,gl.FLOAT,false,100,$hx_$exports_lime_utils_DataPointer.fromInt(52));
	gl.vertexAttribPointer(shader.get_data().aColorMultipliers.index + 3,4,gl.FLOAT,false,100,$hx_$exports_lime_utils_DataPointer.fromInt(68));
	gl.vertexAttribPointer(shader.get_data().aColorOffsets.index,4,gl.FLOAT,false,100,$hx_$exports_lime_utils_DataPointer.fromInt(84));
	var cacheShader = null;
	var cacheBitmapData = null;
	var lastIndex = 0;
	var skipped = tileArray.__bufferSkipped;
	var drawCount = tileArray.__length;
	tileArray.position = 0;
	var shader1 = null;
	var tileset;
	var flush = false;
	var _g1 = 0;
	var _g = drawCount + 1;
	while(_g1 < _g) {
		var i = _g1++;
		if(skipped.data.get(i)) {
			continue;
		}
		tileArray.position = i < drawCount ? i : drawCount - 1;
		shader1 = tileArray.get_shader();
		if(shader1 == null) {
			shader1 = defaultShader;
		}
		if(shader1 != cacheShader && cacheShader != null) {
			flush = true;
		}
		tileset = tileArray.get_tileset();
		if(tileset == null) {
			tileset = defaultTileset;
		}
		if(tileset == null) {
			continue;
		}
		if(tileset.__bitmapData != cacheBitmapData && cacheBitmapData != null) {
			flush = true;
		}
		if(flush) {
			cacheShader.get_data().uImage0.input = cacheBitmapData;
			renderSession.shaderManager.updateShader(cacheShader);
			gl.drawArrays(gl.TRIANGLES,lastIndex * 6,(i - lastIndex) * 6);
			flush = false;
			lastIndex = i;
		}
		if(shader1 != cacheShader) {
			renderSession.shaderManager.setShader(shader1);
			shader1.get_data().uMatrix.value = uMatrix;
			shader1.get_data().uImage0.smoothing = smoothing;
			if(shader1.get_data().uColorTransform.value == null) {
				shader1.get_data().uColorTransform.value = [];
			}
			shader1.get_data().uColorTransform.value[0] = useColorTransform;
			cacheShader = shader1;
		}
		cacheBitmapData = tileset.__bitmapData;
		if(i == drawCount && tileset.__bitmapData != null) {
			shader1.get_data().uImage0.input = tileset.__bitmapData;
			renderSession.shaderManager.updateShader(shader1);
			gl.drawArrays(gl.TRIANGLES,lastIndex * 6,(i - lastIndex) * 6);
		}
	}
	renderSession.filterManager.popObject(tilemap);
	renderSession.maskManager.popRect();
	renderSession.maskManager.popObject(tilemap);
	openfl_geom_Rectangle.__pool.release(rect);
};
openfl__$internal_renderer_opengl_GLTilemap.renderMask = function(tilemap,renderSession) {
	tilemap.__updateTileArray();
	if(tilemap.__tileArray == null || tilemap.__tileArray.get_length() == 0) {
		return;
	}
	var renderer = renderSession.renderer;
	var gl = renderSession.gl;
	var shader = openfl__$internal_renderer_opengl_GLMaskManager.maskShader;
	var uMatrix = renderer.getMatrix(tilemap.__renderTransform);
	var smoothing = renderSession.allowSmoothing && tilemap.smoothing;
	var tileArray = tilemap.__tileArray;
	var defaultTileset = tilemap.__tileset;
	tileArray.__updateGLBuffer(gl,defaultTileset,tilemap.__worldAlpha,tilemap.__worldColorTransform);
	gl.vertexAttribPointer(shader.get_data().aPosition.index,2,gl.FLOAT,false,100,$hx_$exports_lime_utils_DataPointer.fromInt(0));
	gl.vertexAttribPointer(shader.get_data().aTexCoord.index,2,gl.FLOAT,false,100,$hx_$exports_lime_utils_DataPointer.fromInt(8));
	var cacheBitmapData = null;
	var lastIndex = 0;
	var skipped = tileArray.__bufferSkipped;
	var drawCount = tileArray.__length;
	tileArray.position = 0;
	var tileset;
	var flush = false;
	var _g1 = 0;
	var _g = drawCount + 1;
	while(_g1 < _g) {
		var i = _g1++;
		if(skipped.data.get(i)) {
			continue;
		}
		tileArray.position = i < drawCount ? i : drawCount - 1;
		tileset = tileArray.get_tileset();
		if(tileset == null) {
			tileset = defaultTileset;
		}
		if(tileset == null) {
			continue;
		}
		if(tileset.__bitmapData != cacheBitmapData && cacheBitmapData != null) {
			flush = true;
		}
		if(flush) {
			shader.get_data().uImage0.input = cacheBitmapData;
			renderSession.shaderManager.updateShader(shader);
			gl.drawArrays(gl.TRIANGLES,lastIndex * 6,(i - lastIndex) * 6);
			flush = false;
			lastIndex = i;
		}
		cacheBitmapData = tileset.__bitmapData;
		if(i == drawCount && tileset.__bitmapData != null) {
			shader.get_data().uImage0.input = tileset.__bitmapData;
			renderSession.shaderManager.updateShader(shader);
			gl.drawArrays(gl.TRIANGLES,lastIndex * 6,(i - lastIndex) * 6);
		}
	}
};
var openfl__$internal_renderer_opengl_GLVideo = $hx_exports["openfl"]["_internal"]["renderer"]["opengl"]["GLVideo"] = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLVideo"] = openfl__$internal_renderer_opengl_GLVideo;
openfl__$internal_renderer_opengl_GLVideo.__name__ = ["openfl","_internal","renderer","opengl","GLVideo"];
openfl__$internal_renderer_opengl_GLVideo.render = function(video,renderSession) {
	if(!video.__renderable || video.__worldAlpha <= 0 || video.__stream == null) {
		return;
	}
	if(video.__stream.__video != null) {
		var renderer = renderSession.renderer;
		var gl = renderSession.gl;
		renderSession.blendModeManager.setBlendMode(video.__worldBlendMode);
		renderSession.maskManager.pushObject(video);
		renderSession.filterManager.pushObject(video);
		var shader = renderSession.shaderManager.initShader(video.shader);
		renderSession.shaderManager.setShader(shader);
		shader.get_data().uMatrix.value = renderer.getMatrix(video.__renderTransform);
		var useColorTransform = !video.__worldColorTransform.__isDefault();
		if(shader.get_data().uColorTransform.value == null) {
			shader.get_data().uColorTransform.value = [];
		}
		shader.get_data().uColorTransform.value[0] = useColorTransform;
		renderSession.shaderManager.updateShader(shader);
		gl.bindTexture(gl.TEXTURE_2D,video.__getTexture(gl));
		if(video.smoothing) {
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.LINEAR);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR);
		} else {
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);
		}
		gl.bindBuffer(gl.ARRAY_BUFFER,video.__getBuffer(gl,video.__worldAlpha,video.__worldColorTransform));
		gl.vertexAttribPointer(shader.get_data().aPosition.index,3,gl.FLOAT,false,104,$hx_$exports_lime_utils_DataPointer.fromInt(0));
		gl.vertexAttribPointer(shader.get_data().aTexCoord.index,2,gl.FLOAT,false,104,$hx_$exports_lime_utils_DataPointer.fromInt(12));
		gl.vertexAttribPointer(shader.get_data().aAlpha.index,1,gl.FLOAT,false,104,$hx_$exports_lime_utils_DataPointer.fromInt(20));
		gl.vertexAttribPointer(shader.get_data().aColorMultipliers.index,4,gl.FLOAT,false,104,$hx_$exports_lime_utils_DataPointer.fromInt(24));
		gl.vertexAttribPointer(shader.get_data().aColorMultipliers.index + 1,4,gl.FLOAT,false,104,$hx_$exports_lime_utils_DataPointer.fromInt(40));
		gl.vertexAttribPointer(shader.get_data().aColorMultipliers.index + 2,4,gl.FLOAT,false,104,$hx_$exports_lime_utils_DataPointer.fromInt(56));
		gl.vertexAttribPointer(shader.get_data().aColorMultipliers.index + 3,4,gl.FLOAT,false,104,$hx_$exports_lime_utils_DataPointer.fromInt(72));
		gl.vertexAttribPointer(shader.get_data().aColorOffsets.index,4,gl.FLOAT,false,104,$hx_$exports_lime_utils_DataPointer.fromInt(88));
		gl.drawArrays(gl.TRIANGLE_STRIP,0,4);
		renderSession.filterManager.popObject(video);
		renderSession.maskManager.popObject(video);
	}
};
openfl__$internal_renderer_opengl_GLVideo.renderMask = function(video,renderSession) {
	if(video.__stream == null) {
		return;
	}
	if(video.__stream.__video != null) {
		var renderer = renderSession.renderer;
		var gl = renderSession.gl;
		var shader = openfl__$internal_renderer_opengl_GLMaskManager.maskShader;
		renderSession.shaderManager.setShader(shader);
		shader.get_data().uMatrix.value = renderer.getMatrix(video.__renderTransform);
		renderSession.shaderManager.updateShader(shader);
		gl.bindTexture(gl.TEXTURE_2D,video.__getTexture(gl));
		gl.bindBuffer(gl.ARRAY_BUFFER,video.__getBuffer(gl,video.__worldAlpha,video.__worldColorTransform));
		gl.vertexAttribPointer(shader.get_data().aPosition.index,3,gl.FLOAT,false,104,$hx_$exports_lime_utils_DataPointer.fromInt(0));
		gl.vertexAttribPointer(shader.get_data().aTexCoord.index,2,gl.FLOAT,false,104,$hx_$exports_lime_utils_DataPointer.fromInt(12));
		gl.drawArrays(gl.TRIANGLE_STRIP,0,4);
	}
};
var openfl__$internal_renderer_opengl_stats_DrawCallCounter = $hx_exports["openfl"]["_internal"]["renderer"]["opengl"]["stats"]["DrawCallCounter"] = function() {
	this.drawCallsCounter = 0;
	this.currentDrawCallsNum = 0;
	this.currentDrawCallsNum = 0;
	this.drawCallsCounter = 0;
};
$hxClasses["openfl._internal.renderer.opengl.stats.DrawCallCounter"] = openfl__$internal_renderer_opengl_stats_DrawCallCounter;
openfl__$internal_renderer_opengl_stats_DrawCallCounter.__name__ = ["openfl","_internal","renderer","opengl","stats","DrawCallCounter"];
openfl__$internal_renderer_opengl_stats_DrawCallCounter.prototype = {
	currentDrawCallsNum: null
	,drawCallsCounter: null
	,increment: function() {
		this.drawCallsCounter++;
	}
	,reset: function() {
		this.currentDrawCallsNum = this.drawCallsCounter;
		this.drawCallsCounter = 0;
	}
	,__class__: openfl__$internal_renderer_opengl_stats_DrawCallCounter
};
var openfl__$internal_renderer_opengl_stats_GLStats = $hx_exports["openfl"]["_internal"]["renderer"]["opengl"]["stats"]["GLStats"] = function() { };
$hxClasses["openfl._internal.renderer.opengl.stats.GLStats"] = openfl__$internal_renderer_opengl_stats_GLStats;
openfl__$internal_renderer_opengl_stats_GLStats.__name__ = ["openfl","_internal","renderer","opengl","stats","GLStats"];
openfl__$internal_renderer_opengl_stats_GLStats.incrementDrawCall = function(context) {
	openfl__$internal_renderer_opengl_stats_GLStats.drawCallsCounters.get(context).increment();
};
openfl__$internal_renderer_opengl_stats_GLStats.resetDrawCalls = function() {
	var dcCounter = openfl__$internal_renderer_opengl_stats_GLStats.drawCallsCounters.iterator();
	while(dcCounter.hasNext()) {
		var dcCounter1 = dcCounter.next();
		dcCounter1.reset();
	}
};
openfl__$internal_renderer_opengl_stats_GLStats.totalDrawCalls = function() {
	var total = 0;
	var dcCounter = openfl__$internal_renderer_opengl_stats_GLStats.drawCallsCounters.iterator();
	while(dcCounter.hasNext()) {
		var dcCounter1 = dcCounter.next();
		total += dcCounter1.currentDrawCallsNum;
	}
	return total;
};
openfl__$internal_renderer_opengl_stats_GLStats.contextDrawCalls = function(context) {
	return openfl__$internal_renderer_opengl_stats_GLStats.drawCallsCounters.get(context).currentDrawCallsNum;
};
var openfl__$internal_stage3D_AGALConverter = $hx_exports["openfl"]["_internal"]["stage3D"]["AGALConverter"] = function() { };
$hxClasses["openfl._internal.stage3D.AGALConverter"] = openfl__$internal_stage3D_AGALConverter;
openfl__$internal_stage3D_AGALConverter.__name__ = ["openfl","_internal","stage3D","AGALConverter"];
openfl__$internal_stage3D_AGALConverter.prefixFromType = function(regType,programType) {
	switch(regType) {
	case 0:
		return "va";
	case 1:
		if(programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX) {
			return "vc";
		} else {
			return "fc";
		}
		break;
	case 2:
		if(programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX) {
			return "vt";
		} else {
			return "ft";
		}
		break;
	case 3:
		return "output_";
	case 4:
		return "v";
	case 5:
		return "sampler";
	default:
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Invalid data!"));
	}
};
openfl__$internal_stage3D_AGALConverter.readUInt64 = function(byteArray) {
	var low = byteArray.readInt();
	var high = byteArray.readInt();
	var this1 = new $hx_exports.haxe._Int64.___Int64(high,low);
	return this1;
};
openfl__$internal_stage3D_AGALConverter.convertToGLSL = function(agal,samplerState) {
	agal.position = 0;
	agal.set_endian(1);
	var magic = agal.readByte() & 255;
	if(magic == 176) {
		return agal.readUTF();
	}
	if(magic != 160) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Magic value must be 0xA0, may not be AGAL"));
	}
	var version = agal.readInt();
	if(version != 1) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Version must be 1"));
	}
	var shaderTypeID = agal.readByte() & 255;
	if(shaderTypeID != 161) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Shader type ID must be 0xA1"));
	}
	var programType = (agal.readByte() & 255) == 0 ? openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX : openfl__$internal_stage3D__$AGALConverter_ProgramType.FRAGMENT;
	var map = new openfl__$internal_stage3D_RegisterMap();
	var sb = new $hx_exports.StringBuf();
	while(agal.position < openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(agal)) {
		var opcode = agal.readInt();
		var dest = agal.readUnsignedInt();
		var source1 = openfl__$internal_stage3D_AGALConverter.readUInt64(agal);
		var source2 = openfl__$internal_stage3D_AGALConverter.readUInt64(agal);
		var dr = openfl__$internal_stage3D__$AGALConverter_DestRegister.parse(dest,programType);
		var sr1 = openfl__$internal_stage3D__$AGALConverter_SourceRegister.parse(source1,programType,dr.mask);
		var sr2 = openfl__$internal_stage3D__$AGALConverter_SourceRegister.parse(source2,programType,dr.mask);
		sb.add("\t");
		switch(opcode) {
		case 0:
			sb.add(dr.toGLSL() + " = " + sr1.toGLSL() + "; // mov");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 1:
			sb.add(dr.toGLSL() + " = " + sr1.toGLSL() + " + " + sr2.toGLSL() + "; // add");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 2:
			sb.add(dr.toGLSL() + " = " + sr1.toGLSL() + " - " + sr2.toGLSL() + "; // sub");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 3:
			sb.add(dr.toGLSL() + " = " + sr1.toGLSL() + " * " + sr2.toGLSL() + "; // mul");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 4:
			sb.add(dr.toGLSL() + " = " + sr1.toGLSL() + " / " + sr2.toGLSL() + "; // div");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 5:
			var sr = sr1.toGLSL();
			if(sr.indexOf(".") > -1) {
				sb.add(dr.toGLSL() + " = 1.0 / " + sr1.toGLSL() + "; // rcp");
			} else {
				sb.add(dr.toGLSL() + " = vec4(1) / " + sr1.toGLSL() + "; // rcp");
			}
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 6:
			sb.add(dr.toGLSL() + " = min(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "); // min");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 7:
			sb.add(dr.toGLSL() + " = max(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "); // max");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 8:
			sb.add(dr.toGLSL() + " = fract(" + sr1.toGLSL() + "); // frc");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 9:
			sb.add(dr.toGLSL() + " = sqrt(" + sr1.toGLSL() + "); // sqrt");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 10:
			sb.add(dr.toGLSL() + " = inversesqrt(" + sr1.toGLSL() + "); // rsq");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 11:
			sb.add(dr.toGLSL() + " = pow(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "); // pow");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 12:
			sb.add(dr.toGLSL() + " = log2(" + sr1.toGLSL() + "); // log");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 13:
			sb.add(dr.toGLSL() + " = exp2(" + sr1.toGLSL() + "); // exp");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 14:
			sb.add(dr.toGLSL() + " = normalize(" + sr1.toGLSL() + "); // normalize");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 15:
			sb.add(dr.toGLSL() + " = sin(" + sr1.toGLSL() + "); // sin");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 16:
			sb.add(dr.toGLSL() + " = cos(" + sr1.toGLSL() + "); // cos");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 17:
			sr1.sourceMask = sr2.sourceMask = 7;
			sb.add(dr.toGLSL() + " = cross(vec3(" + sr1.toGLSL() + "), vec3(" + sr2.toGLSL() + ")); // crs");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 18:
			sr1.sourceMask = sr2.sourceMask = 7;
			sb.add(dr.toGLSL() + " = vec4(dot(vec3(" + sr1.toGLSL() + "), vec3(" + sr2.toGLSL() + ")))" + dr.getWriteMask() + "; // dp3");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 19:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb.add(dr.toGLSL() + " = vec4(dot(vec4(" + sr1.toGLSL() + "), vec4(" + sr2.toGLSL() + ")))" + dr.getWriteMask() + "; // dp4");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 20:
			sb.add(dr.toGLSL() + " = abs(" + sr1.toGLSL() + "); // abs");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 21:
			sb.add(dr.toGLSL() + " = -" + sr1.toGLSL() + "; // neg");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 22:
			sb.add(dr.toGLSL() + " = clamp(" + sr1.toGLSL() + ", 0.0, 1.0); // saturate");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 23:
			var existingUsage = map.getRegisterUsage(sr2);
			if(existingUsage != openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4 && existingUsage != openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb.add(dr.toGLSL() + " = " + sr1.toGLSL() + " * mat3(" + sr2.toGLSL(false) + "); // m33");
				map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4);
			} else {
				sr1.sourceMask = sr2.sourceMask = 7;
				sb.add(dr.toGLSL() + " = vec3(" + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,0) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,1) + ")," + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,2) + ")); // m33");
				map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,0);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,1);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,2);
			}
			break;
		case 24:
			var existingUsage1 = map.getRegisterUsage(sr2);
			if(existingUsage1 != openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4 && existingUsage1 != openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb.add(dr.toGLSL() + " = " + sr1.toGLSL() + " * " + sr2.toGLSL(false) + "; // m44");
				map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4);
			} else {
				sr1.sourceMask = sr2.sourceMask = 15;
				sb.add(dr.toGLSL() + " = vec4(" + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,0) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,1) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,2) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,3) + ")); // m44");
				map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,0);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,1);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,2);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,3);
			}
			break;
		case 25:
			dr.mask &= 7;
			var existingUsage2 = map.getRegisterUsage(sr2);
			if(existingUsage2 != openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4 && existingUsage2 != openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb.add(dr.toGLSL() + " = " + sr1.toGLSL() + " * " + sr2.toGLSL(false) + "; // m34");
				map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4);
			} else {
				sr1.sourceMask = sr2.sourceMask = 15;
				sb.add(dr.toGLSL() + " = vec3(" + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,0) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,1) + ")," + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,2) + ")); // m34");
				map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,0);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,1);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,2);
			}
			break;
		case 39:
			sr1.sourceMask = 15;
			sb.add("if (any(lessThan(" + sr1.toGLSL() + ", vec4(0)))) discard;");
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 40:
			var sampler = openfl__$internal_stage3D__$AGALConverter_SamplerRegister.parse(source2,programType);
			var _g = sampler.d;
			switch(_g) {
			case 0:
				sr1.sourceMask = 3;
				map.addSaR(sampler,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D);
				sb.add(dr.toGLSL() + " = texture2D(" + sampler.toGLSL() + ", " + sr1.toGLSL() + "); // tex");
				break;
			case 1:
				sr1.sourceMask = 7;
				sb.add(dr.toGLSL() + " = textureCube(" + sampler.toGLSL() + ", " + sr1.toGLSL() + "); // tex");
				map.addSaR(sampler,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_CUBE);
				break;
			}
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			if(samplerState != null) {
				samplerState[sampler.n] = sampler.toSamplerState();
			}
			break;
		case 41:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb.add(dr.toGLSL() + " = vec4(greaterThanEqual(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // ste");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 42:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb.add(dr.toGLSL() + " = vec4(lessThan(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // slt");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 44:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb.add(dr.toGLSL() + " = vec4(equal(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // seq");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 45:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb.add(dr.toGLSL() + " = vec4(notEqual(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // sne");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Opcode " + opcode));
		}
		sb.add("\n");
	}
	if(openfl__$internal_stage3D_AGALConverter.limitedProfile == null) {
		var version1 = $hx_exports.lime.graphics.opengl.GL.getParameter(7938);
		openfl__$internal_stage3D_AGALConverter.limitedProfile = version1.indexOf("OpenGL ES") > -1 || version1.indexOf("WebGL") > -1;
	}
	var glsl = new $hx_exports.StringBuf();
	glsl.add("// AGAL " + (programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX ? "vertex" : "fragment") + " shader\n");
	if(openfl__$internal_stage3D_AGALConverter.limitedProfile) {
		glsl.add("#version 100\n");
		glsl.add("precision highp float;\n");
	} else {
		glsl.add("#version 120\n");
	}
	glsl.add(map.toGLSL(false));
	if(programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX) {
		glsl.add("uniform vec4 vcPositionScale;\n");
	}
	glsl.add("void main() {\n");
	glsl.add(map.toGLSL(true));
	glsl.add(sb.toString());
	if(programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX) {
		glsl.add("\tgl_Position *= vcPositionScale;\n");
	}
	glsl.add("}\n");
	return glsl.toString();
};
var openfl__$internal_stage3D__$AGALConverter_DestRegister = $hx_exports["openfl"]["_internal"]["stage3D"]["_AGALConverter"]["DestRegister"] = function() {
};
$hxClasses["openfl._internal.stage3D._AGALConverter.DestRegister"] = openfl__$internal_stage3D__$AGALConverter_DestRegister;
openfl__$internal_stage3D__$AGALConverter_DestRegister.__name__ = ["openfl","_internal","stage3D","_AGALConverter","DestRegister"];
openfl__$internal_stage3D__$AGALConverter_DestRegister.parse = function(v,programType) {
	var dr = new openfl__$internal_stage3D__$AGALConverter_DestRegister();
	dr.programType = programType;
	dr.type = v >>> 24 & 15;
	dr.mask = v >>> 16 & 15;
	dr.n = v & 65535;
	return dr;
};
openfl__$internal_stage3D__$AGALConverter_DestRegister.prototype = {
	mask: null
	,n: null
	,programType: null
	,type: null
	,getWriteMask: function() {
		var str = ".";
		if((this.mask & 1) != 0) {
			str += "x";
		}
		if((this.mask & 2) != 0) {
			str += "y";
		}
		if((this.mask & 4) != 0) {
			str += "z";
		}
		if((this.mask & 8) != 0) {
			str += "w";
		}
		return str;
	}
	,toGLSL: function(useMask) {
		if(useMask == null) {
			useMask = true;
		}
		var str;
		if(this.type == 3) {
			str = this.programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX ? "gl_Position" : "gl_FragColor";
		} else {
			str = openfl__$internal_stage3D_AGALConverter.prefixFromType(this.type,this.programType) + this.n;
		}
		if(useMask && this.mask != 15) {
			str += this.getWriteMask();
		}
		return str;
	}
	,__class__: openfl__$internal_stage3D__$AGALConverter_DestRegister
};
var openfl__$internal_stage3D__$AGALConverter_ProgramType = $hxClasses["openfl._internal.stage3D._AGALConverter.ProgramType"] = { __ename__ : ["openfl","_internal","stage3D","_AGALConverter","ProgramType"], __constructs__ : ["VERTEX","FRAGMENT"] };
openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX = ["VERTEX",0];
openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX.__enum__ = openfl__$internal_stage3D__$AGALConverter_ProgramType;
openfl__$internal_stage3D__$AGALConverter_ProgramType.FRAGMENT = ["FRAGMENT",1];
openfl__$internal_stage3D__$AGALConverter_ProgramType.FRAGMENT.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_ProgramType.FRAGMENT.__enum__ = openfl__$internal_stage3D__$AGALConverter_ProgramType;
openfl__$internal_stage3D__$AGALConverter_ProgramType.__empty_constructs__ = [openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX,openfl__$internal_stage3D__$AGALConverter_ProgramType.FRAGMENT];
var openfl__$internal_stage3D_RegisterMap = $hx_exports["openfl"]["_internal"]["stage3D"]["RegisterMap"] = function() {
	this.mEntries = [];
};
$hxClasses["openfl._internal.stage3D.RegisterMap"] = openfl__$internal_stage3D_RegisterMap;
openfl__$internal_stage3D_RegisterMap.__name__ = ["openfl","_internal","stage3D","RegisterMap"];
openfl__$internal_stage3D_RegisterMap.prototype = {
	mEntries: null
	,add: function(type,name,number,usage) {
		var _g = 0;
		var _g1 = this.mEntries;
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			if(entry.type == type && entry.name == name && entry.number == number) {
				if(entry.usage != usage) {
					throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Cannot use register in multiple ways yet (mat4/vec4)"));
				}
				return;
			}
		}
		var entry1 = new openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry();
		entry1.type = type;
		entry1.name = name;
		entry1.number = number;
		entry1.usage = usage;
		this.mEntries.push(entry1);
	}
	,addDR: function(dr,usage) {
		this.add(dr.type,dr.toGLSL(false),dr.n,usage);
	}
	,addSaR: function(sr,usage) {
		this.add(sr.type,sr.toGLSL(),sr.n,usage);
	}
	,addSR: function(sr,usage,offset) {
		if(offset == null) {
			offset = 0;
		}
		if(sr.d != 0) {
			this.add(sr.itype,openfl__$internal_stage3D_AGALConverter.prefixFromType(sr.itype,sr.programType) + sr.n,sr.n,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			this.add(sr.type,openfl__$internal_stage3D_AGALConverter.prefixFromType(sr.type,sr.programType) + sr.o,sr.o,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY);
			return;
		}
		this.add(sr.type,sr.toGLSL(false,offset),sr.n + offset,usage);
	}
	,getRegisterUsage: function(sr) {
		if(sr.d != 0) {
			return openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY;
		}
		return this.getUsage(sr.type,sr.toGLSL(false),sr.n);
	}
	,getUsage: function(type,name,number) {
		var _g = 0;
		var _g1 = this.mEntries;
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			if(entry.type == type && entry.name == name && entry.number == number) {
				return entry.usage;
			}
		}
		return openfl__$internal_stage3D__$AGALConverter_RegisterUsage.UNUSED;
	}
	,toGLSL: function(tempRegistersOnly) {
		this.mEntries.sort(function(a,b) {
			return a.number - b.number;
		});
		var arrayCount = new $hx_exports.haxe.ds.ObjectMap();
		var entry;
		var _g1 = 0;
		var _g = this.mEntries.length;
		while(_g1 < _g) {
			var i = _g1++;
			entry = this.mEntries[i];
			if(entry.usage == openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				if(i < this.mEntries.length - 1) {
					var v = this.mEntries[i + 1].number - entry.number;
					arrayCount.set(entry,v);
				} else {
					arrayCount.set(entry,128);
				}
			}
		}
		this.mEntries.sort(function(a1,b1) {
			return js_Boot.__cast(a1.type , Int) - js_Boot.__cast(b1.type , Int);
		});
		var sb = new $hx_exports.StringBuf();
		var _g11 = 0;
		var _g2 = this.mEntries.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			entry = this.mEntries[i1];
			if(tempRegistersOnly && entry.type != 2 || !tempRegistersOnly && entry.type == 2) {
				continue;
			}
			if(entry.type == 3) {
				continue;
			}
			var _g21 = entry.type;
			switch(_g21) {
			case 0:
				sb.add("attribute ");
				break;
			case 1:
				sb.add("uniform ");
				break;
			case 2:
				sb.add("\t");
				break;
			case 3:
				break;
			case 4:
				sb.add("varying ");
				break;
			case 5:
				sb.add("uniform ");
				break;
			default:
				throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
			}
			var _g3 = entry.usage;
			switch(_g3[1]) {
			case 0:
				$hx_exports.haxe.Log.trace("Missing switch patten: RegisterUsage.UNUSED",{ fileName : "AGALConverter.hx", lineNumber : 811, className : "openfl._internal.stage3D.RegisterMap", methodName : "toGLSL"});
				break;
			case 1:
				sb.add("vec4 ");
				break;
			case 2:
				sb.add("mat4 ");
				break;
			case 3:
				sb.add("sampler2D ");
				break;
			case 4:
				$hx_exports.haxe.Log.trace("Missing switch patten: RegisterUsage.SAMPLER_2D_ALPHA",{ fileName : "AGALConverter.hx", lineNumber : 815, className : "openfl._internal.stage3D.RegisterMap", methodName : "toGLSL"});
				break;
			case 5:
				sb.add("samplerCube ");
				break;
			case 6:
				sb.add("vec4 ");
				break;
			}
			if(entry.usage == openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA) {
				sb.add("sampler2D ");
				sb.add(entry.name);
				sb.add(";\n");
				sb.add("uniform ");
				sb.add("sampler2D ");
				sb.add(entry.name + "_alpha");
				sb.add(";\n");
			} else if(entry.usage == openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb.add(entry.name + "[" + arrayCount.get(entry) + "]");
				sb.add(";\n");
			} else {
				sb.add(entry.name);
				sb.add(";\n");
			}
		}
		return sb.toString();
	}
	,__class__: openfl__$internal_stage3D_RegisterMap
};
var openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry = $hx_exports["openfl"]["_internal"]["stage3D"]["_AGALConverter"]["RegisterMapEntry"] = function() {
};
$hxClasses["openfl._internal.stage3D._AGALConverter.RegisterMapEntry"] = openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry;
openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry.__name__ = ["openfl","_internal","stage3D","_AGALConverter","RegisterMapEntry"];
openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry.prototype = {
	name: null
	,number: null
	,type: null
	,usage: null
	,__class__: openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry
};
var openfl__$internal_stage3D__$AGALConverter_RegisterUsage = $hxClasses["openfl._internal.stage3D._AGALConverter.RegisterUsage"] = { __ename__ : ["openfl","_internal","stage3D","_AGALConverter","RegisterUsage"], __constructs__ : ["UNUSED","VECTOR_4","MATRIX_4_4","SAMPLER_2D","SAMPLER_2D_ALPHA","SAMPLER_CUBE","VECTOR_4_ARRAY"] };
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.UNUSED = ["UNUSED",0];
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.UNUSED.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.UNUSED.__enum__ = openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4 = ["VECTOR_4",1];
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4.__enum__ = openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4 = ["MATRIX_4_4",2];
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4.__enum__ = openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D = ["SAMPLER_2D",3];
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D.__enum__ = openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA = ["SAMPLER_2D_ALPHA",4];
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA.__enum__ = openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_CUBE = ["SAMPLER_CUBE",5];
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_CUBE.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_CUBE.__enum__ = openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY = ["VECTOR_4_ARRAY",6];
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY.__enum__ = openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.__empty_constructs__ = [openfl__$internal_stage3D__$AGALConverter_RegisterUsage.UNUSED,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_CUBE,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY];
var openfl__$internal_stage3D__$AGALConverter_SamplerRegister = $hx_exports["openfl"]["_internal"]["stage3D"]["_AGALConverter"]["SamplerRegister"] = function() {
};
$hxClasses["openfl._internal.stage3D._AGALConverter.SamplerRegister"] = openfl__$internal_stage3D__$AGALConverter_SamplerRegister;
openfl__$internal_stage3D__$AGALConverter_SamplerRegister.__name__ = ["openfl","_internal","stage3D","_AGALConverter","SamplerRegister"];
openfl__$internal_stage3D__$AGALConverter_SamplerRegister.parse = function(v,programType) {
	var sr = new openfl__$internal_stage3D__$AGALConverter_SamplerRegister();
	sr.programType = programType;
	var b = 60;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new $hx_exports.haxe._Int64.___Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this2 = new $hx_exports.haxe._Int64.___Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this2;
	} else {
		var this3 = new $hx_exports.haxe._Int64.___Int64(v.high >> 31,v.high >> b - 32);
		a = this3;
	}
	var this4 = new $hx_exports.haxe._Int64.___Int64(0,15);
	var b1 = this4;
	var this5 = new $hx_exports.haxe._Int64.___Int64(a.high & b1.high,a.low & b1.low);
	sr.f = this5.low;
	var b2 = 56;
	b2 &= 63;
	var a1;
	if(b2 == 0) {
		var this6 = new $hx_exports.haxe._Int64.___Int64(v.high,v.low);
		a1 = this6;
	} else if(b2 < 32) {
		var this7 = new $hx_exports.haxe._Int64.___Int64(v.high >> b2,v.high << 32 - b2 | v.low >>> b2);
		a1 = this7;
	} else {
		var this8 = new $hx_exports.haxe._Int64.___Int64(v.high >> 31,v.high >> b2 - 32);
		a1 = this8;
	}
	var this9 = new $hx_exports.haxe._Int64.___Int64(0,15);
	var b3 = this9;
	var this10 = new $hx_exports.haxe._Int64.___Int64(a1.high & b3.high,a1.low & b3.low);
	sr.m = this10.low;
	var b4 = 52;
	b4 &= 63;
	var a2;
	if(b4 == 0) {
		var this11 = new $hx_exports.haxe._Int64.___Int64(v.high,v.low);
		a2 = this11;
	} else if(b4 < 32) {
		var this12 = new $hx_exports.haxe._Int64.___Int64(v.high >> b4,v.high << 32 - b4 | v.low >>> b4);
		a2 = this12;
	} else {
		var this13 = new $hx_exports.haxe._Int64.___Int64(v.high >> 31,v.high >> b4 - 32);
		a2 = this13;
	}
	var this14 = new $hx_exports.haxe._Int64.___Int64(0,15);
	var b5 = this14;
	var this15 = new $hx_exports.haxe._Int64.___Int64(a2.high & b5.high,a2.low & b5.low);
	sr.w = this15.low;
	var b6 = 48;
	b6 &= 63;
	var a3;
	if(b6 == 0) {
		var this16 = new $hx_exports.haxe._Int64.___Int64(v.high,v.low);
		a3 = this16;
	} else if(b6 < 32) {
		var this17 = new $hx_exports.haxe._Int64.___Int64(v.high >> b6,v.high << 32 - b6 | v.low >>> b6);
		a3 = this17;
	} else {
		var this18 = new $hx_exports.haxe._Int64.___Int64(v.high >> 31,v.high >> b6 - 32);
		a3 = this18;
	}
	var this19 = new $hx_exports.haxe._Int64.___Int64(0,15);
	var b7 = this19;
	var this20 = new $hx_exports.haxe._Int64.___Int64(a3.high & b7.high,a3.low & b7.low);
	sr.s = this20.low;
	var b8 = 44;
	b8 &= 63;
	var a4;
	if(b8 == 0) {
		var this21 = new $hx_exports.haxe._Int64.___Int64(v.high,v.low);
		a4 = this21;
	} else if(b8 < 32) {
		var this22 = new $hx_exports.haxe._Int64.___Int64(v.high >> b8,v.high << 32 - b8 | v.low >>> b8);
		a4 = this22;
	} else {
		var this23 = new $hx_exports.haxe._Int64.___Int64(v.high >> 31,v.high >> b8 - 32);
		a4 = this23;
	}
	var this24 = new $hx_exports.haxe._Int64.___Int64(0,15);
	var b9 = this24;
	var this25 = new $hx_exports.haxe._Int64.___Int64(a4.high & b9.high,a4.low & b9.low);
	sr.d = this25.low;
	var b10 = 40;
	b10 &= 63;
	var a5;
	if(b10 == 0) {
		var this26 = new $hx_exports.haxe._Int64.___Int64(v.high,v.low);
		a5 = this26;
	} else if(b10 < 32) {
		var this27 = new $hx_exports.haxe._Int64.___Int64(v.high >> b10,v.high << 32 - b10 | v.low >>> b10);
		a5 = this27;
	} else {
		var this28 = new $hx_exports.haxe._Int64.___Int64(v.high >> 31,v.high >> b10 - 32);
		a5 = this28;
	}
	var this29 = new $hx_exports.haxe._Int64.___Int64(0,15);
	var b11 = this29;
	var this30 = new $hx_exports.haxe._Int64.___Int64(a5.high & b11.high,a5.low & b11.low);
	sr.t = this30.low;
	var b12 = 32;
	b12 &= 63;
	var a6;
	if(b12 == 0) {
		var this31 = new $hx_exports.haxe._Int64.___Int64(v.high,v.low);
		a6 = this31;
	} else if(b12 < 32) {
		var this32 = new $hx_exports.haxe._Int64.___Int64(v.high >> b12,v.high << 32 - b12 | v.low >>> b12);
		a6 = this32;
	} else {
		var this33 = new $hx_exports.haxe._Int64.___Int64(v.high >> 31,v.high >> b12 - 32);
		a6 = this33;
	}
	var this34 = new $hx_exports.haxe._Int64.___Int64(0,15);
	var b13 = this34;
	var this35 = new $hx_exports.haxe._Int64.___Int64(a6.high & b13.high,a6.low & b13.low);
	sr.type = this35.low;
	var b14 = 16;
	b14 &= 63;
	var a7;
	if(b14 == 0) {
		var this36 = new $hx_exports.haxe._Int64.___Int64(v.high,v.low);
		a7 = this36;
	} else if(b14 < 32) {
		var this37 = new $hx_exports.haxe._Int64.___Int64(v.high >> b14,v.high << 32 - b14 | v.low >>> b14);
		a7 = this37;
	} else {
		var this38 = new $hx_exports.haxe._Int64.___Int64(v.high >> 31,v.high >> b14 - 32);
		a7 = this38;
	}
	var this39 = new $hx_exports.haxe._Int64.___Int64(0,255);
	var b15 = this39;
	var this40 = new $hx_exports.haxe._Int64.___Int64(a7.high & b15.high,a7.low & b15.low);
	sr.b = this40.low;
	var this41 = new $hx_exports.haxe._Int64.___Int64(0,65535);
	var b16 = this41;
	var this42 = new $hx_exports.haxe._Int64.___Int64(v.high & b16.high,v.low & b16.low);
	sr.n = this42.low;
	return sr;
};
openfl__$internal_stage3D__$AGALConverter_SamplerRegister.prototype = {
	b: null
	,d: null
	,f: null
	,m: null
	,n: null
	,programType: null
	,s: null
	,t: null
	,type: null
	,w: null
	,toGLSL: function() {
		var str = openfl__$internal_stage3D_AGALConverter.prefixFromType(this.type,this.programType) + this.n;
		return str;
	}
	,toSamplerState: function() {
		var magFilter = 0;
		var minFilter = 0;
		var wrapModeS = 0;
		var wrapModeT = 0;
		var _g = this.f;
		switch(_g) {
		case 0:
			magFilter = 9728;
			break;
		case 1:
			magFilter = 9729;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		var _g1 = this.m;
		switch(_g1) {
		case 0:
			minFilter = this.f != 0 ? 9729 : 9728;
			break;
		case 1:
			minFilter = this.f != 0 ? 9985 : 9984;
			break;
		case 2:
			minFilter = this.f != 0 ? 9987 : 9986;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		var _g2 = this.w;
		switch(_g2) {
		case 0:
			wrapModeS = 33071;
			wrapModeT = 33071;
			break;
		case 1:
			wrapModeS = 10497;
			wrapModeT = 10497;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		var ignoreSampler = (this.s & 4) == 4;
		var centroid = (this.s & 1) == 1;
		var lodBias = (this.b << 24 >> 24) / 8.0;
		var maxAniso = 0.0;
		return new openfl__$internal_stage3D_SamplerState(minFilter,magFilter,wrapModeS,wrapModeT,lodBias,maxAniso,ignoreSampler,centroid);
	}
	,__class__: openfl__$internal_stage3D__$AGALConverter_SamplerRegister
};
var openfl__$internal_stage3D__$AGALConverter_SourceRegister = $hx_exports["openfl"]["_internal"]["stage3D"]["_AGALConverter"]["SourceRegister"] = function() {
};
$hxClasses["openfl._internal.stage3D._AGALConverter.SourceRegister"] = openfl__$internal_stage3D__$AGALConverter_SourceRegister;
openfl__$internal_stage3D__$AGALConverter_SourceRegister.__name__ = ["openfl","_internal","stage3D","_AGALConverter","SourceRegister"];
openfl__$internal_stage3D__$AGALConverter_SourceRegister.parse = function(v,programType,sourceMask) {
	var sr = new openfl__$internal_stage3D__$AGALConverter_SourceRegister();
	sr.programType = programType;
	var b = 63;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new $hx_exports.haxe._Int64.___Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this2 = new $hx_exports.haxe._Int64.___Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this2;
	} else {
		var this3 = new $hx_exports.haxe._Int64.___Int64(v.high >> 31,v.high >> b - 32);
		a = this3;
	}
	var this4 = new $hx_exports.haxe._Int64.___Int64(0,1);
	var b1 = this4;
	var this5 = new $hx_exports.haxe._Int64.___Int64(a.high & b1.high,a.low & b1.low);
	sr.d = this5.low;
	var b2 = 48;
	b2 &= 63;
	var a1;
	if(b2 == 0) {
		var this6 = new $hx_exports.haxe._Int64.___Int64(v.high,v.low);
		a1 = this6;
	} else if(b2 < 32) {
		var this7 = new $hx_exports.haxe._Int64.___Int64(v.high >> b2,v.high << 32 - b2 | v.low >>> b2);
		a1 = this7;
	} else {
		var this8 = new $hx_exports.haxe._Int64.___Int64(v.high >> 31,v.high >> b2 - 32);
		a1 = this8;
	}
	var this9 = new $hx_exports.haxe._Int64.___Int64(0,3);
	var b3 = this9;
	var this10 = new $hx_exports.haxe._Int64.___Int64(a1.high & b3.high,a1.low & b3.low);
	sr.q = this10.low;
	var b4 = 40;
	b4 &= 63;
	var a2;
	if(b4 == 0) {
		var this11 = new $hx_exports.haxe._Int64.___Int64(v.high,v.low);
		a2 = this11;
	} else if(b4 < 32) {
		var this12 = new $hx_exports.haxe._Int64.___Int64(v.high >> b4,v.high << 32 - b4 | v.low >>> b4);
		a2 = this12;
	} else {
		var this13 = new $hx_exports.haxe._Int64.___Int64(v.high >> 31,v.high >> b4 - 32);
		a2 = this13;
	}
	var this14 = new $hx_exports.haxe._Int64.___Int64(0,15);
	var b5 = this14;
	var this15 = new $hx_exports.haxe._Int64.___Int64(a2.high & b5.high,a2.low & b5.low);
	sr.itype = this15.low;
	var b6 = 32;
	b6 &= 63;
	var a3;
	if(b6 == 0) {
		var this16 = new $hx_exports.haxe._Int64.___Int64(v.high,v.low);
		a3 = this16;
	} else if(b6 < 32) {
		var this17 = new $hx_exports.haxe._Int64.___Int64(v.high >> b6,v.high << 32 - b6 | v.low >>> b6);
		a3 = this17;
	} else {
		var this18 = new $hx_exports.haxe._Int64.___Int64(v.high >> 31,v.high >> b6 - 32);
		a3 = this18;
	}
	var this19 = new $hx_exports.haxe._Int64.___Int64(0,15);
	var b7 = this19;
	var this20 = new $hx_exports.haxe._Int64.___Int64(a3.high & b7.high,a3.low & b7.low);
	sr.type = this20.low;
	var b8 = 24;
	b8 &= 63;
	var a4;
	if(b8 == 0) {
		var this21 = new $hx_exports.haxe._Int64.___Int64(v.high,v.low);
		a4 = this21;
	} else if(b8 < 32) {
		var this22 = new $hx_exports.haxe._Int64.___Int64(v.high >> b8,v.high << 32 - b8 | v.low >>> b8);
		a4 = this22;
	} else {
		var this23 = new $hx_exports.haxe._Int64.___Int64(v.high >> 31,v.high >> b8 - 32);
		a4 = this23;
	}
	var this24 = new $hx_exports.haxe._Int64.___Int64(0,255);
	var b9 = this24;
	var this25 = new $hx_exports.haxe._Int64.___Int64(a4.high & b9.high,a4.low & b9.low);
	sr.s = this25.low;
	var b10 = 16;
	b10 &= 63;
	var a5;
	if(b10 == 0) {
		var this26 = new $hx_exports.haxe._Int64.___Int64(v.high,v.low);
		a5 = this26;
	} else if(b10 < 32) {
		var this27 = new $hx_exports.haxe._Int64.___Int64(v.high >> b10,v.high << 32 - b10 | v.low >>> b10);
		a5 = this27;
	} else {
		var this28 = new $hx_exports.haxe._Int64.___Int64(v.high >> 31,v.high >> b10 - 32);
		a5 = this28;
	}
	var this29 = new $hx_exports.haxe._Int64.___Int64(0,255);
	var b11 = this29;
	var this30 = new $hx_exports.haxe._Int64.___Int64(a5.high & b11.high,a5.low & b11.low);
	sr.o = this30.low;
	var this31 = new $hx_exports.haxe._Int64.___Int64(0,65535);
	var b12 = this31;
	var this32 = new $hx_exports.haxe._Int64.___Int64(v.high & b12.high,v.low & b12.low);
	sr.n = this32.low;
	sr.sourceMask = sourceMask;
	return sr;
};
openfl__$internal_stage3D__$AGALConverter_SourceRegister.prototype = {
	d: null
	,itype: null
	,n: null
	,o: null
	,programType: null
	,q: null
	,s: null
	,sourceMask: null
	,type: null
	,toGLSL: function(emitSwizzle,offset) {
		if(offset == null) {
			offset = 0;
		}
		if(emitSwizzle == null) {
			emitSwizzle = true;
		}
		if(this.type == 3) {
			if(this.programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX) {
				return "gl_Position";
			} else {
				return "gl_FragColor";
			}
		}
		var fullxyzw = this.s == 228 && this.sourceMask == 15;
		var swizzle = "";
		if(this.type != 5 && !fullxyzw) {
			var _g = 0;
			while(_g < 4) {
				var i = _g++;
				if((this.sourceMask & 1 << i) != 0) {
					var _g1 = this.s >> i * 2 & 3;
					switch(_g1) {
					case 0:
						swizzle += "x";
						break;
					case 1:
						swizzle += "y";
						break;
					case 2:
						swizzle += "z";
						break;
					case 3:
						swizzle += "w";
						break;
					}
				}
			}
		}
		var str = openfl__$internal_stage3D_AGALConverter.prefixFromType(this.type,this.programType);
		if(this.d == 0) {
			str += this.n + offset;
		} else {
			str += this.o;
			var indexComponent = String.fromCharCode($hx_exports.HxOverrides.cca("x",0) + this.q);
			var indexRegister = openfl__$internal_stage3D_AGALConverter.prefixFromType(this.itype,this.programType) + this.n + "." + indexComponent;
			str += "[ int(" + indexRegister + ") +" + offset + "]";
		}
		if(emitSwizzle && swizzle != "") {
			str += "." + swizzle;
		}
		return str;
	}
	,__class__: openfl__$internal_stage3D__$AGALConverter_SourceRegister
};
var openfl__$internal_stage3D_Context3DStateCache = $hx_exports["openfl"]["_internal"]["stage3D"]["Context3DStateCache"] = function() {
	this._registers = openfl__$Vector_Vector_$Impl_$.toFloatVector(null,4096);
	this.clearSettings();
};
$hxClasses["openfl._internal.stage3D.Context3DStateCache"] = openfl__$internal_stage3D_Context3DStateCache;
openfl__$internal_stage3D_Context3DStateCache.__name__ = ["openfl","_internal","stage3D","Context3DStateCache"];
openfl__$internal_stage3D_Context3DStateCache.prototype = {
	_activeTexture: null
	,_activeVertexArray: null
	,_cullingMode: null
	,_depthTestCompareMode: null
	,_depthTestEnabled: null
	,_depthTestMask: null
	,_destBlendFactor: null
	,_program: null
	,_registers: null
	,_srcBlendFactor: null
	,_viewportHeight: null
	,_viewportOriginX: null
	,_viewportOriginY: null
	,_viewportWidth: null
	,clearRegisters: function() {
		var numFloats = 4096;
		var _g1 = 0;
		var _g = numFloats;
		while(_g1 < _g) {
			var c = _g1++;
			this._registers.data.set(c,-999999999.0);
		}
	}
	,clearSettings: function() {
		this._srcBlendFactor = null;
		this._destBlendFactor = null;
		this._depthTestEnabled = false;
		this._depthTestMask = false;
		this._depthTestCompareMode = null;
		this._program = null;
		this._cullingMode = null;
		this._activeTexture = -1;
		this._activeVertexArray = -1;
		this._viewportOriginX = -1;
		this._viewportOriginY = -1;
		this._viewportWidth = -1;
		this._viewportHeight = -1;
		this.clearRegisters();
	}
	,updateActiveTextureSample: function(texture) {
		this._activeTexture = texture;
		return true;
	}
	,updateActiveVertexArray: function(vertexArray) {
		this._activeVertexArray = vertexArray;
		return true;
	}
	,updateBlendDestFactor: function(factor) {
		this._destBlendFactor = factor;
		return true;
	}
	,updateBlendSrcFactor: function(factor) {
		this._srcBlendFactor = factor;
		return true;
	}
	,updateCullingMode: function(cullMode) {
		this._cullingMode = cullMode;
		return true;
	}
	,updateDepthCompareMode: function(mode) {
		this._depthTestCompareMode = mode;
		return true;
	}
	,updateDepthTestEnabled: function(test) {
		this._depthTestEnabled = test;
		return true;
	}
	,updateDepthTestMask: function(mask) {
		this._depthTestMask = mask;
		return true;
	}
	,updateProgram3D: function(program3d) {
		this._program = program3d;
		return true;
	}
	,updateRegisters: function(mTemp,startRegister,numRegisters) {
		return true;
	}
	,updateViewport: function(originX,originY,width,height) {
		this._viewportOriginX = originX;
		this._viewportOriginY = originY;
		this._viewportWidth = width;
		this._viewportHeight = height;
		return true;
	}
	,__class__: openfl__$internal_stage3D_Context3DStateCache
};
var openfl__$internal_stage3D_GLCompressedTextureFormats = $hx_exports["openfl"]["_internal"]["stage3D"]["GLCompressedTextureFormats"] = function(gl) {
	this.__formatMapAlpha = new $hx_exports.haxe.ds.IntMap();
	this.__formatMap = new $hx_exports.haxe.ds.IntMap();
	this.checkDXT(gl);
	this.checkETC1(gl);
	this.checkPVRTC(gl);
};
$hxClasses["openfl._internal.stage3D.GLCompressedTextureFormats"] = openfl__$internal_stage3D_GLCompressedTextureFormats;
openfl__$internal_stage3D_GLCompressedTextureFormats.__name__ = ["openfl","_internal","stage3D","GLCompressedTextureFormats"];
openfl__$internal_stage3D_GLCompressedTextureFormats.prototype = {
	__formatMap: null
	,__formatMapAlpha: null
	,checkDXT: function(gl) {
		var compressedExtension = gl.getExtension("WEBGL_compressed_texture_s3tc");
		if(compressedExtension != null) {
			var v = compressedExtension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
			this.__formatMap.set(0,v);
			var v1 = compressedExtension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
			this.__formatMapAlpha.set(0,v1);
		}
	}
	,checkETC1: function(gl) {
		var compressedExtension = gl.getExtension("WEBGL_compressed_texture_etc1");
		if(compressedExtension != null) {
			var v = compressedExtension.COMPRESSED_RGB_ETC1_WEBGL;
			this.__formatMap.set(2,v);
		}
	}
	,checkPVRTC: function(gl) {
		var compressedExtension = gl.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
		if(compressedExtension != null) {
			var v = compressedExtension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
			this.__formatMap.set(1,v);
			var v1 = compressedExtension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
			this.__formatMapAlpha.set(1,v1);
		}
	}
	,toTextureFormat: function(alpha,gpuFormat) {
		if(alpha) {
			return this.__formatMap.get(gpuFormat);
		} else {
			return this.__formatMapAlpha.get(gpuFormat);
		}
	}
	,__class__: openfl__$internal_stage3D_GLCompressedTextureFormats
};
var openfl__$internal_stage3D_GLUtils = $hx_exports["openfl"]["_internal"]["stage3D"]["GLUtils"] = function() { };
$hxClasses["openfl._internal.stage3D.GLUtils"] = openfl__$internal_stage3D_GLUtils;
openfl__$internal_stage3D_GLUtils.__name__ = ["openfl","_internal","stage3D","GLUtils"];
openfl__$internal_stage3D_GLUtils.CheckGLError = function() {
	if(!openfl__$internal_stage3D_GLUtils.debug) {
		return;
	}
	var error = $hx_exports.lime.graphics.opengl.GL.getError();
	if(error != 0) {
		var errorText;
		switch(error) {
		case 0:
			errorText = "GL_NO_ERROR";
			break;
		case 1280:
			errorText = "GL_INVALID_ENUM";
			break;
		case 1281:
			errorText = "GL_INVALID_VALUE";
			break;
		case 1282:
			errorText = "GL_INVALID_OPERATION";
			break;
		case 1285:
			errorText = "GL_OUT_OF_MEMORY";
			break;
		case 1286:
			errorText = "GL_INVALID_FRAMEBUFFER_OPERATION";
			break;
		default:
			errorText = error == null ? "null" : "" + error;
		}
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Error calling openGL api. Error: " + errorText + "\n"));
	}
};
var openfl__$internal_stage3D_SamplerState = $hx_exports["openfl"]["_internal"]["stage3D"]["SamplerState"] = function(minFilter,magFilter,wrapModeS,wrapModeT,lodBias,maxAniso,ignoreSampler,centroid,mipmapGenerated) {
	if(mipmapGenerated == null) {
		mipmapGenerated = false;
	}
	if(centroid == null) {
		centroid = false;
	}
	if(ignoreSampler == null) {
		ignoreSampler = false;
	}
	if(maxAniso == null) {
		maxAniso = 0.0;
	}
	if(lodBias == null) {
		lodBias = 0.0;
	}
	this.set_minFilter(minFilter);
	this.set_magFilter(magFilter);
	this.set_wrapModeS(wrapModeS);
	this.set_wrapModeT(wrapModeT);
	this.set_lodBias(lodBias);
	this.set_maxAniso(maxAniso);
	this.ignoreSampler = ignoreSampler;
	this.centroid = centroid;
	this.mipmapGenerated = mipmapGenerated;
	this.__samplerDirty = true;
};
$hxClasses["openfl._internal.stage3D.SamplerState"] = openfl__$internal_stage3D_SamplerState;
openfl__$internal_stage3D_SamplerState.__name__ = ["openfl","_internal","stage3D","SamplerState"];
openfl__$internal_stage3D_SamplerState.prototype = {
	lodBias: null
	,magFilter: null
	,maxAniso: null
	,minFilter: null
	,wrapModeS: null
	,wrapModeT: null
	,centroid: null
	,ignoreSampler: null
	,mipmapGenerated: null
	,__samplerDirty: null
	,copyFrom: function(other) {
		if(other == null || other.ignoreSampler) {
			return;
		}
		this.set_minFilter(other.minFilter);
		this.set_magFilter(other.magFilter);
		this.set_wrapModeS(other.wrapModeS);
		this.set_wrapModeT(other.wrapModeT);
		this.set_lodBias(other.lodBias);
		this.set_maxAniso(other.maxAniso);
		this.centroid = other.centroid;
		this.mipmapGenerated = other.mipmapGenerated;
	}
	,equals: function(other) {
		if(this == other) {
			return !this.__samplerDirty;
		}
		if(other == null) {
			return false;
		}
		if(this.minFilter == other.minFilter && this.magFilter == other.magFilter && this.wrapModeS == other.wrapModeS && this.wrapModeT == other.wrapModeT && this.lodBias == other.lodBias && this.maxAniso == other.maxAniso) {
			return this.mipmapGenerated == other.mipmapGenerated;
		} else {
			return false;
		}
	}
	,set_lodBias: function(value) {
		if(this.lodBias != value) {
			this.__samplerDirty = true;
		}
		return this.lodBias = value;
	}
	,set_magFilter: function(value) {
		if(this.magFilter != value) {
			this.__samplerDirty = true;
		}
		return this.magFilter = value;
	}
	,set_maxAniso: function(value) {
		if(this.maxAniso != value) {
			this.__samplerDirty = true;
		}
		return this.maxAniso = value;
	}
	,set_minFilter: function(value) {
		if(this.minFilter != value) {
			this.__samplerDirty = true;
		}
		return this.minFilter = value;
	}
	,set_wrapModeS: function(value) {
		if(this.wrapModeS != value) {
			this.__samplerDirty = true;
		}
		return this.wrapModeS = value;
	}
	,set_wrapModeT: function(value) {
		if(this.wrapModeT != value) {
			this.__samplerDirty = true;
		}
		return this.wrapModeT = value;
	}
	,__class__: openfl__$internal_stage3D_SamplerState
	,__properties__: {set_wrapModeT:"set_wrapModeT",set_wrapModeS:"set_wrapModeS",set_minFilter:"set_minFilter",set_maxAniso:"set_maxAniso",set_magFilter:"set_magFilter",set_lodBias:"set_lodBias"}
};
var openfl__$internal_stage3D_assembler_FS = $hx_exports["openfl"]["_internal"]["stage3D"]["assembler"]["FS"] = function() {
};
$hxClasses["openfl._internal.stage3D.assembler.FS"] = openfl__$internal_stage3D_assembler_FS;
openfl__$internal_stage3D_assembler_FS.__name__ = ["openfl","_internal","stage3D","assembler","FS"];
openfl__$internal_stage3D_assembler_FS.prototype = {
	format: null
	,size: null
	,__class__: openfl__$internal_stage3D_assembler_FS
};
var openfl__$internal_stage3D_assembler_Flags = $hx_exports["openfl"]["_internal"]["stage3D"]["assembler"]["Flags"] = function() {
};
$hxClasses["openfl._internal.stage3D.assembler.Flags"] = openfl__$internal_stage3D_assembler_Flags;
openfl__$internal_stage3D_assembler_Flags.__name__ = ["openfl","_internal","stage3D","assembler","Flags"];
openfl__$internal_stage3D_assembler_Flags.prototype = {
	fragonly: null
	,horizontal: null
	,matrix: null
	,simple: null
	,__class__: openfl__$internal_stage3D_assembler_Flags
};
var openfl__$internal_stage3D_assembler_Opcode = $hx_exports["openfl"]["_internal"]["stage3D"]["assembler"]["Opcode"] = function(dest,aformat,asize,bformat,bsize,opcode,simple,horizontal,fragonly,matrix) {
	if(matrix == null) {
		matrix = false;
	}
	if(fragonly == null) {
		fragonly = false;
	}
	if(horizontal == null) {
		horizontal = false;
	}
	this.a = new openfl__$internal_stage3D_assembler_FS();
	this.b = new openfl__$internal_stage3D_assembler_FS();
	this.flags = new openfl__$internal_stage3D_assembler_Flags();
	this.dest = dest;
	this.a.format = aformat;
	this.a.size = asize;
	this.b.format = bformat;
	this.b.size = bsize;
	this.opcode = opcode;
	this.flags.simple = simple;
	this.flags.horizontal = horizontal;
	this.flags.fragonly = fragonly;
	this.flags.matrix = matrix;
};
$hxClasses["openfl._internal.stage3D.assembler.Opcode"] = openfl__$internal_stage3D_assembler_Opcode;
openfl__$internal_stage3D_assembler_Opcode.__name__ = ["openfl","_internal","stage3D","assembler","Opcode"];
openfl__$internal_stage3D_assembler_Opcode.prototype = {
	a: null
	,b: null
	,dest: null
	,flags: null
	,opcode: null
	,__class__: openfl__$internal_stage3D_assembler_Opcode
};
var openfl__$internal_stage3D_assembler_OpcodeMap = $hx_exports["openfl"]["_internal"]["stage3D"]["assembler"]["OpcodeMap"] = function() { };
$hxClasses["openfl._internal.stage3D.assembler.OpcodeMap"] = openfl__$internal_stage3D_assembler_OpcodeMap;
openfl__$internal_stage3D_assembler_OpcodeMap.__name__ = ["openfl","_internal","stage3D","assembler","OpcodeMap"];
openfl__$internal_stage3D_assembler_OpcodeMap.__properties__ = {get_map:"get_map"};
openfl__$internal_stage3D_assembler_OpcodeMap._map = null;
openfl__$internal_stage3D_assembler_OpcodeMap.get_map = function() {
	if(openfl__$internal_stage3D_assembler_OpcodeMap._map == null) {
		openfl__$internal_stage3D_assembler_OpcodeMap._map = new haxe_ds_StringMap();
		openfl__$internal_stage3D_assembler_OpcodeMap._map.set("mov",new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"none",0,0,true,false,false,false));
		openfl__$internal_stage3D_assembler_OpcodeMap._map.set("add",new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"vector",4,1,true,false,false,false));
		openfl__$internal_stage3D_assembler_OpcodeMap._map.set("sub",new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"vector",4,2,true,false,false,false));
		openfl__$internal_stage3D_assembler_OpcodeMap._map.set("mul",new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"vector",4,3,true,false,false,false));
		openfl__$internal_stage3D_assembler_OpcodeMap._map.set("div",new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"vector",4,4,true,false,false,false));
		openfl__$internal_stage3D_assembler_OpcodeMap._map.set("rcp",new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"none",0,5,true,false,false,false));
		openfl__$internal_stage3D_assembler_OpcodeMap._map.set("min",new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"vector",4,6,true,false,false,false));
		openfl__$internal_stage3D_assembler_OpcodeMap._map.set("max",new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"vector",4,7,true,false,false,false));
		openfl__$internal_stage3D_assembler_OpcodeMap._map.set("frc",new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"none",0,8,true,false,false,false));
		openfl__$internal_stage3D_assembler_OpcodeMap._map.set("sqt",new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"none",0,9,true,false,false,false));
		openfl__$internal_stage3D_assembler_OpcodeMap._map.set("rsq",new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"none",0,10,true,false,false,false));
		openfl__$internal_stage3D_assembler_OpcodeMap._map.set("pow",new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"vector",4,11,true,false,false,false));
		openfl__$internal_stage3D_assembler_OpcodeMap._map.set("log",new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"none",0,12,true,false,false,false));
		openfl__$internal_stage3D_assembler_OpcodeMap._map.set("exp",new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"none",0,13,true,false,false,false));
		openfl__$internal_stage3D_assembler_OpcodeMap._map.set("nrm",new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"none",0,14,true,false,false,false));
		openfl__$internal_stage3D_assembler_OpcodeMap._map.set("sin",new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"none",0,15,true,false,false,false));
		openfl__$internal_stage3D_assembler_OpcodeMap._map.set("cos",new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"none",0,16,true,false,false,false));
		openfl__$internal_stage3D_assembler_OpcodeMap._map.set("crs",new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"vector",4,17,true,true,false,false));
		openfl__$internal_stage3D_assembler_OpcodeMap._map.set("dp3",new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"vector",4,18,true,true,false,false));
		openfl__$internal_stage3D_assembler_OpcodeMap._map.set("dp4",new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"vector",4,19,true,true,false,false));
		openfl__$internal_stage3D_assembler_OpcodeMap._map.set("abs",new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"none",0,20,true,false,false,false));
		openfl__$internal_stage3D_assembler_OpcodeMap._map.set("neg",new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"none",0,21,true,false,false,false));
		openfl__$internal_stage3D_assembler_OpcodeMap._map.set("sat",new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"none",0,22,true,false,false,false));
		openfl__$internal_stage3D_assembler_OpcodeMap._map.set("ted",new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"sampler",1,38,true,false,true,false));
		openfl__$internal_stage3D_assembler_OpcodeMap._map.set("kil",new openfl__$internal_stage3D_assembler_Opcode("none","scalar",1,"none",0,39,true,false,true,false));
		openfl__$internal_stage3D_assembler_OpcodeMap._map.set("tex",new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"sampler",1,40,true,false,true,false));
		openfl__$internal_stage3D_assembler_OpcodeMap._map.set("m33",new openfl__$internal_stage3D_assembler_Opcode("vector","matrix",3,"vector",3,23,true,false,false,true));
		openfl__$internal_stage3D_assembler_OpcodeMap._map.set("m44",new openfl__$internal_stage3D_assembler_Opcode("vector","matrix",4,"vector",4,24,true,false,false,true));
		openfl__$internal_stage3D_assembler_OpcodeMap._map.set("m43",new openfl__$internal_stage3D_assembler_Opcode("vector","matrix",3,"vector",4,25,true,false,false,true));
		openfl__$internal_stage3D_assembler_OpcodeMap._map.set("sge",new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"vector",4,41,true,false,false,false));
		openfl__$internal_stage3D_assembler_OpcodeMap._map.set("slt",new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"vector",4,42,true,false,false,false));
		openfl__$internal_stage3D_assembler_OpcodeMap._map.set("sgn",new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"vector",4,43,true,false,false,false));
		openfl__$internal_stage3D_assembler_OpcodeMap._map.set("seq",new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"vector",4,44,true,false,false,false));
		openfl__$internal_stage3D_assembler_OpcodeMap._map.set("sne",new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"vector",4,45,true,false,false,false));
	}
	return openfl__$internal_stage3D_assembler_OpcodeMap._map;
};
var openfl__$internal_stage3D_assembler_Part = $hx_exports["openfl"]["_internal"]["stage3D"]["assembler"]["Part"] = function(name,version) {
	if(version == null) {
		version = 0;
	}
	if(name == null) {
		name = "";
	}
	this.name = name;
	this.version = version;
	var this1 = new openfl_utils_ByteArrayData(0);
	this.data = this1;
	this.data.set_endian(1);
};
$hxClasses["openfl._internal.stage3D.assembler.Part"] = openfl__$internal_stage3D_assembler_Part;
openfl__$internal_stage3D_assembler_Part.__name__ = ["openfl","_internal","stage3D","assembler","Part"];
openfl__$internal_stage3D_assembler_Part.prototype = {
	data: null
	,name: null
	,version: null
	,__class__: openfl__$internal_stage3D_assembler_Part
};
var openfl__$internal_stage3D_assembler_Reg = $hx_exports["openfl"]["_internal"]["stage3D"]["assembler"]["Reg"] = function(code,desc) {
	this.code = code;
	this.desc = desc;
};
$hxClasses["openfl._internal.stage3D.assembler.Reg"] = openfl__$internal_stage3D_assembler_Reg;
openfl__$internal_stage3D_assembler_Reg.__name__ = ["openfl","_internal","stage3D","assembler","Reg"];
openfl__$internal_stage3D_assembler_Reg.prototype = {
	code: null
	,desc: null
	,__class__: openfl__$internal_stage3D_assembler_Reg
};
var openfl__$internal_stage3D_assembler_RegMap = $hx_exports["openfl"]["_internal"]["stage3D"]["assembler"]["RegMap"] = function() { };
$hxClasses["openfl._internal.stage3D.assembler.RegMap"] = openfl__$internal_stage3D_assembler_RegMap;
openfl__$internal_stage3D_assembler_RegMap.__name__ = ["openfl","_internal","stage3D","assembler","RegMap"];
openfl__$internal_stage3D_assembler_RegMap.__properties__ = {get_map:"get_map"};
openfl__$internal_stage3D_assembler_RegMap._map = null;
openfl__$internal_stage3D_assembler_RegMap.get_map = function() {
	if(openfl__$internal_stage3D_assembler_RegMap._map == null) {
		openfl__$internal_stage3D_assembler_RegMap._map = new haxe_ds_StringMap();
		openfl__$internal_stage3D_assembler_RegMap._map.set("va",new openfl__$internal_stage3D_assembler_Reg(0,"vertex attribute"));
		openfl__$internal_stage3D_assembler_RegMap._map.set("fc",new openfl__$internal_stage3D_assembler_Reg(1,"fragment constant"));
		openfl__$internal_stage3D_assembler_RegMap._map.set("vc",new openfl__$internal_stage3D_assembler_Reg(1,"vertex constant"));
		openfl__$internal_stage3D_assembler_RegMap._map.set("ft",new openfl__$internal_stage3D_assembler_Reg(2,"fragment temporary"));
		openfl__$internal_stage3D_assembler_RegMap._map.set("vt",new openfl__$internal_stage3D_assembler_Reg(2,"vertex temporary"));
		openfl__$internal_stage3D_assembler_RegMap._map.set("vo",new openfl__$internal_stage3D_assembler_Reg(3,"vertex output"));
		openfl__$internal_stage3D_assembler_RegMap._map.set("op",new openfl__$internal_stage3D_assembler_Reg(3,"vertex output"));
		openfl__$internal_stage3D_assembler_RegMap._map.set("fd",new openfl__$internal_stage3D_assembler_Reg(3,"fragment depth output"));
		openfl__$internal_stage3D_assembler_RegMap._map.set("fo",new openfl__$internal_stage3D_assembler_Reg(3,"fragment output"));
		openfl__$internal_stage3D_assembler_RegMap._map.set("oc",new openfl__$internal_stage3D_assembler_Reg(3,"fragment output"));
		openfl__$internal_stage3D_assembler_RegMap._map.set("v",new openfl__$internal_stage3D_assembler_Reg(4,"varying"));
		openfl__$internal_stage3D_assembler_RegMap._map.set("vi",new openfl__$internal_stage3D_assembler_Reg(4,"varying output"));
		openfl__$internal_stage3D_assembler_RegMap._map.set("fi",new openfl__$internal_stage3D_assembler_Reg(4,"varying input"));
		openfl__$internal_stage3D_assembler_RegMap._map.set("fs",new openfl__$internal_stage3D_assembler_Reg(5,"sampler"));
	}
	return openfl__$internal_stage3D_assembler_RegMap._map;
};
var openfl__$internal_stage3D_assembler_Sampler = $hx_exports["openfl"]["_internal"]["stage3D"]["assembler"]["Sampler"] = function(shift,mask,value) {
	this.shift = shift;
	this.mask = mask;
	this.value = value;
};
$hxClasses["openfl._internal.stage3D.assembler.Sampler"] = openfl__$internal_stage3D_assembler_Sampler;
openfl__$internal_stage3D_assembler_Sampler.__name__ = ["openfl","_internal","stage3D","assembler","Sampler"];
openfl__$internal_stage3D_assembler_Sampler.prototype = {
	mask: null
	,shift: null
	,value: null
	,__class__: openfl__$internal_stage3D_assembler_Sampler
};
var openfl__$internal_stage3D_assembler_SamplerMap = $hx_exports["openfl"]["_internal"]["stage3D"]["assembler"]["SamplerMap"] = function() { };
$hxClasses["openfl._internal.stage3D.assembler.SamplerMap"] = openfl__$internal_stage3D_assembler_SamplerMap;
openfl__$internal_stage3D_assembler_SamplerMap.__name__ = ["openfl","_internal","stage3D","assembler","SamplerMap"];
openfl__$internal_stage3D_assembler_SamplerMap.__properties__ = {get_map:"get_map"};
openfl__$internal_stage3D_assembler_SamplerMap._map = null;
openfl__$internal_stage3D_assembler_SamplerMap.get_map = function() {
	if(openfl__$internal_stage3D_assembler_SamplerMap._map == null) {
		openfl__$internal_stage3D_assembler_SamplerMap._map = new haxe_ds_StringMap();
		openfl__$internal_stage3D_assembler_SamplerMap._map.set("rgba",new openfl__$internal_stage3D_assembler_Sampler(8,15,0));
		openfl__$internal_stage3D_assembler_SamplerMap._map.set("rg",new openfl__$internal_stage3D_assembler_Sampler(8,15,5));
		openfl__$internal_stage3D_assembler_SamplerMap._map.set("r",new openfl__$internal_stage3D_assembler_Sampler(8,15,4));
		openfl__$internal_stage3D_assembler_SamplerMap._map.set("compressed",new openfl__$internal_stage3D_assembler_Sampler(8,15,1));
		openfl__$internal_stage3D_assembler_SamplerMap._map.set("compressed_alpha",new openfl__$internal_stage3D_assembler_Sampler(8,15,2));
		openfl__$internal_stage3D_assembler_SamplerMap._map.set("dxt1",new openfl__$internal_stage3D_assembler_Sampler(8,15,1));
		openfl__$internal_stage3D_assembler_SamplerMap._map.set("dxt5",new openfl__$internal_stage3D_assembler_Sampler(8,15,2));
		openfl__$internal_stage3D_assembler_SamplerMap._map.set("2d",new openfl__$internal_stage3D_assembler_Sampler(12,15,0));
		openfl__$internal_stage3D_assembler_SamplerMap._map.set("cube",new openfl__$internal_stage3D_assembler_Sampler(12,15,1));
		openfl__$internal_stage3D_assembler_SamplerMap._map.set("3d",new openfl__$internal_stage3D_assembler_Sampler(12,15,2));
		openfl__$internal_stage3D_assembler_SamplerMap._map.set("centroid",new openfl__$internal_stage3D_assembler_Sampler(16,1,1));
		openfl__$internal_stage3D_assembler_SamplerMap._map.set("ignoresampler",new openfl__$internal_stage3D_assembler_Sampler(16,4,4));
		openfl__$internal_stage3D_assembler_SamplerMap._map.set("clamp",new openfl__$internal_stage3D_assembler_Sampler(20,15,0));
		openfl__$internal_stage3D_assembler_SamplerMap._map.set("repeat",new openfl__$internal_stage3D_assembler_Sampler(20,15,1));
		openfl__$internal_stage3D_assembler_SamplerMap._map.set("wrap",new openfl__$internal_stage3D_assembler_Sampler(20,15,1));
		openfl__$internal_stage3D_assembler_SamplerMap._map.set("nomip",new openfl__$internal_stage3D_assembler_Sampler(24,15,0));
		openfl__$internal_stage3D_assembler_SamplerMap._map.set("mipnone",new openfl__$internal_stage3D_assembler_Sampler(24,15,0));
		openfl__$internal_stage3D_assembler_SamplerMap._map.set("mipnearest",new openfl__$internal_stage3D_assembler_Sampler(24,15,1));
		openfl__$internal_stage3D_assembler_SamplerMap._map.set("miplinear",new openfl__$internal_stage3D_assembler_Sampler(24,15,2));
		openfl__$internal_stage3D_assembler_SamplerMap._map.set("nearest",new openfl__$internal_stage3D_assembler_Sampler(28,15,0));
		openfl__$internal_stage3D_assembler_SamplerMap._map.set("linear",new openfl__$internal_stage3D_assembler_Sampler(28,15,1));
	}
	return openfl__$internal_stage3D_assembler_SamplerMap._map;
};
var openfl__$internal_stage3D_atf_ATFReader = $hx_exports["openfl"]["_internal"]["stage3D"]["atf"]["ATFReader"] = function(data,byteArrayOffset) {
	this.version = 0;
	data.position = byteArrayOffset;
	var signature = data.readUTFBytes(3);
	data.position = byteArrayOffset;
	if(signature != "ATF") {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("ATF signature not found"));
	}
	var length = 0;
	if(data.get(byteArrayOffset + 6) == 255) {
		this.version = data.get(byteArrayOffset + 7);
		data.position = byteArrayOffset + 8;
		length = this.__readUInt32(data);
	} else {
		this.version = 0;
		data.position = byteArrayOffset + 3;
		length = this.__readUInt24(data);
	}
	if(js_Boot.__cast(byteArrayOffset + length , Int) > openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data)) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("ATF length exceeds byte array length"));
	}
	this.data = data;
};
$hxClasses["openfl._internal.stage3D.atf.ATFReader"] = openfl__$internal_stage3D_atf_ATFReader;
openfl__$internal_stage3D_atf_ATFReader.__name__ = ["openfl","_internal","stage3D","atf","ATFReader"];
openfl__$internal_stage3D_atf_ATFReader.prototype = {
	data: null
	,version: null
	,cubeMap: null
	,width: null
	,height: null
	,mipCount: null
	,readHeader: function(__width,__height,cubeMap) {
		var tdata = this.data.readUnsignedByte();
		var type = tdata >> 7;
		if(!cubeMap && type != 0) {
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("ATF Cube map not expected"));
		}
		if(cubeMap && type != 1) {
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("ATF Cube map expected"));
		}
		this.cubeMap = cubeMap;
		var atfFormat = tdata & 127;
		if(atfFormat != 3 && atfFormat != 5) {
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Only ATF block compressed textures without JPEG-XR+LZMA are supported"));
		}
		this.width = 1 << this.data.readUnsignedByte();
		this.height = 1 << this.data.readUnsignedByte();
		if(this.width != __width || this.height != __height) {
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("ATF width and height dont match"));
		}
		this.mipCount = this.data.readUnsignedByte();
		return atfFormat == 3;
	}
	,readTextures: function(uploadCallback) {
		var gpuFormats = this.version < 3 ? 3 : 4;
		var sideCount = this.cubeMap ? 6 : 1;
		var _g1 = 0;
		var _g = sideCount;
		while(_g1 < _g) {
			var side = _g1++;
			var _g3 = 0;
			var _g2 = this.mipCount;
			while(_g3 < _g2) {
				var level = _g3++;
				var _g5 = 0;
				var _g4 = gpuFormats;
				while(_g5 < _g4) {
					var gpuFormat = _g5++;
					var blockLength = this.version == 0 ? this.__readUInt24(this.data) : this.__readUInt32(this.data);
					if(_$UInt_UInt_$Impl_$.gt(this.data.position + blockLength,openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.data))) {
						throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Block length exceeds ATF file length"));
					}
					if(_$UInt_UInt_$Impl_$.gt(blockLength,0)) {
						var bytes = $hx_exports.haxe.io.Bytes.alloc(blockLength);
						this.data.readBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes),0,blockLength);
						uploadCallback(side,level,gpuFormat,this.width >> level,this.height >> level,blockLength,$hx_$exports_lime_utils_DataPointer.fromBytes(bytes));
					}
				}
			}
		}
	}
	,__readUInt24: function(data) {
		var value = data.readUnsignedByte() << 16;
		value = value | data.readUnsignedByte() << 8;
		value = value | data.readUnsignedByte();
		return value;
	}
	,__readUInt32: function(data) {
		var value = data.readUnsignedByte() << 24;
		value = value | data.readUnsignedByte() << 16;
		value = value | data.readUnsignedByte() << 8;
		value = value | data.readUnsignedByte();
		return value;
	}
	,__class__: openfl__$internal_stage3D_atf_ATFReader
};
var openfl__$internal_stage3D_opengl_GLContext3D = $hx_exports["openfl"]["_internal"]["stage3D"]["opengl"]["GLContext3D"] = function() { };
$hxClasses["openfl._internal.stage3D.opengl.GLContext3D"] = openfl__$internal_stage3D_opengl_GLContext3D;
openfl__$internal_stage3D_opengl_GLContext3D.__name__ = ["openfl","_internal","stage3D","opengl","GLContext3D"];
openfl__$internal_stage3D_opengl_GLContext3D.context = null;
openfl__$internal_stage3D_opengl_GLContext3D.gl = null;
openfl__$internal_stage3D_opengl_GLContext3D.create = function(context) {
	var gl = context.__renderSession.gl;
	var this1 = new Float32Array(512);
	context.__vertexConstants = this1;
	var this2 = new Float32Array(512);
	context.__fragmentConstants = this2;
	var array = [1.0,1.0,1.0,1.0];
	var this3;
	if(array != null) {
		this3 = new Float32Array(array);
	} else {
		this3 = null;
	}
	context.__positionScale = this3;
	context.__samplerDirty = 0;
	context.__samplerTextures = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,8);
	context.__samplerStates = [];
	var _g = 0;
	while(_g < 8) {
		var i = _g++;
		context.__samplerStates[i] = new openfl__$internal_stage3D_SamplerState(gl.LINEAR,gl.LINEAR,gl.CLAMP_TO_EDGE,gl.CLAMP_TO_EDGE);
	}
	context.maxBackBufferHeight = context.maxBackBufferWidth = gl.getParameter(gl.MAX_VIEWPORT_DIMS);
	context.__backBufferAntiAlias = 0;
	context.__backBufferEnableDepthAndStencil = true;
	context.__backBufferWantsBestResolution = false;
	context.__frameCount = 0;
	context.__rttDepthAndStencil = false;
	context.__samplerDirty = 0;
	context.__stencilCompareMode = 0;
	context.__stencilRef = 0;
	context.__stencilReadMask = 255;
	var anisoExtension = gl.getExtension("EXT_texture_filter_anisotropic");
	if(anisoExtension == null || !Reflect.hasField(anisoExtension,"MAX_TEXTURE_MAX_ANISOTROPY_EXT")) {
		anisoExtension = gl.getExtension("MOZ_EXT_texture_filter_anisotropic");
	}
	if(anisoExtension == null || !Reflect.hasField(anisoExtension,"MAX_TEXTURE_MAX_ANISOTROPY_EXT")) {
		anisoExtension = gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
	}
	context.__supportsPackedDepthStencil = true;
	openfl_display3D_Context3D.DEPTH_STENCIL = gl.DEPTH_STENCIL;
	context.__supportsAnisotropicFiltering = anisoExtension != null;
	if(context.__supportsAnisotropicFiltering) {
		openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT = anisoExtension.TEXTURE_MAX_ANISOTROPY_EXT;
		var maxAnisotropy = gl.getParameter(anisoExtension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
		context.__maxAnisotropyTexture2D = maxAnisotropy;
		context.__maxAnisotropyTexture2D = maxAnisotropy;
	}
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var vendor = gl.getParameter(gl.VENDOR);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var version = gl.getParameter(gl.VERSION);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var renderer = gl.getParameter(gl.RENDERER);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var glslVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	context.driverInfo = "OpenGL" + " Vendor=" + vendor + " Version=" + version + " Renderer=" + renderer + " GLSL=" + glslVersion;
};
openfl__$internal_stage3D_opengl_GLContext3D.clear = function(context,red,green,blue,alpha,depth,stencil,mask) {
	if(mask == null) {
		mask = 7;
	}
	if(stencil == null) {
		stencil = 0;
	}
	if(depth == null) {
		depth = 1;
	}
	if(alpha == null) {
		alpha = 1;
	}
	if(blue == null) {
		blue = 0;
	}
	if(green == null) {
		green = 0;
	}
	if(red == null) {
		red = 0;
	}
	var gl = context.__renderSession.gl;
	var clearMask = 0;
	if((mask & 1) != 0) {
		clearMask |= gl.COLOR_BUFFER_BIT;
		gl.clearColor(red,green,blue,alpha);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	}
	if((mask & 2) != 0) {
		clearMask |= gl.DEPTH_BUFFER_BIT;
		gl.depthMask(true);
		gl.clearDepthf(depth);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	}
	if((mask & 4) != 0) {
		clearMask |= gl.STENCIL_BUFFER_BIT;
		gl.clearStencil(stencil);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	}
	gl.clear(clearMask);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
};
openfl__$internal_stage3D_opengl_GLContext3D.configureBackBuffer = function(context,width,height,antiAlias,enableDepthAndStencil,wantsBestResolution,wantsBestResolutionOnBrowserZoom) {
	if(wantsBestResolutionOnBrowserZoom == null) {
		wantsBestResolutionOnBrowserZoom = false;
	}
	if(wantsBestResolution == null) {
		wantsBestResolution = false;
	}
	if(enableDepthAndStencil == null) {
		enableDepthAndStencil = true;
	}
	openfl__$internal_stage3D_opengl_GLContext3D.context = context;
	openfl__$internal_stage3D_opengl_GLContext3D.gl = context.__renderSession.gl;
	openfl__$internal_stage3D_opengl_GLContext3D.__updateBackbufferViewport();
	context.backBufferWidth = width;
	context.backBufferHeight = height;
	context.__backBufferAntiAlias = antiAlias;
	context.__backBufferEnableDepthAndStencil = enableDepthAndStencil;
	context.__backBufferWantsBestResolution = wantsBestResolution;
	openfl_display3D_Context3D.__stateCache.clearSettings();
};
openfl__$internal_stage3D_opengl_GLContext3D.dispose = function(context,recreate) {
	if(recreate == null) {
		recreate = true;
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.drawToBitmapData = function(context,destination) {
	var $window = context.__stage3D.__stage.window;
	if($window != null) {
		var image = $window.renderer.readPixels();
		var heightOffset = image.height - context.backBufferHeight;
		destination.image.copyPixels(image,new $hx_exports.lime.math.Rectangle(Std.int(context.__stage3D.get_x()),Std.int(context.__stage3D.get_y() + heightOffset),context.backBufferWidth,context.backBufferHeight),new $hx_exports.lime.math.Vector2());
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.drawTriangles = function(context,indexBuffer,firstIndex,numTriangles) {
	if(numTriangles == null) {
		numTriangles = -1;
	}
	if(firstIndex == null) {
		firstIndex = 0;
	}
	if(context.__program == null) {
		return;
	}
	openfl__$internal_stage3D_opengl_GLContext3D.context = context;
	openfl__$internal_stage3D_opengl_GLContext3D.gl = context.__renderSession.gl;
	openfl__$internal_stage3D_opengl_GLContext3D.__flushSamplerState();
	context.__program.__flush();
	var count = numTriangles == -1 ? indexBuffer.__numIndices : numTriangles * 3;
	openfl__$internal_stage3D_opengl_GLContext3D.gl.bindBuffer(openfl__$internal_stage3D_opengl_GLContext3D.gl.ELEMENT_ARRAY_BUFFER,indexBuffer.__id);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	openfl__$internal_stage3D_opengl_GLContext3D.gl.drawElements(openfl__$internal_stage3D_opengl_GLContext3D.gl.TRIANGLES,count,indexBuffer.__elementType,$hx_$exports_lime_utils_DataPointer.fromInt(firstIndex));
	openfl__$internal_stage3D_GLUtils.CheckGLError();
};
openfl__$internal_stage3D_opengl_GLContext3D.present = function(context) {
};
openfl__$internal_stage3D_opengl_GLContext3D.setBlendFactors = function(context,sourceFactor,destinationFactor) {
	var updateSrc = openfl_display3D_Context3D.__stateCache.updateBlendSrcFactor(sourceFactor);
	var updateDest = openfl_display3D_Context3D.__stateCache.updateBlendDestFactor(destinationFactor);
	if(updateSrc || updateDest) {
		openfl__$internal_stage3D_opengl_GLContext3D.context = context;
		openfl__$internal_stage3D_opengl_GLContext3D.gl = context.__renderSession.gl;
		openfl__$internal_stage3D_opengl_GLContext3D.__updateBlendFactors();
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.setColorMask = function(context,red,green,blue,alpha) {
	var gl = context.__renderSession.gl;
	gl.colorMask(red,green,blue,alpha);
};
openfl__$internal_stage3D_opengl_GLContext3D.setCulling = function(context,triangleFaceToCull) {
	var gl = context.__renderSession.gl;
	if(openfl_display3D_Context3D.__stateCache.updateCullingMode(triangleFaceToCull)) {
		switch(triangleFaceToCull) {
		case 0:
			gl.enable(gl.CULL_FACE);
			gl.cullFace(gl.FRONT);
			break;
		case 1:
			gl.enable(gl.CULL_FACE);
			gl.cullFace(gl.BACK);
			break;
		case 2:
			gl.enable(gl.CULL_FACE);
			gl.cullFace(gl.FRONT_AND_BACK);
			break;
		case 3:
			gl.disable(gl.CULL_FACE);
			break;
		default:
			return new openfl_errors_IllegalOperationError();
		}
	}
	return null;
};
openfl__$internal_stage3D_opengl_GLContext3D.setDepthTest = function(context,depthMask,passCompareMode) {
	var gl = context.__renderSession.gl;
	var depthTestEnabled = context.__backBufferEnableDepthAndStencil;
	if(openfl_display3D_Context3D.__stateCache.updateDepthTestEnabled(depthTestEnabled)) {
		if(depthTestEnabled) {
			gl.enable(gl.DEPTH_TEST);
		} else {
			gl.disable(gl.DEPTH_TEST);
		}
	}
	if(openfl_display3D_Context3D.__stateCache.updateDepthTestMask(depthMask)) {
		gl.depthMask(depthMask);
	}
	if(openfl_display3D_Context3D.__stateCache.updateDepthCompareMode(passCompareMode)) {
		switch(passCompareMode) {
		case 0:
			gl.depthFunc(gl.ALWAYS);
			break;
		case 1:
			gl.depthFunc(gl.EQUAL);
			break;
		case 2:
			gl.depthFunc(gl.GREATER);
			break;
		case 3:
			gl.depthFunc(gl.GEQUAL);
			break;
		case 4:
			gl.depthFunc(gl.LESS);
			break;
		case 5:
			gl.depthFunc(gl.LEQUAL);
			break;
		case 6:
			gl.depthFunc(gl.NEVER);
			break;
		case 7:
			gl.depthFunc(gl.NOTEQUAL);
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.setEnableErrorChecking = function(value) {
	openfl__$internal_stage3D_GLUtils.debug = value;
};
openfl__$internal_stage3D_opengl_GLContext3D.setProgram = function(context,program) {
	if(openfl_display3D_Context3D.__stateCache.updateProgram3D(program)) {
		program.__use();
		program.__setPositionScale(context.__positionScale);
		context.__program = program;
		context.__samplerDirty |= context.__program.__samplerUsageMask;
		var _g = 0;
		while(_g < 8) {
			var i = _g++;
			context.__samplerStates[i].copyFrom(context.__program.__getSamplerState(i));
		}
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.setProgramConstantsFromByteArray = function(context,programType,firstRegister,numRegisters,data,byteArrayOffset) {
	var gl = context.__renderSession.gl;
	if(numRegisters == -1) {
		numRegisters = (openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data) >> 2) - byteArrayOffset;
	}
	var isVertex = programType == 1;
	var dest = isVertex ? context.__vertexConstants : context.__fragmentConstants;
	var bytes = openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(data);
	var len = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data);
	var floatData = len == null ? new Float32Array(bytes.getData(),0) : new Float32Array(bytes.getData(),0,len);
	var outOffset = firstRegister * 4;
	var inOffset = Std.int(_$UInt_UInt_$Impl_$.toFloat(byteArrayOffset) / _$UInt_UInt_$Impl_$.toFloat(4));
	var _g1 = 0;
	var _g = numRegisters * 4;
	while(_g1 < _g) {
		var i = _g1++;
		dest[outOffset + i] = floatData[inOffset + i];
	}
	if(context.__program != null) {
		context.__program.__markDirty(isVertex,firstRegister,numRegisters);
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.setProgramConstantsFromMatrix = function(context,programType,firstRegister,matrix,transposedMatrix) {
	if(transposedMatrix == null) {
		transposedMatrix = false;
	}
	var isVertex = programType == 1;
	var dest = isVertex ? context.__vertexConstants : context.__fragmentConstants;
	var source = matrix.rawData;
	var i = firstRegister * 4;
	if(transposedMatrix) {
		dest[i++] = source.data.get(0);
		dest[i++] = source.data.get(4);
		dest[i++] = source.data.get(8);
		dest[i++] = source.data.get(12);
		dest[i++] = source.data.get(1);
		dest[i++] = source.data.get(5);
		dest[i++] = source.data.get(9);
		dest[i++] = source.data.get(13);
		dest[i++] = source.data.get(2);
		dest[i++] = source.data.get(6);
		dest[i++] = source.data.get(10);
		dest[i++] = source.data.get(14);
		dest[i++] = source.data.get(3);
		dest[i++] = source.data.get(7);
		dest[i++] = source.data.get(11);
		dest[i++] = source.data.get(15);
	} else {
		dest[i++] = source.data.get(0);
		dest[i++] = source.data.get(1);
		dest[i++] = source.data.get(2);
		dest[i++] = source.data.get(3);
		dest[i++] = source.data.get(4);
		dest[i++] = source.data.get(5);
		dest[i++] = source.data.get(6);
		dest[i++] = source.data.get(7);
		dest[i++] = source.data.get(8);
		dest[i++] = source.data.get(9);
		dest[i++] = source.data.get(10);
		dest[i++] = source.data.get(11);
		dest[i++] = source.data.get(12);
		dest[i++] = source.data.get(13);
		dest[i++] = source.data.get(14);
		dest[i++] = source.data.get(15);
	}
	if(context.__program != null) {
		context.__program.__markDirty(isVertex,firstRegister,4);
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.setProgramConstantsFromVector = function(context,programType,firstRegister,data,numRegisters) {
	if(numRegisters == null) {
		numRegisters = -1;
	}
	if(numRegisters == -1) {
		numRegisters = data.data.get_length() >> 2;
	}
	var isVertex = programType == 1;
	var dest = isVertex ? context.__vertexConstants : context.__fragmentConstants;
	var source = data;
	var sourceIndex = 0;
	var destIndex = firstRegister * 4;
	var _g1 = 0;
	var _g = numRegisters;
	while(_g1 < _g) {
		var i = _g1++;
		dest[destIndex++] = source.data.get(sourceIndex++);
		dest[destIndex++] = source.data.get(sourceIndex++);
		dest[destIndex++] = source.data.get(sourceIndex++);
		dest[destIndex++] = source.data.get(sourceIndex++);
	}
	if(context.__program != null) {
		context.__program.__markDirty(isVertex,firstRegister,numRegisters);
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.setRenderToBackBuffer = function(context) {
	var gl = context.__renderSession.gl;
	gl.bindFramebuffer(gl.FRAMEBUFFER,null);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	gl.frontFace(gl.CCW);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	context.__renderToTexture = null;
	context.__scissorRectangle = null;
	openfl__$internal_stage3D_opengl_GLContext3D.__updateBackbufferViewport();
	openfl__$internal_stage3D_opengl_GLContext3D.__updateScissorRectangle();
	openfl__$internal_stage3D_opengl_GLContext3D.__updateDepthAndStencilState();
	context.__positionScale[1] = 1.0;
	if(context.__program != null) {
		context.__program.__setPositionScale(context.__positionScale);
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.setRenderToTexture = function(context,texture,enableDepthAndStencil,antiAlias,surfaceSelector) {
	if(surfaceSelector == null) {
		surfaceSelector = 0;
	}
	if(antiAlias == null) {
		antiAlias = 0;
	}
	if(enableDepthAndStencil == null) {
		enableDepthAndStencil = false;
	}
	var gl = context.__renderSession.gl;
	var width = 0;
	var height = 0;
	if(context.__framebuffer == null) {
		context.__framebuffer = gl.createFramebuffer();
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	}
	gl.bindFramebuffer(gl.FRAMEBUFFER,context.__framebuffer);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	if(Std.is(texture,openfl_display3D_textures_Texture)) {
		var texture2D = texture;
		width = texture2D.__width;
		height = texture2D.__height;
		gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,texture.__textureID,0);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	} else if(Std.is(texture,openfl_display3D_textures_RectangleTexture)) {
		var rectTexture = texture;
		width = rectTexture.__width;
		height = rectTexture.__height;
		gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,texture.__textureID,0);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	} else if(Std.is(texture,openfl_display3D_textures_CubeTexture)) {
		var cubeTexture = texture;
		width = cubeTexture.__size;
		height = cubeTexture.__size;
		var _g = 0;
		while(_g < 6) {
			var i = _g++;
			gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_CUBE_MAP_POSITIVE_X + i,texture.__textureID,0);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
	} else {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("Invalid texture"));
	}
	if(enableDepthAndStencil) {
		if(context.__supportsPackedDepthStencil) {
			if(context.__depthStencilRenderBuffer == null) {
				context.__depthStencilRenderBuffer = gl.createRenderbuffer();
				openfl__$internal_stage3D_GLUtils.CheckGLError();
			}
			gl.bindRenderbuffer(gl.RENDERBUFFER,context.__depthStencilRenderBuffer);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			gl.renderbufferStorage(gl.RENDERBUFFER,openfl_display3D_Context3D.DEPTH_STENCIL,width,height);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_STENCIL_ATTACHMENT,gl.RENDERBUFFER,context.__depthStencilRenderBuffer);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		} else {
			if(context.__depthRenderBuffer == null) {
				context.__depthRenderBuffer = gl.createRenderbuffer();
				openfl__$internal_stage3D_GLUtils.CheckGLError();
			}
			if(context.__stencilRenderBuffer == null) {
				context.__stencilRenderBuffer = gl.createRenderbuffer();
				openfl__$internal_stage3D_GLUtils.CheckGLError();
			}
			gl.bindRenderbuffer(gl.RENDERBUFFER,context.__depthRenderBuffer);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			gl.renderbufferStorage(gl.RENDERBUFFER,gl.DEPTH_COMPONENT16,width,height);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			gl.bindRenderbuffer(gl.RENDERBUFFER,context.__stencilRenderBuffer);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			gl.renderbufferStorage(gl.RENDERBUFFER,gl.STENCIL_INDEX8,width,height);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_ATTACHMENT,gl.RENDERBUFFER,context.__depthRenderBuffer);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.STENCIL_ATTACHMENT,gl.RENDERBUFFER,context.__stencilRenderBuffer);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
		gl.bindRenderbuffer(gl.RENDERBUFFER,null);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	}
	openfl__$internal_stage3D_opengl_GLContext3D.__setViewport(0,0,width,height);
	if(context.__enableErrorChecking) {
		var code = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
		if(code != gl.FRAMEBUFFER_COMPLETE) {
			$hx_exports.haxe.Log.trace("Error: Context3D.setRenderToTexture status:${code} width:${texture2D.__width} height:${texture2D.__height}",{ fileName : "GLContext3D.hx", lineNumber : 744, className : "openfl._internal.stage3D.opengl.GLContext3D", methodName : "setRenderToTexture"});
		}
	}
	context.__positionScale[1] = -1.0;
	if(context.__program != null) {
		context.__program.__setPositionScale(context.__positionScale);
	}
	gl.frontFace(gl.CW);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	context.__renderToTexture = texture;
	context.__scissorRectangle = null;
	context.__rttDepthAndStencil = enableDepthAndStencil;
	openfl__$internal_stage3D_opengl_GLContext3D.__updateScissorRectangle();
	openfl__$internal_stage3D_opengl_GLContext3D.__updateDepthAndStencilState();
};
openfl__$internal_stage3D_opengl_GLContext3D.setSamplerStateAt = function(context,sampler,wrap,filter,mipfilter) {
	if(sampler < 0 || sampler > 8) {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("sampler out of range"));
	}
	var gl = context.__renderSession.gl;
	var state = context.__samplerStates[sampler];
	switch(wrap) {
	case 0:
		state.set_wrapModeS(gl.CLAMP_TO_EDGE);
		state.set_wrapModeT(gl.CLAMP_TO_EDGE);
		break;
	case 1:
		state.set_wrapModeS(gl.CLAMP_TO_EDGE);
		state.set_wrapModeT(gl.REPEAT);
		break;
	case 2:
		state.set_wrapModeS(gl.REPEAT);
		state.set_wrapModeT(gl.REPEAT);
		break;
	case 3:
		state.set_wrapModeS(gl.REPEAT);
		state.set_wrapModeT(gl.CLAMP_TO_EDGE);
		break;
	default:
		throw new js__$Boot_HaxeError(new openfl_errors_Error("wrap bad enum"));
	}
	switch(filter) {
	case 0:
		if(context.__supportsAnisotropicFiltering) {
			state.set_maxAniso(context.__maxAnisotropyTexture2D < 16 ? context.__maxAnisotropyTexture2D : 16);
		}
		break;
	case 1:
		if(context.__supportsAnisotropicFiltering) {
			state.set_maxAniso(context.__maxAnisotropyTexture2D < 2 ? context.__maxAnisotropyTexture2D : 2);
		}
		break;
	case 2:
		if(context.__supportsAnisotropicFiltering) {
			state.set_maxAniso(context.__maxAnisotropyTexture2D < 4 ? context.__maxAnisotropyTexture2D : 4);
		}
		break;
	case 3:
		if(context.__supportsAnisotropicFiltering) {
			state.set_maxAniso(context.__maxAnisotropyTexture2D < 8 ? context.__maxAnisotropyTexture2D : 8);
		}
		break;
	case 4:
		state.set_magFilter(gl.LINEAR);
		if(context.__supportsAnisotropicFiltering) {
			state.set_maxAniso(1);
		}
		break;
	case 5:
		state.set_magFilter(gl.NEAREST);
		if(context.__supportsAnisotropicFiltering) {
			state.set_maxAniso(1);
		}
		break;
	default:
		throw new js__$Boot_HaxeError(new openfl_errors_Error("filter bad enum"));
	}
	switch(mipfilter) {
	case 0:
		state.set_minFilter(filter == 5 ? gl.NEAREST_MIPMAP_LINEAR : gl.LINEAR_MIPMAP_LINEAR);
		break;
	case 1:
		state.set_minFilter(filter == 5 ? gl.NEAREST_MIPMAP_NEAREST : gl.LINEAR_MIPMAP_NEAREST);
		break;
	case 2:
		state.set_minFilter(filter == 5 ? gl.NEAREST : gl.LINEAR);
		break;
	default:
		throw new js__$Boot_HaxeError(new openfl_errors_Error("mipfiter bad enum"));
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.setScissorRectangle = function(context,rectangle) {
	openfl__$internal_stage3D_opengl_GLContext3D.context = context;
	openfl__$internal_stage3D_opengl_GLContext3D.gl = context.__renderSession.gl;
	context.__scissorRectangle = rectangle != null ? rectangle.clone() : null;
	openfl__$internal_stage3D_opengl_GLContext3D.__updateScissorRectangle();
};
openfl__$internal_stage3D_opengl_GLContext3D.setStencilActions = function(context,triangleFace,compareMode,actionOnBothPass,actionOnDepthFail,actionOnDepthPassStencilFail) {
	if(actionOnDepthPassStencilFail == null) {
		actionOnDepthPassStencilFail = 5;
	}
	if(actionOnDepthFail == null) {
		actionOnDepthFail = 5;
	}
	if(actionOnBothPass == null) {
		actionOnBothPass = 5;
	}
	if(compareMode == null) {
		compareMode = 0;
	}
	if(triangleFace == null) {
		triangleFace = 2;
	}
	openfl__$internal_stage3D_opengl_GLContext3D.context = context;
	openfl__$internal_stage3D_opengl_GLContext3D.gl = context.__renderSession.gl;
	context.__stencilCompareMode = compareMode;
	openfl__$internal_stage3D_opengl_GLContext3D.gl.stencilOpSeparate(openfl__$internal_stage3D_opengl_GLContext3D.__getGLTriangleFace(triangleFace),openfl__$internal_stage3D_opengl_GLContext3D.__getGLStencilAction(actionOnDepthPassStencilFail),openfl__$internal_stage3D_opengl_GLContext3D.__getGLStencilAction(actionOnDepthFail),openfl__$internal_stage3D_opengl_GLContext3D.__getGLStencilAction(actionOnBothPass));
	openfl__$internal_stage3D_opengl_GLContext3D.gl.stencilFunc(openfl__$internal_stage3D_opengl_GLContext3D.__getGLCompareMode(context.__stencilCompareMode),context.__stencilRef,context.__stencilReadMask);
};
openfl__$internal_stage3D_opengl_GLContext3D.setStencilReferenceValue = function(context,referenceValue,readMask,writeMask) {
	if(writeMask == null) {
		writeMask = 255;
	}
	if(readMask == null) {
		readMask = 255;
	}
	openfl__$internal_stage3D_opengl_GLContext3D.context = context;
	openfl__$internal_stage3D_opengl_GLContext3D.gl = context.__renderSession.gl;
	context.__stencilReadMask = readMask;
	context.__stencilRef = referenceValue;
	openfl__$internal_stage3D_opengl_GLContext3D.gl.stencilFunc(openfl__$internal_stage3D_opengl_GLContext3D.__getGLCompareMode(context.__stencilCompareMode),context.__stencilRef,context.__stencilReadMask);
	openfl__$internal_stage3D_opengl_GLContext3D.gl.stencilMask(writeMask);
};
openfl__$internal_stage3D_opengl_GLContext3D.setTextureAt = function(context,sampler,texture) {
	if(context.__samplerTextures.data.get(sampler) != texture) {
		context.__samplerTextures.data.set(sampler,texture);
		context.__samplerDirty |= 1 << sampler;
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.setVertexBufferAt = function(context,index,buffer,bufferOffset,format) {
	if(format == null) {
		format = 4;
	}
	if(bufferOffset == null) {
		bufferOffset = 0;
	}
	var gl = context.__renderSession.gl;
	if(buffer == null) {
		gl.disableVertexAttribArray(index);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		gl.bindBuffer(gl.ARRAY_BUFFER,null);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		return;
	}
	gl.enableVertexAttribArray(index);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	gl.bindBuffer(gl.ARRAY_BUFFER,buffer.__id);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var byteOffset = bufferOffset * 4;
	switch(format) {
	case 0:
		gl.vertexAttribPointer(index,4,gl.UNSIGNED_BYTE,true,buffer.__stride,$hx_$exports_lime_utils_DataPointer.fromInt(byteOffset));
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		break;
	case 1:
		gl.vertexAttribPointer(index,1,gl.FLOAT,false,buffer.__stride,$hx_$exports_lime_utils_DataPointer.fromInt(byteOffset));
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		break;
	case 2:
		gl.vertexAttribPointer(index,2,gl.FLOAT,false,buffer.__stride,$hx_$exports_lime_utils_DataPointer.fromInt(byteOffset));
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		break;
	case 3:
		gl.vertexAttribPointer(index,3,gl.FLOAT,false,buffer.__stride,$hx_$exports_lime_utils_DataPointer.fromInt(byteOffset));
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		break;
	case 4:
		gl.vertexAttribPointer(index,4,gl.FLOAT,false,buffer.__stride,$hx_$exports_lime_utils_DataPointer.fromInt(byteOffset));
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		break;
	default:
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.__flushSamplerState = function() {
	var sampler = 0;
	while(openfl__$internal_stage3D_opengl_GLContext3D.context.__samplerDirty != 0) {
		if((openfl__$internal_stage3D_opengl_GLContext3D.context.__samplerDirty & 1 << sampler) != 0) {
			if(openfl_display3D_Context3D.__stateCache.updateActiveTextureSample(sampler)) {
				openfl__$internal_stage3D_opengl_GLContext3D.gl.activeTexture(openfl__$internal_stage3D_opengl_GLContext3D.gl.TEXTURE0 + sampler);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
			}
			var texture = openfl__$internal_stage3D_opengl_GLContext3D.context.__samplerTextures.data.get(sampler);
			if(texture != null) {
				var target = texture.__textureTarget;
				openfl__$internal_stage3D_opengl_GLContext3D.gl.bindTexture(target,texture.__getTexture());
				openfl__$internal_stage3D_GLUtils.CheckGLError();
				texture.__setSamplerState(openfl__$internal_stage3D_opengl_GLContext3D.context.__samplerStates[sampler]);
			} else {
				openfl__$internal_stage3D_opengl_GLContext3D.gl.bindTexture(openfl__$internal_stage3D_opengl_GLContext3D.gl.TEXTURE_2D,null);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
			}
			openfl__$internal_stage3D_opengl_GLContext3D.context.__samplerDirty &= ~(1 << sampler);
		}
		++sampler;
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.__getGLCompareMode = function(compareMode) {
	switch(compareMode) {
	case 0:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.ALWAYS;
	case 1:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.EQUAL;
	case 2:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.GREATER;
	case 3:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.GEQUAL;
	case 4:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.LESS;
	case 5:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.LEQUAL;
	case 6:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.NEVER;
	case 7:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.NOTEQUAL;
	default:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.EQUAL;
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.__getGLTriangleFace = function(triangleFace) {
	switch(triangleFace) {
	case 0:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.BACK;
	case 1:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.FRONT;
	case 2:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.FRONT_AND_BACK;
	case 3:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.NONE;
	default:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.FRONT_AND_BACK;
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.__getGLStencilAction = function(stencilAction) {
	switch(stencilAction) {
	case 0:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.DECR;
	case 1:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.DECR_WRAP;
	case 2:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.INCR;
	case 3:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.INCR_WRAP;
	case 4:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.INVERT;
	case 5:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.KEEP;
	case 6:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.REPLACE;
	case 7:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.ZERO;
	default:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.KEEP;
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.__hasGLExtension = function(name) {
	return openfl__$internal_stage3D_opengl_GLContext3D.gl.getSupportedExtensions().indexOf(name) != -1;
};
openfl__$internal_stage3D_opengl_GLContext3D.__setViewport = function(originX,originY,width,height) {
	if(openfl__$internal_stage3D_opengl_GLContext3D.context.__renderToTexture != null) {
		originY *= -1;
	}
	if(openfl_display3D_Context3D.__stateCache.updateViewport(originX,originY,width,height)) {
		openfl__$internal_stage3D_opengl_GLContext3D.gl.viewport(originX,originY,width,height);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.__updateDepthAndStencilState = function() {
	var depthAndStencil = openfl__$internal_stage3D_opengl_GLContext3D.context.__renderToTexture != null ? openfl__$internal_stage3D_opengl_GLContext3D.context.__rttDepthAndStencil : openfl__$internal_stage3D_opengl_GLContext3D.context.__backBufferEnableDepthAndStencil;
	if(depthAndStencil) {
		openfl__$internal_stage3D_opengl_GLContext3D.gl.enable(openfl__$internal_stage3D_opengl_GLContext3D.gl.DEPTH_TEST);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		openfl__$internal_stage3D_opengl_GLContext3D.gl.enable(openfl__$internal_stage3D_opengl_GLContext3D.gl.STENCIL_TEST);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	} else {
		openfl__$internal_stage3D_opengl_GLContext3D.gl.disable(openfl__$internal_stage3D_opengl_GLContext3D.gl.DEPTH_TEST);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		openfl__$internal_stage3D_opengl_GLContext3D.gl.disable(openfl__$internal_stage3D_opengl_GLContext3D.gl.STENCIL_TEST);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.__updateBlendFactorsTEMP = function(context) {
	openfl__$internal_stage3D_opengl_GLContext3D.context = context;
	openfl__$internal_stage3D_opengl_GLContext3D.gl = context.__renderSession.gl;
	openfl__$internal_stage3D_opengl_GLContext3D.__updateBlendFactors();
};
openfl__$internal_stage3D_opengl_GLContext3D.__updateBlendFactors = function() {
	if(openfl_display3D_Context3D.__stateCache._srcBlendFactor == null || openfl_display3D_Context3D.__stateCache._destBlendFactor == null) {
		return;
	}
	var src = openfl__$internal_stage3D_opengl_GLContext3D.gl.ONE;
	var dest = openfl__$internal_stage3D_opengl_GLContext3D.gl.ZERO;
	var _g = openfl_display3D_Context3D.__stateCache._srcBlendFactor;
	switch(_g) {
	case 0:
		src = openfl__$internal_stage3D_opengl_GLContext3D.gl.DST_ALPHA;
		break;
	case 1:
		src = openfl__$internal_stage3D_opengl_GLContext3D.gl.DST_COLOR;
		break;
	case 2:
		src = openfl__$internal_stage3D_opengl_GLContext3D.gl.ONE;
		break;
	case 3:
		src = openfl__$internal_stage3D_opengl_GLContext3D.gl.ONE_MINUS_DST_ALPHA;
		break;
	case 4:
		src = openfl__$internal_stage3D_opengl_GLContext3D.gl.ONE_MINUS_DST_COLOR;
		break;
	case 5:
		src = openfl__$internal_stage3D_opengl_GLContext3D.gl.ONE_MINUS_SRC_ALPHA;
		break;
	case 7:
		src = openfl__$internal_stage3D_opengl_GLContext3D.gl.SRC_ALPHA;
		break;
	case 9:
		src = openfl__$internal_stage3D_opengl_GLContext3D.gl.ZERO;
		break;
	default:
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
	}
	var _g1 = openfl_display3D_Context3D.__stateCache._destBlendFactor;
	switch(_g1) {
	case 0:
		dest = openfl__$internal_stage3D_opengl_GLContext3D.gl.DST_ALPHA;
		break;
	case 2:
		dest = openfl__$internal_stage3D_opengl_GLContext3D.gl.ONE;
		break;
	case 3:
		dest = openfl__$internal_stage3D_opengl_GLContext3D.gl.ONE_MINUS_DST_ALPHA;
		break;
	case 5:
		dest = openfl__$internal_stage3D_opengl_GLContext3D.gl.ONE_MINUS_SRC_ALPHA;
		break;
	case 6:
		dest = openfl__$internal_stage3D_opengl_GLContext3D.gl.ONE_MINUS_SRC_COLOR;
		break;
	case 7:
		dest = openfl__$internal_stage3D_opengl_GLContext3D.gl.SRC_ALPHA;
		break;
	case 8:
		dest = openfl__$internal_stage3D_opengl_GLContext3D.gl.SRC_COLOR;
		break;
	case 9:
		dest = openfl__$internal_stage3D_opengl_GLContext3D.gl.ZERO;
		break;
	default:
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
	}
	openfl__$internal_stage3D_opengl_GLContext3D.gl.enable(openfl__$internal_stage3D_opengl_GLContext3D.gl.BLEND);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	openfl__$internal_stage3D_opengl_GLContext3D.gl.blendFunc(src,dest);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
};
openfl__$internal_stage3D_opengl_GLContext3D.__updateScissorRectangle = function() {
	if(openfl__$internal_stage3D_opengl_GLContext3D.context.__scissorRectangle == null) {
		openfl__$internal_stage3D_opengl_GLContext3D.gl.disable(openfl__$internal_stage3D_opengl_GLContext3D.gl.SCISSOR_TEST);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		return;
	}
	openfl__$internal_stage3D_opengl_GLContext3D.gl.enable(openfl__$internal_stage3D_opengl_GLContext3D.gl.SCISSOR_TEST);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var height = 0;
	var offsetX = 0;
	var offsetY = 0;
	if(openfl__$internal_stage3D_opengl_GLContext3D.context.__renderToTexture != null) {
		if(Std.is(openfl__$internal_stage3D_opengl_GLContext3D.context.__renderToTexture,openfl_display3D_textures_Texture)) {
			var texture2D = openfl__$internal_stage3D_opengl_GLContext3D.context.__renderToTexture;
			height = texture2D.__height;
		} else if(Std.is(openfl__$internal_stage3D_opengl_GLContext3D.context.__renderToTexture,openfl_display3D_textures_RectangleTexture)) {
			var rectTexture = openfl__$internal_stage3D_opengl_GLContext3D.context.__renderToTexture;
			height = rectTexture.__height;
		}
	} else {
		height = openfl__$internal_stage3D_opengl_GLContext3D.context.backBufferHeight;
		offsetX = Std.int(openfl__$internal_stage3D_opengl_GLContext3D.context.__stage3D.get_x());
		offsetY = Std.int(openfl__$internal_stage3D_opengl_GLContext3D.context.__stage3D.get_y());
	}
	openfl__$internal_stage3D_opengl_GLContext3D.gl.scissor(Std.int(openfl__$internal_stage3D_opengl_GLContext3D.context.__scissorRectangle.x) + offsetX,height - Std.int(openfl__$internal_stage3D_opengl_GLContext3D.context.__scissorRectangle.y) - Std.int(openfl__$internal_stage3D_opengl_GLContext3D.context.__scissorRectangle.height) + offsetY,Std.int(openfl__$internal_stage3D_opengl_GLContext3D.context.__scissorRectangle.width),Std.int(openfl__$internal_stage3D_opengl_GLContext3D.context.__scissorRectangle.height));
	openfl__$internal_stage3D_GLUtils.CheckGLError();
};
openfl__$internal_stage3D_opengl_GLContext3D.__updateBackbufferViewportTEMP = function(context) {
	openfl__$internal_stage3D_opengl_GLContext3D.context = context;
	openfl__$internal_stage3D_opengl_GLContext3D.gl = context.__renderSession.gl;
	openfl__$internal_stage3D_opengl_GLContext3D.__updateBackbufferViewport();
};
openfl__$internal_stage3D_opengl_GLContext3D.__updateBackbufferViewport = function() {
	if(!openfl_display_Stage3D.__active) {
		openfl_display_Stage3D.__active = true;
		openfl__$internal_stage3D_opengl_GLContext3D.context.__renderSession.renderer.clear();
	}
	if(openfl__$internal_stage3D_opengl_GLContext3D.context.__renderToTexture == null && openfl__$internal_stage3D_opengl_GLContext3D.context.backBufferWidth > 0 && openfl__$internal_stage3D_opengl_GLContext3D.context.backBufferHeight > 0) {
		openfl__$internal_stage3D_opengl_GLContext3D.__setViewport(Std.int(openfl__$internal_stage3D_opengl_GLContext3D.context.__stage3D.get_x()),Std.int(openfl__$internal_stage3D_opengl_GLContext3D.context.__stage3D.get_y()),openfl__$internal_stage3D_opengl_GLContext3D.context.backBufferWidth,openfl__$internal_stage3D_opengl_GLContext3D.context.backBufferHeight);
	}
};
var openfl__$internal_stage3D_opengl_GLCubeTexture = $hx_exports["openfl"]["_internal"]["stage3D"]["opengl"]["GLCubeTexture"] = function() { };
$hxClasses["openfl._internal.stage3D.opengl.GLCubeTexture"] = openfl__$internal_stage3D_opengl_GLCubeTexture;
openfl__$internal_stage3D_opengl_GLCubeTexture.__name__ = ["openfl","_internal","stage3D","opengl","GLCubeTexture"];
openfl__$internal_stage3D_opengl_GLCubeTexture.create = function(cubeTexture,renderSession) {
	var gl = renderSession.gl;
	cubeTexture.__textureTarget = gl.TEXTURE_CUBE_MAP;
	cubeTexture.__uploadedSides = 0;
};
openfl__$internal_stage3D_opengl_GLCubeTexture.uploadCompressedTextureFromByteArray = function(cubeTexture,renderSession,data,byteArrayOffset) {
	var reader = new openfl__$internal_stage3D_atf_ATFReader(data,byteArrayOffset);
	var alpha = reader.readHeader(cubeTexture.__size,cubeTexture.__size,true);
	var gl = renderSession.gl;
	gl.bindTexture(cubeTexture.__textureTarget,cubeTexture.__textureID);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	reader.readTextures(function(side,level,gpuFormat,width,height,blockLength,bytes) {
		var format = openfl__$internal_stage3D_opengl_GLTextureBase.__compressedTextureFormats.toTextureFormat(alpha,gpuFormat);
		if(format == 0) {
			return;
		}
		var target = openfl__$internal_stage3D_opengl_GLCubeTexture.__sideToTarget(gl,side);
		cubeTexture.__format = format;
		gl.compressedTexImage2D(target,level,cubeTexture.__format,width,height,0,blockLength,bytes);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	});
	gl.bindTexture(cubeTexture.__textureTarget,null);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
};
openfl__$internal_stage3D_opengl_GLCubeTexture.uploadFromBitmapData = function(cubeTexture,renderSession,source,side,miplevel,generateMipmap) {
	if(generateMipmap == null) {
		generateMipmap = false;
	}
	if(miplevel == null) {
		miplevel = 0;
	}
	var size = cubeTexture.__size >> miplevel;
	if(size == 0) {
		return;
	}
	var image = cubeTexture.__getImage(source);
	openfl__$internal_stage3D_opengl_GLCubeTexture.uploadFromTypedArray(cubeTexture,renderSession,image.get_data(),side,miplevel);
};
openfl__$internal_stage3D_opengl_GLCubeTexture.uploadFromByteArray = function(cubeTexture,renderSession,data,byteArrayOffset,side,miplevel) {
	if(byteArrayOffset == 0) {
		openfl__$internal_stage3D_opengl_GLCubeTexture.uploadFromTypedArray(cubeTexture,renderSession,data.b,side,miplevel);
		return;
	}
	var buffer = openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer(data);
	var this1;
	if(buffer != null) {
		this1 = new Uint8Array(buffer,byteArrayOffset);
	} else {
		this1 = null;
	}
	openfl__$internal_stage3D_opengl_GLCubeTexture.uploadFromTypedArray(cubeTexture,renderSession,this1,side,miplevel);
};
openfl__$internal_stage3D_opengl_GLCubeTexture.uploadFromTypedArray = function(cubeTexture,renderSession,data,side,miplevel) {
	if(data == null) {
		return;
	}
	var gl = renderSession.gl;
	var size = cubeTexture.__size >> miplevel;
	if(size == 0) {
		return;
	}
	var target = openfl__$internal_stage3D_opengl_GLCubeTexture.__sideToTarget(gl,side);
	gl.bindTexture(gl.TEXTURE_CUBE_MAP,cubeTexture.__textureID);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	gl.texImage2D(target,miplevel,cubeTexture.__internalFormat,size,size,0,cubeTexture.__format,gl.UNSIGNED_BYTE,$hx_$exports_lime_utils_DataPointer.fromArrayBufferView(data));
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	gl.bindTexture(cubeTexture.__textureTarget,null);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	cubeTexture.__uploadedSides |= 1 << side;
};
openfl__$internal_stage3D_opengl_GLCubeTexture.setSamplerState = function(cubeTexture,renderSession,state) {
	if(!state.equals(cubeTexture.__samplerState)) {
		var gl = renderSession.gl;
		if(state.minFilter != gl.NEAREST && state.minFilter != gl.LINEAR && !state.mipmapGenerated) {
			gl.generateMipmap(gl.TEXTURE_CUBE_MAP);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			state.mipmapGenerated = true;
		}
		if(state.maxAniso != 0.0) {
			gl.texParameterf(gl.TEXTURE_CUBE_MAP,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,state.maxAniso);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
	}
	openfl__$internal_stage3D_opengl_GLTextureBase.setSamplerState(cubeTexture,renderSession,state);
};
openfl__$internal_stage3D_opengl_GLCubeTexture.__sideToTarget = function(gl,side) {
	switch(side) {
	case 0:
		return gl.TEXTURE_CUBE_MAP_NEGATIVE_X;
	case 1:
		return gl.TEXTURE_CUBE_MAP_POSITIVE_X;
	case 2:
		return gl.TEXTURE_CUBE_MAP_NEGATIVE_Y;
	case 3:
		return gl.TEXTURE_CUBE_MAP_POSITIVE_Y;
	case 4:
		return gl.TEXTURE_CUBE_MAP_NEGATIVE_Z;
	case 5:
		return gl.TEXTURE_CUBE_MAP_POSITIVE_Z;
	default:
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
	}
};
var openfl__$internal_stage3D_opengl_GLIndexBuffer3D = $hx_exports["openfl"]["_internal"]["stage3D"]["opengl"]["GLIndexBuffer3D"] = function() { };
$hxClasses["openfl._internal.stage3D.opengl.GLIndexBuffer3D"] = openfl__$internal_stage3D_opengl_GLIndexBuffer3D;
openfl__$internal_stage3D_opengl_GLIndexBuffer3D.__name__ = ["openfl","_internal","stage3D","opengl","GLIndexBuffer3D"];
openfl__$internal_stage3D_opengl_GLIndexBuffer3D.create = function(indexBuffer,renderSession,bufferUsage) {
	var gl = renderSession.gl;
	indexBuffer.__elementType = gl.UNSIGNED_SHORT;
	indexBuffer.__id = gl.createBuffer();
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	indexBuffer.__usage = bufferUsage == 0 ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;
};
openfl__$internal_stage3D_opengl_GLIndexBuffer3D.dispose = function(indexBuffer,renderSession) {
	var gl = renderSession.gl;
	gl.deleteBuffer(indexBuffer.__id);
};
openfl__$internal_stage3D_opengl_GLIndexBuffer3D.uploadFromByteArray = function(indexBuffer,renderSession,data,byteArrayOffset,startOffset,count) {
	var offset = byteArrayOffset + startOffset * 2;
	var buffer = openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer(data);
	var this1;
	if(buffer != null) {
		if(count == null) {
			this1 = new Int16Array(buffer,offset);
		} else {
			this1 = new Int16Array(buffer,offset,count);
		}
	} else {
		this1 = null;
	}
	openfl__$internal_stage3D_opengl_GLIndexBuffer3D.uploadFromTypedArray(indexBuffer,renderSession,this1);
};
openfl__$internal_stage3D_opengl_GLIndexBuffer3D.uploadFromTypedArray = function(indexBuffer,renderSession,data) {
	if(data == null) {
		return;
	}
	var gl = renderSession.gl;
	gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,indexBuffer.__id);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	$hx_$exports_lime_graphics_opengl_WebGLContext.bufferData(gl,gl.ELEMENT_ARRAY_BUFFER,data,indexBuffer.__usage);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
};
openfl__$internal_stage3D_opengl_GLIndexBuffer3D.uploadFromVector = function(indexBuffer,renderSession,data,startOffset,count) {
	if(data == null) {
		return;
	}
	var gl = renderSession.gl;
	var length = startOffset + count;
	var existingInt16Array = indexBuffer.__tempInt16Array;
	if(indexBuffer.__tempInt16Array == null || indexBuffer.__tempInt16Array.length < count) {
		var this1;
		if(count != null) {
			this1 = new Int16Array(count);
		} else {
			this1 = null;
		}
		indexBuffer.__tempInt16Array = this1;
		if(existingInt16Array != null) {
			indexBuffer.__tempInt16Array.set(existingInt16Array);
		}
	}
	var _g1 = startOffset;
	var _g = length;
	while(_g1 < _g) {
		var i = _g1++;
		indexBuffer.__tempInt16Array[i - startOffset] = data.data.get(i);
	}
	openfl__$internal_stage3D_opengl_GLIndexBuffer3D.uploadFromTypedArray(indexBuffer,renderSession,indexBuffer.__tempInt16Array);
};
var openfl__$internal_stage3D_opengl_GLProgram3D = $hx_exports["openfl"]["_internal"]["stage3D"]["opengl"]["GLProgram3D"] = function() { };
$hxClasses["openfl._internal.stage3D.opengl.GLProgram3D"] = openfl__$internal_stage3D_opengl_GLProgram3D;
openfl__$internal_stage3D_opengl_GLProgram3D.__name__ = ["openfl","_internal","stage3D","opengl","GLProgram3D"];
openfl__$internal_stage3D_opengl_GLProgram3D.program = null;
openfl__$internal_stage3D_opengl_GLProgram3D.renderSession = null;
openfl__$internal_stage3D_opengl_GLProgram3D.dispose = function(program,renderSession) {
	openfl__$internal_stage3D_opengl_GLProgram3D.program = program;
	openfl__$internal_stage3D_opengl_GLProgram3D.renderSession = renderSession;
	openfl__$internal_stage3D_opengl_GLProgram3D.__deleteShaders();
};
openfl__$internal_stage3D_opengl_GLProgram3D.flushUniform = function(uniform,gl) {
	var index = uniform.regIndex * 4;
	var _g = uniform.type;
	switch(_g) {
	case 35664:
		gl.uniform2fv(uniform.location,uniform.regCount,$hx_$exports_lime_utils_DataPointer.fromArrayBufferView(openfl__$internal_stage3D_opengl_GLProgram3D.__getUniformRegisters(uniform,index,uniform.regCount * 2)));
		break;
	case 35665:
		gl.uniform3fv(uniform.location,uniform.regCount,$hx_$exports_lime_utils_DataPointer.fromArrayBufferView(openfl__$internal_stage3D_opengl_GLProgram3D.__getUniformRegisters(uniform,index,uniform.regCount * 3)));
		break;
	case 35666:
		gl.uniform4fv(uniform.location,uniform.regCount,$hx_$exports_lime_utils_DataPointer.fromArrayBufferView(openfl__$internal_stage3D_opengl_GLProgram3D.__getUniformRegisters(uniform,index,uniform.regCount * 4)));
		break;
	case 35674:
		gl.uniformMatrix2fv(uniform.location,uniform.size,false,$hx_$exports_lime_utils_DataPointer.fromArrayBufferView(openfl__$internal_stage3D_opengl_GLProgram3D.__getUniformRegisters(uniform,index,uniform.size * 2 * 2)));
		break;
	case 35675:
		gl.uniformMatrix3fv(uniform.location,uniform.size,false,$hx_$exports_lime_utils_DataPointer.fromArrayBufferView(openfl__$internal_stage3D_opengl_GLProgram3D.__getUniformRegisters(uniform,index,uniform.size * 3 * 3)));
		break;
	case 35676:
		gl.uniformMatrix4fv(uniform.location,uniform.size,false,$hx_$exports_lime_utils_DataPointer.fromArrayBufferView(openfl__$internal_stage3D_opengl_GLProgram3D.__getUniformRegisters(uniform,index,uniform.size * 4 * 4)));
		break;
	default:
		gl.uniform4fv(uniform.location,uniform.regCount,$hx_$exports_lime_utils_DataPointer.fromArrayBufferView(openfl__$internal_stage3D_opengl_GLProgram3D.__getUniformRegisters(uniform,index,uniform.regCount * 4)));
	}
	openfl__$internal_stage3D_GLUtils.CheckGLError();
};
openfl__$internal_stage3D_opengl_GLProgram3D.setPositionScale = function(program,renderSession,positionScale) {
	var gl = renderSession.gl;
	gl.uniform4fv(program.__positionScale.location,1,$hx_$exports_lime_utils_DataPointer.fromArrayBufferView(positionScale));
	openfl__$internal_stage3D_GLUtils.CheckGLError();
};
openfl__$internal_stage3D_opengl_GLProgram3D.upload = function(program,renderSession,vertexProgram,fragmentProgram) {
	openfl__$internal_stage3D_opengl_GLProgram3D.program = program;
	openfl__$internal_stage3D_opengl_GLProgram3D.renderSession = renderSession;
	var samplerStates = [];
	var glslVertex = openfl__$internal_stage3D_AGALConverter.convertToGLSL(vertexProgram,null);
	var glslFragment = openfl__$internal_stage3D_AGALConverter.convertToGLSL(fragmentProgram,samplerStates);
	openfl__$internal_stage3D_opengl_GLProgram3D.__uploadFromGLSL(glslVertex,glslFragment);
	var _g1 = 0;
	var _g = samplerStates.length;
	while(_g1 < _g) {
		var i = _g1++;
		program.__samplerStates.data.set(i,samplerStates[i]);
	}
};
openfl__$internal_stage3D_opengl_GLProgram3D.use = function(program,renderSession) {
	var gl = renderSession.gl;
	gl.useProgram(program.__programID);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	program.__vertexUniformMap.markAllDirty();
	program.__fragmentUniformMap.markAllDirty();
	var sampler = program.__samplerUniforms.iterator();
	while(sampler.hasNext()) {
		var sampler1 = sampler.next();
		if(sampler1.regCount == 1) {
			gl.uniform1i(sampler1.location,sampler1.regIndex);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("!!! TODO: uniform location on webgl"));
		}
	}
	var sampler2 = program.__alphaSamplerUniforms.iterator();
	while(sampler2.hasNext()) {
		var sampler3 = sampler2.next();
		if(sampler3.regCount == 1) {
			gl.uniform1i(sampler3.location,sampler3.regIndex);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("!!! TODO: uniform location on webgl"));
		}
	}
};
openfl__$internal_stage3D_opengl_GLProgram3D.__buildUniformList = function() {
	var gl = openfl__$internal_stage3D_opengl_GLProgram3D.renderSession.gl;
	openfl__$internal_stage3D_opengl_GLProgram3D.program.__uniforms.clear();
	openfl__$internal_stage3D_opengl_GLProgram3D.program.__samplerUniforms.clear();
	openfl__$internal_stage3D_opengl_GLProgram3D.program.__alphaSamplerUniforms.clear();
	openfl__$internal_stage3D_opengl_GLProgram3D.program.__samplerUsageMask = 0;
	var numActive = 0;
	numActive = gl.getProgramParameter(openfl__$internal_stage3D_opengl_GLProgram3D.program.__programID,gl.ACTIVE_UNIFORMS);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var vertexUniforms = new $hx_exports.List();
	var fragmentUniforms = new $hx_exports.List();
	var _g1 = 0;
	var _g = numActive;
	while(_g1 < _g) {
		var i = _g1++;
		var info = gl.getActiveUniform(openfl__$internal_stage3D_opengl_GLProgram3D.program.__programID,i);
		var name = info.name;
		var size = info.size;
		var uniformType = info.type;
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		var uniform = new openfl_display3D_Uniform(gl);
		uniform.name = name;
		uniform.size = size;
		uniform.type = uniformType;
		uniform.location = gl.getUniformLocation(openfl__$internal_stage3D_opengl_GLProgram3D.program.__programID,uniform.name);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		var indexBracket = uniform.name.indexOf("[");
		if(indexBracket >= 0) {
			uniform.name = uniform.name.substring(0,indexBracket);
		}
		var _g2 = uniform.type;
		switch(_g2) {
		case 35674:
			uniform.regCount = 2;
			break;
		case 35675:
			uniform.regCount = 3;
			break;
		case 35676:
			uniform.regCount = 4;
			break;
		default:
			uniform.regCount = 1;
		}
		uniform.regCount *= uniform.size;
		openfl__$internal_stage3D_opengl_GLProgram3D.program.__uniforms.add(uniform);
		if(uniform.name == "vcPositionScale") {
			openfl__$internal_stage3D_opengl_GLProgram3D.program.__positionScale = uniform;
		} else if($hx_exports.StringTools.startsWith(uniform.name,"vc")) {
			uniform.regIndex = Std.parseInt(uniform.name.substring(2));
			uniform.regData = openfl__$internal_stage3D_opengl_GLProgram3D.program.__context.__vertexConstants;
			vertexUniforms.add(uniform);
		} else if($hx_exports.StringTools.startsWith(uniform.name,"fc")) {
			uniform.regIndex = Std.parseInt(uniform.name.substring(2));
			uniform.regData = openfl__$internal_stage3D_opengl_GLProgram3D.program.__context.__fragmentConstants;
			fragmentUniforms.add(uniform);
		} else if($hx_exports.StringTools.startsWith(uniform.name,"sampler") && !$hx_exports.StringTools.endsWith(uniform.name,"_alpha")) {
			uniform.regIndex = Std.parseInt(uniform.name.substring(7));
			openfl__$internal_stage3D_opengl_GLProgram3D.program.__samplerUniforms.add(uniform);
			var _g4 = 0;
			var _g3 = uniform.regCount;
			while(_g4 < _g3) {
				var reg = _g4++;
				openfl__$internal_stage3D_opengl_GLProgram3D.program.__samplerUsageMask |= 1 << uniform.regIndex + reg;
			}
		} else if($hx_exports.StringTools.startsWith(uniform.name,"sampler") && $hx_exports.StringTools.endsWith(uniform.name,"_alpha")) {
			var len = uniform.name.indexOf("_") - 7;
			uniform.regIndex = Std.parseInt(uniform.name.substring(7,7 + len)) + 4;
			openfl__$internal_stage3D_opengl_GLProgram3D.program.__alphaSamplerUniforms.add(uniform);
		}
		if($hx_exports.lime.utils.Log.level == 5) {
			$hx_exports.haxe.Log.trace("" + i + " name:" + uniform.name + " type:" + uniform.type + " size:" + uniform.size + " location:" + Std.string(uniform.location),{ fileName : "GLProgram3D.hx", lineNumber : 247, className : "openfl._internal.stage3D.opengl.GLProgram3D", methodName : "__buildUniformList"});
		}
	}
	var tmp = Lambda.array(vertexUniforms);
	openfl__$internal_stage3D_opengl_GLProgram3D.program.__vertexUniformMap = new openfl_display3D_UniformMap(tmp);
	var tmp1 = Lambda.array(fragmentUniforms);
	openfl__$internal_stage3D_opengl_GLProgram3D.program.__fragmentUniformMap = new openfl_display3D_UniformMap(tmp1);
};
openfl__$internal_stage3D_opengl_GLProgram3D.__deleteShaders = function() {
	var gl = openfl__$internal_stage3D_opengl_GLProgram3D.renderSession.gl;
	if(openfl__$internal_stage3D_opengl_GLProgram3D.program.__programID != null) {
		openfl__$internal_stage3D_opengl_GLProgram3D.program.__programID = null;
	}
	if(openfl__$internal_stage3D_opengl_GLProgram3D.program.__vertexShaderID != null) {
		gl.deleteShader(openfl__$internal_stage3D_opengl_GLProgram3D.program.__vertexShaderID);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		openfl__$internal_stage3D_opengl_GLProgram3D.program.__vertexShaderID = null;
	}
	if(openfl__$internal_stage3D_opengl_GLProgram3D.program.__fragmentShaderID != null) {
		gl.deleteShader(openfl__$internal_stage3D_opengl_GLProgram3D.program.__fragmentShaderID);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		openfl__$internal_stage3D_opengl_GLProgram3D.program.__fragmentShaderID = null;
	}
};
openfl__$internal_stage3D_opengl_GLProgram3D.__getUniformRegisters = function(uniform,index,size) {
	return uniform.regData.subarray(index,index + size);
};
openfl__$internal_stage3D_opengl_GLProgram3D.__uploadFromGLSL = function(vertexShaderSource,fragmentShaderSource) {
	var gl = openfl__$internal_stage3D_opengl_GLProgram3D.renderSession.gl;
	openfl__$internal_stage3D_opengl_GLProgram3D.__deleteShaders();
	if($hx_exports.lime.utils.Log.level == 5) {
		$hx_exports.lime.utils.Log.info(vertexShaderSource,null,{ fileName : "GLProgram3D.hx", lineNumber : 322, className : "openfl._internal.stage3D.opengl.GLProgram3D", methodName : "__uploadFromGLSL"});
		$hx_exports.lime.utils.Log.info(fragmentShaderSource,null,{ fileName : "GLProgram3D.hx", lineNumber : 323, className : "openfl._internal.stage3D.opengl.GLProgram3D", methodName : "__uploadFromGLSL"});
	}
	openfl__$internal_stage3D_opengl_GLProgram3D.program.__vertexSource = vertexShaderSource;
	openfl__$internal_stage3D_opengl_GLProgram3D.program.__fragmentSource = fragmentShaderSource;
	openfl__$internal_stage3D_opengl_GLProgram3D.program.__vertexShaderID = gl.createShader(gl.VERTEX_SHADER);
	gl.shaderSource(openfl__$internal_stage3D_opengl_GLProgram3D.program.__vertexShaderID,vertexShaderSource);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	gl.compileShader(openfl__$internal_stage3D_opengl_GLProgram3D.program.__vertexShaderID);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var shaderCompiled = gl.getShaderParameter(openfl__$internal_stage3D_opengl_GLProgram3D.program.__vertexShaderID,gl.COMPILE_STATUS);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	if(shaderCompiled == 0) {
		var vertexInfoLog = gl.getShaderInfoLog(openfl__$internal_stage3D_opengl_GLProgram3D.program.__vertexShaderID);
		if(vertexInfoLog != null && vertexInfoLog.length != 0) {
			$hx_exports.haxe.Log.trace("vertex: " + vertexInfoLog,{ fileName : "GLProgram3D.hx", lineNumber : 347, className : "openfl._internal.stage3D.opengl.GLProgram3D", methodName : "__uploadFromGLSL"});
		}
		throw new js__$Boot_HaxeError(new openfl_errors_Error("Error compiling vertex shader: " + vertexInfoLog));
	}
	openfl__$internal_stage3D_opengl_GLProgram3D.program.__fragmentShaderID = gl.createShader(gl.FRAGMENT_SHADER);
	gl.shaderSource(openfl__$internal_stage3D_opengl_GLProgram3D.program.__fragmentShaderID,fragmentShaderSource);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	gl.compileShader(openfl__$internal_stage3D_opengl_GLProgram3D.program.__fragmentShaderID);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var fragmentCompiled = gl.getShaderParameter(openfl__$internal_stage3D_opengl_GLProgram3D.program.__fragmentShaderID,gl.COMPILE_STATUS);
	if(fragmentCompiled == 0) {
		var fragmentInfoLog = gl.getShaderInfoLog(openfl__$internal_stage3D_opengl_GLProgram3D.program.__fragmentShaderID);
		if(fragmentInfoLog != null && fragmentInfoLog.length != 0) {
			$hx_exports.haxe.Log.trace("fragment: " + fragmentInfoLog,{ fileName : "GLProgram3D.hx", lineNumber : 370, className : "openfl._internal.stage3D.opengl.GLProgram3D", methodName : "__uploadFromGLSL"});
		}
		throw new js__$Boot_HaxeError(new openfl_errors_Error("Error compiling fragment shader: " + fragmentInfoLog));
	}
	openfl__$internal_stage3D_opengl_GLProgram3D.program.__programID = gl.createProgram();
	gl.attachShader(openfl__$internal_stage3D_opengl_GLProgram3D.program.__programID,openfl__$internal_stage3D_opengl_GLProgram3D.program.__vertexShaderID);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	gl.attachShader(openfl__$internal_stage3D_opengl_GLProgram3D.program.__programID,openfl__$internal_stage3D_opengl_GLProgram3D.program.__fragmentShaderID);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		var name = "va" + i;
		if(vertexShaderSource.indexOf(" " + name) != -1) {
			gl.bindAttribLocation(openfl__$internal_stage3D_opengl_GLProgram3D.program.__programID,i,name);
		}
	}
	gl.linkProgram(openfl__$internal_stage3D_opengl_GLProgram3D.program.__programID);
	var infoLog = gl.getProgramInfoLog(openfl__$internal_stage3D_opengl_GLProgram3D.program.__programID);
	if(infoLog != null && infoLog.length != 0) {
		$hx_exports.haxe.Log.trace("program: " + infoLog,{ fileName : "GLProgram3D.hx", lineNumber : 403, className : "openfl._internal.stage3D.opengl.GLProgram3D", methodName : "__uploadFromGLSL"});
	}
	openfl__$internal_stage3D_opengl_GLProgram3D.__buildUniformList();
};
var openfl__$internal_stage3D_opengl_GLRectangleTexture = $hx_exports["openfl"]["_internal"]["stage3D"]["opengl"]["GLRectangleTexture"] = function() { };
$hxClasses["openfl._internal.stage3D.opengl.GLRectangleTexture"] = openfl__$internal_stage3D_opengl_GLRectangleTexture;
openfl__$internal_stage3D_opengl_GLRectangleTexture.__name__ = ["openfl","_internal","stage3D","opengl","GLRectangleTexture"];
openfl__$internal_stage3D_opengl_GLRectangleTexture.create = function(rectangleTexture,renderSession) {
	var gl = renderSession.gl;
	rectangleTexture.__textureTarget = gl.TEXTURE_2D;
	openfl__$internal_stage3D_opengl_GLRectangleTexture.uploadFromTypedArray(rectangleTexture,renderSession,null);
};
openfl__$internal_stage3D_opengl_GLRectangleTexture.uploadFromBitmapData = function(rectangleTexture,renderSession,source) {
	if(source == null) {
		return;
	}
	var image = rectangleTexture.__getImage(source);
	if(image == null) {
		return;
	}
	openfl__$internal_stage3D_opengl_GLRectangleTexture.uploadFromTypedArray(rectangleTexture,renderSession,image.get_data());
};
openfl__$internal_stage3D_opengl_GLRectangleTexture.uploadFromByteArray = function(rectangleTexture,renderSession,data,byteArrayOffset) {
	if(byteArrayOffset == 0) {
		openfl__$internal_stage3D_opengl_GLRectangleTexture.uploadFromTypedArray(rectangleTexture,renderSession,data.b);
		return;
	}
	var buffer = openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer(data);
	var this1;
	if(buffer != null) {
		this1 = new Uint8Array(buffer,byteArrayOffset);
	} else {
		this1 = null;
	}
	openfl__$internal_stage3D_opengl_GLRectangleTexture.uploadFromTypedArray(rectangleTexture,renderSession,this1);
};
openfl__$internal_stage3D_opengl_GLRectangleTexture.uploadFromTypedArray = function(rectangleTexture,renderSession,data) {
	var gl = renderSession.gl;
	gl.bindTexture(rectangleTexture.__textureTarget,rectangleTexture.__textureID);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	gl.texImage2D(rectangleTexture.__textureTarget,0,rectangleTexture.__internalFormat,rectangleTexture.__width,rectangleTexture.__height,0,rectangleTexture.__format,gl.UNSIGNED_BYTE,$hx_$exports_lime_utils_DataPointer.fromArrayBufferView(data));
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	gl.bindTexture(rectangleTexture.__textureTarget,null);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
};
openfl__$internal_stage3D_opengl_GLRectangleTexture.setSamplerState = function(rectangleTexture,renderSession,state) {
	if(!state.equals(rectangleTexture.__samplerState)) {
		var gl = renderSession.gl;
		if(state.maxAniso != 0.0) {
			gl.texParameterf(gl.TEXTURE_2D,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,state.maxAniso);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
	}
	openfl__$internal_stage3D_opengl_GLTextureBase.setSamplerState(rectangleTexture,renderSession,state);
};
var openfl__$internal_stage3D_opengl_GLStage3D = $hx_exports["openfl"]["_internal"]["stage3D"]["opengl"]["GLStage3D"] = function() { };
$hxClasses["openfl._internal.stage3D.opengl.GLStage3D"] = openfl__$internal_stage3D_opengl_GLStage3D;
openfl__$internal_stage3D_opengl_GLStage3D.__name__ = ["openfl","_internal","stage3D","opengl","GLStage3D"];
openfl__$internal_stage3D_opengl_GLStage3D.render = function(stage3D,renderSession) {
	if(stage3D.context3D != null) {
		renderSession.blendModeManager.setBlendMode(null);
		if(renderSession.shaderManager.currentShader != null) {
			renderSession.shaderManager.setShader(null);
			if(stage3D.context3D.__program != null) {
				stage3D.context3D.__program.__use();
			}
		}
	}
	if(openfl__$internal_stage3D_GLUtils.debug) {
		renderSession.gl.getError();
	}
};
var openfl__$internal_stage3D_opengl_GLTexture = $hx_exports["openfl"]["_internal"]["stage3D"]["opengl"]["GLTexture"] = function() { };
$hxClasses["openfl._internal.stage3D.opengl.GLTexture"] = openfl__$internal_stage3D_opengl_GLTexture;
openfl__$internal_stage3D_opengl_GLTexture.__name__ = ["openfl","_internal","stage3D","opengl","GLTexture"];
openfl__$internal_stage3D_opengl_GLTexture.create = function(texture,renderSession) {
	var gl = renderSession.gl;
	texture.__textureTarget = gl.TEXTURE_2D;
	gl.bindTexture(texture.__textureTarget,texture.__textureID);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	gl.texImage2D(texture.__textureTarget,0,texture.__internalFormat,texture.__width,texture.__height,0,texture.__format,gl.UNSIGNED_BYTE,$hx_$exports_lime_utils_DataPointer.fromInt(0));
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	gl.bindTexture(texture.__textureTarget,null);
	openfl__$internal_stage3D_opengl_GLTexture.uploadFromTypedArray(texture,renderSession,null);
};
openfl__$internal_stage3D_opengl_GLTexture.uploadCompressedTextureFromByteArray = function(texture,renderSession,data,byteArrayOffset) {
	var reader = new openfl__$internal_stage3D_atf_ATFReader(data,byteArrayOffset);
	var alpha = reader.readHeader(texture.__width,texture.__height,false);
	var gl = renderSession.gl;
	gl.bindTexture(texture.__textureTarget,texture.__textureID);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	reader.readTextures(function(target,level,gpuFormat,width,height,blockLength,bytes) {
		var format = openfl__$internal_stage3D_opengl_GLTextureBase.__compressedTextureFormats.toTextureFormat(alpha,gpuFormat);
		if(format == 0) {
			return;
		}
		texture.__format = format;
		gl.compressedTexImage2D(texture.__textureTarget,level,texture.__format,width,height,0,blockLength,bytes);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	});
	gl.bindTexture(texture.__textureTarget,null);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
};
openfl__$internal_stage3D_opengl_GLTexture.uploadFromBitmapData = function(texture,renderSession,source,miplevel,generateMipmap) {
	if(source == null) {
		return;
	}
	var width = texture.__width >> miplevel;
	var height = texture.__height >> miplevel;
	if(width == 0 && height == 0) {
		return;
	}
	if(width == 0) {
		width = 1;
	}
	if(height == 0) {
		height = 1;
	}
	if(source.width != width || source.height != height) {
		var copy = new openfl_display_BitmapData(width,height,true,0);
		copy.draw(source);
		source = copy;
	}
	var image = texture.__getImage(source);
	openfl__$internal_stage3D_opengl_GLTexture.uploadFromTypedArray(texture,renderSession,image.get_data(),miplevel);
};
openfl__$internal_stage3D_opengl_GLTexture.uploadFromByteArray = function(texture,renderSession,data,byteArrayOffset,miplevel) {
	if(miplevel == null) {
		miplevel = 0;
	}
	if(byteArrayOffset == 0) {
		openfl__$internal_stage3D_opengl_GLTexture.uploadFromTypedArray(texture,renderSession,data.b,miplevel);
		return;
	}
	var buffer = openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer(data);
	var this1;
	if(buffer != null) {
		this1 = new Uint8Array(buffer,byteArrayOffset);
	} else {
		this1 = null;
	}
	openfl__$internal_stage3D_opengl_GLTexture.uploadFromTypedArray(texture,renderSession,this1,miplevel);
};
openfl__$internal_stage3D_opengl_GLTexture.uploadFromTypedArray = function(texture,renderSession,data,miplevel) {
	if(miplevel == null) {
		miplevel = 0;
	}
	if(data == null) {
		return;
	}
	var gl = renderSession.gl;
	var width = texture.__width >> miplevel;
	var height = texture.__height >> miplevel;
	if(width == 0 && height == 0) {
		return;
	}
	if(width == 0) {
		width = 1;
	}
	if(height == 0) {
		height = 1;
	}
	gl.bindTexture(texture.__textureTarget,texture.__textureID);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	gl.texImage2D(texture.__textureTarget,miplevel,texture.__internalFormat,width,height,0,texture.__format,gl.UNSIGNED_BYTE,$hx_$exports_lime_utils_DataPointer.fromArrayBufferView(data));
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	gl.bindTexture(texture.__textureTarget,null);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
};
openfl__$internal_stage3D_opengl_GLTexture.setSamplerState = function(texture,renderSession,state) {
	if(!state.equals(texture.__samplerState)) {
		var gl = renderSession.gl;
		if(state.minFilter != gl.NEAREST && state.minFilter != gl.LINEAR && !state.mipmapGenerated) {
			gl.generateMipmap(gl.TEXTURE_2D);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			state.mipmapGenerated = true;
		}
		if(state.maxAniso != 0.0) {
			gl.texParameterf(gl.TEXTURE_2D,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,state.maxAniso);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
	}
	openfl__$internal_stage3D_opengl_GLTextureBase.setSamplerState(texture,renderSession,state);
};
var openfl__$internal_stage3D_opengl_GLTextureBase = $hx_exports["openfl"]["_internal"]["stage3D"]["opengl"]["GLTextureBase"] = function() { };
$hxClasses["openfl._internal.stage3D.opengl.GLTextureBase"] = openfl__$internal_stage3D_opengl_GLTextureBase;
openfl__$internal_stage3D_opengl_GLTextureBase.__name__ = ["openfl","_internal","stage3D","opengl","GLTextureBase"];
openfl__$internal_stage3D_opengl_GLTextureBase.__textureFormat = null;
openfl__$internal_stage3D_opengl_GLTextureBase.__textureInternalFormat = null;
openfl__$internal_stage3D_opengl_GLTextureBase.create = function(textureBase,renderSession) {
	var gl = renderSession.gl;
	textureBase.__textureID = gl.createTexture();
	textureBase.__textureContext = gl;
	if(openfl__$internal_stage3D_opengl_GLTextureBase.__supportsBGRA == null) {
		openfl__$internal_stage3D_opengl_GLTextureBase.__textureInternalFormat = gl.RGBA;
		var bgraExtension = null;
		if(bgraExtension != null) {
			openfl__$internal_stage3D_opengl_GLTextureBase.__supportsBGRA = true;
			openfl__$internal_stage3D_opengl_GLTextureBase.__textureFormat = bgraExtension.BGRA_EXT;
			if(gl.type == lime_graphics_opengl_GLContextType.GLES) {
				openfl__$internal_stage3D_opengl_GLTextureBase.__textureInternalFormat = bgraExtension.BGRA_EXT;
			}
		} else {
			openfl__$internal_stage3D_opengl_GLTextureBase.__supportsBGRA = false;
			openfl__$internal_stage3D_opengl_GLTextureBase.__textureFormat = gl.RGBA;
		}
	}
	if(openfl__$internal_stage3D_opengl_GLTextureBase.__compressedTextureFormats == null) {
		openfl__$internal_stage3D_opengl_GLTextureBase.__compressedTextureFormats = new openfl__$internal_stage3D_GLCompressedTextureFormats(gl);
	}
	textureBase.__internalFormat = openfl__$internal_stage3D_opengl_GLTextureBase.__textureInternalFormat;
	textureBase.__format = openfl__$internal_stage3D_opengl_GLTextureBase.__textureFormat;
};
openfl__$internal_stage3D_opengl_GLTextureBase.dispose = function(textureBase,renderSession) {
	var gl = renderSession.gl;
	if(textureBase.__alphaTexture != null) {
		textureBase.__alphaTexture.dispose();
	}
	gl.deleteTexture(textureBase.__textureID);
};
openfl__$internal_stage3D_opengl_GLTextureBase.getImage = function(textureBase,renderSession,bitmapData) {
	var image = bitmapData.image;
	if(!bitmapData.__isValid || image == null) {
		return null;
	}
	$hx_exports.lime.graphics.utils.ImageCanvasUtil.sync(image,false);
	var gl = renderSession.gl;
	if(image.type != lime_graphics_ImageType.DATA && !image.get_premultiplied()) {
		gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,1);
	} else if(!image.get_premultiplied() && image.get_transparent()) {
		gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,0);
		image = image.clone();
		image.set_premultiplied(true);
	}
	if(image.get_format() != 0) {
		image = image.clone();
		image.set_format(0);
		image.buffer.premultiplied = true;
	}
	return image;
};
openfl__$internal_stage3D_opengl_GLTextureBase.setSamplerState = function(textureBase,renderSession,state) {
	if(!state.equals(textureBase.__samplerState)) {
		var gl = renderSession.gl;
		gl.bindTexture(textureBase.__textureTarget,textureBase.__textureID);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		gl.texParameteri(textureBase.__textureTarget,gl.TEXTURE_MIN_FILTER,state.minFilter);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		gl.texParameteri(textureBase.__textureTarget,gl.TEXTURE_MAG_FILTER,state.magFilter);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		gl.texParameteri(textureBase.__textureTarget,gl.TEXTURE_WRAP_S,state.wrapModeS);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		gl.texParameteri(textureBase.__textureTarget,gl.TEXTURE_WRAP_T,state.wrapModeT);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		var tmp = state.lodBias != 0.0;
		textureBase.__samplerState = state;
		textureBase.__samplerState.__samplerDirty = false;
	}
};
var openfl__$internal_stage3D_opengl_GLVertexBuffer3D = $hx_exports["openfl"]["_internal"]["stage3D"]["opengl"]["GLVertexBuffer3D"] = function() { };
$hxClasses["openfl._internal.stage3D.opengl.GLVertexBuffer3D"] = openfl__$internal_stage3D_opengl_GLVertexBuffer3D;
openfl__$internal_stage3D_opengl_GLVertexBuffer3D.__name__ = ["openfl","_internal","stage3D","opengl","GLVertexBuffer3D"];
openfl__$internal_stage3D_opengl_GLVertexBuffer3D.create = function(vertexBuffer,renderSession,bufferUsage) {
	var gl = renderSession.gl;
	vertexBuffer.__id = gl.createBuffer();
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	vertexBuffer.__stride = vertexBuffer.__vertexSize * 4;
	vertexBuffer.__usage = bufferUsage == 0 ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;
};
openfl__$internal_stage3D_opengl_GLVertexBuffer3D.dispose = function(vertexBuffer,renderSession) {
	var gl = renderSession.gl;
	gl.deleteBuffer(vertexBuffer.__id);
};
openfl__$internal_stage3D_opengl_GLVertexBuffer3D.uploadFromByteArray = function(vertexBuffer,renderSession,data,byteArrayOffset,startVertex,numVertices) {
	var offset = byteArrayOffset + startVertex * vertexBuffer.__stride;
	var length = numVertices * vertexBuffer.__vertexSize;
	var buffer = openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer(data);
	var this1;
	if(buffer != null) {
		if(length == null) {
			this1 = new Float32Array(buffer,offset);
		} else {
			this1 = new Float32Array(buffer,offset,length);
		}
	} else {
		this1 = null;
	}
	openfl__$internal_stage3D_opengl_GLVertexBuffer3D.uploadFromTypedArray(vertexBuffer,renderSession,this1);
};
openfl__$internal_stage3D_opengl_GLVertexBuffer3D.uploadFromTypedArray = function(vertexBuffer,renderSession,data) {
	if(data == null) {
		return;
	}
	var gl = renderSession.gl;
	gl.bindBuffer(gl.ARRAY_BUFFER,vertexBuffer.__id);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	$hx_$exports_lime_graphics_opengl_WebGLContext.bufferData(gl,gl.ARRAY_BUFFER,data,vertexBuffer.__usage);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
};
openfl__$internal_stage3D_opengl_GLVertexBuffer3D.uploadFromVector = function(vertexBuffer,renderSession,data,startVertex,numVertices) {
	if(data == null) {
		return;
	}
	var gl = renderSession.gl;
	var start = startVertex * vertexBuffer.__vertexSize;
	var count = numVertices * vertexBuffer.__vertexSize;
	var length = start + count;
	var existingFloat32Array = vertexBuffer.__tempFloat32Array;
	if(vertexBuffer.__tempFloat32Array == null || vertexBuffer.__tempFloat32Array.length < count) {
		var this1;
		if(count != null) {
			this1 = new Float32Array(count);
		} else {
			this1 = null;
		}
		vertexBuffer.__tempFloat32Array = this1;
		if(existingFloat32Array != null) {
			vertexBuffer.__tempFloat32Array.set(existingFloat32Array);
		}
	}
	var _g1 = start;
	var _g = length;
	while(_g1 < _g) {
		var i = _g1++;
		vertexBuffer.__tempFloat32Array[i - start] = data.data.get(i);
	}
	openfl__$internal_stage3D_opengl_GLVertexBuffer3D.uploadFromTypedArray(vertexBuffer,renderSession,vertexBuffer.__tempFloat32Array);
};
var openfl__$internal_stage3D_opengl_GLVideoTexture = $hx_exports["openfl"]["_internal"]["stage3D"]["opengl"]["GLVideoTexture"] = function() { };
$hxClasses["openfl._internal.stage3D.opengl.GLVideoTexture"] = openfl__$internal_stage3D_opengl_GLVideoTexture;
openfl__$internal_stage3D_opengl_GLVideoTexture.__name__ = ["openfl","_internal","stage3D","opengl","GLVideoTexture"];
openfl__$internal_stage3D_opengl_GLVideoTexture.create = function(videoTexture,renderSession) {
	var gl = renderSession.gl;
	videoTexture.__textureTarget = gl.TEXTURE_2D;
};
openfl__$internal_stage3D_opengl_GLVideoTexture.getTexture = function(videoTexture,renderSession) {
	if(!videoTexture.__netStream.__video.paused) {
		var gl = renderSession.gl;
		gl.bindTexture(videoTexture.__textureTarget,videoTexture.__textureID);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		$hx_$exports_lime_graphics_opengl_WebGLContext.texImage2D(gl,gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,videoTexture.__netStream.__video);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	}
	return videoTexture.__textureID;
};
var openfl__$internal_swf_FilterType = $hxClasses["openfl._internal.swf.FilterType"] = { __ename__ : ["openfl","_internal","swf","FilterType"], __constructs__ : ["BlurFilter","ColorMatrixFilter","DropShadowFilter","GlowFilter"] };
openfl__$internal_swf_FilterType.BlurFilter = function(blurX,blurY,quality) { var $x = ["BlurFilter",0,blurX,blurY,quality]; $x.__enum__ = openfl__$internal_swf_FilterType; $x.toString = $estr; return $x; };
openfl__$internal_swf_FilterType.ColorMatrixFilter = function(matrix) { var $x = ["ColorMatrixFilter",1,matrix]; $x.__enum__ = openfl__$internal_swf_FilterType; $x.toString = $estr; return $x; };
openfl__$internal_swf_FilterType.DropShadowFilter = function(distance,angle,color,alpha,blurX,blurY,strength,quality,inner,knockout,hideObject) { var $x = ["DropShadowFilter",2,distance,angle,color,alpha,blurX,blurY,strength,quality,inner,knockout,hideObject]; $x.__enum__ = openfl__$internal_swf_FilterType; $x.toString = $estr; return $x; };
openfl__$internal_swf_FilterType.GlowFilter = function(color,alpha,blurX,blurY,strength,quality,inner,knockout) { var $x = ["GlowFilter",3,color,alpha,blurX,blurY,strength,quality,inner,knockout]; $x.__enum__ = openfl__$internal_swf_FilterType; $x.toString = $estr; return $x; };
openfl__$internal_swf_FilterType.__empty_constructs__ = [];
var openfl__$internal_swf_SWFLite = $hx_exports["openfl"]["_internal"]["swf"]["SWFLite"] = function() {
	this.symbols = new $hx_exports.haxe.ds.IntMap();
};
$hxClasses["openfl._internal.swf.SWFLite"] = openfl__$internal_swf_SWFLite;
openfl__$internal_swf_SWFLite.__name__ = ["openfl","_internal","swf","SWFLite"];
openfl__$internal_swf_SWFLite.resolveClass = function(name) {
	var value = Type.resolveClass(name);
	if(value == null) {
		value = Type.resolveClass($hx_exports.StringTools.replace(name,"openfl._legacy","openfl"));
	}
	if(value == null) {
		value = Type.resolveClass($hx_exports.StringTools.replace(name,"openfl._v2","openfl"));
	}
	return value;
};
openfl__$internal_swf_SWFLite.resolveEnum = function(name) {
	var value = Type.resolveEnum(name);
	if(value == null) {
		value = Type.resolveEnum($hx_exports.StringTools.replace(name,"openfl._legacy","openfl"));
	}
	if(value == null) {
		value = Type.resolveEnum($hx_exports.StringTools.replace(name,"openfl._v2","openfl"));
	}
	return value;
};
openfl__$internal_swf_SWFLite.unserialize = function(data) {
	if(data == null) {
		return null;
	}
	var unserializer = new haxe_Unserializer(data);
	unserializer.setResolver({ resolveClass : openfl__$internal_swf_SWFLite.resolveClass, resolveEnum : openfl__$internal_swf_SWFLite.resolveEnum});
	return unserializer.unserialize();
};
openfl__$internal_swf_SWFLite.prototype = {
	frameRate: null
	,library: null
	,root: null
	,symbols: null
	,frameSizeMinPixel: null
	,frameSizeMaxPixel: null
	,createButton: function(className) {
		return null;
	}
	,createMovieClip: function(className) {
		if(className == null) {
			className = "";
		}
		if(className == "") {
			return this.root.__createObject(this);
		} else {
			var symbol = this.symbols.iterator();
			while(symbol.hasNext()) {
				var symbol1 = symbol.next();
				if(symbol1.className == className) {
					if(Std.is(symbol1,openfl__$internal_symbols_SpriteSymbol)) {
						return (js_Boot.__cast(symbol1 , openfl__$internal_symbols_SpriteSymbol)).__createObject(this);
					}
				}
			}
		}
		return null;
	}
	,getBitmapData: function(className) {
		var symbol = this.symbols.iterator();
		while(symbol.hasNext()) {
			var symbol1 = symbol.next();
			if(symbol1.className == className) {
				if(Std.is(symbol1,openfl__$internal_symbols_BitmapSymbol)) {
					var bitmap = symbol1;
					return openfl_utils_Assets.getBitmapData(bitmap.path);
				}
			}
		}
		return null;
	}
	,hasSymbol: function(className) {
		var symbol = this.symbols.iterator();
		while(symbol.hasNext()) {
			var symbol1 = symbol.next();
			if(symbol1.className == className) {
				return true;
			}
		}
		return false;
	}
	,serialize: function() {
		var serializer = new haxe_Serializer();
		serializer.serialize(this);
		return serializer.toString();
	}
	,__class__: openfl__$internal_swf_SWFLite
};
var openfl_utils_AssetLibrary = $hx_exports["openfl"]["utils"]["AssetLibrary"] = function() {
	$hx_exports.lime.utils.AssetLibrary.call(this);
};
$hxClasses["openfl.utils.AssetLibrary"] = openfl_utils_AssetLibrary;
openfl_utils_AssetLibrary.__name__ = ["openfl","utils","AssetLibrary"];
openfl_utils_AssetLibrary.fromBytes = function(bytes,rootPath) {
	return openfl_utils_AssetLibrary.fromManifest($hx_exports.lime.utils.AssetManifest.fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes),rootPath));
};
openfl_utils_AssetLibrary.fromFile = function(path,rootPath) {
	return openfl_utils_AssetLibrary.fromManifest($hx_exports.lime.utils.AssetManifest.fromFile(path,rootPath));
};
openfl_utils_AssetLibrary.fromManifest = function(manifest) {
	var library = $hx_exports.lime.utils.AssetLibrary.fromManifest(manifest);
	if(library != null && Std.is(library,openfl_utils_AssetLibrary)) {
		return library;
	} else {
		return null;
	}
};
openfl_utils_AssetLibrary.loadFromBytes = function(bytes,rootPath) {
	return $hx_exports.lime.utils.AssetManifest.loadFromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes),rootPath).then(function(manifest) {
		return openfl_utils_AssetLibrary.loadFromManifest(manifest);
	});
};
openfl_utils_AssetLibrary.loadFromFile = function(path,rootPath) {
	return $hx_exports.lime.utils.AssetManifest.loadFromFile(path,rootPath).then(function(manifest) {
		return openfl_utils_AssetLibrary.loadFromManifest(manifest);
	});
};
openfl_utils_AssetLibrary.loadFromManifest = function(manifest) {
	var library = openfl_utils_AssetLibrary.fromManifest(manifest);
	if(library != null && Std.is(library,openfl_utils_AssetLibrary)) {
		return library.load().then(function(library1) {
			return $hx_exports.lime.app.Future.withValue(library1);
		});
	} else {
		return $hx_exports.lime.app.Future.withError("Could not load asset manifest");
	}
};
openfl_utils_AssetLibrary.__super__ = $hx_exports.lime.utils.AssetLibrary;
openfl_utils_AssetLibrary.prototype = $extend($hx_exports.lime.utils.AssetLibrary.prototype,{
	getMovieClip: function(id) {
		return null;
	}
	,loadMovieClip: function(id) {
		var _gthis = this;
		return new $hx_exports.lime.app.Future(function() {
			return _gthis.getMovieClip(id);
		});
	}
	,__class__: openfl_utils_AssetLibrary
});
var openfl__$internal_swf_SWFLiteLibrary = $hx_exports["openfl"]["_internal"]["swf"]["SWFLiteLibrary"] = function(id) {
	openfl_utils_AssetLibrary.call(this);
	this.id = id;
	this.alphaCheck = new haxe_ds_StringMap();
	this.imageClassNames = new haxe_ds_StringMap();
	this.rootPath = "";
};
$hxClasses["openfl._internal.swf.SWFLiteLibrary"] = openfl__$internal_swf_SWFLiteLibrary;
openfl__$internal_swf_SWFLiteLibrary.__name__ = ["openfl","_internal","swf","SWFLiteLibrary"];
openfl__$internal_swf_SWFLiteLibrary.__super__ = openfl_utils_AssetLibrary;
openfl__$internal_swf_SWFLiteLibrary.prototype = $extend(openfl_utils_AssetLibrary.prototype,{
	alphaCheck: null
	,id: null
	,imageClassNames: null
	,preloading: null
	,rootPath: null
	,swf: null
	,exists: function(id,type) {
		if(this.swf == null) {
			return false;
		}
		if(id == "" && type == "MOVIE_CLIP") {
			return true;
		}
		if(type == "IMAGE" || type == "MOVIE_CLIP") {
			if(this.swf != null) {
				return this.swf.hasSymbol(id);
			} else {
				return false;
			}
		}
		return false;
	}
	,getImage: function(id) {
		if(this.imageClassNames.exists(id)) {
			id = this.imageClassNames.get(id);
		}
		if(!this.alphaCheck.exists(id)) {
			var symbol = this.swf.symbols.iterator();
			while(symbol.hasNext()) {
				var symbol1 = symbol.next();
				if(Std.is(symbol1,openfl__$internal_symbols_BitmapSymbol) && (js_Boot.__cast(symbol1 , openfl__$internal_symbols_BitmapSymbol)).path == id) {
					var bitmapSymbol = symbol1;
					if(bitmapSymbol.alpha != null) {
						var image = openfl_utils_AssetLibrary.prototype.getImage.call(this,id);
						var alpha = openfl_utils_AssetLibrary.prototype.getImage.call(this,bitmapSymbol.alpha);
						this.__copyChannel(image,alpha);
						this.cachedImages.set(id,image);
						this.cachedImages.remove(bitmapSymbol.alpha);
						this.alphaCheck.set(id,true);
						return image;
					}
				}
			}
		}
		return openfl_utils_AssetLibrary.prototype.getImage.call(this,id);
	}
	,getMovieClip: function(id) {
		var mc = this.swf != null ? this.swf.createMovieClip(id) : null;
		if(mc != null) {
			mc.__enterFrame(0);
		}
		return mc;
	}
	,isLocal: function(id,type) {
		return true;
	}
	,load: function() {
		var _gthis = this;
		if(this.id != null) {
			this.preload.set(this.id,true);
		}
		var promise = new $hx_exports.lime.app.Promise();
		this.preloading = true;
		var onComplete = function(data) {
			_gthis.cachedText.set(_gthis.id,data);
			_gthis.swf = openfl__$internal_swf_SWFLite.unserialize(data);
			_gthis.swf.library = _gthis;
			var bitmapSymbol;
			var symbol = _gthis.swf.symbols.iterator();
			while(symbol.hasNext()) {
				var symbol1 = symbol.next();
				if(Std.is(symbol1,openfl__$internal_symbols_BitmapSymbol)) {
					bitmapSymbol = symbol1;
					if(bitmapSymbol.className != null) {
						_gthis.imageClassNames.set(bitmapSymbol.className,bitmapSymbol.path);
					}
				}
			}
			openfl__$internal_swf_SWFLite.instances.set(_gthis.id,_gthis.swf);
			_gthis.__load().onProgress($bind(promise,promise.progress)).onError($bind(promise,promise.error)).onComplete(function(_) {
				_gthis.preloading = false;
				promise.complete(_gthis);
			});
		};
		if(openfl_utils_Assets.exists(this.id)) {
			var id = this.paths.keys();
			while(id.hasNext()) {
				var id1 = id.next();
				this.preload.set(id1,true);
			}
			this.loadText(this.id).onError($bind(promise,promise.error)).onComplete(onComplete);
		} else {
			var id2 = this.paths.keys();
			while(id2.hasNext()) {
				var id3 = id2.next();
				this.preload.set(id3,true);
			}
			var path = this.rootPath != null && this.rootPath != "" ? this.rootPath + "/" + this.id : this.id;
			var loader = new openfl_net_URLLoader();
			loader.addEventListener("complete",function(_1) {
				onComplete(loader.data);
			});
			loader.addEventListener("ioError",function(e) {
				promise.error(e);
			});
			loader.load(new openfl_net_URLRequest(path));
		}
		return promise.future;
	}
	,loadImage: function(id) {
		var _gthis = this;
		if(this.imageClassNames.exists(id)) {
			id = this.imageClassNames.get(id);
		}
		if(!this.preloading && !this.alphaCheck.exists(id)) {
			var symbol = this.swf.symbols.iterator();
			while(symbol.hasNext()) {
				var symbol1 = symbol.next();
				if(Std.is(symbol1,openfl__$internal_symbols_BitmapSymbol) && (js_Boot.__cast(symbol1 , openfl__$internal_symbols_BitmapSymbol)).path == id) {
					var bitmapSymbol = [symbol1];
					if(bitmapSymbol[0].alpha != null) {
						var promise = [new $hx_exports.lime.app.Promise()];
						this.__loadImage(id).onError(($_=promise[0],$bind($_,$_.error))).onComplete((function(promise1,bitmapSymbol1) {
							return function(image) {
								_gthis.__loadImage(bitmapSymbol1[0].alpha).onError(($_=promise1[0],$bind($_,$_.error))).onComplete((function(promise2,bitmapSymbol2) {
									return function(alpha) {
										_gthis.__copyChannel(image,alpha);
										_gthis.cachedImages.set(id,image);
										_gthis.cachedImages.remove(bitmapSymbol2[0].alpha);
										_gthis.alphaCheck.set(id,true);
										promise2[0].complete(image);
									};
								})(promise1,bitmapSymbol1));
							};
						})(promise,bitmapSymbol));
						return promise[0].future;
					}
				}
			}
		}
		return openfl_utils_AssetLibrary.prototype.loadImage.call(this,id);
	}
	,unload: function() {
		if(this.swf == null) {
			return;
		}
		var bitmap;
		var symbol = this.swf.symbols.iterator();
		while(symbol.hasNext()) {
			var symbol1 = symbol.next();
			if(Std.is(symbol1,openfl__$internal_symbols_BitmapSymbol)) {
				bitmap = symbol1;
				openfl_utils_Assets.cache.removeBitmapData(bitmap.path);
			}
		}
	}
	,__copyChannel: function(image,alpha) {
		if(alpha != null) {
			image.copyChannel(alpha,alpha.get_rect(),new $hx_exports.lime.math.Vector2(),lime_graphics_ImageChannel.RED,lime_graphics_ImageChannel.ALPHA);
		}
		image.buffer.premultiplied = true;
		image.set_premultiplied(false);
	}
	,__fromManifest: function(manifest) {
		this.rootPath = manifest.rootPath;
		openfl_utils_AssetLibrary.prototype.__fromManifest.call(this,manifest);
	}
	,__load: function() {
		return openfl_utils_AssetLibrary.prototype.load.call(this);
	}
	,__loadImage: function(id) {
		return openfl_utils_AssetLibrary.prototype.loadImage.call(this,id);
	}
	,__class__: openfl__$internal_swf_SWFLiteLibrary
});
var openfl__$internal_swf_ShapeCommand = $hxClasses["openfl._internal.swf.ShapeCommand"] = { __ename__ : ["openfl","_internal","swf","ShapeCommand"], __constructs__ : ["BeginBitmapFill","BeginFill","BeginGradientFill","CurveTo","EndFill","LineStyle","LineTo","MoveTo"] };
openfl__$internal_swf_ShapeCommand.BeginBitmapFill = function(bitmap,matrix,repeat,smooth) { var $x = ["BeginBitmapFill",0,bitmap,matrix,repeat,smooth]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_swf_ShapeCommand.BeginFill = function(color,alpha) { var $x = ["BeginFill",1,color,alpha]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_swf_ShapeCommand.BeginGradientFill = function(fillType,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) { var $x = ["BeginGradientFill",2,fillType,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_swf_ShapeCommand.CurveTo = function(controlX,controlY,anchorX,anchorY) { var $x = ["CurveTo",3,controlX,controlY,anchorX,anchorY]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_swf_ShapeCommand.EndFill = ["EndFill",4];
openfl__$internal_swf_ShapeCommand.EndFill.toString = $estr;
openfl__$internal_swf_ShapeCommand.EndFill.__enum__ = openfl__$internal_swf_ShapeCommand;
openfl__$internal_swf_ShapeCommand.LineStyle = function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) { var $x = ["LineStyle",5,thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_swf_ShapeCommand.LineTo = function(x,y) { var $x = ["LineTo",6,x,y]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_swf_ShapeCommand.MoveTo = function(x,y) { var $x = ["MoveTo",7,x,y]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_swf_ShapeCommand.__empty_constructs__ = [openfl__$internal_swf_ShapeCommand.EndFill];
var openfl__$internal_symbols_SWFSymbol = $hx_exports["openfl"]["_internal"]["symbols"]["SWFSymbol"] = function() {
};
$hxClasses["openfl._internal.symbols.SWFSymbol"] = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_SWFSymbol.__name__ = ["openfl","_internal","symbols","SWFSymbol"];
openfl__$internal_symbols_SWFSymbol.prototype = {
	className: null
	,id: null
	,__createObject: function(swf) {
		return null;
	}
	,__class__: openfl__$internal_symbols_SWFSymbol
};
var openfl__$internal_symbols_BitmapSymbol = $hx_exports["openfl"]["_internal"]["symbols"]["BitmapSymbol"] = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.BitmapSymbol"] = openfl__$internal_symbols_BitmapSymbol;
openfl__$internal_symbols_BitmapSymbol.__name__ = ["openfl","_internal","symbols","BitmapSymbol"];
openfl__$internal_symbols_BitmapSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_BitmapSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	alpha: null
	,path: null
	,smooth: null
	,__createObject: function(swf) {
		return new openfl_display_Bitmap(openfl_display_BitmapData.fromImage(swf.library.getImage(this.path)),1,this.smooth != false);
	}
	,__class__: openfl__$internal_symbols_BitmapSymbol
});
var openfl__$internal_symbols_ButtonSymbol = $hx_exports["openfl"]["_internal"]["symbols"]["ButtonSymbol"] = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.ButtonSymbol"] = openfl__$internal_symbols_ButtonSymbol;
openfl__$internal_symbols_ButtonSymbol.__name__ = ["openfl","_internal","symbols","ButtonSymbol"];
openfl__$internal_symbols_ButtonSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_ButtonSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	downState: null
	,hitState: null
	,overState: null
	,upState: null
	,__createObject: function(swf) {
		var simpleButton = null;
		openfl_display_SimpleButton.__initSWF = swf;
		openfl_display_SimpleButton.__initSymbol = this;
		if(this.className != null) {
			var symbolType = Type.resolveClass(this.className);
			if(symbolType != null) {
				simpleButton = Type.createInstance(symbolType,[]);
			}
		}
		if(simpleButton == null) {
			simpleButton = new openfl_display_SimpleButton();
		}
		return simpleButton;
	}
	,__class__: openfl__$internal_symbols_ButtonSymbol
});
var openfl__$internal_symbols_DynamicTextSymbol = $hx_exports["openfl"]["_internal"]["symbols"]["DynamicTextSymbol"] = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.DynamicTextSymbol"] = openfl__$internal_symbols_DynamicTextSymbol;
openfl__$internal_symbols_DynamicTextSymbol.__name__ = ["openfl","_internal","symbols","DynamicTextSymbol"];
openfl__$internal_symbols_DynamicTextSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_DynamicTextSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	align: null
	,border: null
	,color: null
	,fontHeight: null
	,fontID: null
	,fontName: null
	,height: null
	,html: null
	,indent: null
	,input: null
	,leading: null
	,leftMargin: null
	,multiline: null
	,password: null
	,rightMargin: null
	,selectable: null
	,text: null
	,width: null
	,wordWrap: null
	,x: null
	,y: null
	,__createObject: function(swf) {
		var textField = new openfl_text_TextField();
		textField.__fromSymbol(swf,this);
		return textField;
	}
	,__class__: openfl__$internal_symbols_DynamicTextSymbol
});
var openfl__$internal_symbols_FontSymbol = $hx_exports["openfl"]["_internal"]["symbols"]["FontSymbol"] = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.FontSymbol"] = openfl__$internal_symbols_FontSymbol;
openfl__$internal_symbols_FontSymbol.__name__ = ["openfl","_internal","symbols","FontSymbol"];
openfl__$internal_symbols_FontSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_FontSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	advances: null
	,ascent: null
	,bold: null
	,codes: null
	,descent: null
	,glyphs: null
	,italic: null
	,leading: null
	,name: null
	,__class__: openfl__$internal_symbols_FontSymbol
});
var openfl__$internal_symbols_ShapeSymbol = $hx_exports["openfl"]["_internal"]["symbols"]["ShapeSymbol"] = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.ShapeSymbol"] = openfl__$internal_symbols_ShapeSymbol;
openfl__$internal_symbols_ShapeSymbol.__name__ = ["openfl","_internal","symbols","ShapeSymbol"];
openfl__$internal_symbols_ShapeSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_ShapeSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	commands: null
	,rendered: null
	,__createObject: function(swf) {
		var shape = new openfl_display_Shape();
		var graphics = shape.get_graphics();
		if(this.rendered != null) {
			graphics.copyFrom(this.rendered.get_graphics());
			return shape;
		}
		var _g = 0;
		var _g1 = this.commands;
		while(_g < _g1.length) {
			var command = _g1[_g];
			++_g;
			switch(command[1]) {
			case 0:
				var smooth = command[5];
				var repeat = command[4];
				var matrix = command[3];
				var bitmapID = command[2];
				var bitmapSymbol = swf.symbols.get(bitmapID);
				var bitmap = swf.library.getImage(bitmapSymbol.path);
				if(bitmap != null) {
					graphics.beginBitmapFill(openfl_display_BitmapData.fromImage(bitmap),matrix,repeat,smooth);
				}
				break;
			case 1:
				var alpha = command[3];
				var color = command[2];
				graphics.beginFill(color,alpha);
				break;
			case 2:
				var focalPointRatio = command[9];
				var interpolationMethod = command[8];
				var spreadMethod = command[7];
				var matrix1 = command[6];
				var ratios = command[5];
				var alphas = command[4];
				var colors = command[3];
				var fillType = command[2];
				graphics.beginGradientFill(fillType,colors,alphas,ratios,matrix1,spreadMethod,interpolationMethod,focalPointRatio);
				break;
			case 3:
				var anchorY = command[5];
				var anchorX = command[4];
				var controlY = command[3];
				var controlX = command[2];
				graphics.curveTo(controlX,controlY,anchorX,anchorY);
				break;
			case 4:
				graphics.endFill();
				break;
			case 5:
				var miterLimit = command[9];
				var joints = command[8];
				var caps = command[7];
				var scaleMode = command[6];
				var pixelHinting = command[5];
				var alpha1 = command[4];
				var color1 = command[3];
				var thickness = command[2];
				if(thickness != null) {
					graphics.lineStyle(thickness,color1,alpha1,pixelHinting,scaleMode,caps,joints,miterLimit);
				} else {
					graphics.lineStyle();
				}
				break;
			case 6:
				var y = command[3];
				var x = command[2];
				graphics.lineTo(x,y);
				break;
			case 7:
				var y1 = command[3];
				var x1 = command[2];
				graphics.moveTo(x1,y1);
				break;
			}
		}
		this.commands = null;
		this.rendered = new openfl_display_Shape();
		this.rendered.get_graphics().copyFrom(shape.get_graphics());
		return shape;
	}
	,__class__: openfl__$internal_symbols_ShapeSymbol
});
var openfl__$internal_symbols_SpriteSymbol = $hx_exports["openfl"]["_internal"]["symbols"]["SpriteSymbol"] = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
	this.frames = [];
};
$hxClasses["openfl._internal.symbols.SpriteSymbol"] = openfl__$internal_symbols_SpriteSymbol;
openfl__$internal_symbols_SpriteSymbol.__name__ = ["openfl","_internal","symbols","SpriteSymbol"];
openfl__$internal_symbols_SpriteSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_SpriteSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	baseClassName: null
	,frames: null
	,__createObject: function(swf) {
		openfl_display_MovieClip.__initSWF = swf;
		openfl_display_MovieClip.__initSymbol = this;
		var symbolType = null;
		if(this.className != null) {
			symbolType = Type.resolveClass(this.className);
			var tmp = symbolType == null;
		}
		if(symbolType == null && this.baseClassName != null) {
			symbolType = Type.resolveClass(this.baseClassName);
			if(symbolType == null) {
				$hx_exports.haxe.Log.trace("SWF Symbol \"" + this.className + "\" in library \"" + swf.library.rootPath + "\" has baseClassname \"" + this.baseClassName + "\" but no class by that name has been defined.",{ fileName : "SpriteSymbol.hx", lineNumber : 60, className : "openfl._internal.symbols.SpriteSymbol", methodName : "__createObject"});
			}
		}
		var movieClip = null;
		if(symbolType != null) {
			movieClip = Type.createInstance(symbolType,[]);
		} else {
			movieClip = new openfl_display_MovieClip();
		}
		return movieClip;
	}
	,__class__: openfl__$internal_symbols_SpriteSymbol
});
var openfl__$internal_symbols_StaticTextSymbol = $hx_exports["openfl"]["_internal"]["symbols"]["StaticTextSymbol"] = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.StaticTextSymbol"] = openfl__$internal_symbols_StaticTextSymbol;
openfl__$internal_symbols_StaticTextSymbol.__name__ = ["openfl","_internal","symbols","StaticTextSymbol"];
openfl__$internal_symbols_StaticTextSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_StaticTextSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	matrix: null
	,records: null
	,rendered: null
	,__createObject: function(swf) {
		var staticText = new openfl_text_StaticText();
		var graphics = staticText.__graphics;
		if(this.rendered != null) {
			staticText.text = this.rendered.text;
			graphics.copyFrom(this.rendered.__graphics);
			return staticText;
		}
		var text = "";
		if(this.records != null) {
			var font = null;
			var color = 16777215;
			var offsetX = this.matrix.tx;
			var offsetY = this.matrix.ty;
			var scale;
			var index;
			var code;
			var _g = 0;
			var _g1 = this.records;
			while(_g < _g1.length) {
				var record = _g1[_g];
				++_g;
				if(record.fontID != null) {
					font = swf.symbols.get(record.fontID);
				}
				if(record.offsetX != null) {
					offsetX = this.matrix.tx + record.offsetX * 0.05;
				}
				if(record.offsetY != null) {
					offsetY = this.matrix.ty + record.offsetY * 0.05;
				}
				if(record.color != null) {
					color = record.color;
				}
				if(font != null) {
					scale = record.fontHeight / 1024 * 0.05;
					var _g3 = 0;
					var _g2 = record.glyphs.length;
					while(_g3 < _g2) {
						var i = _g3++;
						index = record.glyphs[i];
						text += String.fromCharCode(font.codes[index]);
						var _g4 = 0;
						var _g5 = font.glyphs[index];
						while(_g4 < _g5.length) {
							var command = _g5[_g4];
							++_g4;
							switch(command[1]) {
							case 1:
								var alpha = command[3];
								graphics.beginFill(color & 16777215,(color >> 24 & 255) / 255);
								break;
							case 3:
								var anchorY = command[5];
								var anchorX = command[4];
								var controlY = command[3];
								var controlX = command[2];
								graphics.curveTo(controlX * scale + offsetX,controlY * scale + offsetY,anchorX * scale + offsetX,anchorY * scale + offsetY);
								break;
							case 4:
								graphics.endFill();
								break;
							case 5:
								var miterLimit = command[9];
								var joints = command[8];
								var caps = command[7];
								var scaleMode = command[6];
								var pixelHinting = command[5];
								var alpha1 = command[4];
								var color1 = command[3];
								var thickness = command[2];
								if(thickness != null) {
									graphics.lineStyle(thickness,color1,alpha1,pixelHinting,scaleMode,caps,joints,miterLimit);
								} else {
									graphics.lineStyle();
								}
								break;
							case 6:
								var y = command[3];
								var x = command[2];
								graphics.lineTo(x * scale + offsetX,y * scale + offsetY);
								break;
							case 7:
								var y1 = command[3];
								var x1 = command[2];
								graphics.moveTo(x1 * scale + offsetX,y1 * scale + offsetY);
								break;
							default:
							}
						}
						offsetX += record.advances[i] * 0.05;
					}
				}
			}
		}
		staticText.text = text;
		this.records = null;
		this.rendered = new openfl_text_StaticText();
		this.rendered.text = text;
		this.rendered.__graphics.copyFrom(staticText.__graphics);
		return staticText;
	}
	,__class__: openfl__$internal_symbols_StaticTextSymbol
});
var openfl__$internal_symbols_StaticTextRecord = function() {
};
$hxClasses["openfl._internal.symbols.StaticTextRecord"] = openfl__$internal_symbols_StaticTextRecord;
openfl__$internal_symbols_StaticTextRecord.__name__ = ["openfl","_internal","symbols","StaticTextRecord"];
openfl__$internal_symbols_StaticTextRecord.prototype = {
	advances: null
	,color: null
	,fontHeight: null
	,fontID: null
	,glyphs: null
	,offsetX: null
	,offsetY: null
	,__class__: openfl__$internal_symbols_StaticTextRecord
};
var openfl__$internal_symbols_TextSymbol = $hx_exports["openfl"]["_internal"]["symbols"]["TextSymbol"] = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.TextSymbol"] = openfl__$internal_symbols_TextSymbol;
openfl__$internal_symbols_TextSymbol.__name__ = ["openfl","_internal","symbols","TextSymbol"];
openfl__$internal_symbols_TextSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_TextSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	border: null
	,color: null
	,fontHeight: null
	,fontID: null
	,height: null
	,multiline: null
	,password: null
	,selectable: null
	,text: null
	,width: null
	,wordWrap: null
	,__class__: openfl__$internal_symbols_TextSymbol
});
var openfl__$internal_text_HTMLParser = $hx_exports["openfl"]["_internal"]["text"]["HTMLParser"] = function() { };
$hxClasses["openfl._internal.text.HTMLParser"] = openfl__$internal_text_HTMLParser;
openfl__$internal_text_HTMLParser.__name__ = ["openfl","_internal","text","HTMLParser"];
openfl__$internal_text_HTMLParser.parse = function(value,textFormat,textFormatRanges) {
	value = openfl__$internal_text_HTMLParser.__regexBreakTag.replace(value,"\n");
	value = openfl__$internal_text_HTMLParser.__regexEntities[0].replace(value,"\"");
	value = openfl__$internal_text_HTMLParser.__regexEntities[1].replace(value,"'");
	value = openfl__$internal_text_HTMLParser.__regexEntities[2].replace(value,"&");
	value = openfl__$internal_text_HTMLParser.__regexEntities[5].replace(value," ");
	var segments = value.split("<");
	if(segments.length == 1) {
		value = openfl__$internal_text_HTMLParser.__regexHTMLTag.replace(value,"");
		if(textFormatRanges.data.get_length() > 1) {
			var len = textFormatRanges.data.get_length() - 1;
			new openfl__$Vector_AbstractVector(textFormatRanges.data.splice(1,len));
		}
		value = openfl__$internal_text_HTMLParser.__regexEntities[3].replace(value,"<");
		value = openfl__$internal_text_HTMLParser.__regexEntities[4].replace(value,">");
		var range = textFormatRanges.data.get(0);
		range.format = textFormat;
		range.start = 0;
		range.end = value.length;
		return value;
	} else {
		var len1 = textFormatRanges.data.get_length();
		new openfl__$Vector_AbstractVector(textFormatRanges.data.splice(0,len1));
		value = "";
		var segment;
		var _g1 = 0;
		var _g = segments.length;
		while(_g1 < _g) {
			var i = _g1++;
			segment = segments[i];
			segment = openfl__$internal_text_HTMLParser.__regexEntities[3].replace(segment,"<");
			segment = openfl__$internal_text_HTMLParser.__regexEntities[4].replace(segment,">");
			segments[i] = segment;
		}
		var formatStack = [textFormat.clone()];
		var sub;
		var noLineBreak = false;
		var _g2 = 0;
		while(_g2 < segments.length) {
			var segment1 = segments[_g2];
			++_g2;
			if(segment1 == "") {
				continue;
			}
			var isClosingTag = $hx_exports.HxOverrides.substr(segment1,0,1) == "/";
			var tagEndIndex = segment1.indexOf(">");
			var start = tagEndIndex + 1;
			var spaceIndex = segment1.indexOf(" ");
			var tagName = segment1.substring(isClosingTag ? 1 : 0,spaceIndex > -1 && spaceIndex < tagEndIndex ? spaceIndex : tagEndIndex);
			var format;
			if(isClosingTag) {
				formatStack.pop();
				format = formatStack[formatStack.length - 1].clone();
				if(tagName.toLowerCase() == "p" && textFormatRanges.data.get_length() > 0) {
					noLineBreak = true;
				}
				if(start < segment1.length) {
					sub = $hx_exports.HxOverrides.substr(segment1,start,null);
					var x = new openfl__$internal_text_TextFormatRange(format,value.length,value.length + sub.length);
					textFormatRanges.data.push(x);
					value += sub;
					noLineBreak = false;
				}
			} else {
				format = formatStack[formatStack.length - 1].clone();
				if(tagEndIndex > -1) {
					var _g11 = tagName.toLowerCase();
					switch(_g11) {
					case "a":
						if(openfl__$internal_text_HTMLParser.__regexHref.match(segment1)) {
							format.url = openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexHref);
						}
						break;
					case "b":
						format.bold = true;
						break;
					case "em":case "i":
						format.italic = true;
						break;
					case "font":
						if(openfl__$internal_text_HTMLParser.__regexFace.match(segment1)) {
							format.font = openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexFace);
						}
						if(openfl__$internal_text_HTMLParser.__regexColor.match(segment1)) {
							format.color = Std.parseInt("0x" + openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexColor));
						}
						if(openfl__$internal_text_HTMLParser.__regexSize.match(segment1)) {
							var sizeAttr = openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexSize);
							var firstChar = $hx_exports.HxOverrides.cca(sizeAttr,0);
							if(firstChar == 43 || firstChar == 45) {
								var parentFormat = formatStack.length >= 2 ? formatStack[formatStack.length - 2] : textFormat;
								format.size = parentFormat.size + Std.parseInt(sizeAttr);
							} else {
								format.size = Std.parseInt(sizeAttr);
							}
						}
						break;
					case "p":
						if(textFormatRanges.data.get_length() > 0 && !noLineBreak) {
							value += "\n";
						}
						if(openfl__$internal_text_HTMLParser.__regexAlign.match(segment1)) {
							format.align = openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.fromString(openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexAlign).toLowerCase());
						}
						break;
					case "textformat":
						if(openfl__$internal_text_HTMLParser.__regexBlockIndent.match(segment1)) {
							format.blockIndent = Std.parseInt(openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexBlockIndent));
						}
						if(openfl__$internal_text_HTMLParser.__regexIndent.match(segment1)) {
							format.indent = Std.parseInt(openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexIndent));
						}
						if(openfl__$internal_text_HTMLParser.__regexLeading.match(segment1)) {
							format.leading = Std.parseInt(openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexLeading));
						}
						if(openfl__$internal_text_HTMLParser.__regexLeftMargin.match(segment1)) {
							format.leftMargin = Std.parseInt(openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexLeftMargin));
						}
						if(openfl__$internal_text_HTMLParser.__regexRightMargin.match(segment1)) {
							format.rightMargin = Std.parseInt(openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexRightMargin));
						}
						if(openfl__$internal_text_HTMLParser.__regexTabStops.match(segment1)) {
							var values = openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexTabStops).split(" ");
							var tabStops = [];
							var _g12 = 0;
							while(_g12 < values.length) {
								var stop = values[_g12];
								++_g12;
								tabStops.push(Std.parseInt(stop));
							}
							format.tabStops = tabStops;
						}
						break;
					case "u":
						format.underline = true;
						break;
					}
					formatStack.push(format);
					if(start < segment1.length) {
						sub = segment1.substring(start);
						var x1 = new openfl__$internal_text_TextFormatRange(format,value.length,value.length + sub.length);
						textFormatRanges.data.push(x1);
						value += sub;
						noLineBreak = false;
					}
				} else {
					var x2 = new openfl__$internal_text_TextFormatRange(format,value.length,value.length + segment1.length);
					textFormatRanges.data.push(x2);
					value += segment1;
					noLineBreak = false;
				}
			}
		}
		if(textFormatRanges.data.get_length() == 0) {
			var x3 = new openfl__$internal_text_TextFormatRange(formatStack[0],0,0);
			textFormatRanges.data.push(x3);
		}
	}
	return value;
};
openfl__$internal_text_HTMLParser.__getAttributeMatch = function(regex) {
	if(regex.matched(2) != null) {
		return regex.matched(2);
	} else {
		return regex.matched(3);
	}
};
var openfl__$internal_text_TextEngine = $hx_exports["openfl"]["_internal"]["text"]["TextEngine"] = function(textField) {
	this.textField = textField;
	this.width = 100;
	this.height = 100;
	this.set_text("");
	this.bounds = new openfl_geom_Rectangle(0,0,0,0);
	this.type = 0;
	this.autoSize = 2;
	this.embedFonts = false;
	this.selectable = true;
	this.borderColor = 0;
	this.border = false;
	this.backgroundColor = 16777215;
	this.background = false;
	this.gridFitType = 1;
	this.maxChars = 0;
	this.multiline = false;
	this.sharpness = 0;
	this.scrollH = 0;
	this.scrollV = 1;
	this.wordWrap = false;
	this.lineAscents = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineBreaks = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
	this.lineDescents = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineLeadings = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineHeights = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineWidths = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.layoutGroups = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this.textFormatRanges = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	openfl__$internal_text_TextEngine.__canvas = $hx_exports.js.Browser.get_document().createElement("canvas");
	openfl__$internal_text_TextEngine.__context = openfl__$internal_text_TextEngine.__canvas.getContext("2d");
};
$hxClasses["openfl._internal.text.TextEngine"] = openfl__$internal_text_TextEngine;
openfl__$internal_text_TextEngine.__name__ = ["openfl","_internal","text","TextEngine"];
openfl__$internal_text_TextEngine.__canvas = null;
openfl__$internal_text_TextEngine.__context = null;
openfl__$internal_text_TextEngine.findFont = function(name) {
	return null;
};
openfl__$internal_text_TextEngine.findFontVariant = function(format) {
	var fontName = format.font;
	var bold = format.bold;
	var italic = format.italic;
	var fontNamePrefix = $hx_exports.StringTools.replace($hx_exports.StringTools.replace(fontName," Normal","")," Regular","");
	if(bold && italic && openfl_text_Font.__fontByName.exists(fontNamePrefix + " Bold Italic")) {
		return openfl__$internal_text_TextEngine.findFont(fontNamePrefix + " Bold Italic");
	} else if(bold && openfl_text_Font.__fontByName.exists(fontNamePrefix + " Bold")) {
		return openfl__$internal_text_TextEngine.findFont(fontNamePrefix + " Bold");
	} else if(italic && openfl_text_Font.__fontByName.exists(fontNamePrefix + " Italic")) {
		return openfl__$internal_text_TextEngine.findFont(fontNamePrefix + " Italic");
	}
	return openfl__$internal_text_TextEngine.findFont(fontName);
};
openfl__$internal_text_TextEngine.getFormatHeight = function(format) {
	var ascent;
	var descent;
	openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(format);
	if(format.__ascent != null) {
		ascent = format.size * format.__ascent;
		descent = format.size * format.__descent;
	} else {
		ascent = format.size;
		descent = format.size * 0.185;
	}
	var leading = format.leading;
	return ascent + descent + leading;
};
openfl__$internal_text_TextEngine.getFont = function(format) {
	var fontName = format.font;
	var bold = format.bold;
	var italic = format.italic;
	if(fontName == null) {
		fontName = "_serif";
	}
	var fontNamePrefix = $hx_exports.StringTools.replace($hx_exports.StringTools.replace(fontName," Normal","")," Regular","");
	if(bold && italic && openfl_text_Font.__fontByName.exists(fontNamePrefix + " Bold Italic")) {
		fontName = fontNamePrefix + " Bold Italic";
		bold = false;
		italic = false;
	} else if(bold && openfl_text_Font.__fontByName.exists(fontNamePrefix + " Bold")) {
		fontName = fontNamePrefix + " Bold";
		bold = false;
	} else if(italic && openfl_text_Font.__fontByName.exists(fontNamePrefix + " Italic")) {
		fontName = fontNamePrefix + " Italic";
		italic = false;
	} else {
		if(bold && (fontName.indexOf(" Bold ") > -1 || $hx_exports.StringTools.endsWith(fontName," Bold"))) {
			bold = false;
		}
		if(italic && (fontName.indexOf(" Italic ") > -1 || $hx_exports.StringTools.endsWith(fontName," Italic"))) {
			italic = false;
		}
	}
	var font = italic ? "italic " : "normal ";
	font += "normal ";
	font += bold ? "bold " : "normal ";
	font += format.size + "px";
	font += "/" + (format.leading + format.size + 3) + "px ";
	var font1;
	switch(fontName) {
	case "_sans":
		font1 = "sans-serif";
		break;
	case "_serif":
		font1 = "serif";
		break;
	case "_typewriter":
		font1 = "monospace";
		break;
	default:
		font1 = "'" + new $hx_exports.EReg("^[\\s'\"]+(.*)[\\s'\"]+$","").replace(fontName,"$1") + "'";
	}
	font += "" + font1;
	return font;
};
openfl__$internal_text_TextEngine.getFontInstance = function(format) {
	return null;
};
openfl__$internal_text_TextEngine.prototype = {
	antiAliasType: null
	,autoSize: null
	,background: null
	,backgroundColor: null
	,border: null
	,borderColor: null
	,bottomScrollV: null
	,bounds: null
	,caretIndex: null
	,embedFonts: null
	,gridFitType: null
	,height: null
	,layoutGroups: null
	,lineAscents: null
	,lineBreaks: null
	,lineDescents: null
	,lineLeadings: null
	,lineHeights: null
	,lineWidths: null
	,maxChars: null
	,maxScrollH: null
	,maxScrollV: null
	,multiline: null
	,numLines: null
	,restrict: null
	,scrollH: null
	,scrollV: null
	,selectable: null
	,sharpness: null
	,text: null
	,textHeight: null
	,textFormatRanges: null
	,textWidth: null
	,type: null
	,width: null
	,wordWrap: null
	,textField: null
	,__cursorTimer: null
	,__hasFocus: null
	,__isKeyDown: null
	,__measuredHeight: null
	,__measuredWidth: null
	,__restrictRegexp: null
	,__selectionStart: null
	,__showCursor: null
	,__textFormat: null
	,__textLayout: null
	,__texture: null
	,__useIntAdvances: null
	,__cairoFont: null
	,__font: null
	,createRestrictRegexp: function(restrict) {
		var declinedRange = new $hx_exports.EReg("\\^(.-.|.)","gu");
		var declined = "";
		var accepted = declinedRange.map(restrict,function(ereg) {
			declined += ereg.matched(1);
			return "";
		});
		var testRegexpParts = [];
		if(accepted.length > 0) {
			testRegexpParts.push("[^" + restrict + "]");
		}
		if(declined.length > 0) {
			testRegexpParts.push("[" + declined + "]");
		}
		return new $hx_exports.EReg("(" + testRegexpParts.join("|") + ")","g");
	}
	,getBounds: function() {
		var padding = this.border ? 1 : 0;
		this.bounds.width = this.width + padding;
		this.bounds.height = this.height + padding;
	}
	,getLine: function(index) {
		if(index < 0 || index > this.lineBreaks.data.get_length() + 1) {
			return null;
		}
		if(this.lineBreaks.data.get_length() == 0) {
			return this.text;
		} else {
			return $hx_$exports_lime_text_UTF8String.substring(this.text,index > 0 ? this.lineBreaks.data.get(index - 1) : 0,this.lineBreaks.data.get(index));
		}
	}
	,getLineBreakIndex: function(startIndex) {
		if(startIndex == null) {
			startIndex = 0;
		}
		var br = $hx_$exports_lime_text_UTF8String.indexOf(this.text,"<br>",startIndex);
		var cr = $hx_$exports_lime_text_UTF8String.indexOf(this.text,"\n",startIndex);
		var lf = $hx_$exports_lime_text_UTF8String.indexOf(this.text,"\r",startIndex);
		if(cr == -1 && br == -1) {
			return lf;
		}
		if(lf == -1 && br == -1) {
			return cr;
		}
		if(lf == -1 && cr == -1) {
			return br;
		}
		if(cr == -1) {
			return Std.int($hx_exports.Math.min(br,lf));
		}
		if(lf == -1) {
			return Std.int($hx_exports.Math.min(br,cr));
		}
		if(br == -1) {
			return Std.int($hx_exports.Math.min(cr,lf));
		}
		return Std.int($hx_exports.Math.min($hx_exports.Math.min(cr,lf),br));
	}
	,getLineMeasurements: function() {
		this.lineAscents.data.set_length(0);
		this.lineDescents.data.set_length(0);
		this.lineLeadings.data.set_length(0);
		this.lineHeights.data.set_length(0);
		this.lineWidths.data.set_length(0);
		var currentLineAscent = 0.0;
		var currentLineDescent = 0.0;
		var currentLineLeading = null;
		var currentLineHeight = 0.0;
		var currentLineWidth = 0.0;
		var currentTextHeight = 0.0;
		this.textWidth = 0;
		this.textHeight = 0;
		this.numLines = 1;
		this.bottomScrollV = 0;
		this.maxScrollH = 0;
		var _g = 0;
		var _g1 = this.layoutGroups;
		while(_g < _g1.data.get_length()) {
			var group = _g1.data.get(_g);
			++_g;
			while(group.lineIndex > this.numLines - 1) {
				this.lineAscents.data.push(currentLineAscent);
				this.lineDescents.data.push(currentLineDescent);
				this.lineLeadings.data.push(currentLineLeading != null ? currentLineLeading : 0);
				this.lineHeights.data.push(currentLineHeight);
				this.lineWidths.data.push(currentLineWidth);
				currentLineAscent = 0;
				currentLineDescent = 0;
				currentLineLeading = null;
				currentLineHeight = 0;
				currentLineWidth = 0;
				this.numLines++;
				if(this.textHeight <= this.height - 2) {
					this.bottomScrollV++;
				}
			}
			currentLineAscent = $hx_exports.Math.max(currentLineAscent,group.ascent);
			currentLineDescent = $hx_exports.Math.max(currentLineDescent,group.descent);
			if(currentLineLeading == null) {
				currentLineLeading = group.leading;
			} else {
				currentLineLeading = Std.int($hx_exports.Math.max(currentLineLeading,group.leading));
			}
			currentLineHeight = $hx_exports.Math.max(currentLineHeight,group.height);
			currentLineWidth = group.offsetX - 2 + group.width;
			if(currentLineWidth > this.textWidth) {
				this.textWidth = currentLineWidth;
			}
			currentTextHeight = group.offsetY - 2 + group.ascent + group.descent;
			if(currentTextHeight > this.textHeight) {
				this.textHeight = currentTextHeight;
			}
		}
		this.lineAscents.data.push(currentLineAscent);
		this.lineDescents.data.push(currentLineDescent);
		this.lineLeadings.data.push(currentLineLeading != null ? currentLineLeading : 0);
		this.lineHeights.data.push(currentLineHeight);
		this.lineWidths.data.push(currentLineWidth);
		if(this.numLines == 1) {
			this.bottomScrollV = 1;
			if(currentLineLeading > 0) {
				this.textHeight += currentLineLeading;
			}
		} else if(this.textHeight <= this.height - 2) {
			this.bottomScrollV++;
		}
		if(this.autoSize != 2) {
			var _g2 = this.autoSize;
			switch(_g2) {
			case 0:case 1:case 3:
				if(!this.wordWrap) {
					this.width = this.textWidth + 4;
				}
				this.height = this.textHeight + 4;
				this.bottomScrollV = this.numLines;
				break;
			default:
			}
		}
		if(this.textWidth > this.width - 4) {
			this.maxScrollH = Std.int(this.textWidth - this.width + 4);
		} else {
			this.maxScrollH = 0;
		}
		this.maxScrollV = this.numLines - this.bottomScrollV + 1;
	}
	,getLayoutGroups: function() {
		var _gthis = this;
		this.layoutGroups.data.set_length(0);
		if(this.text == null || $hx_$exports_lime_text_UTF8String.equals(this.text,"")) {
			return;
		}
		var rangeIndex = -1;
		var formatRange = null;
		var font = null;
		var currentFormat = openfl_text_TextField.__defaultTextFormat.clone();
		var leading = 0;
		var ascent = 0.0;
		var maxAscent = 0.0;
		var descent = 0.0;
		var layoutGroup = null;
		var positions = null;
		var widthValue = 0.0;
		var heightValue = 0.0;
		var maxHeightValue = 0.0;
		var previousSpaceIndex = -2;
		var spaceIndex = $hx_$exports_lime_text_UTF8String.indexOf(this.text," ");
		var breakIndex = this.getLineBreakIndex();
		var offsetX = 2.0;
		var offsetY = 2.0;
		var textIndex = 0;
		var lineIndex = 0;
		var lineFormat = null;
		if(rangeIndex < _gthis.textFormatRanges.data.get_length() - 1) {
			++rangeIndex;
			formatRange = _gthis.textFormatRanges.data.get(rangeIndex);
			currentFormat.__merge(formatRange.format);
			openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
			if(currentFormat.__ascent != null) {
				ascent = currentFormat.size * currentFormat.__ascent;
				descent = currentFormat.size * currentFormat.__descent;
			} else {
				ascent = currentFormat.size;
				descent = currentFormat.size * 0.185;
			}
			leading = currentFormat.leading;
			heightValue = ascent + descent + leading;
		}
		if(heightValue > maxHeightValue) {
			maxHeightValue = heightValue;
		}
		if(ascent > maxAscent) {
			maxAscent = ascent;
		}
		lineFormat = formatRange.format;
		var wrap;
		var maxLoops = $hx_$exports_lime_text_UTF8String.get_length(this.text) + 1;
		while(textIndex < maxLoops) if(breakIndex > -1 && (spaceIndex == -1 || breakIndex < spaceIndex) && formatRange.end >= breakIndex) {
			if(textIndex <= breakIndex) {
				if(this.wordWrap && previousSpaceIndex <= textIndex && this.width >= 4) {
					var text = $hx_$exports_lime_text_UTF8String.substring(_gthis.text,textIndex,breakIndex);
					var tempWidth = openfl__$internal_text_TextEngine.__context.measureText(text).width;
					while(offsetX + tempWidth > _gthis.width - 2) {
						var i = 1;
						while(textIndex + i < breakIndex + 1) {
							var text1 = $hx_$exports_lime_text_UTF8String.substr(_gthis.text,textIndex,i);
							tempWidth = openfl__$internal_text_TextEngine.__context.measureText(text1).width;
							if(offsetX + tempWidth > _gthis.width - 2) {
								--i;
								break;
							}
							++i;
						}
						if(i == 0 && tempWidth > _gthis.width - 4) {
							i = $hx_$exports_lime_text_UTF8String.get_length(_gthis.text);
						}
						if(i == 0) {
							offsetX = 2;
							offsetY += layoutGroup.height;
							++lineIndex;
							break;
						} else {
							var endIndex = textIndex + i;
							if(layoutGroup == null || layoutGroup.startIndex != layoutGroup.endIndex) {
								layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,endIndex);
								_gthis.layoutGroups.data.push(layoutGroup);
							} else {
								layoutGroup.format = formatRange.format;
								layoutGroup.startIndex = textIndex;
								layoutGroup.endIndex = endIndex;
							}
							var text2 = _gthis.text;
							var endIndex1 = textIndex + i;
							var positions1 = [];
							if(_gthis.__useIntAdvances == null) {
								_gthis.__useIntAdvances = new $hx_exports.EReg("Trident/7.0","").match($hx_exports.js.Browser.get_navigator().userAgent);
							}
							if(_gthis.__useIntAdvances) {
								var previousWidth = 0.0;
								var width;
								var _g1 = textIndex;
								var _g = endIndex1;
								while(_g1 < _g) {
									var i1 = _g1++;
									width = openfl__$internal_text_TextEngine.__context.measureText($hx_$exports_lime_text_UTF8String.substring(text2,textIndex,i1 + 1)).width;
									positions1.push(width - previousWidth);
									previousWidth = width;
								}
							} else {
								var _g11 = textIndex;
								var _g2 = endIndex1;
								while(_g11 < _g2) {
									var i2 = _g11++;
									var advance;
									if(i2 < $hx_$exports_lime_text_UTF8String.get_length(text2) - 1) {
										var nextWidth = openfl__$internal_text_TextEngine.__context.measureText($hx_$exports_lime_text_UTF8String.charAt(text2,i2 + 1)).width;
										var twoWidths = openfl__$internal_text_TextEngine.__context.measureText($hx_$exports_lime_text_UTF8String.substr(text2,i2,2)).width;
										advance = twoWidths - nextWidth;
									} else {
										advance = openfl__$internal_text_TextEngine.__context.measureText($hx_$exports_lime_text_UTF8String.charAt(text2,i2)).width;
									}
									positions1.push(advance);
								}
							}
							layoutGroup.positions = positions1;
							layoutGroup.offsetX = offsetX;
							layoutGroup.ascent = ascent;
							layoutGroup.descent = descent;
							layoutGroup.leading = leading;
							layoutGroup.lineIndex = lineIndex;
							layoutGroup.offsetY = offsetY;
							var positions2 = layoutGroup.positions;
							var width1 = 0.0;
							var _g3 = 0;
							while(_g3 < positions2.length) {
								var position = positions2[_g3];
								++_g3;
								width1 += position;
							}
							layoutGroup.width = width1;
							layoutGroup.height = heightValue;
							layoutGroup = null;
							if(ascent > maxAscent) {
								maxAscent = ascent;
							}
							if(heightValue > maxHeightValue) {
								maxHeightValue = heightValue;
							}
							var _g4 = 0;
							var _g12 = _gthis.layoutGroups;
							while(_g4 < _g12.data.get_length()) {
								var lg = _g12.data.get(_g4);
								++_g4;
								if(lg.lineIndex < lineIndex) {
									continue;
								}
								if(lg.lineIndex > lineIndex) {
									break;
								}
								lg.ascent = maxAscent;
								lg.height = maxHeightValue;
							}
							offsetY += maxHeightValue;
							maxAscent = 0.0;
							maxHeightValue = 0.0;
							++lineIndex;
							offsetX = 2;
							textIndex += i;
							var text3 = _gthis.text;
							var positions3 = [];
							if(_gthis.__useIntAdvances == null) {
								_gthis.__useIntAdvances = new $hx_exports.EReg("Trident/7.0","").match($hx_exports.js.Browser.get_navigator().userAgent);
							}
							if(_gthis.__useIntAdvances) {
								var previousWidth1 = 0.0;
								var width2;
								var _g13 = textIndex;
								var _g5 = breakIndex;
								while(_g13 < _g5) {
									var i3 = _g13++;
									width2 = openfl__$internal_text_TextEngine.__context.measureText($hx_$exports_lime_text_UTF8String.substring(text3,textIndex,i3 + 1)).width;
									positions3.push(width2 - previousWidth1);
									previousWidth1 = width2;
								}
							} else {
								var _g14 = textIndex;
								var _g6 = breakIndex;
								while(_g14 < _g6) {
									var i4 = _g14++;
									var advance1;
									if(i4 < $hx_$exports_lime_text_UTF8String.get_length(text3) - 1) {
										var nextWidth1 = openfl__$internal_text_TextEngine.__context.measureText($hx_$exports_lime_text_UTF8String.charAt(text3,i4 + 1)).width;
										var twoWidths1 = openfl__$internal_text_TextEngine.__context.measureText($hx_$exports_lime_text_UTF8String.substr(text3,i4,2)).width;
										advance1 = twoWidths1 - nextWidth1;
									} else {
										advance1 = openfl__$internal_text_TextEngine.__context.measureText($hx_$exports_lime_text_UTF8String.charAt(text3,i4)).width;
									}
									positions3.push(advance1);
								}
							}
							positions = positions3;
							var width3 = 0.0;
							var _g7 = 0;
							while(_g7 < positions.length) {
								var position1 = positions[_g7];
								++_g7;
								width3 += position1;
							}
							widthValue = width3;
							tempWidth = widthValue;
						}
					}
				}
				if(layoutGroup == null || layoutGroup.startIndex != layoutGroup.endIndex) {
					layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,breakIndex);
					_gthis.layoutGroups.data.push(layoutGroup);
				} else {
					layoutGroup.format = formatRange.format;
					layoutGroup.startIndex = textIndex;
					layoutGroup.endIndex = breakIndex;
				}
				var text4 = this.text;
				var positions4 = [];
				if(_gthis.__useIntAdvances == null) {
					_gthis.__useIntAdvances = new $hx_exports.EReg("Trident/7.0","").match($hx_exports.js.Browser.get_navigator().userAgent);
				}
				if(_gthis.__useIntAdvances) {
					var previousWidth2 = 0.0;
					var width4;
					var _g15 = textIndex;
					var _g8 = breakIndex;
					while(_g15 < _g8) {
						var i5 = _g15++;
						width4 = openfl__$internal_text_TextEngine.__context.measureText($hx_$exports_lime_text_UTF8String.substring(text4,textIndex,i5 + 1)).width;
						positions4.push(width4 - previousWidth2);
						previousWidth2 = width4;
					}
				} else {
					var _g16 = textIndex;
					var _g9 = breakIndex;
					while(_g16 < _g9) {
						var i6 = _g16++;
						var advance2;
						if(i6 < $hx_$exports_lime_text_UTF8String.get_length(text4) - 1) {
							var nextWidth2 = openfl__$internal_text_TextEngine.__context.measureText($hx_$exports_lime_text_UTF8String.charAt(text4,i6 + 1)).width;
							var twoWidths2 = openfl__$internal_text_TextEngine.__context.measureText($hx_$exports_lime_text_UTF8String.substr(text4,i6,2)).width;
							advance2 = twoWidths2 - nextWidth2;
						} else {
							advance2 = openfl__$internal_text_TextEngine.__context.measureText($hx_$exports_lime_text_UTF8String.charAt(text4,i6)).width;
						}
						positions4.push(advance2);
					}
				}
				layoutGroup.positions = positions4;
				layoutGroup.offsetX = offsetX;
				layoutGroup.ascent = ascent;
				layoutGroup.descent = descent;
				layoutGroup.leading = leading;
				layoutGroup.lineIndex = lineIndex;
				layoutGroup.offsetY = offsetY;
				var positions5 = layoutGroup.positions;
				var width5 = 0.0;
				var _g10 = 0;
				while(_g10 < positions5.length) {
					var position2 = positions5[_g10];
					++_g10;
					width5 += position2;
				}
				layoutGroup.width = width5;
				layoutGroup.height = heightValue;
				layoutGroup = null;
			} else if(layoutGroup != null && layoutGroup.startIndex != layoutGroup.endIndex) {
				if(layoutGroup.endIndex == spaceIndex) {
					layoutGroup.width -= layoutGroup.getAdvance(layoutGroup.positions.length - 1);
				}
				layoutGroup = null;
			}
			if(formatRange.end == breakIndex) {
				if(rangeIndex < _gthis.textFormatRanges.data.get_length() - 1) {
					++rangeIndex;
					formatRange = _gthis.textFormatRanges.data.get(rangeIndex);
					currentFormat.__merge(formatRange.format);
					openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
					if(currentFormat.__ascent != null) {
						ascent = currentFormat.size * currentFormat.__ascent;
						descent = currentFormat.size * currentFormat.__descent;
					} else {
						ascent = currentFormat.size;
						descent = currentFormat.size * 0.185;
					}
					leading = currentFormat.leading;
					heightValue = ascent + descent + leading;
				}
				if(heightValue > maxHeightValue) {
					maxHeightValue = heightValue;
				}
				if(ascent > maxAscent) {
					maxAscent = ascent;
				}
				lineFormat = formatRange.format;
			}
			if(breakIndex >= $hx_$exports_lime_text_UTF8String.get_length(this.text) - 1) {
				offsetY -= maxHeightValue;
			}
			if(ascent > maxAscent) {
				maxAscent = ascent;
			}
			if(heightValue > maxHeightValue) {
				maxHeightValue = heightValue;
			}
			var _g17 = 0;
			var _g18 = _gthis.layoutGroups;
			while(_g17 < _g18.data.get_length()) {
				var lg1 = _g18.data.get(_g17);
				++_g17;
				if(lg1.lineIndex < lineIndex) {
					continue;
				}
				if(lg1.lineIndex > lineIndex) {
					break;
				}
				lg1.ascent = maxAscent;
				lg1.height = maxHeightValue;
			}
			offsetY += maxHeightValue;
			maxAscent = 0.0;
			maxHeightValue = 0.0;
			++lineIndex;
			offsetX = 2;
			textIndex = breakIndex + 1;
			breakIndex = this.getLineBreakIndex(textIndex);
		} else if(formatRange.end >= spaceIndex && spaceIndex > -1 && textIndex < formatRange.end) {
			if(layoutGroup != null && layoutGroup.startIndex != layoutGroup.endIndex) {
				layoutGroup = null;
			}
			wrap = false;
			while(textIndex != formatRange.end) {
				var endIndex2 = -1;
				if(spaceIndex == -1) {
					endIndex2 = breakIndex;
				} else {
					endIndex2 = spaceIndex + 1;
					if(breakIndex > -1 && breakIndex < endIndex2) {
						endIndex2 = breakIndex;
					}
				}
				if(endIndex2 == -1 || endIndex2 > formatRange.end) {
					endIndex2 = formatRange.end;
				}
				var text5 = this.text;
				var positions6 = [];
				if(_gthis.__useIntAdvances == null) {
					_gthis.__useIntAdvances = new $hx_exports.EReg("Trident/7.0","").match($hx_exports.js.Browser.get_navigator().userAgent);
				}
				if(_gthis.__useIntAdvances) {
					var previousWidth3 = 0.0;
					var width6;
					var _g19 = textIndex;
					var _g20 = endIndex2;
					while(_g19 < _g20) {
						var i7 = _g19++;
						width6 = openfl__$internal_text_TextEngine.__context.measureText($hx_$exports_lime_text_UTF8String.substring(text5,textIndex,i7 + 1)).width;
						positions6.push(width6 - previousWidth3);
						previousWidth3 = width6;
					}
				} else {
					var _g110 = textIndex;
					var _g21 = endIndex2;
					while(_g110 < _g21) {
						var i8 = _g110++;
						var advance3;
						if(i8 < $hx_$exports_lime_text_UTF8String.get_length(text5) - 1) {
							var nextWidth3 = openfl__$internal_text_TextEngine.__context.measureText($hx_$exports_lime_text_UTF8String.charAt(text5,i8 + 1)).width;
							var twoWidths3 = openfl__$internal_text_TextEngine.__context.measureText($hx_$exports_lime_text_UTF8String.substr(text5,i8,2)).width;
							advance3 = twoWidths3 - nextWidth3;
						} else {
							advance3 = openfl__$internal_text_TextEngine.__context.measureText($hx_$exports_lime_text_UTF8String.charAt(text5,i8)).width;
						}
						positions6.push(advance3);
					}
				}
				positions = positions6;
				var width7 = 0.0;
				var _g22 = 0;
				while(_g22 < positions.length) {
					var position3 = positions[_g22];
					++_g22;
					width7 += position3;
				}
				widthValue = width7;
				if(lineFormat.align == 2) {
					if(positions.length > 0 && textIndex == previousSpaceIndex) {
						++textIndex;
						var spaceWidth = positions.shift();
						widthValue -= spaceWidth;
						offsetX += spaceWidth;
					}
					if(positions.length > 0 && endIndex2 == spaceIndex + 1) {
						--endIndex2;
						var spaceWidth1 = positions.pop();
						widthValue -= spaceWidth1;
					}
				}
				if(this.wordWrap) {
					if(offsetX + widthValue > this.width - 2) {
						wrap = true;
						if(positions.length > 0 && endIndex2 == spaceIndex + 1) {
							var lastPosition = positions[positions.length - 1];
							var spaceWidth2 = lastPosition;
							if(offsetX + widthValue - spaceWidth2 <= this.width - 2) {
								wrap = false;
							}
						}
					}
				}
				if(wrap) {
					if(lineFormat.align != 2 && (layoutGroup != null || this.layoutGroups.data.get_length() > 0)) {
						var previous = layoutGroup;
						if(previous == null) {
							var this1 = this.layoutGroups;
							var index = this.layoutGroups.data.get_length() - 1;
							previous = this1.data.get(index);
						}
						previous.width -= previous.getAdvance(previous.positions.length - 1);
						previous.endIndex--;
					}
					var i9 = this.layoutGroups.data.get_length() - 1;
					var offsetCount = 0;
					while(true) {
						layoutGroup = this.layoutGroups.data.get(i9);
						if(i9 > 0 && layoutGroup.startIndex > previousSpaceIndex) {
							++offsetCount;
						} else {
							break;
						}
						--i9;
					}
					if(textIndex == previousSpaceIndex + 1) {
						if(ascent > maxAscent) {
							maxAscent = ascent;
						}
						if(heightValue > maxHeightValue) {
							maxHeightValue = heightValue;
						}
						var _g23 = 0;
						var _g111 = _gthis.layoutGroups;
						while(_g23 < _g111.data.get_length()) {
							var lg2 = _g111.data.get(_g23);
							++_g23;
							if(lg2.lineIndex < lineIndex) {
								continue;
							}
							if(lg2.lineIndex > lineIndex) {
								break;
							}
							lg2.ascent = maxAscent;
							lg2.height = maxHeightValue;
						}
						offsetY += maxHeightValue;
						maxAscent = 0.0;
						maxHeightValue = 0.0;
						++lineIndex;
						offsetX = 2;
					}
					offsetX = 2;
					if(offsetCount > 0) {
						var this2 = this.layoutGroups;
						var index1 = this.layoutGroups.data.get_length() - offsetCount;
						var bumpX = this2.data.get(index1).offsetX;
						var _g112 = this.layoutGroups.data.get_length() - offsetCount;
						var _g24 = this.layoutGroups.data.get_length();
						while(_g112 < _g24) {
							var i10 = _g112++;
							layoutGroup = this.layoutGroups.data.get(i10);
							layoutGroup.offsetX -= bumpX;
							layoutGroup.offsetY = offsetY;
							layoutGroup.lineIndex = lineIndex;
							offsetX += layoutGroup.width;
						}
					}
					if(this.width >= 4) {
						var text6 = $hx_$exports_lime_text_UTF8String.substring(_gthis.text,textIndex,endIndex2);
						var tempWidth1 = openfl__$internal_text_TextEngine.__context.measureText(text6).width;
						while(offsetX + tempWidth1 > _gthis.width - 2) {
							var i11 = 1;
							while(textIndex + i11 < endIndex2 + 1) {
								var text7 = $hx_$exports_lime_text_UTF8String.substr(_gthis.text,textIndex,i11);
								tempWidth1 = openfl__$internal_text_TextEngine.__context.measureText(text7).width;
								if(offsetX + tempWidth1 > _gthis.width - 2) {
									--i11;
									break;
								}
								++i11;
							}
							if(i11 == 0 && tempWidth1 > _gthis.width - 4) {
								i11 = $hx_$exports_lime_text_UTF8String.get_length(_gthis.text);
							}
							if(i11 == 0) {
								offsetX = 2;
								offsetY += layoutGroup.height;
								++lineIndex;
								break;
							} else {
								var endIndex3 = textIndex + i11;
								if(layoutGroup == null || layoutGroup.startIndex != layoutGroup.endIndex) {
									layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,endIndex3);
									_gthis.layoutGroups.data.push(layoutGroup);
								} else {
									layoutGroup.format = formatRange.format;
									layoutGroup.startIndex = textIndex;
									layoutGroup.endIndex = endIndex3;
								}
								var text8 = _gthis.text;
								var endIndex4 = textIndex + i11;
								var positions7 = [];
								if(_gthis.__useIntAdvances == null) {
									_gthis.__useIntAdvances = new $hx_exports.EReg("Trident/7.0","").match($hx_exports.js.Browser.get_navigator().userAgent);
								}
								if(_gthis.__useIntAdvances) {
									var previousWidth4 = 0.0;
									var width8;
									var _g113 = textIndex;
									var _g25 = endIndex4;
									while(_g113 < _g25) {
										var i12 = _g113++;
										width8 = openfl__$internal_text_TextEngine.__context.measureText($hx_$exports_lime_text_UTF8String.substring(text8,textIndex,i12 + 1)).width;
										positions7.push(width8 - previousWidth4);
										previousWidth4 = width8;
									}
								} else {
									var _g114 = textIndex;
									var _g26 = endIndex4;
									while(_g114 < _g26) {
										var i13 = _g114++;
										var advance4;
										if(i13 < $hx_$exports_lime_text_UTF8String.get_length(text8) - 1) {
											var nextWidth4 = openfl__$internal_text_TextEngine.__context.measureText($hx_$exports_lime_text_UTF8String.charAt(text8,i13 + 1)).width;
											var twoWidths4 = openfl__$internal_text_TextEngine.__context.measureText($hx_$exports_lime_text_UTF8String.substr(text8,i13,2)).width;
											advance4 = twoWidths4 - nextWidth4;
										} else {
											advance4 = openfl__$internal_text_TextEngine.__context.measureText($hx_$exports_lime_text_UTF8String.charAt(text8,i13)).width;
										}
										positions7.push(advance4);
									}
								}
								layoutGroup.positions = positions7;
								layoutGroup.offsetX = offsetX;
								layoutGroup.ascent = ascent;
								layoutGroup.descent = descent;
								layoutGroup.leading = leading;
								layoutGroup.lineIndex = lineIndex;
								layoutGroup.offsetY = offsetY;
								var positions8 = layoutGroup.positions;
								var width9 = 0.0;
								var _g27 = 0;
								while(_g27 < positions8.length) {
									var position4 = positions8[_g27];
									++_g27;
									width9 += position4;
								}
								layoutGroup.width = width9;
								layoutGroup.height = heightValue;
								layoutGroup = null;
								if(ascent > maxAscent) {
									maxAscent = ascent;
								}
								if(heightValue > maxHeightValue) {
									maxHeightValue = heightValue;
								}
								var _g28 = 0;
								var _g115 = _gthis.layoutGroups;
								while(_g28 < _g115.data.get_length()) {
									var lg3 = _g115.data.get(_g28);
									++_g28;
									if(lg3.lineIndex < lineIndex) {
										continue;
									}
									if(lg3.lineIndex > lineIndex) {
										break;
									}
									lg3.ascent = maxAscent;
									lg3.height = maxHeightValue;
								}
								offsetY += maxHeightValue;
								maxAscent = 0.0;
								maxHeightValue = 0.0;
								++lineIndex;
								offsetX = 2;
								textIndex += i11;
								var text9 = _gthis.text;
								var positions9 = [];
								if(_gthis.__useIntAdvances == null) {
									_gthis.__useIntAdvances = new $hx_exports.EReg("Trident/7.0","").match($hx_exports.js.Browser.get_navigator().userAgent);
								}
								if(_gthis.__useIntAdvances) {
									var previousWidth5 = 0.0;
									var width10;
									var _g116 = textIndex;
									var _g29 = endIndex2;
									while(_g116 < _g29) {
										var i14 = _g116++;
										width10 = openfl__$internal_text_TextEngine.__context.measureText($hx_$exports_lime_text_UTF8String.substring(text9,textIndex,i14 + 1)).width;
										positions9.push(width10 - previousWidth5);
										previousWidth5 = width10;
									}
								} else {
									var _g117 = textIndex;
									var _g30 = endIndex2;
									while(_g117 < _g30) {
										var i15 = _g117++;
										var advance5;
										if(i15 < $hx_$exports_lime_text_UTF8String.get_length(text9) - 1) {
											var nextWidth5 = openfl__$internal_text_TextEngine.__context.measureText($hx_$exports_lime_text_UTF8String.charAt(text9,i15 + 1)).width;
											var twoWidths5 = openfl__$internal_text_TextEngine.__context.measureText($hx_$exports_lime_text_UTF8String.substr(text9,i15,2)).width;
											advance5 = twoWidths5 - nextWidth5;
										} else {
											advance5 = openfl__$internal_text_TextEngine.__context.measureText($hx_$exports_lime_text_UTF8String.charAt(text9,i15)).width;
										}
										positions9.push(advance5);
									}
								}
								positions = positions9;
								var width11 = 0.0;
								var _g31 = 0;
								while(_g31 < positions.length) {
									var position5 = positions[_g31];
									++_g31;
									width11 += position5;
								}
								widthValue = width11;
								tempWidth1 = widthValue;
							}
						}
					}
					if(layoutGroup == null || layoutGroup.startIndex != layoutGroup.endIndex) {
						layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,endIndex2);
						_gthis.layoutGroups.data.push(layoutGroup);
					} else {
						layoutGroup.format = formatRange.format;
						layoutGroup.startIndex = textIndex;
						layoutGroup.endIndex = endIndex2;
					}
					layoutGroup.positions = positions;
					layoutGroup.offsetX = offsetX;
					layoutGroup.ascent = ascent;
					layoutGroup.descent = descent;
					layoutGroup.leading = leading;
					layoutGroup.lineIndex = lineIndex;
					layoutGroup.offsetY = offsetY;
					layoutGroup.width = widthValue;
					layoutGroup.height = heightValue;
					offsetX += widthValue;
					textIndex = endIndex2;
					wrap = false;
				} else {
					if(layoutGroup != null && textIndex == spaceIndex) {
						if(lineFormat.align != 2) {
							layoutGroup.endIndex = spaceIndex;
							layoutGroup.positions = layoutGroup.positions.concat(positions);
							layoutGroup.width += widthValue;
						}
					} else if(layoutGroup == null || lineFormat.align == 2) {
						if(layoutGroup == null || layoutGroup.startIndex != layoutGroup.endIndex) {
							layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,endIndex2);
							_gthis.layoutGroups.data.push(layoutGroup);
						} else {
							layoutGroup.format = formatRange.format;
							layoutGroup.startIndex = textIndex;
							layoutGroup.endIndex = endIndex2;
						}
						layoutGroup.positions = positions;
						layoutGroup.offsetX = offsetX;
						layoutGroup.ascent = ascent;
						layoutGroup.descent = descent;
						layoutGroup.leading = leading;
						layoutGroup.lineIndex = lineIndex;
						layoutGroup.offsetY = offsetY;
						layoutGroup.width = widthValue;
						layoutGroup.height = heightValue;
					} else {
						layoutGroup.endIndex = endIndex2;
						layoutGroup.positions = layoutGroup.positions.concat(positions);
						layoutGroup.width += widthValue;
						if(breakIndex == endIndex2) {
							++endIndex2;
						}
					}
					offsetX += widthValue;
					textIndex = endIndex2;
				}
				var nextSpaceIndex = $hx_$exports_lime_text_UTF8String.indexOf(this.text," ",textIndex);
				if(formatRange.end <= previousSpaceIndex) {
					layoutGroup = null;
					textIndex = formatRange.end;
					if(rangeIndex < _gthis.textFormatRanges.data.get_length() - 1) {
						++rangeIndex;
						formatRange = _gthis.textFormatRanges.data.get(rangeIndex);
						currentFormat.__merge(formatRange.format);
						openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
						if(currentFormat.__ascent != null) {
							ascent = currentFormat.size * currentFormat.__ascent;
							descent = currentFormat.size * currentFormat.__descent;
						} else {
							ascent = currentFormat.size;
							descent = currentFormat.size * 0.185;
						}
						leading = currentFormat.leading;
						heightValue = ascent + descent + leading;
					}
					if(heightValue > maxHeightValue) {
						maxHeightValue = heightValue;
					}
					if(ascent > maxAscent) {
						maxAscent = ascent;
					}
				} else {
					if(breakIndex == previousSpaceIndex) {
						layoutGroup.endIndex = breakIndex;
						if(breakIndex - layoutGroup.startIndex - layoutGroup.positions.length < 0) {
							layoutGroup.positions.push(0.0);
						}
						textIndex = breakIndex + 1;
					}
					previousSpaceIndex = spaceIndex;
					spaceIndex = nextSpaceIndex;
				}
				if(breakIndex > -1 && breakIndex <= textIndex && (spaceIndex > breakIndex || spaceIndex == -1) || textIndex > $hx_$exports_lime_text_UTF8String.get_length(this.text) || spaceIndex > formatRange.end) {
					break;
				}
			}
		} else {
			if(textIndex > formatRange.end) {
				break;
			} else if(textIndex < formatRange.end || textIndex == $hx_$exports_lime_text_UTF8String.get_length(this.text)) {
				if(this.wordWrap && this.width >= 4) {
					var endIndex5 = formatRange.end;
					var text10 = $hx_$exports_lime_text_UTF8String.substring(_gthis.text,textIndex,endIndex5);
					var tempWidth2 = openfl__$internal_text_TextEngine.__context.measureText(text10).width;
					while(offsetX + tempWidth2 > _gthis.width - 2) {
						var i16 = 1;
						while(textIndex + i16 < endIndex5 + 1) {
							var text11 = $hx_$exports_lime_text_UTF8String.substr(_gthis.text,textIndex,i16);
							tempWidth2 = openfl__$internal_text_TextEngine.__context.measureText(text11).width;
							if(offsetX + tempWidth2 > _gthis.width - 2) {
								--i16;
								break;
							}
							++i16;
						}
						if(i16 == 0 && tempWidth2 > _gthis.width - 4) {
							i16 = $hx_$exports_lime_text_UTF8String.get_length(_gthis.text);
						}
						if(i16 == 0) {
							offsetX = 2;
							offsetY += layoutGroup.height;
							++lineIndex;
							break;
						} else {
							var endIndex6 = textIndex + i16;
							if(layoutGroup == null || layoutGroup.startIndex != layoutGroup.endIndex) {
								layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,endIndex6);
								_gthis.layoutGroups.data.push(layoutGroup);
							} else {
								layoutGroup.format = formatRange.format;
								layoutGroup.startIndex = textIndex;
								layoutGroup.endIndex = endIndex6;
							}
							var text12 = _gthis.text;
							var endIndex7 = textIndex + i16;
							var positions10 = [];
							if(_gthis.__useIntAdvances == null) {
								_gthis.__useIntAdvances = new $hx_exports.EReg("Trident/7.0","").match($hx_exports.js.Browser.get_navigator().userAgent);
							}
							if(_gthis.__useIntAdvances) {
								var previousWidth6 = 0.0;
								var width12;
								var _g118 = textIndex;
								var _g32 = endIndex7;
								while(_g118 < _g32) {
									var i17 = _g118++;
									width12 = openfl__$internal_text_TextEngine.__context.measureText($hx_$exports_lime_text_UTF8String.substring(text12,textIndex,i17 + 1)).width;
									positions10.push(width12 - previousWidth6);
									previousWidth6 = width12;
								}
							} else {
								var _g119 = textIndex;
								var _g33 = endIndex7;
								while(_g119 < _g33) {
									var i18 = _g119++;
									var advance6;
									if(i18 < $hx_$exports_lime_text_UTF8String.get_length(text12) - 1) {
										var nextWidth6 = openfl__$internal_text_TextEngine.__context.measureText($hx_$exports_lime_text_UTF8String.charAt(text12,i18 + 1)).width;
										var twoWidths6 = openfl__$internal_text_TextEngine.__context.measureText($hx_$exports_lime_text_UTF8String.substr(text12,i18,2)).width;
										advance6 = twoWidths6 - nextWidth6;
									} else {
										advance6 = openfl__$internal_text_TextEngine.__context.measureText($hx_$exports_lime_text_UTF8String.charAt(text12,i18)).width;
									}
									positions10.push(advance6);
								}
							}
							layoutGroup.positions = positions10;
							layoutGroup.offsetX = offsetX;
							layoutGroup.ascent = ascent;
							layoutGroup.descent = descent;
							layoutGroup.leading = leading;
							layoutGroup.lineIndex = lineIndex;
							layoutGroup.offsetY = offsetY;
							var positions11 = layoutGroup.positions;
							var width13 = 0.0;
							var _g34 = 0;
							while(_g34 < positions11.length) {
								var position6 = positions11[_g34];
								++_g34;
								width13 += position6;
							}
							layoutGroup.width = width13;
							layoutGroup.height = heightValue;
							layoutGroup = null;
							if(ascent > maxAscent) {
								maxAscent = ascent;
							}
							if(heightValue > maxHeightValue) {
								maxHeightValue = heightValue;
							}
							var _g35 = 0;
							var _g120 = _gthis.layoutGroups;
							while(_g35 < _g120.data.get_length()) {
								var lg4 = _g120.data.get(_g35);
								++_g35;
								if(lg4.lineIndex < lineIndex) {
									continue;
								}
								if(lg4.lineIndex > lineIndex) {
									break;
								}
								lg4.ascent = maxAscent;
								lg4.height = maxHeightValue;
							}
							offsetY += maxHeightValue;
							maxAscent = 0.0;
							maxHeightValue = 0.0;
							++lineIndex;
							offsetX = 2;
							textIndex += i16;
							var text13 = _gthis.text;
							var positions12 = [];
							if(_gthis.__useIntAdvances == null) {
								_gthis.__useIntAdvances = new $hx_exports.EReg("Trident/7.0","").match($hx_exports.js.Browser.get_navigator().userAgent);
							}
							if(_gthis.__useIntAdvances) {
								var previousWidth7 = 0.0;
								var width14;
								var _g121 = textIndex;
								var _g36 = endIndex5;
								while(_g121 < _g36) {
									var i19 = _g121++;
									width14 = openfl__$internal_text_TextEngine.__context.measureText($hx_$exports_lime_text_UTF8String.substring(text13,textIndex,i19 + 1)).width;
									positions12.push(width14 - previousWidth7);
									previousWidth7 = width14;
								}
							} else {
								var _g122 = textIndex;
								var _g37 = endIndex5;
								while(_g122 < _g37) {
									var i20 = _g122++;
									var advance7;
									if(i20 < $hx_$exports_lime_text_UTF8String.get_length(text13) - 1) {
										var nextWidth7 = openfl__$internal_text_TextEngine.__context.measureText($hx_$exports_lime_text_UTF8String.charAt(text13,i20 + 1)).width;
										var twoWidths7 = openfl__$internal_text_TextEngine.__context.measureText($hx_$exports_lime_text_UTF8String.substr(text13,i20,2)).width;
										advance7 = twoWidths7 - nextWidth7;
									} else {
										advance7 = openfl__$internal_text_TextEngine.__context.measureText($hx_$exports_lime_text_UTF8String.charAt(text13,i20)).width;
									}
									positions12.push(advance7);
								}
							}
							positions = positions12;
							var width15 = 0.0;
							var _g38 = 0;
							while(_g38 < positions.length) {
								var position7 = positions[_g38];
								++_g38;
								width15 += position7;
							}
							widthValue = width15;
							tempWidth2 = widthValue;
						}
					}
				}
				var text14 = this.text;
				var endIndex8 = formatRange.end;
				var positions13 = [];
				if(_gthis.__useIntAdvances == null) {
					_gthis.__useIntAdvances = new $hx_exports.EReg("Trident/7.0","").match($hx_exports.js.Browser.get_navigator().userAgent);
				}
				if(_gthis.__useIntAdvances) {
					var previousWidth8 = 0.0;
					var width16;
					var _g123 = textIndex;
					var _g39 = endIndex8;
					while(_g123 < _g39) {
						var i21 = _g123++;
						width16 = openfl__$internal_text_TextEngine.__context.measureText($hx_$exports_lime_text_UTF8String.substring(text14,textIndex,i21 + 1)).width;
						positions13.push(width16 - previousWidth8);
						previousWidth8 = width16;
					}
				} else {
					var _g124 = textIndex;
					var _g40 = endIndex8;
					while(_g124 < _g40) {
						var i22 = _g124++;
						var advance8;
						if(i22 < $hx_$exports_lime_text_UTF8String.get_length(text14) - 1) {
							var nextWidth8 = openfl__$internal_text_TextEngine.__context.measureText($hx_$exports_lime_text_UTF8String.charAt(text14,i22 + 1)).width;
							var twoWidths8 = openfl__$internal_text_TextEngine.__context.measureText($hx_$exports_lime_text_UTF8String.substr(text14,i22,2)).width;
							advance8 = twoWidths8 - nextWidth8;
						} else {
							advance8 = openfl__$internal_text_TextEngine.__context.measureText($hx_$exports_lime_text_UTF8String.charAt(text14,i22)).width;
						}
						positions13.push(advance8);
					}
				}
				positions = positions13;
				var width17 = 0.0;
				var _g41 = 0;
				while(_g41 < positions.length) {
					var position8 = positions[_g41];
					++_g41;
					width17 += position8;
				}
				widthValue = width17;
				var endIndex9 = formatRange.end;
				if(layoutGroup == null || layoutGroup.startIndex != layoutGroup.endIndex) {
					layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,endIndex9);
					_gthis.layoutGroups.data.push(layoutGroup);
				} else {
					layoutGroup.format = formatRange.format;
					layoutGroup.startIndex = textIndex;
					layoutGroup.endIndex = endIndex9;
				}
				var text15 = this.text;
				var endIndex10 = formatRange.end;
				var positions14 = [];
				if(_gthis.__useIntAdvances == null) {
					_gthis.__useIntAdvances = new $hx_exports.EReg("Trident/7.0","").match($hx_exports.js.Browser.get_navigator().userAgent);
				}
				if(_gthis.__useIntAdvances) {
					var previousWidth9 = 0.0;
					var width18;
					var _g125 = textIndex;
					var _g42 = endIndex10;
					while(_g125 < _g42) {
						var i23 = _g125++;
						width18 = openfl__$internal_text_TextEngine.__context.measureText($hx_$exports_lime_text_UTF8String.substring(text15,textIndex,i23 + 1)).width;
						positions14.push(width18 - previousWidth9);
						previousWidth9 = width18;
					}
				} else {
					var _g126 = textIndex;
					var _g43 = endIndex10;
					while(_g126 < _g43) {
						var i24 = _g126++;
						var advance9;
						if(i24 < $hx_$exports_lime_text_UTF8String.get_length(text15) - 1) {
							var nextWidth9 = openfl__$internal_text_TextEngine.__context.measureText($hx_$exports_lime_text_UTF8String.charAt(text15,i24 + 1)).width;
							var twoWidths9 = openfl__$internal_text_TextEngine.__context.measureText($hx_$exports_lime_text_UTF8String.substr(text15,i24,2)).width;
							advance9 = twoWidths9 - nextWidth9;
						} else {
							advance9 = openfl__$internal_text_TextEngine.__context.measureText($hx_$exports_lime_text_UTF8String.charAt(text15,i24)).width;
						}
						positions14.push(advance9);
					}
				}
				layoutGroup.positions = positions14;
				layoutGroup.offsetX = offsetX;
				layoutGroup.ascent = ascent;
				layoutGroup.descent = descent;
				layoutGroup.leading = leading;
				layoutGroup.lineIndex = lineIndex;
				layoutGroup.offsetY = offsetY;
				var positions15 = layoutGroup.positions;
				var width19 = 0.0;
				var _g44 = 0;
				while(_g44 < positions15.length) {
					var position9 = positions15[_g44];
					++_g44;
					width19 += position9;
				}
				layoutGroup.width = width19;
				layoutGroup.height = heightValue;
				offsetX += widthValue;
				textIndex = formatRange.end;
			}
			if(rangeIndex < _gthis.textFormatRanges.data.get_length() - 1) {
				++rangeIndex;
				formatRange = _gthis.textFormatRanges.data.get(rangeIndex);
				currentFormat.__merge(formatRange.format);
				openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
				if(currentFormat.__ascent != null) {
					ascent = currentFormat.size * currentFormat.__ascent;
					descent = currentFormat.size * currentFormat.__descent;
				} else {
					ascent = currentFormat.size;
					descent = currentFormat.size * 0.185;
				}
				leading = currentFormat.leading;
				heightValue = ascent + descent + leading;
			}
			if(heightValue > maxHeightValue) {
				maxHeightValue = heightValue;
			}
			if(ascent > maxAscent) {
				maxAscent = ascent;
			}
			if(textIndex == formatRange.end) {
				if(ascent > maxAscent) {
					maxAscent = ascent;
				}
				if(heightValue > maxHeightValue) {
					maxHeightValue = heightValue;
				}
				var _g45 = 0;
				var _g127 = _gthis.layoutGroups;
				while(_g45 < _g127.data.get_length()) {
					var lg5 = _g127.data.get(_g45);
					++_g45;
					if(lg5.lineIndex < lineIndex) {
						continue;
					}
					if(lg5.lineIndex > lineIndex) {
						break;
					}
					lg5.ascent = maxAscent;
					lg5.height = maxHeightValue;
				}
				offsetY += maxHeightValue;
				maxAscent = 0.0;
				maxHeightValue = 0.0;
				++lineIndex;
				offsetX = 2;
				++textIndex;
				break;
			}
		}
	}
	,setTextAlignment: function() {
		var lineIndex = -1;
		var offsetX = 0.0;
		var totalWidth = this.width - 4;
		var group;
		var lineLength;
		var _g1 = 0;
		var _g = this.layoutGroups.data.get_length();
		while(_g1 < _g) {
			var i = _g1++;
			group = this.layoutGroups.data.get(i);
			if(group.lineIndex != lineIndex) {
				lineIndex = group.lineIndex;
				var _g2 = group.format.align;
				switch(_g2) {
				case 0:
					if(this.lineWidths.data.get(lineIndex) < totalWidth) {
						offsetX = $hx_exports.Math.round((totalWidth - this.lineWidths.data.get(lineIndex)) / 2);
					} else {
						offsetX = 0;
					}
					break;
				case 2:
					if(this.lineWidths.data.get(lineIndex) < totalWidth) {
						lineLength = 1;
						var _g3 = i + 1;
						var _g21 = this.layoutGroups.data.get_length();
						while(_g3 < _g21) {
							var j = _g3++;
							if(this.layoutGroups.data.get(j).lineIndex == lineIndex) {
								if(j == 0 || $hx_$exports_lime_text_UTF8String.charCodeAt(this.text,this.layoutGroups.data.get(j).startIndex - 1) == 32) {
									++lineLength;
								}
							} else {
								break;
							}
						}
						if(lineLength > 1) {
							group = this.layoutGroups.data.get(i + lineLength - 1);
							var endChar = $hx_$exports_lime_text_UTF8String.charCodeAt(this.text,group.endIndex);
							if(group.endIndex < $hx_$exports_lime_text_UTF8String.get_length(this.text) && endChar != 10 && endChar != 13) {
								offsetX = (totalWidth - this.lineWidths.data.get(lineIndex)) / (lineLength - 1);
								var j1 = 0;
								while(true) {
									if(j1 > 1 && $hx_$exports_lime_text_UTF8String.charCodeAt(this.text,this.layoutGroups.data.get(j1).startIndex - 1) != 32) {
										this.layoutGroups.data.get(i + j1).offsetX += offsetX * (j1 - 1);
										++j1;
									}
									this.layoutGroups.data.get(i + j1).offsetX += offsetX * j1;
									if(!(++j1 < lineLength)) {
										break;
									}
								}
							}
						}
					}
					offsetX = 0;
					break;
				case 4:
					if(this.lineWidths.data.get(lineIndex) < totalWidth) {
						offsetX = $hx_exports.Math.round(totalWidth - this.lineWidths.data.get(lineIndex));
					} else {
						offsetX = 0;
					}
					break;
				default:
					offsetX = 0;
				}
			}
			if(offsetX > 0) {
				group.offsetX += offsetX;
			}
		}
	}
	,update: function() {
		if(this.text == null || this.textFormatRanges.data.get_length() == 0) {
			this.lineAscents.data.set_length(0);
			this.lineBreaks.data.set_length(0);
			this.lineDescents.data.set_length(0);
			this.lineLeadings.data.set_length(0);
			this.lineHeights.data.set_length(0);
			this.lineWidths.data.set_length(0);
			this.layoutGroups.data.set_length(0);
			this.textWidth = 0;
			this.textHeight = 0;
			this.numLines = 1;
			this.maxScrollH = 0;
			this.maxScrollV = 1;
			this.bottomScrollV = 1;
		} else {
			this.getLayoutGroups();
			this.getLineMeasurements();
			this.setTextAlignment();
		}
		this.getBounds();
	}
	,set_restrict: function(value) {
		if($hx_$exports_lime_text_UTF8String.equals(this.restrict,value)) {
			return this.restrict;
		}
		this.restrict = value;
		if(this.restrict == null || $hx_$exports_lime_text_UTF8String.get_length(this.restrict) == 0) {
			this.__restrictRegexp = null;
		} else {
			this.__restrictRegexp = this.createRestrictRegexp(value);
		}
		return this.restrict;
	}
	,set_text: function(value) {
		if(value == null) {
			return this.text = value;
		}
		if(this.__restrictRegexp != null) {
			value = this.__restrictRegexp.split(value).join("");
		}
		if(this.maxChars > 0 && value.length > this.maxChars) {
			value = $hx_exports.HxOverrides.substr(value,0,this.maxChars);
		}
		this.text = value;
		return this.text;
	}
	,__class__: openfl__$internal_text_TextEngine
	,__properties__: {set_text:"set_text",set_restrict:"set_restrict"}
};
var openfl__$internal_text_TextFormatRange = $hx_exports["openfl"]["_internal"]["text"]["TextFormatRange"] = function(format,start,end) {
	this.format = format;
	this.start = start;
	this.end = end;
};
$hxClasses["openfl._internal.text.TextFormatRange"] = openfl__$internal_text_TextFormatRange;
openfl__$internal_text_TextFormatRange.__name__ = ["openfl","_internal","text","TextFormatRange"];
openfl__$internal_text_TextFormatRange.prototype = {
	end: null
	,format: null
	,start: null
	,__class__: openfl__$internal_text_TextFormatRange
};
var openfl__$internal_text_TextLayoutGroup = $hx_exports["openfl"]["_internal"]["text"]["TextLayoutGroup"] = function(format,startIndex,endIndex) {
	this.format = format;
	this.startIndex = startIndex;
	this.endIndex = endIndex;
};
$hxClasses["openfl._internal.text.TextLayoutGroup"] = openfl__$internal_text_TextLayoutGroup;
openfl__$internal_text_TextLayoutGroup.__name__ = ["openfl","_internal","text","TextLayoutGroup"];
openfl__$internal_text_TextLayoutGroup.prototype = {
	ascent: null
	,descent: null
	,endIndex: null
	,format: null
	,height: null
	,leading: null
	,lineIndex: null
	,offsetX: null
	,offsetY: null
	,positions: null
	,startIndex: null
	,width: null
	,getAdvance: function(index) {
		return this.positions[index];
	}
	,__class__: openfl__$internal_text_TextLayoutGroup
};
var openfl__$internal_timeline_Frame = $hx_exports["openfl"]["_internal"]["timeline"]["Frame"] = function() {
};
$hxClasses["openfl._internal.timeline.Frame"] = openfl__$internal_timeline_Frame;
openfl__$internal_timeline_Frame.__name__ = ["openfl","_internal","timeline","Frame"];
openfl__$internal_timeline_Frame.prototype = {
	labels: null
	,label: null
	,objects: null
	,script: null
	,scriptSource: null
	,__class__: openfl__$internal_timeline_Frame
};
var openfl__$internal_timeline_FrameObject = $hx_exports["openfl"]["_internal"]["timeline"]["FrameObject"] = function() {
};
$hxClasses["openfl._internal.timeline.FrameObject"] = openfl__$internal_timeline_FrameObject;
openfl__$internal_timeline_FrameObject.__name__ = ["openfl","_internal","timeline","FrameObject"];
openfl__$internal_timeline_FrameObject.prototype = {
	blendMode: null
	,cacheAsBitmap: null
	,clipDepth: null
	,colorTransform: null
	,depth: null
	,filters: null
	,id: null
	,matrix: null
	,name: null
	,symbol: null
	,type: null
	,visible: null
	,lastFrameObjectWithPlacementData: null
	,__class__: openfl__$internal_timeline_FrameObject
};
var openfl__$internal_timeline_FrameObjectType = $hxClasses["openfl._internal.timeline.FrameObjectType"] = { __ename__ : ["openfl","_internal","timeline","FrameObjectType"], __constructs__ : ["CREATE","UPDATE","DESTROY"] };
openfl__$internal_timeline_FrameObjectType.CREATE = ["CREATE",0];
openfl__$internal_timeline_FrameObjectType.CREATE.toString = $estr;
openfl__$internal_timeline_FrameObjectType.CREATE.__enum__ = openfl__$internal_timeline_FrameObjectType;
openfl__$internal_timeline_FrameObjectType.UPDATE = ["UPDATE",1];
openfl__$internal_timeline_FrameObjectType.UPDATE.toString = $estr;
openfl__$internal_timeline_FrameObjectType.UPDATE.__enum__ = openfl__$internal_timeline_FrameObjectType;
openfl__$internal_timeline_FrameObjectType.DESTROY = ["DESTROY",2];
openfl__$internal_timeline_FrameObjectType.DESTROY.toString = $estr;
openfl__$internal_timeline_FrameObjectType.DESTROY.__enum__ = openfl__$internal_timeline_FrameObjectType;
openfl__$internal_timeline_FrameObjectType.__empty_constructs__ = [openfl__$internal_timeline_FrameObjectType.CREATE,openfl__$internal_timeline_FrameObjectType.UPDATE,openfl__$internal_timeline_FrameObjectType.DESTROY];
var openfl__$internal_utils_NullUtils = $hx_exports["openfl"]["_internal"]["utils"]["NullUtils"] = function() { };
$hxClasses["openfl._internal.utils.NullUtils"] = openfl__$internal_utils_NullUtils;
openfl__$internal_utils_NullUtils.__name__ = ["openfl","_internal","utils","NullUtils"];
var openfl__$internal_utils_PerlinNoise = $hx_exports["openfl"]["_internal"]["utils"]["PerlinNoise"] = function(seed,octaves,falloff) {
	if(seed == null) {
		seed = 123;
	}
	if(falloff == null) {
		falloff = .5;
	}
	this.octaves = octaves == null ? 4 : octaves;
	this.baseFactor = 0.015625;
	this.seedOffset(seed);
	this.octFreqPers(falloff);
};
$hxClasses["openfl._internal.utils.PerlinNoise"] = openfl__$internal_utils_PerlinNoise;
openfl__$internal_utils_PerlinNoise.__name__ = ["openfl","_internal","utils","PerlinNoise"];
openfl__$internal_utils_PerlinNoise.prototype = {
	octaves: null
	,aOctFreq: null
	,aOctPers: null
	,fPersMax: null
	,iXoffset: null
	,iYoffset: null
	,iZoffset: null
	,baseFactor: null
	,fill: function(bitmap,_x,_y,_z,_) {
		var baseX = _x * this.baseFactor + this.iXoffset;
		_y = _y * this.baseFactor + this.iYoffset;
		_z = _z * this.baseFactor + this.iZoffset;
		var width = bitmap.width;
		var height = bitmap.height;
		var p = openfl__$internal_utils_PerlinNoise.P;
		var octaves = this.octaves;
		var aOctFreq = this.aOctFreq;
		var aOctPers = this.aOctPers;
		var _g1 = 0;
		var _g = height;
		while(_g1 < _g) {
			var py = _g1++;
			_x = baseX;
			var _g3 = 0;
			var _g2 = width;
			while(_g3 < _g2) {
				var px = _g3++;
				var s = 0.;
				var _g5 = 0;
				var _g4 = octaves;
				while(_g5 < _g4) {
					var i = _g5++;
					var fFreq = aOctFreq[i];
					var fPers = aOctPers[i];
					var x = _x * fFreq;
					var y = _y * fFreq;
					var z = _z * fFreq;
					var xf = x - x % 1;
					var yf = y - y % 1;
					var zf = z - z % 1;
					var X = Std.int(xf) & 255;
					var Y = Std.int(yf) & 255;
					var Z = Std.int(zf) & 255;
					x -= xf;
					y -= yf;
					z -= zf;
					var u = x * x * x * (x * (x * 6 - 15) + 10);
					var v = y * y * y * (y * (y * 6 - 15) + 10);
					var w = z * z * z * (z * (z * 6 - 15) + 10);
					var A = p[X] + Y;
					var AA = p[A] + Z;
					var AB = p[A + 1] + Z;
					var B = p[X + 1] + Y;
					var BA = p[B] + Z;
					var BB = p[B + 1] + Z;
					var x1 = x - 1;
					var y1 = y - 1;
					var z1 = z - 1;
					var hash = p[BB + 1] & 15;
					var g1 = ((hash & 1) == 0 ? hash < 8 ? x1 : y1 : hash < 8 ? -x1 : -y1) + ((hash & 2) == 0 ? hash < 4 ? y1 : hash == 12 ? x1 : z1 : hash < 4 ? -y1 : hash == 14 ? -x1 : -z1);
					hash = p[AB + 1] & 15;
					var g2 = ((hash & 1) == 0 ? hash < 8 ? x : y1 : hash < 8 ? -x : -y1) + ((hash & 2) == 0 ? hash < 4 ? y1 : hash == 12 ? x : z1 : hash < 4 ? -y1 : hash == 14 ? -x : -z1);
					hash = p[BA + 1] & 15;
					var g3 = ((hash & 1) == 0 ? hash < 8 ? x1 : y : hash < 8 ? -x1 : -y) + ((hash & 2) == 0 ? hash < 4 ? y : hash == 12 ? x1 : z1 : hash < 4 ? -y : hash == 14 ? -x1 : -z1);
					hash = p[AA + 1] & 15;
					var g4 = ((hash & 1) == 0 ? hash < 8 ? x : y : hash < 8 ? -x : -y) + ((hash & 2) == 0 ? hash < 4 ? y : hash == 12 ? x : z1 : hash < 4 ? -y : hash == 14 ? -x : -z1);
					hash = p[BB] & 15;
					var g5 = ((hash & 1) == 0 ? hash < 8 ? x1 : y1 : hash < 8 ? -x1 : -y1) + ((hash & 2) == 0 ? hash < 4 ? y1 : hash == 12 ? x1 : z : hash < 4 ? -y1 : hash == 14 ? -x1 : -z);
					hash = p[AB] & 15;
					var g6 = ((hash & 1) == 0 ? hash < 8 ? x : y1 : hash < 8 ? -x : -y1) + ((hash & 2) == 0 ? hash < 4 ? y1 : hash == 12 ? x : z : hash < 4 ? -y1 : hash == 14 ? -x : -z);
					hash = p[BA] & 15;
					var g7 = ((hash & 1) == 0 ? hash < 8 ? x1 : y : hash < 8 ? -x1 : -y) + ((hash & 2) == 0 ? hash < 4 ? y : hash == 12 ? x1 : z : hash < 4 ? -y : hash == 14 ? -x1 : -z);
					hash = p[AA] & 15;
					var g8 = ((hash & 1) == 0 ? hash < 8 ? x : y : hash < 8 ? -x : -y) + ((hash & 2) == 0 ? hash < 4 ? y : hash == 12 ? x : z : hash < 4 ? -y : hash == 14 ? -x : -z);
					g2 += u * (g1 - g2);
					g4 += u * (g3 - g4);
					g6 += u * (g5 - g6);
					g8 += u * (g7 - g8);
					g4 += v * (g2 - g4);
					g8 += v * (g6 - g8);
					s += (g8 + w * (g4 - g8)) * fPers;
				}
				var color = Std.int((s * this.fPersMax + 1) * 128);
				bitmap.setPixel32(px,py,-16777216 | color << 16 | color << 8 | color);
				_x += this.baseFactor;
			}
			_y += this.baseFactor;
		}
	}
	,octFreqPers: function(fPersistence) {
		var fFreq;
		var fPers;
		this.aOctFreq = [];
		this.aOctPers = [];
		this.fPersMax = 0;
		var _g1 = 0;
		var _g = this.octaves;
		while(_g1 < _g) {
			var i = _g1++;
			fFreq = $hx_exports.Math.pow(2,i);
			fPers = $hx_exports.Math.pow(fPersistence,i);
			this.fPersMax += fPers;
			this.aOctFreq.push(fFreq);
			this.aOctPers.push(fPers);
		}
		this.fPersMax = 1 / this.fPersMax;
	}
	,seedOffset: function(iSeed) {
		iSeed = Std.int(iSeed * 16807. % 2147483647);
		this.iXoffset = iSeed;
		iSeed = Std.int(iSeed * 16807. % 2147483647);
		this.iYoffset = iSeed;
		iSeed = Std.int(iSeed * 16807. % 2147483647);
		this.iZoffset = iSeed;
	}
	,__class__: openfl__$internal_utils_PerlinNoise
};
var openfl_desktop_Clipboard = $hx_exports["openfl"]["desktop"]["Clipboard"] = function() {
};
$hxClasses["openfl.desktop.Clipboard"] = openfl_desktop_Clipboard;
openfl_desktop_Clipboard.__name__ = ["openfl","desktop","Clipboard"];
openfl_desktop_Clipboard.__properties__ = {get_generalClipboard:"get_generalClipboard"};
openfl_desktop_Clipboard.__generalClipboard = null;
openfl_desktop_Clipboard.get_generalClipboard = function() {
	if(openfl_desktop_Clipboard.__generalClipboard == null) {
		openfl_desktop_Clipboard.__generalClipboard = new openfl_desktop_Clipboard();
		openfl_desktop_Clipboard.__generalClipboard.__systemClipboard = true;
	}
	return openfl_desktop_Clipboard.__generalClipboard;
};
openfl_desktop_Clipboard.prototype = {
	__htmlText: null
	,__richText: null
	,__systemClipboard: null
	,__text: null
	,clear: function() {
		if(!this.__systemClipboard) {
			this.__htmlText = null;
			this.__richText = null;
			this.__text = null;
		} else {
			$hx_exports.lime.system.Clipboard.set_text(null);
		}
	}
	,clearData: function(format) {
		if(!this.__systemClipboard) {
			switch(format) {
			case 0:
				this.__htmlText = null;
				break;
			case 1:
				this.__richText = null;
				break;
			case 2:
				this.__text = null;
				break;
			default:
			}
		} else {
			switch(format) {
			case 0:case 1:case 2:
				$hx_exports.lime.system.Clipboard.set_text(null);
				break;
			default:
			}
		}
	}
	,getData: function(format,transferMode) {
		if(transferMode == null) {
			transferMode = 3;
		}
		if(!this.__systemClipboard) {
			switch(format) {
			case 0:
				return this.__htmlText;
			case 1:
				return this.__richText;
			case 2:
				return this.__text;
			default:
				return null;
			}
		} else {
			switch(format) {
			case 0:case 1:case 2:
				return $hx_exports.lime.system.Clipboard.get_text();
			default:
				return null;
			}
		}
	}
	,hasFormat: function(format) {
		if(!this.__systemClipboard) {
			switch(format) {
			case 0:
				return this.__htmlText != null;
			case 1:
				return this.__richText != null;
			case 2:
				return this.__text != null;
			default:
				return false;
			}
		} else {
			switch(format) {
			case 0:case 1:case 2:
				return $hx_exports.lime.system.Clipboard.get_text() != null;
			default:
				return false;
			}
		}
	}
	,setData: function(format,data,serializable) {
		if(serializable == null) {
			serializable = true;
		}
		if(!this.__systemClipboard) {
			switch(format) {
			case 0:
				this.__htmlText = Std.string(data);
				return true;
			case 1:
				this.__richText = Std.string(data);
				return true;
			case 2:
				this.__text = Std.string(data);
				return true;
			default:
				return false;
			}
		} else {
			switch(format) {
			case 0:case 1:case 2:
				$hx_exports.lime.system.Clipboard.set_text(Std.string(data));
				return true;
			default:
				return false;
			}
		}
	}
	,setDataHandler: function(format,handler,serializable) {
		if(serializable == null) {
			serializable = true;
		}
		openfl__$internal_Lib.notImplemented({ fileName : "Clipboard.hx", lineNumber : 210, className : "openfl.desktop.Clipboard", methodName : "setDataHandler"});
		return false;
	}
	,get_formats: function() {
		var formats = [2];
		if(this.hasFormat(0)) {
			formats.push(0);
		}
		if(this.hasFormat(1)) {
			formats.push(1);
		}
		if(this.hasFormat(2)) {
			formats.push(2);
		}
		return formats;
	}
	,__class__: openfl_desktop_Clipboard
	,__properties__: {get_formats:"get_formats"}
};
var openfl_desktop__$ClipboardFormats_ClipboardFormats_$Impl_$ = $hx_exports["openfl"]["desktop"]["ClipboardFormats"] = {};
$hxClasses["openfl.desktop._ClipboardFormats.ClipboardFormats_Impl_"] = openfl_desktop__$ClipboardFormats_ClipboardFormats_$Impl_$;
openfl_desktop__$ClipboardFormats_ClipboardFormats_$Impl_$.__name__ = ["openfl","desktop","_ClipboardFormats","ClipboardFormats_Impl_"];
openfl_desktop__$ClipboardFormats_ClipboardFormats_$Impl_$.fromString = function(value) {
	switch(value) {
	case "air:html":
		return 0;
	case "air:rtf":
		return 1;
	case "air:text":
		return 2;
	default:
		return null;
	}
};
openfl_desktop__$ClipboardFormats_ClipboardFormats_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "air:html";
	case 1:
		return "air:rtf";
	case 2:
		return "air:text";
	default:
		return null;
	}
};
var openfl_desktop__$ClipboardTransferMode_ClipboardTransferMode_$Impl_$ = $hx_exports["openfl"]["desktop"]["ClipboardTransferMode"] = {};
$hxClasses["openfl.desktop._ClipboardTransferMode.ClipboardTransferMode_Impl_"] = openfl_desktop__$ClipboardTransferMode_ClipboardTransferMode_$Impl_$;
openfl_desktop__$ClipboardTransferMode_ClipboardTransferMode_$Impl_$.__name__ = ["openfl","desktop","_ClipboardTransferMode","ClipboardTransferMode_Impl_"];
openfl_desktop__$ClipboardTransferMode_ClipboardTransferMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "cloneOnly":
		return 0;
	case "clonePreferred":
		return 1;
	case "originalOnly":
		return 2;
	case "originalPreferred":
		return 3;
	default:
		return null;
	}
};
openfl_desktop__$ClipboardTransferMode_ClipboardTransferMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "cloneOnly";
	case 1:
		return "clonePreferred";
	case 2:
		return "originalOnly";
	case 3:
		return "originalPreferred";
	default:
		return null;
	}
};
var openfl_events_IEventDispatcher = $hx_exports["openfl"]["events"]["IEventDispatcher"] = function() { };
$hxClasses["openfl.events.IEventDispatcher"] = openfl_events_IEventDispatcher;
openfl_events_IEventDispatcher.__name__ = ["openfl","events","IEventDispatcher"];
openfl_events_IEventDispatcher.prototype = {
	addEventListener: null
	,dispatchEvent: null
	,hasEventListener: null
	,removeEventListener: null
	,willTrigger: null
	,__class__: openfl_events_IEventDispatcher
};
var openfl_events_EventDispatcher = $hx_exports["openfl"]["events"]["EventDispatcher"] = function(target) {
	if(target != null) {
		this.__targetDispatcher = target;
	}
};
$hxClasses["openfl.events.EventDispatcher"] = openfl_events_EventDispatcher;
openfl_events_EventDispatcher.__name__ = ["openfl","events","EventDispatcher"];
openfl_events_EventDispatcher.__interfaces__ = [openfl_events_IEventDispatcher];
openfl_events_EventDispatcher.prototype = {
	__eventMap: null
	,__iterators: null
	,__targetDispatcher: null
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		if(listener == null) {
			return;
		}
		if(this.__eventMap == null) {
			this.__eventMap = new haxe_ds_StringMap();
			this.__iterators = new haxe_ds_StringMap();
		}
		if(!this.__eventMap.exists(type)) {
			var list = [];
			list.push(new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
			var iterator = new openfl_events__$EventDispatcher_DispatchIterator(list);
			this.__eventMap.set(type,list);
			this.__iterators.set(type,[iterator]);
		} else {
			var list1 = this.__eventMap.get(type);
			var _g1 = 0;
			var _g = list1.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(list1[i].match(listener,useCapture)) {
					return;
				}
			}
			var iterators = this.__iterators.get(type);
			var _g2 = 0;
			while(_g2 < iterators.length) {
				var iterator1 = iterators[_g2];
				++_g2;
				if(iterator1.active) {
					iterator1.copy();
				}
			}
			this.__addListenerByPriority(list1,new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
		}
	}
	,dispatchEvent: function(event) {
		if(this.__targetDispatcher != null) {
			event.target = this.__targetDispatcher;
		} else {
			event.target = this;
		}
		return this.__dispatchEvent(event);
	}
	,hasEventListener: function(type) {
		if(this.__eventMap == null) {
			return false;
		}
		return this.__eventMap.exists(type);
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
		if(this.__eventMap == null || listener == null) {
			return;
		}
		var list = this.__eventMap.get(type);
		if(list == null) {
			return;
		}
		var iterators = this.__iterators.get(type);
		var _g1 = 0;
		var _g = list.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(list[i].match(listener,useCapture)) {
				var _g2 = 0;
				while(_g2 < iterators.length) {
					var iterator = iterators[_g2];
					++_g2;
					iterator.remove(list[i],i);
				}
				list.splice(i,1);
				break;
			}
		}
		if(list.length == 0) {
			this.__eventMap.remove(type);
			this.__iterators.remove(type);
		}
		if(!this.__eventMap.iterator().hasNext()) {
			this.__eventMap = null;
			this.__iterators = null;
		}
	}
	,toString: function() {
		var full = Type.getClassName(Type.getClass(this));
		var short = full.split(".").pop();
		return "[object " + short + "]";
	}
	,willTrigger: function(type) {
		return this.hasEventListener(type);
	}
	,__dispatchEvent: function(event) {
		if(this.__eventMap == null || event == null) {
			return true;
		}
		var type = event.type;
		var list = this.__eventMap.get(type);
		if(list == null) {
			return true;
		}
		if(event.target == null) {
			if(this.__targetDispatcher != null) {
				event.target = this.__targetDispatcher;
			} else {
				event.target = this;
			}
		}
		event.currentTarget = this;
		var capture = event.eventPhase == 1;
		var index = 0;
		var iterators = this.__iterators.get(type);
		var iterator = iterators[0];
		if(iterator.active) {
			iterator = new openfl_events__$EventDispatcher_DispatchIterator(list);
			iterators.push(iterator);
		}
		iterator.reset(list);
		var listener = iterator;
		while(listener.hasNext()) {
			var listener1 = listener.next();
			if(listener1 == null) {
				continue;
			}
			if(listener1.useCapture == capture) {
				listener1.callback(event);
				if(event.__isCanceledNow) {
					break;
				}
			}
		}
		if(iterator != iterators[0]) {
			$hx_exports.HxOverrides.remove(iterators,iterator);
		}
		return true;
	}
	,__removeAllListeners: function() {
		this.__eventMap = null;
		this.__iterators = null;
	}
	,__addListenerByPriority: function(list,listener) {
		var numElements = list.length;
		var addAtPosition = numElements;
		var _g1 = 0;
		var _g = numElements;
		while(_g1 < _g) {
			var i = _g1++;
			if(list[i].priority < listener.priority) {
				addAtPosition = i;
				break;
			}
		}
		list.splice(addAtPosition,0,listener);
	}
	,__class__: openfl_events_EventDispatcher
};
var openfl_display_IBitmapDrawable = $hx_exports["openfl"]["display"]["IBitmapDrawable"] = function() { };
$hxClasses["openfl.display.IBitmapDrawable"] = openfl_display_IBitmapDrawable;
openfl_display_IBitmapDrawable.__name__ = ["openfl","display","IBitmapDrawable"];
openfl_display_IBitmapDrawable.prototype = {
	__blendMode: null
	,__isMask: null
	,__renderable: null
	,__transform: null
	,__worldAlpha: null
	,__worldColorTransform: null
	,__worldTransform: null
	,__getBounds: null
	,__renderCairo: null
	,__renderCairoMask: null
	,__renderCanvas: null
	,__renderCanvasMask: null
	,__renderGL: null
	,__renderGLMask: null
	,__updateChildren: null
	,__updateTransforms: null
	,__updateMask: null
	,__class__: openfl_display_IBitmapDrawable
};
var openfl_display_DisplayObject = $hx_exports["openfl"]["display"]["DisplayObject"] = function() {
	openfl_events_EventDispatcher.call(this);
	this.__alpha = 1;
	this.__blendMode = 10;
	this.__cacheAsBitmap = false;
	this.__transform = new openfl_geom_Matrix();
	this.__visible = true;
	this.__rotation = 0;
	this.__rotationSine = 0;
	this.__rotationCosine = 1;
	this.__scaleX = 1;
	this.__scaleY = 1;
	this.__worldAlpha = 1;
	this.__worldBlendMode = 10;
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
	this.__renderTransform = new openfl_geom_Matrix();
	this.set_name("instance" + ++openfl_display_DisplayObject.__instanceCount);
};
$hxClasses["openfl.display.DisplayObject"] = openfl_display_DisplayObject;
openfl_display_DisplayObject.__name__ = ["openfl","display","DisplayObject"];
openfl_display_DisplayObject.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_DisplayObject.__super__ = openfl_events_EventDispatcher;
openfl_display_DisplayObject.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	opaqueBackground: null
	,parent: null
	,scale9Grid: null
	,stage: null
	,_lastParentOrSelfChangeFrameID: null
	,_lastChildChangeFrameID: null
	,__alpha: null
	,__blendMode: null
	,__cacheAsBitmap: null
	,__cacheAsBitmapMatrix: null
	,__cacheBitmap: null
	,__cacheBitmapBackground: null
	,__cacheBitmapColorTransform: null
	,__cacheBitmapData: null
	,__cacheBitmapRender: null
	,__cairo: null
	,__children: null
	,__filters: null
	,__graphics: null
	,__interactive: null
	,__isMask: null
	,__loaderInfo: null
	,__mask: null
	,__maskTarget: null
	,__name: null
	,__objectTransform: null
	,__renderable: null
	,__renderDirty: null
	,__renderParent: null
	,__renderTransform: null
	,__renderTransformCache: null
	,__renderTransformChanged: null
	,__rotation: null
	,__rotationCosine: null
	,__rotationSine: null
	,__scaleX: null
	,__scaleY: null
	,__scrollRect: null
	,__transform: null
	,__transformDirty: null
	,__visible: null
	,__worldAlpha: null
	,__worldAlphaChanged: null
	,__worldBlendMode: null
	,__worldClip: null
	,__worldClipChanged: null
	,__worldColorTransform: null
	,__worldTransform: null
	,__worldVisible: null
	,__worldVisibleChanged: null
	,__worldTransformInvalid: null
	,__worldZ: null
	,__canvas: null
	,__context: null
	,__style: null
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		switch(type) {
		case "activate":case "deactivate":case "enterFrame":case "exitFrame":case "frameConstructed":case "render":
			if(!openfl_display_DisplayObject.__broadcastEvents.exists(type)) {
				openfl_display_DisplayObject.__broadcastEvents.set(type,[]);
			}
			var dispatchers = openfl_display_DisplayObject.__broadcastEvents.get(type);
			if(dispatchers.indexOf(this) == -1) {
				dispatchers.push(this);
			}
			break;
		default:
		}
		openfl_events_EventDispatcher.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
	}
	,dispatchEvent: function(event) {
		if(Std.is(event,openfl_events_MouseEvent)) {
			var mouseEvent = event;
			mouseEvent.stageX = this.__getRenderTransform().__transformX(mouseEvent.localX,mouseEvent.localY);
			mouseEvent.stageY = this.__getRenderTransform().__transformY(mouseEvent.localX,mouseEvent.localY);
		} else if(Std.is(event,openfl_events_TouchEvent)) {
			var touchEvent = event;
			touchEvent.stageX = this.__getRenderTransform().__transformX(touchEvent.localX,touchEvent.localY);
			touchEvent.stageY = this.__getRenderTransform().__transformY(touchEvent.localX,touchEvent.localY);
		}
		return this.__dispatchWithCapture(event);
	}
	,getBounds: function(targetCoordinateSpace) {
		var matrix;
		var usingTemp = false;
		if(targetCoordinateSpace != null) {
			matrix = this.__getWorldTransform().clone();
			matrix.concat(targetCoordinateSpace.__getWorldTransform().clone().invert());
		} else {
			usingTemp = true;
			matrix = openfl_geom_Matrix.__pool.get();
			matrix.identity();
		}
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,matrix);
		if(usingTemp) {
			openfl_geom_Matrix.__pool.release(matrix);
		}
		return bounds;
	}
	,getRect: function(targetCoordinateSpace) {
		return this.getBounds(targetCoordinateSpace);
	}
	,globalToLocal: function(pos) {
		return this.__globalToLocal(pos,new openfl_geom_Point());
	}
	,hitTestObject: function(obj) {
		if(obj != null && obj.parent != null && this.parent != null) {
			var currentBounds = this.getBounds(this);
			var targetBounds = obj.getBounds(this);
			return currentBounds.intersects(targetBounds);
		}
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) {
			shapeFlag = false;
		}
		if(this.stage != null) {
			return this.__hitTest(x,y,shapeFlag,null,true,this);
		} else {
			return false;
		}
	}
	,localToGlobal: function(point) {
		return this.__getRenderTransform().transformPoint(point);
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
		openfl_events_EventDispatcher.prototype.removeEventListener.call(this,type,listener,useCapture);
		switch(type) {
		case "activate":case "deactivate":case "enterFrame":case "exitFrame":case "frameConstructed":case "render":
			if(!this.hasEventListener(type)) {
				if(openfl_display_DisplayObject.__broadcastEvents.exists(type)) {
					$hx_exports.HxOverrides.remove(openfl_display_DisplayObject.__broadcastEvents.get(type),this);
				}
			}
			break;
		default:
		}
	}
	,__cleanup: function() {
		this.__cairo = null;
		this.__canvas = null;
		this.__context = null;
		if(this.__graphics != null) {
			this.__graphics.__cleanup();
		}
	}
	,__dispatch: function(event) {
		if(this.__eventMap != null && this.hasEventListener(event.type)) {
			var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
			if(event.__isCanceled) {
				return true;
			}
			return result;
		}
		return true;
	}
	,__dispatchChildren: function(event) {
	}
	,__dispatchEvent: function(event) {
		var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
		if(event.__isCanceled) {
			return true;
		}
		if(event.bubbles && this.parent != null && this.parent != this) {
			event.eventPhase = 3;
			if(event.target == null) {
				event.target = this;
			}
			this.parent.__dispatchEvent(event);
		}
		return result;
	}
	,__dispatchStack: function(event,stack) {
		var target;
		var length = stack.length;
		if(length == 0) {
			event.eventPhase = 2;
			target = event.target;
			target.__dispatch(event);
		} else {
			event.eventPhase = 1;
			event.target = stack[stack.length - 1];
			var _g1 = 0;
			var _g = length - 1;
			while(_g1 < _g) {
				var i = _g1++;
				stack[i].__dispatch(event);
				if(event.__isCanceled) {
					return;
				}
			}
			event.eventPhase = 2;
			target = event.target;
			target.__dispatch(event);
			if(event.__isCanceled) {
				return;
			}
			if(event.bubbles) {
				event.eventPhase = 3;
				var i1 = length - 2;
				while(i1 >= 0) {
					stack[i1].__dispatch(event);
					if(event.__isCanceled) {
						return;
					}
					--i1;
				}
			}
		}
	}
	,__dispatchWithCapture: function(event) {
		if(event.target == null) {
			event.target = this;
		}
		if(this.parent != null) {
			event.eventPhase = 1;
			if(this.parent == this.stage) {
				this.parent.__dispatch(event);
			} else {
				var stack = openfl_display_DisplayObject.__tempStack.get();
				var parent = this.parent;
				var i = 0;
				while(parent != null) {
					stack.data.set(i,parent);
					parent = parent.parent;
					++i;
				}
				var _g1 = 0;
				var _g = i;
				while(_g1 < _g) {
					var j = _g1++;
					stack.data.get(i - j - 1).__dispatch(event);
				}
				openfl_display_DisplayObject.__tempStack.release(stack);
			}
		}
		event.eventPhase = 2;
		return this.__dispatchEvent(event);
	}
	,__enterFrame: function(deltaTime) {
	}
	,__getBounds: function(rect,matrix) {
		if(this.__graphics != null) {
			this.__graphics.__getBounds(rect,matrix);
		}
	}
	,__getCursor: function() {
		return null;
	}
	,__getFilterBounds: function(rect,matrix) {
		this.__getBounds(rect,matrix);
		if(this.__filters != null && this.__filters.length > 0) {
			var extension = openfl_geom_Rectangle.__pool.get();
			var _g = 0;
			var _g1 = this.__filters;
			while(_g < _g1.length) {
				var filter = _g1[_g];
				++_g;
				extension.__expand(-filter.__leftExtension,-filter.__topExtension,filter.__leftExtension + filter.__rightExtension,filter.__topExtension + filter.__bottomExtension);
			}
			rect.width += extension.width;
			rect.height += extension.height;
			rect.x += extension.x;
			rect.y += extension.y;
			openfl_geom_Rectangle.__pool.release(extension);
		}
	}
	,__getInteractive: function(stack) {
		return false;
	}
	,__getLocalBounds: function(rect) {
		this.__getBounds(rect,this.__transform);
		rect.x -= this.__transform.tx;
		rect.y -= this.__transform.ty;
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect == null) {
			this.__getBounds(rect,matrix);
		} else {
			var r = openfl_geom_Rectangle.__pool.get();
			r.copyFrom(this.__scrollRect);
			r.__transform(r,matrix);
			rect.__expand(matrix.tx,matrix.ty,r.width,r.height);
			openfl_geom_Rectangle.__pool.release(r);
		}
	}
	,__getRenderTransform: function() {
		this.__getWorldTransform();
		return this.__renderTransform;
	}
	,__getWorldTransform: function() {
		var transformDirty = this.__transformDirty || this.__worldTransformInvalid;
		if(transformDirty) {
			var list = [];
			var current = this;
			if(this.parent == null) {
				this.__update(true,false);
			} else {
				while(current != this.stage) {
					list.push(current);
					current = current.parent;
					if(current == null) {
						break;
					}
				}
			}
			var i = list.length;
			while(--i >= 0) {
				current = list[i];
				current.__update(true,false);
				current.__worldTransformInvalid = false;
			}
		}
		return this.__worldTransform;
	}
	,__globalToLocal: function(global,local) {
		this.__getRenderTransform();
		if(global == local) {
			this.__renderTransform.__transformInversePoint(global);
		} else {
			local.x = this.__renderTransform.__transformInverseX(global.x,global.y);
			local.y = this.__renderTransform.__transformInverseY(global.x,global.y);
		}
		return local;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.__graphics != null) {
			if(!hitObject.get_visible() || this.__isMask) {
				return false;
			}
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
				return false;
			}
			if(this.__graphics.__hitTest(x,y,shapeFlag,this.__getRenderTransform())) {
				if(stack != null && !interactiveOnly) {
					stack.push(hitObject);
				}
				return true;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.__graphics != null) {
			if(this.__graphics.__hitTest(x,y,true,this.__getRenderTransform())) {
				return true;
			}
		}
		return false;
	}
	,__readGraphicsData: function(graphicsData,recurse) {
		if(this.__graphics != null) {
			this.__graphics.__readGraphicsData(graphicsData);
		}
	}
	,__renderCairo: function(renderSession) {
	}
	,__renderCairoMask: function(renderSession) {
	}
	,__renderCanvas: function(renderSession) {
		if(this.get_mask() == null || this.get_mask().get_width() > 0 && this.get_mask().get_height() > 0) {
			this.__updateCacheBitmap(renderSession,!this.__worldColorTransform.__isDefault());
			if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
				openfl__$internal_renderer_canvas_CanvasBitmap.render(this.__cacheBitmap,renderSession);
			} else {
				openfl__$internal_renderer_canvas_CanvasDisplayObject.render(this,renderSession);
			}
		}
	}
	,__renderCanvasMask: function(renderSession) {
		if(this.__graphics != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics,renderSession);
		}
	}
	,__renderDOM: function(renderSession) {
	}
	,__renderDOMClear: function(renderSession) {
	}
	,__renderGL: function(renderSession) {
		this.__updateCacheBitmap(renderSession,false);
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			openfl__$internal_renderer_opengl_GLBitmap.render(this.__cacheBitmap,renderSession);
		} else {
			openfl__$internal_renderer_opengl_GLDisplayObject.render(this,renderSession);
		}
	}
	,__renderGLMask: function(renderSession) {
		this.__updateCacheBitmap(renderSession,false);
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			openfl__$internal_renderer_opengl_GLBitmap.renderMask(this.__cacheBitmap,renderSession);
		} else {
			openfl__$internal_renderer_opengl_GLDisplayObject.renderMask(this,renderSession);
		}
	}
	,__setParentRenderDirty: function() {
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		if(renderParent != null && !renderParent.__renderDirty) {
			renderParent.__renderDirty = true;
			renderParent.__setParentRenderDirty();
		}
	}
	,__setRenderDirty: function() {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		this.setRequiresRedraw();
	}
	,__setStageReference: function(stage) {
		this.stage = stage;
	}
	,__setTransformDirty: function() {
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			this.__setWorldTransformInvalid();
			this.__setParentRenderDirty();
		}
		this.setRequiresRedraw();
	}
	,__setWorldTransformInvalid: function() {
		this.__worldTransformInvalid = true;
	}
	,__stopAllMovieClips: function() {
	}
	,setRequiresRedraw: function() {
		var p = this.parent;
		var frameID = openfl_display_Stage.frameID;
		this._lastParentOrSelfChangeFrameID = frameID;
		while(p != null && p._lastChildChangeFrameID != frameID) {
			p._lastChildChangeFrameID = frameID;
			p = p.parent;
		}
	}
	,__forceUpdateTransforms: function() {
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		this.__renderable = this.get_visible() && this.__scaleX != 0 && this.__scaleY != 0 && !this.__isMask && (renderParent == null || !renderParent.__isMask);
		this.__updateTransforms();
		this.__transformDirty = false;
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		if(this.__isMask && renderParent == null) {
			renderParent = this.__maskTarget;
		}
		this.__renderable = this.get_visible() && this.__scaleX != 0 && this.__scaleY != 0 && !this.__isMask && (renderParent == null || !renderParent.__isMask);
		this.__updateTransforms();
		this.__transformDirty = false;
		if(maskGraphics != null) {
			this.__updateMask(maskGraphics);
		}
		if(!transformOnly) {
			if(!this.__worldColorTransform.__equals(this.get_transform().get_colorTransform())) {
				this.__worldColorTransform = this.get_transform().get_colorTransform().__clone();
			}
			if(renderParent != null) {
				this.__worldAlpha = this.get_alpha() * renderParent.__worldAlpha;
				this.__worldColorTransform.__combine(renderParent.__worldColorTransform);
				if(this.__blendMode == null || this.__blendMode == 10) {
					this.__worldBlendMode = renderParent.__blendMode;
				} else {
					this.__worldBlendMode = this.__blendMode;
				}
			} else {
				this.__worldAlpha = this.get_alpha();
			}
		}
		if(updateChildren && this.get_mask() != null) {
			this.get_mask().__update(transformOnly,true,maskGraphics);
		}
	}
	,__updateCacheBitmap: function(renderSession,force) {
		if(this.__cacheBitmapRender) {
			return;
		}
		if(this.get_cacheAsBitmap()) {
			var matrix = null;
			var rect = null;
			this.__update(false,true);
			var needRender = this.__cacheBitmap == null || this.__renderDirty && (force || this.__children != null && this.__children.length > 0 || this.__graphics != null && this.__graphics.__dirty) || this.opaqueBackground != this.__cacheBitmapBackground || !this.__cacheBitmapColorTransform.__equals(this.__worldColorTransform);
			var updateTransform = needRender || !this.__cacheBitmap.__worldTransform.equals(this.__worldTransform);
			var hasFilters = this.__filters != null && this.__filters.length > 0;
			var bitmapWidth = 0;
			var bitmapHeight = 0;
			if(updateTransform || hasFilters) {
				matrix = openfl_geom_Matrix.__pool.get();
				rect = openfl_geom_Rectangle.__pool.get();
				matrix.identity();
				this.__getFilterBounds(rect,this.__renderTransform);
				bitmapWidth = $hx_exports.Math.ceil(rect.width);
				bitmapHeight = $hx_exports.Math.ceil(rect.height);
			}
			if(hasFilters) {
				if(this.__cacheBitmap != null && (bitmapWidth != this.__cacheBitmap.get_width() || bitmapHeight != this.__cacheBitmap.get_height())) {
					needRender = true;
				} else {
					var _g = 0;
					var _g1 = this.__filters;
					while(_g < _g1.length) {
						var filter = _g1[_g];
						++_g;
						if(filter.__renderDirty) {
							needRender = true;
							break;
						}
					}
				}
			}
			if(needRender) {
				this.__cacheBitmapBackground = this.opaqueBackground;
				var color = this.opaqueBackground != null ? -16777216 | this.opaqueBackground : 0;
				if(rect.width >= 0.5 && rect.height >= 0.5) {
					if(this.__cacheBitmap == null || bitmapWidth != this.__cacheBitmap.get_width() || bitmapHeight != this.__cacheBitmap.get_height()) {
						this.__cacheBitmapData = new openfl_display_BitmapData(bitmapWidth,bitmapHeight,true,color);
						if(this.__cacheBitmap == null) {
							this.__cacheBitmap = new openfl_display_Bitmap();
						}
						this.__cacheBitmap.__bitmapData = this.__cacheBitmapData;
					} else {
						this.__cacheBitmapData.fillRect(this.__cacheBitmapData.rect,color);
					}
				} else {
					this.__cacheBitmap = null;
					this.__cacheBitmapData = null;
					return;
				}
			}
			if(updateTransform || needRender) {
				this.__cacheBitmap.__worldTransform.copyFrom(this.__worldTransform);
				this.__cacheBitmap.__renderTransform.identity();
				this.__cacheBitmap.__renderTransform.tx = rect.x;
				this.__cacheBitmap.__renderTransform.ty = rect.y;
				matrix.concat(this.__renderTransform);
				matrix.tx -= $hx_exports.Math.round(rect.x);
				matrix.ty -= $hx_exports.Math.round(rect.y);
			}
			this.__cacheBitmap.smoothing = renderSession.allowSmoothing;
			this.__cacheBitmap.__renderable = this.__renderable;
			this.__cacheBitmap.__worldAlpha = this.__worldAlpha;
			this.__cacheBitmap.__worldBlendMode = this.__worldBlendMode;
			this.__cacheBitmap.__scrollRect = this.__scrollRect;
			this.__cacheBitmap.set_mask(this.__mask);
			if(needRender) {
				this.__cacheBitmapRender = true;
				this.__cacheBitmapData.__draw(this,matrix,null,null,null,renderSession.allowSmoothing);
				if(hasFilters) {
					var needSecondBitmapData = false;
					var needCopyOfOriginal = false;
					var _g2 = 0;
					var _g11 = this.__filters;
					while(_g2 < _g11.length) {
						var filter1 = _g11[_g2];
						++_g2;
						if(filter1.__needSecondBitmapData) {
							needSecondBitmapData = true;
						}
						if(filter1.__preserveObject) {
							needCopyOfOriginal = true;
						}
					}
					var bitmapData = this.__cacheBitmapData;
					var bitmapData2 = null;
					var bitmapData3 = null;
					if(needSecondBitmapData) {
						bitmapData2 = new openfl_display_BitmapData(bitmapData.width,bitmapData.height,true,0);
					} else {
						bitmapData2 = bitmapData;
					}
					if(needCopyOfOriginal) {
						bitmapData3 = new openfl_display_BitmapData(bitmapData.width,bitmapData.height,true,0);
					}
					var sourceRect = bitmapData.rect;
					var destPoint = new openfl_geom_Point();
					var cacheBitmap;
					var lastBitmap;
					var _g3 = 0;
					var _g12 = this.__filters;
					while(_g3 < _g12.length) {
						var filter2 = _g12[_g3];
						++_g3;
						if(filter2.__preserveObject) {
							bitmapData3.copyPixels(bitmapData,bitmapData.rect,destPoint);
						}
						lastBitmap = filter2.__applyFilter(bitmapData2,bitmapData,sourceRect,destPoint);
						if(filter2.__preserveObject) {
							lastBitmap.draw(bitmapData3,null,this.get_transform().get_colorTransform());
						}
						filter2.__renderDirty = false;
						if(needSecondBitmapData && lastBitmap == bitmapData2) {
							cacheBitmap = bitmapData;
							bitmapData = bitmapData2;
							bitmapData2 = cacheBitmap;
						}
					}
					this.__cacheBitmap.set_bitmapData(bitmapData);
				}
				this.__cacheBitmapRender = false;
				if(this.__cacheBitmapColorTransform == null) {
					this.__cacheBitmapColorTransform = new openfl_geom_ColorTransform();
				}
				this.__cacheBitmapColorTransform.__copyFrom(this.__worldColorTransform);
				if(!this.__cacheBitmapColorTransform.__isDefault()) {
					this.__cacheBitmapData.colorTransform(this.__cacheBitmapData.rect,this.__cacheBitmapColorTransform);
				}
			}
			if(updateTransform) {
				this.__update(false,true);
				openfl_geom_Matrix.__pool.release(matrix);
				openfl_geom_Rectangle.__pool.release(rect);
			}
		} else if(this.__cacheBitmap != null) {
			this.__cacheBitmap = null;
			this.__cacheBitmapData = null;
			this.__cacheBitmapColorTransform = null;
		}
	}
	,__updateChildren: function(transformOnly) {
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		this.__renderable = this.get_visible() && this.__scaleX != 0 && this.__scaleY != 0 && !this.__isMask && (renderParent == null || !renderParent.__isMask);
		this.__worldAlpha = this.get_alpha();
		this.__worldBlendMode = this.get_blendMode();
		if(this.__transformDirty) {
			this.__transformDirty = false;
		}
	}
	,__updateMask: function(maskGraphics) {
		if(this.__graphics != null) {
			maskGraphics.__commands.overrideMatrix(this.__worldTransform);
			maskGraphics.__commands.append(this.__graphics.__commands);
			maskGraphics.set___dirty(true);
			maskGraphics.__visible = true;
			if(maskGraphics.__bounds == null) {
				maskGraphics.__bounds = new openfl_geom_Rectangle();
			}
			this.__graphics.__getBounds(maskGraphics.__bounds,openfl_geom_Matrix.__identity);
		}
	}
	,__updateTransforms: function(overrideTransform) {
		var overrided = overrideTransform != null;
		var local = overrided ? overrideTransform : this.__transform;
		if(this.__worldTransform == null) {
			this.__worldTransform = new openfl_geom_Matrix();
		}
		if(this.__renderTransform == null) {
			this.__renderTransform = new openfl_geom_Matrix();
		}
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		var parentTransform;
		if(!overrided && this.parent != null) {
			parentTransform = this.parent.__worldTransform;
			this.__worldTransform.a = local.a * parentTransform.a + local.b * parentTransform.c;
			this.__worldTransform.b = local.a * parentTransform.b + local.b * parentTransform.d;
			this.__worldTransform.c = local.c * parentTransform.a + local.d * parentTransform.c;
			this.__worldTransform.d = local.c * parentTransform.b + local.d * parentTransform.d;
			this.__worldTransform.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
			this.__worldTransform.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
		} else {
			this.__worldTransform.copyFrom(local);
		}
		if(!overrided && renderParent != null) {
			parentTransform = renderParent.__renderTransform;
			this.__renderTransform.a = local.a * parentTransform.a + local.b * parentTransform.c;
			this.__renderTransform.b = local.a * parentTransform.b + local.b * parentTransform.d;
			this.__renderTransform.c = local.c * parentTransform.a + local.d * parentTransform.c;
			this.__renderTransform.d = local.c * parentTransform.b + local.d * parentTransform.d;
			this.__renderTransform.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
			this.__renderTransform.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
		} else {
			this.__renderTransform.copyFrom(local);
		}
		if(this.__scrollRect != null) {
			this.__renderTransform.__translateTransformed(-this.__scrollRect.x,-this.__scrollRect.y);
		}
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value > 1.0) {
			value = 1.0;
		}
		if(value != this.__alpha) {
			this.__setRenderDirty();
		}
		return this.__alpha = value;
	}
	,get_blendMode: function() {
		return this.__blendMode;
	}
	,set_blendMode: function(value) {
		if(value == null) {
			value = 10;
		}
		if(value != this.__blendMode) {
			this.__setRenderDirty();
		}
		return this.__blendMode = value;
	}
	,get_cacheAsBitmap: function() {
		return false;
	}
	,set_cacheAsBitmap: function(value) {
		this.__setRenderDirty();
		return this.__cacheAsBitmap = value;
	}
	,get_cacheAsBitmapMatrix: function() {
		return this.__cacheAsBitmapMatrix;
	}
	,set_cacheAsBitmapMatrix: function(value) {
		this.__setRenderDirty();
		return this.__cacheAsBitmapMatrix = value.clone();
	}
	,get_filters: function() {
		if(this.__filters == null) {
			return [];
		} else {
			return this.__filters.slice();
		}
	}
	,set_filters: function(value) {
		if(value != null && value.length > 0) {
			this.__filters = value;
		} else {
			this.__filters = null;
		}
		this.__setRenderDirty();
		return value;
	}
	,get_height: function() {
		var rect = openfl_geom_Rectangle.__pool.get();
		this.__getLocalBounds(rect);
		var height = rect.height;
		openfl_geom_Rectangle.__pool.release(rect);
		return height;
	}
	,set_height: function(value) {
		var rect = openfl_geom_Rectangle.__pool.get();
		var matrix = openfl_geom_Matrix.__pool.get();
		matrix.identity();
		this.__getBounds(rect,matrix);
		if(value != rect.height) {
			this.set_scaleY(value / rect.height);
		} else {
			this.set_scaleY(1);
		}
		openfl_geom_Rectangle.__pool.release(rect);
		openfl_geom_Matrix.__pool.release(matrix);
		return value;
	}
	,get_loaderInfo: function() {
		if(this.stage != null) {
			return openfl__$internal_Lib.current.__loaderInfo;
		}
		return null;
	}
	,get_mask: function() {
		return this.__mask;
	}
	,set_mask: function(value) {
		if(value != this.__mask) {
			this.__setTransformDirty();
			this.__setRenderDirty();
		}
		if(this.__mask != null) {
			this.__mask.__isMask = false;
			this.__mask.__maskTarget = null;
			this.__mask.__setTransformDirty();
			this.__mask.__setRenderDirty();
		}
		if(value != null) {
			value.__isMask = true;
			value.__maskTarget = this;
			value.__setWorldTransformInvalid();
		}
		if(this.__cacheBitmap != null && this.__cacheBitmap.get_mask() != value) {
			this.__cacheBitmap.set_mask(value);
		}
		return this.__mask = value;
	}
	,get_mouseX: function() {
		var mouseX = this.stage != null ? this.stage.__mouseX : openfl__$internal_Lib.current.stage.__mouseX;
		var mouseY = this.stage != null ? this.stage.__mouseY : openfl__$internal_Lib.current.stage.__mouseY;
		return this.__getRenderTransform().__transformInverseX(mouseX,mouseY);
	}
	,get_mouseY: function() {
		var mouseX = this.stage != null ? this.stage.__mouseX : openfl__$internal_Lib.current.stage.__mouseX;
		var mouseY = this.stage != null ? this.stage.__mouseY : openfl__$internal_Lib.current.stage.__mouseY;
		return this.__getRenderTransform().__transformInverseY(mouseX,mouseY);
	}
	,get_name: function() {
		return this.__name;
	}
	,set_name: function(value) {
		return this.__name = value;
	}
	,get_root: function() {
		if(this.stage != null) {
			return openfl__$internal_Lib.current;
		}
		return null;
	}
	,get_rotation: function() {
		return this.__rotation;
	}
	,set_rotation: function(value) {
		if(value != this.__rotation) {
			this.__rotation = value;
			var radians = this.__rotation * ($hx_exports.Math.PI / 180);
			this.__rotationSine = $hx_exports.Math.sin(radians);
			this.__rotationCosine = $hx_exports.Math.cos(radians);
			this.__transform.a = this.__rotationCosine * this.__scaleX;
			this.__transform.b = this.__rotationSine * this.__scaleX;
			this.__transform.c = -this.__rotationSine * this.__scaleY;
			this.__transform.d = this.__rotationCosine * this.__scaleY;
			this.__setTransformDirty();
		}
		return value;
	}
	,get_scaleX: function() {
		return this.__scaleX;
	}
	,set_scaleX: function(value) {
		if(value != this.__scaleX) {
			this.__scaleX = value;
			if(this.__transform.b == 0) {
				if(value != this.__transform.a) {
					this.__setTransformDirty();
				}
				this.__transform.a = value;
			} else {
				var a = this.__rotationCosine * value;
				var b = this.__rotationSine * value;
				if(this.__transform.a != a || this.__transform.b != b) {
					this.__setTransformDirty();
				}
				this.__transform.a = a;
				this.__transform.b = b;
			}
		}
		return value;
	}
	,get_scaleY: function() {
		return this.__scaleY;
	}
	,set_scaleY: function(value) {
		if(value != this.__scaleY) {
			this.__scaleY = value;
			if(this.__transform.c == 0) {
				if(value != this.__transform.d) {
					this.__setTransformDirty();
				}
				this.__transform.d = value;
			} else {
				var c = -this.__rotationSine * value;
				var d = this.__rotationCosine * value;
				if(this.__transform.d != d || this.__transform.c != c) {
					this.__setTransformDirty();
				}
				this.__transform.c = c;
				this.__transform.d = d;
			}
		}
		return value;
	}
	,get_scrollRect: function() {
		if(this.__scrollRect == null) {
			return null;
		}
		return this.__scrollRect.clone();
	}
	,set_scrollRect: function(value) {
		if(value != this.__scrollRect) {
			this.__setTransformDirty();
		}
		return this.__scrollRect = value;
	}
	,get_transform: function() {
		if(this.__objectTransform == null) {
			this.__objectTransform = new openfl_geom_Transform(this);
		}
		return this.__objectTransform;
	}
	,set_transform: function(value) {
		if(value == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_TypeError("Parameter transform must be non-null."));
		}
		if(this.__objectTransform == null) {
			this.__objectTransform = new openfl_geom_Transform(this);
		}
		this.__setTransformDirty();
		this.__objectTransform.set_matrix(value.get_matrix());
		this.__objectTransform.set_colorTransform(value.get_colorTransform().__clone());
		return this.__objectTransform;
	}
	,get_visible: function() {
		return this.__visible;
	}
	,set_visible: function(value) {
		if(value != this.__visible) {
			this.__setRenderDirty();
		}
		return this.__visible = value;
	}
	,get_width: function() {
		var rect = openfl_geom_Rectangle.__pool.get();
		this.__getLocalBounds(rect);
		var width = rect.width;
		openfl_geom_Rectangle.__pool.release(rect);
		return width;
	}
	,set_width: function(value) {
		var rect = openfl_geom_Rectangle.__pool.get();
		var matrix = openfl_geom_Matrix.__pool.get();
		matrix.identity();
		this.__getBounds(rect,matrix);
		if(value != rect.width) {
			this.set_scaleX(value / rect.width);
		} else {
			this.set_scaleX(1);
		}
		openfl_geom_Rectangle.__pool.release(rect);
		openfl_geom_Matrix.__pool.release(matrix);
		return value;
	}
	,get_x: function() {
		return this.__transform.tx;
	}
	,set_x: function(value) {
		if(value != this.__transform.tx) {
			this.__setTransformDirty();
		}
		return this.__transform.tx = value;
	}
	,get_y: function() {
		return this.__transform.ty;
	}
	,set_y: function(value) {
		if(value != this.__transform.ty) {
			this.__setTransformDirty();
		}
		return this.__transform.ty = value;
	}
	,__class__: openfl_display_DisplayObject
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_visible:"set_visible",get_visible:"get_visible",set_transform:"set_transform",get_transform:"get_transform",set_scrollRect:"set_scrollRect",get_scrollRect:"get_scrollRect",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_rotation:"set_rotation",get_rotation:"get_rotation",get_root:"get_root",set_name:"set_name",get_name:"get_name",get_mouseY:"get_mouseY",get_mouseX:"get_mouseX",set_mask:"set_mask",get_mask:"get_mask",get_loaderInfo:"get_loaderInfo",set_height:"set_height",get_height:"get_height",set_filters:"set_filters",get_filters:"get_filters",set_cacheAsBitmapMatrix:"set_cacheAsBitmapMatrix",get_cacheAsBitmapMatrix:"get_cacheAsBitmapMatrix",set_cacheAsBitmap:"set_cacheAsBitmap",get_cacheAsBitmap:"get_cacheAsBitmap",set_blendMode:"set_blendMode",get_blendMode:"get_blendMode",set_alpha:"set_alpha",get_alpha:"get_alpha"}
});
var openfl_display_AVM1Movie = $hx_exports["openfl"]["display"]["AVM1Movie"] = function() {
	openfl_display_DisplayObject.call(this);
	throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Error #2012: AVM1Movie$ class cannot be instantiated."));
};
$hxClasses["openfl.display.AVM1Movie"] = openfl_display_AVM1Movie;
openfl_display_AVM1Movie.__name__ = ["openfl","display","AVM1Movie"];
openfl_display_AVM1Movie.__super__ = openfl_display_DisplayObject;
openfl_display_AVM1Movie.prototype = $extend(openfl_display_DisplayObject.prototype,{
	addCallback: function(functionName,closure) {
	}
	,call: function(functionName,p1,p2,p3,p4,p5) {
		return null;
	}
	,__class__: openfl_display_AVM1Movie
});
var openfl_display_Application = $hx_exports["openfl"]["display"]["Application"] = function() {
	$hx_exports.lime.app.Application.call(this);
	if(openfl__$internal_Lib.application == null) {
		openfl__$internal_Lib.application = this;
	}
};
$hxClasses["openfl.display.Application"] = openfl_display_Application;
openfl_display_Application.__name__ = ["openfl","display","Application"];
openfl_display_Application.__super__ = $hx_exports.lime.app.Application;
openfl_display_Application.prototype = $extend($hx_exports.lime.app.Application.prototype,{
	create: function(config) {
		this.config = config;
		this.backend.create(config);
		if(openfl__$internal_Lib.current == null) {
			openfl__$internal_Lib.current = new openfl_display_MovieClip();
		}
		openfl__$internal_Lib.current.__loaderInfo = openfl_display_LoaderInfo.create(null);
		openfl__$internal_Lib.current.__loaderInfo.content = openfl__$internal_Lib.current;
		if(config != null) {
			if(Reflect.hasField(config,"fps")) {
				this.set_frameRate(config.fps);
			}
			if(Reflect.hasField(config,"windows")) {
				var _g = 0;
				var _g1 = config.windows;
				while(_g < _g1.length) {
					var windowConfig = _g1[_g];
					++_g;
					var $window = new openfl_display_Window(windowConfig);
					this.createWindow($window);
					break;
				}
			}
			if(this.get_preloader() == null || this.get_preloader().complete) {
				this.onPreloadComplete();
			}
		}
	}
	,__class__: openfl_display_Application
});
var openfl_display_IShaderDrawable = $hx_exports["openfl"]["display"]["IShaderDrawable"] = function() { };
$hxClasses["openfl.display.IShaderDrawable"] = openfl_display_IShaderDrawable;
openfl_display_IShaderDrawable.__name__ = ["openfl","display","IShaderDrawable"];
openfl_display_IShaderDrawable.prototype = {
	shader: null
	,__class__: openfl_display_IShaderDrawable
};
var openfl_display_Bitmap = $hx_exports["openfl"]["display"]["Bitmap"] = function(bitmapData,pixelSnapping,smoothing) {
	if(smoothing == null) {
		smoothing = false;
	}
	openfl_display_DisplayObject.call(this);
	this.__bitmapData = bitmapData;
	this.pixelSnapping = pixelSnapping;
	this.smoothing = smoothing;
	if(pixelSnapping == null) {
		this.pixelSnapping = 1;
	}
};
$hxClasses["openfl.display.Bitmap"] = openfl_display_Bitmap;
openfl_display_Bitmap.__name__ = ["openfl","display","Bitmap"];
openfl_display_Bitmap.__interfaces__ = [openfl_display_IShaderDrawable];
openfl_display_Bitmap.__super__ = openfl_display_DisplayObject;
openfl_display_Bitmap.prototype = $extend(openfl_display_DisplayObject.prototype,{
	pixelSnapping: null
	,shader: null
	,smoothing: null
	,__image: null
	,__bitmapData: null
	,__imageVersion: null
	,__enterFrame: function(deltaTime) {
		if(this.__bitmapData != null && this.__bitmapData.image != null) {
			var image = this.__bitmapData.image;
			if(this.__bitmapData.image.version != this.__imageVersion) {
				this.__setRenderDirty();
				this.__imageVersion = image.version;
			}
		}
	}
	,__getBounds: function(rect,matrix) {
		if(this.__bitmapData != null) {
			var bounds = openfl_geom_Rectangle.__pool.get();
			bounds.setTo(0,0,this.__bitmapData.width,this.__bitmapData.height);
			bounds.__transform(bounds,matrix);
			rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
			openfl_geom_Rectangle.__pool.release(bounds);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || this.__bitmapData == null) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		this.__getRenderTransform();
		var px = this.__renderTransform.__transformInverseX(x,y);
		var py = this.__renderTransform.__transformInverseY(x,y);
		if(px > 0 && py > 0 && px <= this.__bitmapData.width && py <= this.__bitmapData.height) {
			if(this.__scrollRect != null && !this.__scrollRect.contains(px,py)) {
				return false;
			}
			if(stack != null && !interactiveOnly) {
				stack.push(hitObject);
			}
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.__bitmapData == null) {
			return false;
		}
		this.__getRenderTransform();
		var px = this.__renderTransform.__transformInverseX(x,y);
		var py = this.__renderTransform.__transformInverseY(x,y);
		if(px > 0 && py > 0 && px <= this.__bitmapData.width && py <= this.__bitmapData.height) {
			return true;
		}
		return false;
	}
	,__renderCairo: function(renderSession) {
	}
	,__renderCairoMask: function(renderSession) {
		renderSession.cairo.rectangle(0,0,this.get_width(),this.get_height());
	}
	,__renderCanvas: function(renderSession) {
		this.__updateCacheBitmap(renderSession,!this.__worldColorTransform.__isDefault());
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			openfl__$internal_renderer_canvas_CanvasBitmap.render(this.__cacheBitmap,renderSession);
		} else {
			openfl__$internal_renderer_canvas_CanvasBitmap.render(this,renderSession);
		}
	}
	,__renderCanvasMask: function(renderSession) {
		renderSession.context.rect(0,0,this.get_width(),this.get_height());
	}
	,__renderDOM: function(renderSession) {
	}
	,__renderDOMClear: function(renderSession) {
	}
	,__renderGL: function(renderSession) {
		this.__updateCacheBitmap(renderSession,false);
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			openfl__$internal_renderer_opengl_GLBitmap.render(this.__cacheBitmap,renderSession);
		} else {
			openfl__$internal_renderer_opengl_GLBitmap.render(this,renderSession);
		}
	}
	,__renderGLMask: function(renderSession) {
		this.__updateCacheBitmap(renderSession,false);
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			openfl__$internal_renderer_opengl_GLBitmap.renderMask(this.__cacheBitmap,renderSession);
		} else {
			openfl__$internal_renderer_opengl_GLBitmap.renderMask(this,renderSession);
		}
	}
	,__updateCacheBitmap: function(renderSession,force) {
		if(this.get_filters() == null) {
			return;
		}
		openfl_display_DisplayObject.prototype.__updateCacheBitmap.call(this,renderSession,force);
	}
	,__updateMask: function(maskGraphics) {
		if(this.__bitmapData == null) {
			return;
		}
		maskGraphics.__commands.overrideMatrix(this.__worldTransform);
		maskGraphics.beginFill(0);
		maskGraphics.drawRect(0,0,this.__bitmapData.width,this.__bitmapData.height);
		if(maskGraphics.__bounds == null) {
			maskGraphics.__bounds = new openfl_geom_Rectangle();
		}
		this.__getBounds(maskGraphics.__bounds,openfl_geom_Matrix.__identity);
		openfl_display_DisplayObject.prototype.__updateMask.call(this,maskGraphics);
	}
	,get_bitmapData: function() {
		return this.__bitmapData;
	}
	,set_bitmapData: function(value) {
		this.__bitmapData = value;
		this.smoothing = false;
		this.__setRenderDirty();
		var tmp = this.__filters != null && this.__filters.length > 0;
		this.__imageVersion = -1;
		return this.__bitmapData;
	}
	,get_height: function() {
		if(this.__bitmapData != null) {
			return this.__bitmapData.height * $hx_exports.Math.abs(this.get_scaleY());
		}
		return 0;
	}
	,set_height: function(value) {
		if(this.__bitmapData != null) {
			if(value != this.__bitmapData.height) {
				this.__setRenderDirty();
				this.set_scaleY(value / this.__bitmapData.height);
			}
			return value;
		}
		return 0;
	}
	,get_width: function() {
		if(this.__bitmapData != null) {
			return this.__bitmapData.width * $hx_exports.Math.abs(this.__scaleX);
		}
		return 0;
	}
	,set_width: function(value) {
		if(this.__bitmapData != null) {
			if(value != this.__bitmapData.width) {
				this.__setRenderDirty();
				this.set_scaleX(value / this.__bitmapData.width);
			}
			return value;
		}
		return 0;
	}
	,__class__: openfl_display_Bitmap
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_bitmapData:"set_bitmapData",get_bitmapData:"get_bitmapData"})
});
var openfl_display_BitmapData = $hx_exports["openfl"]["display"]["BitmapData"] = function(width,height,transparent,fillColor) {
	if(fillColor == null) {
		fillColor = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	this.transparent = transparent;
	width = width == null ? 0 : width;
	height = height == null ? 0 : height;
	width = width < 0 ? 0 : width;
	height = height < 0 ? 0 : height;
	this.width = width;
	this.height = height;
	this.rect = new openfl_geom_Rectangle(0,0,width,height);
	if(width > 0 && height > 0) {
		if(transparent) {
			if((fillColor & -16777216) == 0) {
				fillColor = 0;
			}
		} else {
			fillColor = -16777216 | fillColor & 16777215;
		}
		fillColor = fillColor << 8 | fillColor >>> 24 & 255;
		this.image = new $hx_exports.lime.graphics.Image(null,0,0,width,height,fillColor);
		this.image.set_transparent(transparent);
		this.__isValid = true;
		this.readable = true;
	}
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
	this.__renderable = true;
};
$hxClasses["openfl.display.BitmapData"] = openfl_display_BitmapData;
openfl_display_BitmapData.__name__ = ["openfl","display","BitmapData"];
openfl_display_BitmapData.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_BitmapData.__textureFormat = null;
openfl_display_BitmapData.__textureInternalFormat = null;
openfl_display_BitmapData.fromBase64 = function(base64,type) {
	var bitmapData = new openfl_display_BitmapData(0,0,true,0);
	bitmapData.__fromBase64(base64,type);
	return bitmapData;
};
openfl_display_BitmapData.fromBytes = function(bytes,rawAlpha) {
	var bitmapData = new openfl_display_BitmapData(0,0,true,0);
	bitmapData.__fromBytes(bytes,rawAlpha);
	return bitmapData;
};
openfl_display_BitmapData.fromCanvas = function(canvas,transparent) {
	if(transparent == null) {
		transparent = true;
	}
	if(canvas == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(0,0,transparent,0);
	bitmapData.__fromImage($hx_exports.lime.graphics.Image.fromCanvas(canvas));
	bitmapData.image.set_transparent(transparent);
	return bitmapData;
};
openfl_display_BitmapData.fromFile = function(path) {
	var bitmapData = new openfl_display_BitmapData(0,0,true,0);
	bitmapData.__fromFile(path);
	return bitmapData;
};
openfl_display_BitmapData.fromImage = function(image,transparent) {
	if(transparent == null) {
		transparent = true;
	}
	if(image == null || image.buffer == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(0,0,transparent,0);
	bitmapData.__fromImage(image);
	bitmapData.image.set_transparent(transparent);
	return bitmapData;
};
openfl_display_BitmapData.fromTexture = function(texture) {
	if(texture == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(texture.__width,texture.__height,true,0);
	bitmapData.readable = false;
	bitmapData.__texture = texture.__textureID;
	bitmapData.__textureContext = texture.__textureContext;
	bitmapData.image = null;
	return bitmapData;
};
openfl_display_BitmapData.loadFromBase64 = function(base64,type) {
	return $hx_exports.lime.graphics.Image.loadFromBase64(base64,type).then(function(image) {
		return $hx_exports.lime.app.Future.withValue(openfl_display_BitmapData.fromImage(image));
	});
};
openfl_display_BitmapData.loadFromBytes = function(bytes,rawAlpha) {
	return $hx_exports.lime.graphics.Image.loadFromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes)).then(function(image) {
		var bitmapData = openfl_display_BitmapData.fromImage(image);
		if(rawAlpha != null) {
			bitmapData.__applyAlpha(rawAlpha);
		}
		return $hx_exports.lime.app.Future.withValue(bitmapData);
	});
};
openfl_display_BitmapData.loadFromFile = function(path) {
	return $hx_exports.lime.graphics.Image.loadFromFile(path).then(function(image) {
		return $hx_exports.lime.app.Future.withValue(openfl_display_BitmapData.fromImage(image));
	});
};
openfl_display_BitmapData.prototype = {
	height: null
	,image: null
	,readable: null
	,rect: null
	,transparent: null
	,width: null
	,__blendMode: null
	,__buffer: null
	,__bufferColorTransform: null
	,__bufferContext: null
	,__bufferAlpha: null
	,__bufferData: null
	,__framebuffer: null
	,__framebufferContext: null
	,__isMask: null
	,__isValid: null
	,__renderable: null
	,__surface: null
	,__texture: null
	,__textureContext: null
	,__textureVersion: null
	,__transform: null
	,__worldAlpha: null
	,__worldColorTransform: null
	,__worldTransform: null
	,applyFilter: function(sourceBitmapData,sourceRect,destPoint,filter) {
		if(!this.readable || sourceBitmapData == null || !sourceBitmapData.readable) {
			return;
		}
		filter.__applyFilter(this,sourceBitmapData,sourceRect,destPoint);
	}
	,clone: function() {
		if(!this.__isValid) {
			return new openfl_display_BitmapData(this.width,this.height,this.transparent,0);
		} else if(!this.readable && this.image == null) {
			var bitmapData = new openfl_display_BitmapData(0,0,this.transparent,0);
			bitmapData.width = this.width;
			bitmapData.height = this.height;
			bitmapData.rect.copyFrom(this.rect);
			bitmapData.__framebuffer = this.__framebuffer;
			bitmapData.__framebufferContext = this.__framebufferContext;
			bitmapData.__texture = this.__texture;
			bitmapData.__textureContext = this.__textureContext;
			bitmapData.__isValid = true;
			return bitmapData;
		} else {
			return openfl_display_BitmapData.fromImage(this.image.clone(),this.transparent);
		}
	}
	,colorTransform: function(rect,colorTransform) {
		if(!this.readable) {
			return;
		}
		this.image.colorTransform(rect.__toLimeRectangle(),colorTransform.__toLimeColorMatrix());
	}
	,compare: function(otherBitmapData) {
		if(otherBitmapData == this) {
			return 0;
		} else if(otherBitmapData == null) {
			return -1;
		} else if(this.readable == false || otherBitmapData.readable == false) {
			return -2;
		} else if(this.width != otherBitmapData.width) {
			return -3;
		} else if(this.height != otherBitmapData.height) {
			return -4;
		}
		if(this.image != null && otherBitmapData.image != null && this.image.get_format() == otherBitmapData.image.get_format()) {
			var bytes = this.image.get_data();
			var otherBytes = otherBitmapData.image.get_data();
			var equal = true;
			var _g1 = 0;
			var _g = bytes.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(bytes[i] != otherBytes[i]) {
					equal = false;
					break;
				}
			}
			if(equal) {
				return 0;
			}
		}
		var bitmapData = null;
		var foundDifference;
		var pixel;
		var otherPixel;
		var comparePixel;
		var r;
		var g;
		var b;
		var a;
		var _g11 = 0;
		var _g2 = this.height;
		while(_g11 < _g2) {
			var y = _g11++;
			var _g3 = 0;
			var _g21 = this.width;
			while(_g3 < _g21) {
				var x = _g3++;
				foundDifference = false;
				pixel = this.getPixel32(x,y);
				otherPixel = otherBitmapData.getPixel32(x,y);
				comparePixel = 0;
				if(pixel != otherPixel) {
					r = (pixel >>> 16 & 255) - (otherPixel >>> 16 & 255);
					g = (pixel >>> 8 & 255) - (otherPixel >>> 8 & 255);
					b = (pixel & 255) - (otherPixel & 255);
					if(r < 0) {
						r *= -1;
					}
					if(g < 0) {
						g *= -1;
					}
					if(b < 0) {
						b *= -1;
					}
					if(r == 0 && g == 0 && b == 0) {
						a = (pixel >>> 24 & 255) - (otherPixel >>> 24 & 255);
						if(a != 0) {
							comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | 16711680 | (comparePixel >>> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
							comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | 65280 | comparePixel & 255 & 255;
							comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | 255;
							comparePixel = (a & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
							foundDifference = true;
						}
					} else {
						comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (r & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
						comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (g & 255) << 8 | comparePixel & 255 & 255;
						comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | b & 255;
						comparePixel = -16777216 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
						foundDifference = true;
					}
				}
				if(foundDifference) {
					if(bitmapData == null) {
						bitmapData = new openfl_display_BitmapData(this.width,this.height,this.transparent || otherBitmapData.transparent,0);
					}
					bitmapData.setPixel32(x,y,comparePixel);
				}
			}
		}
		if(bitmapData == null) {
			return 0;
		}
		return bitmapData;
	}
	,copyChannel: function(sourceBitmapData,sourceRect,destPoint,sourceChannel,destChannel) {
		if(!this.readable) {
			return;
		}
		var sourceChannel1;
		switch(sourceChannel) {
		case 1:
			sourceChannel1 = lime_graphics_ImageChannel.RED;
			break;
		case 2:
			sourceChannel1 = lime_graphics_ImageChannel.GREEN;
			break;
		case 4:
			sourceChannel1 = lime_graphics_ImageChannel.BLUE;
			break;
		case 8:
			sourceChannel1 = lime_graphics_ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		var destChannel1;
		switch(destChannel) {
		case 1:
			destChannel1 = lime_graphics_ImageChannel.RED;
			break;
		case 2:
			destChannel1 = lime_graphics_ImageChannel.GREEN;
			break;
		case 4:
			destChannel1 = lime_graphics_ImageChannel.BLUE;
			break;
		case 8:
			destChannel1 = lime_graphics_ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		this.image.copyChannel(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),sourceChannel1,destChannel1);
	}
	,copyPixels: function(sourceBitmapData,sourceRect,destPoint,alphaBitmapData,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) {
			mergeAlpha = false;
		}
		if(!this.readable || sourceBitmapData == null) {
			return;
		}
		if(alphaPoint != null) {
			openfl_display_BitmapData.__tempVector.x = alphaPoint.x;
			openfl_display_BitmapData.__tempVector.y = alphaPoint.y;
		}
		this.image.copyPixels(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),alphaBitmapData != null ? alphaBitmapData.image : null,alphaPoint != null ? openfl_display_BitmapData.__tempVector : null,mergeAlpha);
	}
	,dispose: function() {
		this.image = null;
		this.width = 0;
		this.height = 0;
		this.rect = null;
		this.__isValid = false;
		this.readable = false;
		this.__surface = null;
		this.__buffer = null;
		this.__framebuffer = null;
		this.__framebufferContext = null;
		this.__texture = null;
		this.__textureContext = null;
	}
	,disposeImage: function() {
		this.readable = false;
	}
	,draw: function(source,matrix,colorTransform,blendMode,clipRect,smoothing) {
		if(smoothing == null) {
			smoothing = false;
		}
		if(matrix == null) {
			matrix = new openfl_geom_Matrix();
			if(source.__transform != null) {
				matrix.copyFrom(source.__transform);
				matrix.tx = 0;
				matrix.ty = 0;
			}
		}
		if(!this.readable) {
			if($hx_exports.lime.graphics.opengl.GL.context != null) {
				var gl = $hx_exports.lime.graphics.opengl.GL.context;
				gl.bindFramebuffer(gl.FRAMEBUFFER,this.__getFramebuffer(gl));
				gl.viewport(0,0,this.width,this.height);
				var renderer = new openfl__$internal_renderer_opengl_GLRenderer(null,gl,this);
				var renderSession = renderer.renderSession;
				renderSession.clearRenderDirty = false;
				renderSession.shaderManager = (js_Boot.__cast(null , openfl__$internal_renderer_opengl_GLRenderer)).renderSession.shaderManager;
				var matrixCache = source.__worldTransform;
				source.__updateTransforms(matrix);
				source.__updateChildren(false);
				source.__renderGL(renderer.renderSession);
				source.__updateTransforms(matrixCache);
				source.__updateChildren(true);
				gl.bindFramebuffer(gl.FRAMEBUFFER,null);
			}
		} else {
			if(colorTransform != null) {
				var bounds = openfl_geom_Rectangle.__pool.get();
				var boundsMatrix = openfl_geom_Matrix.__pool.get();
				source.__getBounds(bounds,boundsMatrix);
				var width = $hx_exports.Math.ceil(bounds.width);
				var height = $hx_exports.Math.ceil(bounds.height);
				var copy = new openfl_display_BitmapData(width,height,true,0);
				copy.draw(source);
				copy.colorTransform(copy.rect,colorTransform);
				source = copy;
				openfl_geom_Rectangle.__pool.release(bounds);
				openfl_geom_Matrix.__pool.release(boundsMatrix);
			}
			$hx_exports.lime.graphics.utils.ImageCanvasUtil.convertToCanvas(this.image);
			var buffer = this.image.buffer;
			var renderSession1 = new openfl__$internal_renderer_RenderSession();
			renderSession1.clearRenderDirty = false;
			renderSession1.context = buffer.__srcContext;
			renderSession1.allowSmoothing = smoothing;
			renderSession1.maskManager = new openfl__$internal_renderer_canvas_CanvasMaskManager(renderSession1);
			renderSession1.blendModeManager = new openfl__$internal_renderer_canvas_CanvasBlendModeManager(renderSession1);
			renderSession1.blendModeManager.setBlendMode(blendMode);
			if(!smoothing) {
				buffer.__srcContext.mozImageSmoothingEnabled = false;
				buffer.__srcContext.msImageSmoothingEnabled = false;
				buffer.__srcContext.imageSmoothingEnabled = false;
			}
			if(clipRect != null) {
				renderSession1.maskManager.pushRect(clipRect,new openfl_geom_Matrix());
			}
			var matrixCache1 = source.__worldTransform;
			source.__updateTransforms(matrix);
			source.__updateChildren(false);
			source.__renderCanvas(renderSession1);
			source.__updateTransforms(matrixCache1);
			source.__updateChildren(true);
			if(!smoothing) {
				buffer.__srcContext.mozImageSmoothingEnabled = true;
				buffer.__srcContext.msImageSmoothingEnabled = true;
				buffer.__srcContext.imageSmoothingEnabled = true;
			}
			if(clipRect != null) {
				renderSession1.maskManager.popRect();
			}
			buffer.__srcContext.setTransform(1,0,0,1,0,0);
			buffer.__srcImageData = null;
			buffer.data = null;
			this.image.dirty = true;
			this.image.version++;
		}
	}
	,drawWithQuality: function(source,matrix,colorTransform,blendMode,clipRect,smoothing,quality) {
		if(smoothing == null) {
			smoothing = false;
		}
		this.draw(source,matrix,colorTransform,blendMode,clipRect,quality != 2 && smoothing);
	}
	,encode: function(rect,compressor,byteArray) {
		if(!this.readable || rect == null) {
			byteArray = null;
			return byteArray;
		}
		if(byteArray == null) {
			var this1 = new openfl_utils_ByteArrayData(0);
			byteArray = this1;
		}
		var image = this.image;
		if(!rect.equals(this.rect)) {
			var matrix = openfl_geom_Matrix.__pool.get();
			matrix.tx = $hx_exports.Math.round(-rect.x);
			matrix.ty = $hx_exports.Math.round(-rect.y);
			var bitmapData = new openfl_display_BitmapData($hx_exports.Math.ceil(rect.width),$hx_exports.Math.ceil(rect.height),true,0);
			bitmapData.draw(this,matrix);
			image = bitmapData.image;
			openfl_geom_Matrix.__pool.release(matrix);
		}
		if(Std.is(compressor,openfl_display_PNGEncoderOptions)) {
			byteArray.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(image.encode("png")));
			return byteArray;
		} else if(Std.is(compressor,openfl_display_JPEGEncoderOptions)) {
			byteArray.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(image.encode("jpg",(js_Boot.__cast(compressor , openfl_display_JPEGEncoderOptions)).quality)));
			return byteArray;
		}
		byteArray = null;
		return byteArray;
	}
	,fillRect: function(rect,color) {
		if(rect == null) {
			return;
		}
		if(this.transparent && (color & -16777216) == 0) {
			color = 0;
		}
		if(this.readable) {
			this.image.fillRect(rect.__toLimeRectangle(),color,1);
		} else if(this.__framebuffer != null) {
			var gl = $hx_exports.lime.graphics.opengl.GL.context;
			var color1 = color;
			var useScissor = !this.rect.equals(rect);
			gl.bindFramebuffer(gl.FRAMEBUFFER,this.__framebuffer);
			if(useScissor) {
				gl.enable(gl.SCISSOR_TEST);
				gl.scissor($hx_exports.Math.round(rect.x),$hx_exports.Math.round(rect.y),$hx_exports.Math.round(rect.width),$hx_exports.Math.round(rect.height));
			}
			gl.clearColor((color1 >>> 16 & 255) / 255,(color1 >>> 8 & 255) / 255,(color1 & 255) / 255,(color1 >>> 24 & 255) / 255);
			gl.clear(gl.COLOR_BUFFER_BIT);
			if(useScissor) {
				gl.disable(gl.SCISSOR_TEST);
			}
			gl.bindFramebuffer(gl.FRAMEBUFFER,null);
		}
	}
	,floodFill: function(x,y,color) {
		if(!this.readable) {
			return;
		}
		this.image.floodFill(x,y,color,1);
	}
	,generateFilterRect: function(sourceRect,filter) {
		return sourceRect.clone();
	}
	,getBuffer: function(gl,alpha,colorTransform) {
		if(this.__buffer == null || this.__bufferContext != gl) {
			var uvWidth = 1;
			var uvHeight = 1;
			var this1 = new Float32Array(104);
			this.__bufferData = this1;
			this.__bufferData[0] = this.width;
			this.__bufferData[1] = this.height;
			this.__bufferData[3] = uvWidth;
			this.__bufferData[4] = uvHeight;
			this.__bufferData[27] = this.height;
			this.__bufferData[30] = uvHeight;
			this.__bufferData[52] = this.width;
			this.__bufferData[55] = uvWidth;
			var _g = 0;
			while(_g < 4) {
				var i = _g++;
				this.__bufferData[26 * i + 5] = alpha;
				if(colorTransform != null) {
					this.__bufferData[26 * i + 6] = colorTransform.redMultiplier;
					this.__bufferData[26 * i + 11] = colorTransform.greenMultiplier;
					this.__bufferData[26 * i + 16] = colorTransform.blueMultiplier;
					this.__bufferData[26 * i + 21] = colorTransform.alphaMultiplier;
					this.__bufferData[26 * i + 22] = colorTransform.redOffset / 255;
					this.__bufferData[26 * i + 23] = colorTransform.greenOffset / 255;
					this.__bufferData[26 * i + 24] = colorTransform.blueOffset / 255;
					this.__bufferData[26 * i + 25] = colorTransform.alphaOffset / 255;
				} else {
					this.__bufferData[26 * i + 6] = 1;
					this.__bufferData[26 * i + 11] = 1;
					this.__bufferData[26 * i + 16] = 1;
					this.__bufferData[26 * i + 21] = 1;
				}
			}
			this.__bufferAlpha = alpha;
			this.__bufferColorTransform = colorTransform != null ? colorTransform.__clone() : null;
			this.__bufferContext = gl;
			this.__buffer = gl.createBuffer();
			gl.bindBuffer(gl.ARRAY_BUFFER,this.__buffer);
			$hx_$exports_lime_graphics_opengl_WebGLContext.bufferData(gl,gl.ARRAY_BUFFER,this.__bufferData,gl.STATIC_DRAW);
		} else {
			if(this.__bufferAlpha != alpha) {
				var _g1 = 0;
				while(_g1 < 4) {
					var i1 = _g1++;
					this.__bufferData[26 * i1 + 5] = alpha;
				}
				this.__bufferAlpha = alpha;
			}
			if(this.__bufferColorTransform == null && colorTransform != null || this.__bufferColorTransform != null && !this.__bufferColorTransform.__equals(colorTransform)) {
				if(colorTransform != null) {
					if(this.__bufferColorTransform == null) {
						this.__bufferColorTransform = colorTransform.__clone();
					} else {
						this.__bufferColorTransform.__copyFrom(colorTransform);
					}
					var _g2 = 0;
					while(_g2 < 4) {
						var i2 = _g2++;
						this.__bufferData[26 * i2 + 6] = colorTransform.redMultiplier;
						this.__bufferData[26 * i2 + 11] = colorTransform.greenMultiplier;
						this.__bufferData[26 * i2 + 16] = colorTransform.blueMultiplier;
						this.__bufferData[26 * i2 + 21] = colorTransform.alphaMultiplier;
						this.__bufferData[26 * i2 + 22] = colorTransform.redOffset / 255;
						this.__bufferData[26 * i2 + 23] = colorTransform.greenOffset / 255;
						this.__bufferData[26 * i2 + 24] = colorTransform.blueOffset / 255;
						this.__bufferData[26 * i2 + 25] = colorTransform.alphaOffset / 255;
					}
				} else {
					var _g3 = 0;
					while(_g3 < 4) {
						var i3 = _g3++;
						this.__bufferData[26 * i3 + 6] = 1;
						this.__bufferData[26 * i3 + 11] = 1;
						this.__bufferData[26 * i3 + 16] = 1;
						this.__bufferData[26 * i3 + 21] = 1;
						this.__bufferData[26 * i3 + 22] = 0;
						this.__bufferData[26 * i3 + 23] = 0;
						this.__bufferData[26 * i3 + 24] = 0;
						this.__bufferData[26 * i3 + 25] = 0;
					}
				}
			}
			gl.bindBuffer(gl.ARRAY_BUFFER,this.__buffer);
			gl.bufferData(gl.ARRAY_BUFFER,this.__bufferData.byteLength,$hx_$exports_lime_utils_DataPointer.fromArrayBufferView(this.__bufferData),gl.STATIC_DRAW);
		}
		return this.__buffer;
	}
	,getColorBoundsRect: function(mask,color,findColor) {
		if(findColor == null) {
			findColor = true;
		}
		if(!this.readable) {
			return new openfl_geom_Rectangle(0,0,this.width,this.height);
		}
		if(!this.transparent || (mask >> 24 & 255) > 0) {
			var color1 = color;
			if((color1 >>> 24 & 255) == 0) {
				color1 = 0;
			}
		}
		var rect = this.image.getColorBoundsRect(mask,color,findColor,1);
		return new openfl_geom_Rectangle(rect.x,rect.y,rect.width,rect.height);
	}
	,getPixel: function(x,y) {
		if(!this.readable) {
			return 0;
		}
		return this.image.getPixel(x,y,1);
	}
	,getPixel32: function(x,y) {
		if(!this.readable) {
			return 0;
		}
		return this.image.getPixel32(x,y,1);
	}
	,getPixels: function(rect) {
		if(!this.readable) {
			return null;
		}
		if(rect == null) {
			rect = this.rect;
		}
		var byteArray = openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(this.image.getPixels(rect.__toLimeRectangle(),1));
		byteArray.set_endian(0);
		return byteArray;
	}
	,getSurface: function() {
		if(!this.readable) {
			return null;
		}
		if(this.__surface == null) {
			this.__surface = $hx_$exports_lime_graphics_cairo_CairoImageSurface.fromImage(this.image);
		}
		return this.__surface;
	}
	,getTexture: function(gl) {
		if(!this.__isValid) {
			return null;
		}
		if(this.__texture == null || this.__textureContext != gl) {
			this.__textureContext = gl;
			this.__texture = gl.createTexture();
			gl.bindTexture(gl.TEXTURE_2D,this.__texture);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);
			this.__textureVersion = -1;
		}
		$hx_exports.lime.graphics.utils.ImageCanvasUtil.sync(this.image,false);
		if(this.image != null && this.image.version != this.__textureVersion) {
			var internalFormat;
			var format;
			if(this.__surface != null) {
				$hx_$exports_lime_graphics_cairo_CairoSurface.flush(this.__surface);
			}
			if(this.image.buffer.bitsPerPixel == 1) {
				internalFormat = gl.ALPHA;
				format = gl.ALPHA;
			} else {
				if(openfl_display_BitmapData.__supportsBGRA == null) {
					openfl_display_BitmapData.__textureInternalFormat = gl.RGBA;
					var bgraExtension = null;
					if(bgraExtension != null) {
						openfl_display_BitmapData.__supportsBGRA = true;
						openfl_display_BitmapData.__textureFormat = bgraExtension.BGRA_EXT;
						if(gl.type == lime_graphics_opengl_GLContextType.GLES) {
							openfl_display_BitmapData.__textureInternalFormat = bgraExtension.BGRA_EXT;
						}
					} else {
						openfl_display_BitmapData.__supportsBGRA = false;
						openfl_display_BitmapData.__textureFormat = gl.RGBA;
					}
				}
				internalFormat = openfl_display_BitmapData.__textureInternalFormat;
				format = openfl_display_BitmapData.__textureFormat;
			}
			gl.bindTexture(gl.TEXTURE_2D,this.__texture);
			var textureImage = this.image;
			if(textureImage.type != lime_graphics_ImageType.DATA && !textureImage.get_premultiplied()) {
				gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,1);
			} else if(!textureImage.get_premultiplied() && textureImage.get_transparent()) {
				gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,1);
			}
			if(!openfl_display_BitmapData.__supportsBGRA && textureImage.get_format() != 0) {
				textureImage = textureImage.clone();
				textureImage.set_format(0);
			}
			if(textureImage.type == lime_graphics_ImageType.DATA) {
				gl.texImage2D(gl.TEXTURE_2D,0,internalFormat,textureImage.buffer.width,textureImage.buffer.height,0,format,gl.UNSIGNED_BYTE,$hx_$exports_lime_utils_DataPointer.fromArrayBufferView(textureImage.get_data()));
			} else {
				$hx_$exports_lime_graphics_opengl_WebGLContext.texImage2D(gl,gl.TEXTURE_2D,0,internalFormat,format,gl.UNSIGNED_BYTE,textureImage.get_src());
			}
			gl.bindTexture(gl.TEXTURE_2D,null);
			this.__textureVersion = this.image.version;
		}
		if(!this.readable && this.image != null) {
			this.__surface = null;
			this.image = null;
		}
		return this.__texture;
	}
	,getVector: function(rect) {
		var pixels = this.getPixels(rect);
		var length = Std.int(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(pixels) / 4);
		var result = openfl__$Vector_Vector_$Impl_$.toIntVector(null,length,true);
		var _g1 = 0;
		var _g = length;
		while(_g1 < _g) {
			var i = _g1++;
			var value = pixels.readUnsignedInt();
			result.data.set(i,value);
		}
		return result;
	}
	,histogram: function(hRect) {
		var rect = hRect != null ? hRect : new openfl_geom_Rectangle(0,0,this.width,this.height);
		var pixels = this.getPixels(rect);
		var _g = [];
		var _g1 = 0;
		while(_g1 < 4) {
			var i = _g1++;
			var _g2 = [];
			var _g3 = 0;
			while(_g3 < 256) {
				var j = _g3++;
				_g2.push(0);
			}
			_g.push(_g2);
		}
		var result = _g;
		var _g21 = 0;
		var _g11 = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(pixels);
		while(_g21 < _g11) {
			var i1 = _g21++;
			++result[i1 % 4][pixels.readUnsignedByte()];
		}
		return result;
	}
	,hitTest: function(firstPoint,firstAlphaThreshold,secondObject,secondBitmapDataPoint,secondAlphaThreshold) {
		if(secondAlphaThreshold == null) {
			secondAlphaThreshold = 1;
		}
		if(!this.readable) {
			return false;
		}
		if(Std.is(secondObject,openfl_display_Bitmap)) {
			secondObject = (js_Boot.__cast(secondObject , openfl_display_Bitmap)).__bitmapData;
		}
		if(Std.is(secondObject,openfl_geom_Point)) {
			var secondPoint = secondObject;
			var x = Std.int(secondPoint.x - firstPoint.x);
			var y = Std.int(secondPoint.y - firstPoint.y);
			if(this.rect.contains(x,y)) {
				var pixel = this.getPixel32(x,y);
				if((pixel >> 24 & 255) > firstAlphaThreshold) {
					return true;
				}
			}
		} else if(Std.is(secondObject,openfl_display_BitmapData)) {
			var secondBitmapData = secondObject;
			var x1;
			var y1;
			if(secondBitmapDataPoint == null) {
				x1 = 0;
				y1 = 0;
			} else {
				x1 = Std.int(secondBitmapDataPoint.x - firstPoint.x);
				y1 = Std.int(secondBitmapDataPoint.y - firstPoint.y);
			}
			if(this.rect.contains(x1,y1)) {
				var hitRect = openfl_geom_Rectangle.__pool.get();
				hitRect.setTo(x1,y1,$hx_exports.Math.min(secondBitmapData.width,this.width - x1),$hx_exports.Math.min(secondBitmapData.height,this.height - y1));
				var pixels = this.getPixels(hitRect);
				hitRect.offset(-x1,-y1);
				var testPixels = secondBitmapData.getPixels(hitRect);
				var length = Std.int(hitRect.width * hitRect.height);
				var pixel1;
				var testPixel;
				openfl_geom_Rectangle.__pool.release(hitRect);
				var _g1 = 0;
				var _g = length;
				while(_g1 < _g) {
					var i = _g1++;
					pixel1 = pixels.readUnsignedInt();
					testPixel = testPixels.readUnsignedInt();
					if((pixel1 >> 24 & 255) > firstAlphaThreshold && (testPixel >> 24 & 255) > secondAlphaThreshold) {
						return true;
					}
				}
				return false;
			}
		} else if(Std.is(secondObject,openfl_geom_Rectangle)) {
			var secondRectangle = openfl_geom_Rectangle.__pool.get();
			secondRectangle.copyFrom(secondObject);
			secondRectangle.offset(-firstPoint.x,-firstPoint.y);
			secondRectangle.__contract(0,0,this.width,this.height);
			if(secondRectangle.width > 0 && secondRectangle.height > 0) {
				var pixels1 = this.getPixels(secondRectangle);
				var length1 = Std.int(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(pixels1) / 4);
				var pixel2;
				var _g11 = 0;
				var _g2 = length1;
				while(_g11 < _g2) {
					var i1 = _g11++;
					pixel2 = pixels1.readUnsignedInt();
					if((pixel2 >> 24 & 255) > firstAlphaThreshold) {
						openfl_geom_Rectangle.__pool.release(secondRectangle);
						return true;
					}
				}
			}
			openfl_geom_Rectangle.__pool.release(secondRectangle);
		}
		return false;
	}
	,lock: function() {
	}
	,merge: function(sourceBitmapData,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(!this.readable || sourceBitmapData == null || !sourceBitmapData.readable || sourceRect == null || destPoint == null) {
			return;
		}
		this.image.merge(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
	}
	,noise: function(randomSeed,low,high,channelOptions,grayScale) {
		if(grayScale == null) {
			grayScale = false;
		}
		if(channelOptions == null) {
			channelOptions = 7;
		}
		if(high == null) {
			high = 255;
		}
		if(low == null) {
			low = 0;
		}
		if(!this.readable) {
			return;
		}
		var func = function() {
			randomSeed = randomSeed * 1103515245 + 12345;
			return Std.int($hx_exports.Math.abs(randomSeed / 65536)) % 32768;
		};
		var rand = func;
		rand();
		var range = high - low;
		var this1 = new openfl_utils_ByteArrayData(0);
		var data = this1;
		var redChannel = (channelOptions & 1) == 1;
		var greenChannel = (channelOptions & 2) >> 1 == 1;
		var blueChannel = (channelOptions & 4) >> 2 == 1;
		var alphaChannel = (channelOptions & 8) >> 3 == 1;
		var _g1 = 0;
		var _g = this.height;
		while(_g1 < _g) {
			var y = _g1++;
			var _g3 = 0;
			var _g2 = this.width;
			while(_g3 < _g2) {
				var x = _g3++;
				var red = 0;
				var blue = 0;
				var green = 0;
				var alpha = 255;
				if(grayScale) {
					blue = low + rand() % range;
					green = blue;
					red = green;
					alpha = 255;
				} else {
					if(redChannel) {
						red = low + rand() % range;
					}
					if(greenChannel) {
						green = low + rand() % range;
					}
					if(blueChannel) {
						blue = low + rand() % range;
					}
					if(alphaChannel) {
						alpha = low + rand() % range;
					}
				}
				var rgb = alpha;
				rgb = (rgb << 8) + red;
				rgb = (rgb << 8) + green;
				rgb = (rgb << 8) + blue;
				this.setPixel32(x,y,rgb);
			}
		}
	}
	,paletteMap: function(sourceBitmapData,sourceRect,destPoint,redArray,greenArray,blueArray,alphaArray) {
		var sw = Std.int(sourceRect.width);
		var sh = Std.int(sourceRect.height);
		var pixels = sourceBitmapData.getPixels(sourceRect);
		var pixelValue;
		var r;
		var g;
		var b;
		var a;
		var color;
		var _g1 = 0;
		var _g = sh * sw;
		while(_g1 < _g) {
			var i = _g1++;
			pixelValue = pixels.readUnsignedInt();
			a = alphaArray == null ? pixelValue & -16777216 : alphaArray[pixelValue >> 24 & 255];
			r = redArray == null ? pixelValue & 16711680 : redArray[pixelValue >> 16 & 255];
			g = greenArray == null ? pixelValue & 65280 : greenArray[pixelValue >> 8 & 255];
			b = blueArray == null ? pixelValue & 255 : blueArray[pixelValue & 255];
			color = a + r + g + b;
			pixels.position = i * 4;
			pixels.writeUnsignedInt(color);
		}
		pixels.position = 0;
		var destRect = openfl_geom_Rectangle.__pool.get();
		destRect.setTo(destPoint.x,destPoint.y,sw,sh);
		this.setPixels(destRect,pixels);
		openfl_geom_Rectangle.__pool.release(destRect);
	}
	,perlinNoise: function(baseX,baseY,numOctaves,randomSeed,stitch,fractalNoise,channelOptions,grayScale,offsets) {
		if(grayScale == null) {
			grayScale = false;
		}
		if(channelOptions == null) {
			channelOptions = 7;
		}
		if(!this.readable) {
			return;
		}
		var noise = new openfl__$internal_utils_PerlinNoise(randomSeed,numOctaves,0.01);
		noise.fill(this,baseX,baseY,0);
	}
	,scroll: function(x,y) {
		if(!this.readable) {
			return;
		}
		this.image.scroll(x,y);
	}
	,setPixel: function(x,y,color) {
		if(!this.readable) {
			return;
		}
		this.image.setPixel(x,y,color,1);
	}
	,setPixel32: function(x,y,color) {
		if(!this.readable) {
			return;
		}
		this.image.setPixel32(x,y,color,1);
	}
	,setPixels: function(rect,byteArray) {
		if(!this.readable || rect == null) {
			return;
		}
		var length = rect.width * rect.height * 4;
		if(_$UInt_UInt_$Impl_$.toFloat(byteArray.get_bytesAvailable()) < length) {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("End of file was encountered.",2030));
		}
		this.image.setPixels(rect.__toLimeRectangle(),openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytePointer(byteArray),1,openfl_utils__$Endian_Endian_$Impl_$.toLimeEndian(byteArray.get_endian()));
	}
	,setVector: function(rect,inputVector) {
		var this1 = new openfl_utils_ByteArrayData(0);
		var byteArray = this1;
		openfl_utils__$ByteArray_ByteArray_$Impl_$.set_length(byteArray,inputVector.data.get_length() * 4);
		var _g = 0;
		while(_g < inputVector.data.get_length()) {
			var color = inputVector.data.get(_g);
			++_g;
			byteArray.writeUnsignedInt(color);
		}
		byteArray.position = 0;
		this.setPixels(rect,byteArray);
	}
	,threshold: function(sourceBitmapData,sourceRect,destPoint,operation,threshold,color,mask,copySource) {
		if(copySource == null) {
			copySource = false;
		}
		if(mask == null) {
			mask = -1;
		}
		if(color == null) {
			color = 0;
		}
		if(sourceBitmapData == null || sourceRect == null || destPoint == null || sourceRect.x > sourceBitmapData.width || sourceRect.y > sourceBitmapData.height || destPoint.x > this.width || destPoint.y > this.height) {
			return 0;
		}
		return this.image.threshold(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),operation,threshold,color,mask,copySource,1);
	}
	,unlock: function(changeRect) {
	}
	,__applyAlpha: function(alpha) {
		$hx_exports.lime.graphics.utils.ImageCanvasUtil.convertToCanvas(this.image);
		$hx_exports.lime.graphics.utils.ImageCanvasUtil.createImageData(this.image);
		var data = this.image.buffer.data;
		var _g1 = 0;
		var _g = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(alpha);
		while(_g1 < _g) {
			var i = _g1++;
			data[i * 4 + 3] = alpha.readUnsignedByte();
		}
		this.image.version++;
	}
	,__draw: function(source,matrix,colorTransform,blendMode,clipRect,smoothing) {
		if(smoothing == null) {
			smoothing = false;
		}
		if(matrix == null) {
			matrix = new openfl_geom_Matrix();
			if(source.__transform != null) {
				matrix.copyFrom(source.__transform);
				matrix.tx = 0;
				matrix.ty = 0;
			}
		}
		if(!this.readable) {
			if($hx_exports.lime.graphics.opengl.GL.context != null) {
				var gl = $hx_exports.lime.graphics.opengl.GL.context;
				gl.bindFramebuffer(gl.FRAMEBUFFER,this.__getFramebuffer(gl));
				gl.viewport(0,0,this.width,this.height);
				var renderer = new openfl__$internal_renderer_opengl_GLRenderer(null,gl,this);
				var renderSession = renderer.renderSession;
				renderSession.clearRenderDirty = true;
				renderSession.shaderManager = (js_Boot.__cast(null , openfl__$internal_renderer_opengl_GLRenderer)).renderSession.shaderManager;
				var matrixCache = source.__worldTransform;
				source.__updateTransforms(matrix);
				source.__updateChildren(false);
				source.__renderGL(renderer.renderSession);
				source.__updateTransforms(matrixCache);
				source.__updateChildren(true);
				gl.bindFramebuffer(gl.FRAMEBUFFER,null);
			}
		} else {
			if(colorTransform != null) {
				var bounds = openfl_geom_Rectangle.__pool.get();
				var boundsMatrix = openfl_geom_Matrix.__pool.get();
				source.__getBounds(bounds,boundsMatrix);
				var width = $hx_exports.Math.ceil(bounds.width);
				var height = $hx_exports.Math.ceil(bounds.height);
				var copy = new openfl_display_BitmapData(width,height,true,0);
				copy.draw(source);
				copy.colorTransform(copy.rect,colorTransform);
				source = copy;
				openfl_geom_Rectangle.__pool.release(bounds);
				openfl_geom_Matrix.__pool.release(boundsMatrix);
			}
			$hx_exports.lime.graphics.utils.ImageCanvasUtil.convertToCanvas(this.image);
			var buffer = this.image.buffer;
			var renderSession1 = new openfl__$internal_renderer_RenderSession();
			renderSession1.clearRenderDirty = true;
			renderSession1.context = buffer.__srcContext;
			renderSession1.allowSmoothing = smoothing;
			renderSession1.maskManager = new openfl__$internal_renderer_canvas_CanvasMaskManager(renderSession1);
			renderSession1.blendModeManager = new openfl__$internal_renderer_canvas_CanvasBlendModeManager(renderSession1);
			if(!smoothing) {
				buffer.__srcContext.mozImageSmoothingEnabled = false;
				buffer.__srcContext.msImageSmoothingEnabled = false;
				buffer.__srcContext.imageSmoothingEnabled = false;
			}
			if(clipRect != null) {
				renderSession1.maskManager.pushRect(clipRect,new openfl_geom_Matrix());
			}
			var matrixCache1 = source.__worldTransform;
			source.__updateTransforms(matrix);
			source.__updateChildren(false);
			var cacheRenderable = source.__renderable;
			if(source.__isMask) {
				source.__renderable = true;
			}
			var cacheAlpha = source.__worldAlpha;
			source.__worldAlpha = 1;
			source.__renderCanvas(renderSession1);
			source.__renderable = cacheRenderable;
			source.__worldAlpha = cacheAlpha;
			source.__updateTransforms(matrixCache1);
			source.__updateChildren(true);
			if(!smoothing) {
				buffer.__srcContext.mozImageSmoothingEnabled = true;
				buffer.__srcContext.msImageSmoothingEnabled = true;
				buffer.__srcContext.imageSmoothingEnabled = true;
			}
			if(clipRect != null) {
				renderSession1.maskManager.popRect();
			}
			buffer.__srcContext.setTransform(1,0,0,1,0,0);
			buffer.__srcImageData = null;
			buffer.data = null;
			this.image.dirty = true;
			this.image.version++;
		}
	}
	,__fromBase64: function(base64,type) {
		var image = $hx_exports.lime.graphics.Image.fromBase64(base64,type);
		this.__fromImage(image);
	}
	,__fromBytes: function(bytes,rawAlpha) {
		var image = $hx_exports.lime.graphics.Image.fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes));
		this.__fromImage(image);
		if(rawAlpha != null) {
			this.__applyAlpha(rawAlpha);
		}
	}
	,__fromFile: function(path) {
		var image = $hx_exports.lime.graphics.Image.fromFile(path);
		this.__fromImage(image);
	}
	,__fromImage: function(image) {
		if(image != null && image.buffer != null) {
			this.image = image;
			this.width = image.width;
			this.height = image.height;
			this.rect = new openfl_geom_Rectangle(0,0,image.width,image.height);
			this.readable = true;
			this.__isValid = true;
		}
	}
	,__getBounds: function(rect,matrix) {
		var bounds = openfl_geom_Rectangle.__pool.get();
		this.rect.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__getFramebuffer: function(gl) {
		if(this.__framebuffer == null || this.__framebufferContext != gl) {
			this.getTexture(gl);
			this.__framebufferContext = gl;
			this.__framebuffer = gl.createFramebuffer();
			gl.bindFramebuffer(gl.FRAMEBUFFER,this.__framebuffer);
			gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,this.__texture,0);
		}
		return this.__framebuffer;
	}
	,__loadFromBase64: function(base64,type) {
		var _gthis = this;
		return $hx_exports.lime.graphics.Image.loadFromBase64(base64,type).then(function(image) {
			_gthis.__fromImage(image);
			return $hx_exports.lime.app.Future.withValue(_gthis);
		});
	}
	,__loadFromBytes: function(bytes,rawAlpha) {
		var _gthis = this;
		return $hx_exports.lime.graphics.Image.loadFromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes)).then(function(image) {
			_gthis.__fromImage(image);
			if(rawAlpha != null) {
				_gthis.__applyAlpha(rawAlpha);
			}
			return $hx_exports.lime.app.Future.withValue(_gthis);
		});
	}
	,__loadFromFile: function(path) {
		var _gthis = this;
		return $hx_exports.lime.graphics.Image.loadFromFile(path).then(function(image) {
			_gthis.__fromImage(image);
			return $hx_exports.lime.app.Future.withValue(_gthis);
		});
	}
	,__renderCairo: function(renderSession) {
	}
	,__renderCairoMask: function(renderSession) {
	}
	,__renderCanvas: function(renderSession) {
		if(!this.readable) {
			return;
		}
		if(this.image.type == lime_graphics_ImageType.DATA) {
			$hx_exports.lime.graphics.utils.ImageCanvasUtil.convertToCanvas(this.image);
		}
		var context = renderSession.context;
		if(this.__worldTransform == null) {
			this.__worldTransform = new openfl_geom_Matrix();
		}
		context.globalAlpha = 1;
		var transform = this.__worldTransform;
		if(renderSession.roundPixels) {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,Std.int(transform.tx),Std.int(transform.ty));
		} else {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		}
		context.drawImage(this.image.get_src(),0,0);
	}
	,__renderCanvasMask: function(renderSession) {
	}
	,__renderGL: function(renderSession) {
		var renderer = renderSession.renderer;
		var gl = renderSession.gl;
		renderSession.blendModeManager.setBlendMode(10);
		var shader = renderSession.shaderManager.defaultShader;
		shader.get_data().uImage0.input = this;
		var tmp = renderSession.allowSmoothing && renderSession.upscaled;
		shader.get_data().uImage0.smoothing = tmp;
		shader.get_data().uMatrix.value = renderer.getMatrix(this.__worldTransform);
		renderSession.shaderManager.setShader(shader);
		gl.bindBuffer(gl.ARRAY_BUFFER,this.getBuffer(gl,1,this.__worldColorTransform));
		gl.vertexAttribPointer(shader.get_data().aPosition.index,3,gl.FLOAT,false,24,$hx_$exports_lime_utils_DataPointer.fromInt(0));
		gl.vertexAttribPointer(shader.get_data().aTexCoord.index,2,gl.FLOAT,false,24,$hx_$exports_lime_utils_DataPointer.fromInt(12));
		gl.vertexAttribPointer(shader.get_data().aAlpha.index,1,gl.FLOAT,false,24,$hx_$exports_lime_utils_DataPointer.fromInt(20));
		gl.drawArrays(gl.TRIANGLE_STRIP,0,4);
	}
	,__renderGLMask: function(renderSession) {
		var renderer = renderSession.renderer;
		var gl = renderSession.gl;
		var shader = openfl__$internal_renderer_opengl_GLMaskManager.maskShader;
		shader.get_data().uImage0.input = this;
		var tmp = renderSession.allowSmoothing && renderSession.upscaled;
		shader.get_data().uImage0.smoothing = tmp;
		shader.get_data().uMatrix.value = renderer.getMatrix(this.__worldTransform);
		renderSession.shaderManager.setShader(shader);
		gl.bindBuffer(gl.ARRAY_BUFFER,this.getBuffer(gl,1,this.__worldColorTransform));
		gl.vertexAttribPointer(shader.get_data().aPosition.index,3,gl.FLOAT,false,24,$hx_$exports_lime_utils_DataPointer.fromInt(0));
		gl.vertexAttribPointer(shader.get_data().aTexCoord.index,2,gl.FLOAT,false,24,$hx_$exports_lime_utils_DataPointer.fromInt(12));
		gl.drawArrays(gl.TRIANGLE_STRIP,0,4);
	}
	,__resize: function(width,height) {
		this.width = width;
		this.height = height;
		this.rect.width = width;
		this.rect.height = height;
	}
	,__sync: function() {
		$hx_exports.lime.graphics.utils.ImageCanvasUtil.sync(this.image,false);
	}
	,__updateChildren: function(transformOnly) {
	}
	,__updateMask: function(maskGraphics) {
	}
	,__updateTransforms: function(overrideTransform) {
		if(overrideTransform == null) {
			this.__worldTransform.identity();
		} else {
			this.__worldTransform = overrideTransform;
		}
	}
	,__class__: openfl_display_BitmapData
};
var openfl_display__$BlendMode_BlendMode_$Impl_$ = $hx_exports["openfl"]["display"]["BlendMode"] = {};
$hxClasses["openfl.display._BlendMode.BlendMode_Impl_"] = openfl_display__$BlendMode_BlendMode_$Impl_$;
openfl_display__$BlendMode_BlendMode_$Impl_$.__name__ = ["openfl","display","_BlendMode","BlendMode_Impl_"];
openfl_display__$BlendMode_BlendMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "add":
		return 0;
	case "alpha":
		return 1;
	case "darken":
		return 2;
	case "difference":
		return 3;
	case "erase":
		return 4;
	case "hardlight":
		return 5;
	case "invert":
		return 6;
	case "layer":
		return 7;
	case "lighten":
		return 8;
	case "multiply":
		return 9;
	case "normal":
		return 10;
	case "overlay":
		return 11;
	case "screen":
		return 12;
	case "shader":
		return 13;
	case "subtract":
		return 14;
	default:
		return null;
	}
};
openfl_display__$BlendMode_BlendMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "add";
	case 1:
		return "alpha";
	case 2:
		return "darken";
	case 3:
		return "difference";
	case 4:
		return "erase";
	case 5:
		return "hardlight";
	case 6:
		return "invert";
	case 7:
		return "layer";
	case 8:
		return "lighten";
	case 9:
		return "multiply";
	case 10:
		return "normal";
	case 11:
		return "overlay";
	case 12:
		return "screen";
	case 13:
		return "shader";
	case 14:
		return "subtract";
	default:
		return null;
	}
};
var openfl_display__$CapsStyle_CapsStyle_$Impl_$ = $hx_exports["openfl"]["display"]["CapsStyle"] = {};
$hxClasses["openfl.display._CapsStyle.CapsStyle_Impl_"] = openfl_display__$CapsStyle_CapsStyle_$Impl_$;
openfl_display__$CapsStyle_CapsStyle_$Impl_$.__name__ = ["openfl","display","_CapsStyle","CapsStyle_Impl_"];
openfl_display__$CapsStyle_CapsStyle_$Impl_$.fromString = function(value) {
	switch(value) {
	case "none":
		return 0;
	case "round":
		return 1;
	case "square":
		return 2;
	default:
		return null;
	}
};
openfl_display__$CapsStyle_CapsStyle_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "none";
	case 1:
		return "round";
	case 2:
		return "square";
	default:
		return null;
	}
};
var openfl_display_InteractiveObject = $hx_exports["openfl"]["display"]["InteractiveObject"] = function() {
	openfl_display_DisplayObject.call(this);
	this.doubleClickEnabled = false;
	this.mouseEnabled = true;
	this.needsSoftKeyboard = false;
	this.__tabEnabled = null;
	this.__tabIndex = -1;
};
$hxClasses["openfl.display.InteractiveObject"] = openfl_display_InteractiveObject;
openfl_display_InteractiveObject.__name__ = ["openfl","display","InteractiveObject"];
openfl_display_InteractiveObject.__super__ = openfl_display_DisplayObject;
openfl_display_InteractiveObject.prototype = $extend(openfl_display_DisplayObject.prototype,{
	doubleClickEnabled: null
	,focusRect: null
	,mouseEnabled: null
	,needsSoftKeyboard: null
	,softKeyboardInputAreaOfInterest: null
	,__tabEnabled: null
	,__tabIndex: null
	,requestSoftKeyboard: function() {
		openfl__$internal_Lib.notImplemented({ fileName : "InteractiveObject.hx", lineNumber : 55, className : "openfl.display.InteractiveObject", methodName : "requestSoftKeyboard"});
		return false;
	}
	,__allowMouseFocus: function() {
		return this.get_tabEnabled();
	}
	,__getInteractive: function(stack) {
		if(stack != null) {
			stack.push(this);
			if(this.parent != null) {
				this.parent.__getInteractive(stack);
			}
		}
		return true;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) {
			return false;
		}
		return openfl_display_DisplayObject.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject);
	}
	,get_tabEnabled: function() {
		if(this.__tabEnabled == true) {
			return true;
		} else {
			return false;
		}
	}
	,set_tabEnabled: function(value) {
		return this.__tabEnabled = value;
	}
	,get_tabIndex: function() {
		return this.__tabIndex;
	}
	,set_tabIndex: function(value) {
		return this.__tabIndex = value;
	}
	,__class__: openfl_display_InteractiveObject
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_tabIndex:"set_tabIndex",get_tabIndex:"get_tabIndex",set_tabEnabled:"set_tabEnabled",get_tabEnabled:"get_tabEnabled"})
});
var openfl_display_DisplayObjectContainer = $hx_exports["openfl"]["display"]["DisplayObjectContainer"] = function() {
	openfl_display_InteractiveObject.call(this);
	this.mouseChildren = true;
	this.__isInitialized = false;
	this.__children = [];
	this.__removedChildren = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
};
$hxClasses["openfl.display.DisplayObjectContainer"] = openfl_display_DisplayObjectContainer;
openfl_display_DisplayObjectContainer.__name__ = ["openfl","display","DisplayObjectContainer"];
openfl_display_DisplayObjectContainer.__super__ = openfl_display_InteractiveObject;
openfl_display_DisplayObjectContainer.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	mouseChildren: null
	,tabChildren: null
	,__isInitialized: null
	,__removedChildren: null
	,addChild: function(child) {
		return this.addChildAt(child,this.get_numChildren());
	}
	,__addChildAtInternal: function(child,index) {
		if(child == null) {
			var error = new openfl_errors_TypeError("Error #2007: Parameter child must be non-null.");
			error.errorID = 2007;
			throw new js__$Boot_HaxeError(error);
		}
		if(index > this.__children.length || index < 0) {
			throw new js__$Boot_HaxeError("Invalid index position " + index);
		}
		if(child.parent == this) {
			if(this.__children[index] != child) {
				$hx_exports.HxOverrides.remove(this.__children,child);
				this.__children.splice(index,0,child);
				this.__setRenderDirty();
			}
		} else {
			if(child.parent != null) {
				child.parent.removeChild(child);
			}
			this.__children.splice(index,0,child);
			child.parent = this;
			var addedToStage = this.stage != null && child.stage == null;
			if(addedToStage) {
				this.__setStageReference(this.stage);
			}
			child.__setTransformDirty();
			child.__setRenderDirty();
			this.__setRenderDirty();
			var event = new openfl_events_Event("added",true);
			event.target = child;
			child.__dispatchWithCapture(event);
			if(addedToStage) {
				var event1 = new openfl_events_Event("addedToStage",false,false);
				child.__dispatchWithCapture(event1);
				child.__dispatchChildren(event1);
			}
		}
		this.__initializeChild(child);
		return child;
	}
	,addChildAt: function(child,index) {
		this.__initializeSelf();
		return this.__addChildAtInternal(child,index);
	}
	,areInaccessibleObjectsUnderPoint: function(point) {
		return false;
	}
	,contains: function(child) {
		while(child != this && child != null) child = child.parent;
		return child == this;
	}
	,getChildAt: function(index) {
		this.__initializeSelf();
		if(index >= 0 && index < this.__children.length) {
			var child = this.__children[index];
			return child;
		}
		return null;
	}
	,__initializeSelf: function() {
		if(!this.__isInitialized) {
			this.__isInitialized = true;
			this.__enterFrame(0);
		}
	}
	,__initializeChild: function(child) {
		var fun = Reflect.field(child,"__initializeSelf");
		if(Reflect.isFunction(fun)) {
			Reflect.callMethod(child,fun,[0]);
		}
	}
	,getChildByName: function(name) {
		this.__initializeSelf();
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == name) {
				return child;
			}
		}
		return null;
	}
	,getChildIndex: function(child) {
		this.__initializeSelf();
		var _g1 = 0;
		var _g = this.__children.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__children[i] == child) {
				return i;
			}
		}
		return -1;
	}
	,getObjectsUnderPoint: function(point) {
		var stack = [];
		this.__hitTest(point.x,point.y,false,stack,false,this);
		stack.reverse();
		return stack;
	}
	,removeChild: function(child) {
		if(child != null && child.parent == this) {
			child.__setTransformDirty();
			child.__setRenderDirty();
			this.__setRenderDirty();
			var event = new openfl_events_Event("removed",true);
			child.__dispatchWithCapture(event);
			if(this.stage != null) {
				if(child.stage != null && this.stage.get_focus() == child) {
					this.stage.set_focus(null);
				}
				var event1 = new openfl_events_Event("removedFromStage",false,false);
				child.__dispatchWithCapture(event1);
				child.__dispatchChildren(event1);
				child.__setStageReference(null);
			}
			child.parent = null;
			$hx_exports.HxOverrides.remove(this.__children,child);
			this.__removedChildren.data.push(child);
			child.__setTransformDirty();
		}
		return child;
	}
	,removeChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) {
			return this.removeChild(this.__children[index]);
		}
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 2147483647;
		}
		if(beginIndex == null) {
			beginIndex = 0;
		}
		if(endIndex == 2147483647) {
			endIndex = this.__children.length - 1;
			if(endIndex < 0) {
				return;
			}
		}
		if(beginIndex > this.__children.length - 1) {
			return;
		} else if(endIndex < beginIndex || beginIndex < 0 || endIndex > this.__children.length) {
			throw new js__$Boot_HaxeError(new openfl_errors_RangeError("The supplied index is out of bounds."));
		}
		var numRemovals = endIndex - beginIndex;
		while(numRemovals >= 0) {
			this.removeChildAt(beginIndex);
			--numRemovals;
		}
	}
	,resolve: function(fieldName) {
		if(this.__children == null) {
			return null;
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == fieldName) {
				return child;
			}
		}
		return null;
	}
	,setChildIndex: function(child,index) {
		this.__initializeSelf();
		if(index < 0 || index > this.__children.length || child.parent != this || this.__children[index] == child) {
			return;
		}
		$hx_exports.HxOverrides.remove(this.__children,child);
		this.__children.splice(index,0,child);
	}
	,stopAllMovieClips: function() {
		this.__stopAllMovieClips();
	}
	,swapChildren: function(child1,child2) {
		this.__initializeSelf();
		if(child1.parent == this && child2.parent == this) {
			var index1 = this.__children.indexOf(child1);
			var index2 = this.__children.indexOf(child2);
			this.__children[index1] = child2;
			this.__children[index2] = child1;
			this.__setRenderDirty();
		}
	}
	,swapChildrenAt: function(index1,index2) {
		this.__initializeSelf();
		var swap = this.__children[index1];
		this.__children[index1] = this.__children[index2];
		this.__children[index2] = swap;
		swap = null;
		this.__setRenderDirty();
	}
	,__dispatchChildren: function(event) {
		if(this.__children != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				event.target = child;
				if(!child.__dispatchWithCapture(event)) {
					break;
				}
				child.__dispatchChildren(event);
			}
		}
	}
	,__enterFrame: function(deltaTime) {
		if(this.__children == null) {
			return;
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__enterFrame(deltaTime);
		}
	}
	,__getBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(this.__children.length == 0) {
			return;
		}
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.__scaleX == 0 || child.__scaleY == 0) {
				continue;
			}
			child.__getBounds(rect,child.__worldTransform);
		}
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__getFilterBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getFilterBounds.call(this,rect,matrix);
		if(this.__children.length == 0) {
			return;
		}
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.__scaleX == 0 || child.__scaleY == 0 || child.__isMask) {
				continue;
			}
			child.__getFilterBounds(rect,child.__worldTransform);
		}
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect != null) {
			openfl_display_InteractiveObject.prototype.__getRenderBounds.call(this,rect,matrix);
			return;
		} else {
			openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		}
		if(this.__children.length == 0) {
			return;
		}
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.__scaleX == 0 || child.__scaleY == 0 || child.__isMask) {
				continue;
			}
			child.__getRenderBounds(rect,child.__worldTransform);
		}
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled && !this.mouseChildren) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		if(this.__scrollRect != null) {
			var point = openfl_geom_Point.__pool.get();
			point.setTo(x,y);
			this.__getRenderTransform().__transformInversePoint(point);
			if(!this.__scrollRect.containsPoint(point)) {
				openfl_geom_Point.__pool.release(point);
				return false;
			}
			openfl_geom_Point.__pool.release(point);
		}
		var i = this.__children.length;
		if(interactiveOnly) {
			if(stack == null || !this.mouseChildren) {
				while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,null,true,this.__children[i])) {
					if(stack != null) {
						stack.push(hitObject);
					}
					return true;
				}
			} else if(stack != null) {
				var length = stack.length;
				var interactive = false;
				var hitTest = false;
				while(--i >= 0) {
					interactive = this.__children[i].__getInteractive(null);
					if(interactive || this.mouseEnabled && !hitTest) {
						if(this.__children[i].__hitTest(x,y,shapeFlag,stack,true,this.__children[i])) {
							hitTest = true;
							if(interactive) {
								break;
							}
						}
					}
				}
				if(hitTest) {
					stack.splice(length,0,hitObject);
					return true;
				}
			}
		} else {
			while(--i >= 0) this.__children[i].__hitTest(x,y,shapeFlag,stack,false,this.__children[i]);
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		var i = this.__children.length;
		while(--i >= 0) if(this.__children[i].__hitTestMask(x,y)) {
			return true;
		}
		return false;
	}
	,__readGraphicsData: function(graphicsData,recurse) {
		openfl_display_InteractiveObject.prototype.__readGraphicsData.call(this,graphicsData,recurse);
		if(recurse) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__readGraphicsData(graphicsData,recurse);
			}
		}
	}
	,__renderCairo: function(renderSession) {
	}
	,__renderCairoMask: function(renderSession) {
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0 || this.get_mask() != null && (this.get_mask().get_width() <= 0 || this.get_mask().get_height() <= 0)) {
			return;
		}
		openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			return;
		}
		renderSession.maskManager.pushObject(this);
		if(renderSession.clearRenderDirty) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__renderCanvas(renderSession);
				child.__renderDirty = false;
			}
			this.__renderDirty = false;
		} else {
			var _g2 = 0;
			var _g11 = this.__children;
			while(_g2 < _g11.length) {
				var child1 = _g11[_g2];
				++_g2;
				child1.__renderCanvas(renderSession);
			}
		}
		var _g3 = 0;
		var _g12 = this.__removedChildren;
		while(_g3 < _g12.data.get_length()) {
			var orphan = _g12.data.get(_g3);
			++_g3;
			if(orphan.stage == null) {
				orphan.__cleanup();
			}
		}
		this.__removedChildren.data.set_length(0);
		renderSession.maskManager.popObject(this);
	}
	,__renderCanvasMask: function(renderSession) {
		if(this.__graphics != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics,renderSession);
		}
		var bounds = openfl_geom_Rectangle.__pool.get();
		this.__getLocalBounds(bounds);
		renderSession.context.rect(0,0,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__renderDOM: function(renderSession) {
	}
	,__renderDOMClear: function(renderSession) {
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) {
			return;
		}
		openfl_display_InteractiveObject.prototype.__renderGL.call(this,renderSession);
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			return;
		}
		if(this.__children.length > 0) {
			renderSession.maskManager.pushObject(this);
			renderSession.filterManager.pushObject(this);
			if(renderSession.clearRenderDirty) {
				var _g = 0;
				var _g1 = this.__children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.__renderGL(renderSession);
					child.__renderDirty = false;
				}
				this.__renderDirty = false;
			} else {
				var _g2 = 0;
				var _g11 = this.__children;
				while(_g2 < _g11.length) {
					var child1 = _g11[_g2];
					++_g2;
					child1.__renderGL(renderSession);
				}
			}
		}
		var _g3 = 0;
		var _g12 = this.__removedChildren;
		while(_g3 < _g12.data.get_length()) {
			var orphan = _g12.data.get(_g3);
			++_g3;
			if(orphan.stage == null) {
				orphan.__cleanup();
			}
		}
		this.__removedChildren.data.set_length(0);
		if(this.__children.length > 0) {
			renderSession.filterManager.popObject(this);
			renderSession.maskManager.popObject(this);
		}
	}
	,__renderGLMask: function(renderSession) {
		openfl_display_InteractiveObject.prototype.__renderGLMask.call(this,renderSession);
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			return;
		}
		if(renderSession.clearRenderDirty) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__renderGLMask(renderSession);
				child.__renderDirty = false;
			}
			this.__renderDirty = false;
		} else {
			var _g2 = 0;
			var _g11 = this.__children;
			while(_g2 < _g11.length) {
				var child1 = _g11[_g2];
				++_g2;
				child1.__renderGLMask(renderSession);
			}
		}
		var _g3 = 0;
		var _g12 = this.__removedChildren;
		while(_g3 < _g12.data.get_length()) {
			var orphan = _g12.data.get(_g3);
			++_g3;
			if(orphan.stage == null) {
				orphan.__cleanup();
			}
		}
		this.__removedChildren.data.set_length(0);
	}
	,__setStageReference: function(stage) {
		openfl_display_InteractiveObject.prototype.__setStageReference.call(this,stage);
		if(this.__children != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				if(child != null) {
					child.__setStageReference(stage);
				}
			}
		}
	}
	,__setWorldTransformInvalid: function() {
		if(!this.__worldTransformInvalid) {
			this.__worldTransformInvalid = true;
			if(this.__children != null) {
				var _g = 0;
				var _g1 = this.__children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.__setWorldTransformInvalid();
				}
			}
		}
	}
	,__stopAllMovieClips: function() {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__stopAllMovieClips();
		}
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		openfl_display_InteractiveObject.prototype.__update.call(this,transformOnly,updateChildren,maskGraphics);
		if(!updateChildren) {
			return;
		}
		var frameID = openfl_display_Stage.frameID;
		var selfOrParentChanged = this._lastParentOrSelfChangeFrameID == frameID;
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(selfOrParentChanged) {
				child._lastParentOrSelfChangeFrameID = frameID;
			}
			if(child._lastParentOrSelfChangeFrameID == frameID || child._lastChildChangeFrameID == frameID) {
				child.__update(transformOnly,true,maskGraphics);
			}
		}
	}
	,__forceUpdateTransforms: function() {
		openfl_display_InteractiveObject.prototype.__forceUpdateTransforms.call(this);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__forceUpdateTransforms();
		}
	}
	,__updateChildren: function(transformOnly) {
		openfl_display_InteractiveObject.prototype.__updateChildren.call(this,transformOnly);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__forceUpdateTransforms();
		}
	}
	,get_numChildren: function() {
		return this.__children.length;
	}
	,__class__: openfl_display_DisplayObjectContainer
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{get_numChildren:"get_numChildren"})
});
var openfl_display_Sprite = $hx_exports["openfl"]["display"]["Sprite"] = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.buttonMode = false;
	this.useHandCursor = true;
};
$hxClasses["openfl.display.Sprite"] = openfl_display_Sprite;
openfl_display_Sprite.__name__ = ["openfl","display","Sprite"];
openfl_display_Sprite.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Sprite.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	buttonMode: null
	,dropTarget: null
	,hitArea: null
	,useHandCursor: null
	,startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) {
			lockCenter = false;
		}
		if(this.stage != null) {
			this.stage.__startDrag(this,lockCenter,bounds);
		}
	}
	,stopDrag: function() {
		if(this.stage != null) {
			this.stage.__stopDrag(this);
		}
	}
	,__getCursor: function() {
		if(this.buttonMode && this.useHandCursor) {
			return lime_ui_MouseCursor.POINTER;
		} else {
			return null;
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask) {
			return this.__hitTestHitArea(x,y,shapeFlag,stack,interactiveOnly,hitObject);
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return this.__hitTestHitArea(x,y,shapeFlag,stack,interactiveOnly,hitObject);
		}
		if(this.__scrollRect != null) {
			var point = openfl_geom_Point.__pool.get();
			point.setTo(x,y);
			this.__getRenderTransform().__transformInversePoint(point);
			if(!this.__scrollRect.containsPoint(point)) {
				openfl_geom_Point.__pool.release(point);
				return this.__hitTestHitArea(x,y,shapeFlag,stack,true,hitObject);
			}
			openfl_geom_Point.__pool.release(point);
		}
		if(openfl_display_DisplayObjectContainer.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
			return interactiveOnly;
		} else if(this.hitArea == null && this.__graphics != null && this.__graphics.__hitTest(x,y,shapeFlag,this.__getRenderTransform())) {
			if(stack != null && (!interactiveOnly || this.mouseEnabled)) {
				stack.push(hitObject);
			}
			return true;
		}
		return this.__hitTestHitArea(x,y,shapeFlag,stack,interactiveOnly,hitObject);
	}
	,__hitTestHitArea: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.hitArea != null) {
			if(!this.hitArea.mouseEnabled) {
				this.hitArea.mouseEnabled = true;
				var hitTest = this.hitArea.__hitTest(x,y,shapeFlag,null,true,hitObject);
				this.hitArea.mouseEnabled = false;
				if(hitTest) {
					stack[stack.length] = hitObject;
				}
				return hitTest;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(openfl_display_DisplayObjectContainer.prototype.__hitTestMask.call(this,x,y)) {
			return true;
		} else if(this.__graphics != null && this.__graphics.__hitTest(x,y,true,this.__getRenderTransform())) {
			return true;
		}
		return false;
	}
	,get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics(this);
		}
		return this.__graphics;
	}
	,get_tabEnabled: function() {
		if(this.__tabEnabled == null) {
			return this.buttonMode;
		} else {
			return this.__tabEnabled;
		}
	}
	,__class__: openfl_display_Sprite
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{get_graphics:"get_graphics"})
});
var openfl_display_DOMSprite = $hx_exports["openfl"]["display"]["DOMSprite"] = function(element) {
	openfl_display_Sprite.call(this);
	this.__element = element;
};
$hxClasses["openfl.display.DOMSprite"] = openfl_display_DOMSprite;
openfl_display_DOMSprite.__name__ = ["openfl","display","DOMSprite"];
openfl_display_DOMSprite.__super__ = openfl_display_Sprite;
openfl_display_DOMSprite.prototype = $extend(openfl_display_Sprite.prototype,{
	__active: null
	,__element: null
	,__renderDOM: function(renderSession) {
		if(this.stage != null && this.__worldVisible && this.__renderable) {
			if(!this.__active) {
				openfl__$internal_renderer_dom_DOMRenderer.initializeElement(this,this.__element,renderSession);
				this.__active = true;
			}
			openfl__$internal_renderer_dom_DOMRenderer.updateClip(this,renderSession);
			openfl__$internal_renderer_dom_DOMRenderer.applyStyle(this,renderSession,true,true,true);
		} else if(this.__active) {
			renderSession.element.removeChild(this.__element);
			this.__active = false;
		}
		openfl_display_Sprite.prototype.__renderDOM.call(this,renderSession);
	}
	,__class__: openfl_display_DOMSprite
});
var openfl_display_DirectRenderer = $hx_exports["openfl"]["display"]["DirectRenderer"] = function(type) {
	if(type == null) {
		type = "DirectRenderer";
	}
	openfl_display_DisplayObject.call(this);
};
$hxClasses["openfl.display.DirectRenderer"] = openfl_display_DirectRenderer;
openfl_display_DirectRenderer.__name__ = ["openfl","display","DirectRenderer"];
openfl_display_DirectRenderer.__super__ = openfl_display_DisplayObject;
openfl_display_DirectRenderer.prototype = $extend(openfl_display_DisplayObject.prototype,{
	__render: null
	,get_render: function() {
		return this.__render;
	}
	,set_render: function(value) {
		return this.__render = value;
	}
	,__class__: openfl_display_DirectRenderer
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_render:"set_render",get_render:"get_render"})
});
var openfl_text_TextField = $hx_exports["openfl"]["text"]["TextField"] = function() {
	openfl_display_InteractiveObject.call(this);
	this.__caretIndex = -1;
	this.__displayAsPassword = false;
	this.__graphics = new openfl_display_Graphics(this);
	this.__textEngine = new openfl__$internal_text_TextEngine(this);
	this.__layoutDirty = true;
	this.__offsetX = 0;
	this.__offsetY = 0;
	this.__mouseWheelEnabled = true;
	this.__text = "";
	if(openfl_text_TextField.__defaultTextFormat == null) {
		openfl_text_TextField.__defaultTextFormat = new openfl_text_TextFormat("Times New Roman",12,0,false,false,false,"","",3,0,0,0,0);
		openfl_text_TextField.__defaultTextFormat.blockIndent = 0;
		openfl_text_TextField.__defaultTextFormat.bullet = false;
		openfl_text_TextField.__defaultTextFormat.letterSpacing = 0;
		openfl_text_TextField.__defaultTextFormat.kerning = false;
	}
	this.__textFormat = openfl_text_TextField.__defaultTextFormat.clone();
	var this1 = this.__textEngine.textFormatRanges;
	var x = new openfl__$internal_text_TextFormatRange(this.__textFormat,0,0);
	this1.data.push(x);
	this.addEventListener("mouseDown",$bind(this,this.this_onMouseDown));
	this.addEventListener("focusIn",$bind(this,this.this_onFocusIn));
	this.addEventListener("focusOut",$bind(this,this.this_onFocusOut));
	this.addEventListener("keyDown",$bind(this,this.this_onKeyDown));
};
$hxClasses["openfl.text.TextField"] = openfl_text_TextField;
openfl_text_TextField.__name__ = ["openfl","text","TextField"];
openfl_text_TextField.__interfaces__ = [openfl_display_IShaderDrawable];
openfl_text_TextField.__defaultTextFormat = null;
openfl_text_TextField.__super__ = openfl_display_InteractiveObject;
openfl_text_TextField.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	shader: null
	,__bounds: null
	,__caretIndex: null
	,__cursorTimer: null
	,__dirty: null
	,__displayAsPassword: null
	,__inputEnabled: null
	,__isHTML: null
	,__layoutDirty: null
	,__mouseWheelEnabled: null
	,__offsetX: null
	,__offsetY: null
	,__selectionIndex: null
	,__showCursor: null
	,__symbol: null
	,__text: null
	,__htmlText: null
	,__textEngine: null
	,__textFormat: null
	,__div: null
	,appendText: function(text) {
		if(text == null || text == "") {
			return;
		}
		this.__dirty = true;
		this.__layoutDirty = true;
		this.__setRenderDirty();
		this.__updateText($hx_$exports_lime_text_UTF8String.plus(this.__text,text));
		var this1 = this.__textEngine.textFormatRanges;
		var index = this.__textEngine.textFormatRanges.data.get_length() - 1;
		this1.data.get(index).end = $hx_$exports_lime_text_UTF8String.get_length(this.__text);
		this.__updateScrollH();
	}
	,getCharBoundaries: function(charIndex) {
		if(charIndex < 0 || charIndex > $hx_$exports_lime_text_UTF8String.get_length(this.__text) - 1) {
			return null;
		}
		this.__updateLayout();
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.data.get_length()) {
			var group = _g1.data.get(_g);
			++_g;
			if(charIndex >= group.startIndex && charIndex <= group.endIndex) {
				try {
					var x = group.offsetX;
					var _g3 = 0;
					var _g2 = charIndex - group.startIndex;
					while(_g3 < _g2) {
						var i = _g3++;
						x += group.getAdvance(i);
					}
					var lastPosition = group.getAdvance(charIndex - group.startIndex);
					return new openfl_geom_Rectangle(x,group.offsetY,lastPosition,group.ascent + group.descent);
				} catch( e ) {
				}
			}
		}
		return null;
	}
	,getCharIndexAtPoint: function(x,y) {
		if(x <= 2 || x > this.get_width() + 4 || y <= 0 || y > this.get_height() + 4) {
			return -1;
		}
		this.__updateLayout();
		x += this.get_scrollH();
		var _g1 = 0;
		var _g = this.get_scrollV() - 1;
		while(_g1 < _g) {
			var i = _g1++;
			y += this.__textEngine.lineHeights.data.get(i);
		}
		var _g2 = 0;
		var _g11 = this.__textEngine.layoutGroups;
		while(_g2 < _g11.data.get_length()) {
			var group = _g11.data.get(_g2);
			++_g2;
			if(y >= group.offsetY && y <= group.offsetY + group.height) {
				if(x >= group.offsetX && x <= group.offsetX + group.width) {
					var advance = 0.0;
					var _g3 = 0;
					var _g21 = group.positions.length;
					while(_g3 < _g21) {
						var i1 = _g3++;
						advance += group.getAdvance(i1);
						if(x <= group.offsetX + advance) {
							return group.startIndex + i1;
						}
					}
					return group.endIndex;
				}
			}
		}
		return -1;
	}
	,getFirstCharInParagraph: function(charIndex) {
		if(charIndex < 0 || charIndex > $hx_$exports_lime_text_UTF8String.get_length(this.__text) - 1) {
			return 0;
		}
		var index = this.__textEngine.getLineBreakIndex();
		var startIndex = 0;
		while(index > -1) {
			if(index <= charIndex) {
				startIndex = index + 1;
			} else if(index > charIndex) {
				break;
			}
			index = this.__textEngine.getLineBreakIndex(index + 1);
		}
		return startIndex;
	}
	,getLineIndexAtPoint: function(x,y) {
		this.__updateLayout();
		if(x <= 2 || x > this.get_width() + 4 || y <= 0 || y > this.get_height() + 4) {
			return -1;
		}
		var _g1 = 0;
		var _g = this.get_scrollV() - 1;
		while(_g1 < _g) {
			var i = _g1++;
			y += this.__textEngine.lineHeights.data.get(i);
		}
		var _g2 = 0;
		var _g11 = this.__textEngine.layoutGroups;
		while(_g2 < _g11.data.get_length()) {
			var group = _g11.data.get(_g2);
			++_g2;
			if(y >= group.offsetY && y <= group.offsetY + group.height) {
				return group.lineIndex;
			}
		}
		return -1;
	}
	,getLineIndexOfChar: function(charIndex) {
		if(charIndex < 0 || charIndex > $hx_$exports_lime_text_UTF8String.get_length(this.__text)) {
			return -1;
		}
		this.__updateLayout();
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.data.get_length()) {
			var group = _g1.data.get(_g);
			++_g;
			if(group.startIndex <= charIndex && group.endIndex >= charIndex) {
				return group.lineIndex;
			}
		}
		return -1;
	}
	,getLineLength: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
			return 0;
		}
		var startIndex = -1;
		var endIndex = -1;
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.data.get_length()) {
			var group = _g1.data.get(_g);
			++_g;
			if(group.lineIndex == lineIndex) {
				if(startIndex == -1) {
					startIndex = group.startIndex;
				}
			} else if(group.lineIndex == lineIndex + 1) {
				endIndex = group.startIndex;
				break;
			}
		}
		if(endIndex == -1) {
			endIndex = $hx_$exports_lime_text_UTF8String.get_length(this.__text);
		}
		return endIndex - startIndex;
	}
	,getLineMetrics: function(lineIndex) {
		this.__updateLayout();
		var ascender = this.__textEngine.lineAscents.data.get(lineIndex);
		var descender = this.__textEngine.lineDescents.data.get(lineIndex);
		var leading = this.__textEngine.lineLeadings.data.get(lineIndex);
		var lineHeight = this.__textEngine.lineHeights.data.get(lineIndex);
		var lineWidth = this.__textEngine.lineWidths.data.get(lineIndex);
		var margin;
		var _g = this.__textFormat.align;
		switch(_g) {
		case 0:
			margin = (this.__textEngine.width - lineWidth) / 2;
			break;
		case 1:case 4:
			margin = this.__textEngine.width - lineWidth - 2;
			break;
		case 2:case 3:case 5:
			margin = 2;
			break;
		}
		return new openfl_text_TextLineMetrics(margin,lineWidth,lineHeight,ascender,descender,leading);
	}
	,getLineOffset: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
			return -1;
		}
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.data.get_length()) {
			var group = _g1.data.get(_g);
			++_g;
			if(group.lineIndex == lineIndex) {
				return group.startIndex;
			}
		}
		return 0;
	}
	,getLineText: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
			return null;
		}
		var startIndex = -1;
		var endIndex = -1;
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.data.get_length()) {
			var group = _g1.data.get(_g);
			++_g;
			if(group.lineIndex == lineIndex) {
				if(startIndex == -1) {
					startIndex = group.startIndex;
				}
			} else if(group.lineIndex == lineIndex + 1) {
				endIndex = group.startIndex;
				break;
			}
		}
		if(endIndex == -1) {
			endIndex = $hx_$exports_lime_text_UTF8String.get_length(this.__text);
		}
		return $hx_$exports_lime_text_UTF8String.substring(this.__textEngine.text,startIndex,endIndex);
	}
	,getParagraphLength: function(charIndex) {
		if(charIndex < 0 || charIndex > $hx_$exports_lime_text_UTF8String.get_length(this.__text) - 1) {
			return 0;
		}
		var startIndex = this.getFirstCharInParagraph(charIndex);
		var endIndex = this.__textEngine.getLineBreakIndex(charIndex) + 1;
		if(endIndex == 0) {
			endIndex = $hx_$exports_lime_text_UTF8String.get_length(this.__text);
		}
		return endIndex - startIndex;
	}
	,getTextFormat: function(beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 0;
		}
		if(beginIndex == null) {
			beginIndex = 0;
		}
		var format = null;
		var _g = 0;
		var _g1 = this.__textEngine.textFormatRanges;
		while(_g < _g1.data.get_length()) {
			var group = _g1.data.get(_g);
			++_g;
			if(group.start <= beginIndex && group.end >= beginIndex || group.start <= endIndex && group.end >= endIndex) {
				if(format == null) {
					format = group.format.clone();
				} else {
					if(group.format.font != format.font) {
						format.font = null;
					}
					if(group.format.size != format.size) {
						format.size = null;
					}
					if(group.format.color != format.color) {
						format.color = null;
					}
					if(group.format.bold != format.bold) {
						format.bold = null;
					}
					if(group.format.italic != format.italic) {
						format.italic = null;
					}
					if(group.format.underline != format.underline) {
						format.underline = null;
					}
					if(group.format.url != format.url) {
						format.url = null;
					}
					if(group.format.target != format.target) {
						format.target = null;
					}
					if(group.format.align != format.align) {
						format.align = null;
					}
					if(group.format.leftMargin != format.leftMargin) {
						format.leftMargin = null;
					}
					if(group.format.rightMargin != format.rightMargin) {
						format.rightMargin = null;
					}
					if(group.format.indent != format.indent) {
						format.indent = null;
					}
					if(group.format.leading != format.leading) {
						format.leading = null;
					}
					if(group.format.blockIndent != format.blockIndent) {
						format.blockIndent = null;
					}
					if(group.format.bullet != format.bullet) {
						format.bullet = null;
					}
					if(group.format.kerning != format.kerning) {
						format.kerning = null;
					}
					if(group.format.letterSpacing != format.letterSpacing) {
						format.letterSpacing = null;
					}
					if(group.format.tabStops != format.tabStops) {
						format.tabStops = null;
					}
				}
			}
		}
		return format;
	}
	,replaceSelectedText: function(value) {
		if(value == "" && this.__selectionIndex == this.__caretIndex) {
			return;
		}
		var startIndex = this.__caretIndex < this.__selectionIndex ? this.__caretIndex : this.__selectionIndex;
		var endIndex = this.__caretIndex > this.__selectionIndex ? this.__caretIndex : this.__selectionIndex;
		if(startIndex == endIndex && this.__textEngine.maxChars > 0 && $hx_$exports_lime_text_UTF8String.get_length(this.__text) == this.__textEngine.maxChars) {
			return;
		}
		if(startIndex > $hx_$exports_lime_text_UTF8String.get_length(this.__text)) {
			startIndex = $hx_$exports_lime_text_UTF8String.get_length(this.__text);
		}
		if(endIndex > $hx_$exports_lime_text_UTF8String.get_length(this.__text)) {
			endIndex = $hx_$exports_lime_text_UTF8String.get_length(this.__text);
		}
		if(endIndex < startIndex) {
			var cache = endIndex;
			endIndex = startIndex;
			startIndex = cache;
		}
		if(startIndex < 0) {
			startIndex = 0;
		}
		this.replaceText(startIndex,endIndex,value);
		var i = startIndex + $hx_$exports_lime_text_UTF8String.get_length(js_Boot.__cast(value , String));
		if(i > $hx_$exports_lime_text_UTF8String.get_length(this.__text)) {
			i = $hx_$exports_lime_text_UTF8String.get_length(this.__text);
		}
		this.setSelection(i,i);
	}
	,replaceText: function(beginIndex,endIndex,newText) {
		if(endIndex < beginIndex || beginIndex < 0 || endIndex > $hx_$exports_lime_text_UTF8String.get_length(this.__text) || newText == null) {
			return;
		}
		this.__updateText($hx_$exports_lime_text_UTF8String.substring(this.__text,0,beginIndex) + newText + $hx_$exports_lime_text_UTF8String.substring(this.__text,endIndex));
		if(endIndex > $hx_$exports_lime_text_UTF8String.get_length(this.__text)) {
			endIndex = $hx_$exports_lime_text_UTF8String.get_length(this.__text);
		}
		var offset = newText.length - (endIndex - beginIndex);
		var i = 0;
		var range;
		while(i < this.__textEngine.textFormatRanges.data.get_length()) {
			range = this.__textEngine.textFormatRanges.data.get(i);
			if(range.start <= beginIndex && range.end >= endIndex) {
				range.end += offset;
				++i;
			} else if(range.start >= beginIndex && range.end <= endIndex) {
				if(i > 0) {
					new openfl__$Vector_AbstractVector(this.__textEngine.textFormatRanges.data.splice(i,1));
				} else {
					range.start = 0;
					range.end = beginIndex + newText.length;
					++i;
				}
				offset -= range.end - range.start;
			} else if(range.start > beginIndex && range.start <= endIndex) {
				range.start += offset;
				++i;
			} else {
				++i;
			}
		}
		this.__updateScrollH();
		this.__dirty = true;
		this.__layoutDirty = true;
		this.__setRenderDirty();
	}
	,setSelection: function(beginIndex,endIndex) {
		this.__selectionIndex = beginIndex;
		this.__caretIndex = endIndex;
		this.__stopCursorTimer();
		this.__startCursorTimer();
	}
	,setTextFormat: function(format,beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 0;
		}
		if(beginIndex == null) {
			beginIndex = 0;
		}
		var max = $hx_$exports_lime_text_UTF8String.get_length(this.get_text());
		var range;
		if(beginIndex < 0) {
			beginIndex = 0;
		}
		if(endIndex < 0) {
			endIndex = 0;
		}
		if(endIndex == 0) {
			if(beginIndex == 0) {
				endIndex = max;
			} else {
				endIndex = beginIndex + 1;
			}
		}
		if(endIndex < beginIndex) {
			return;
		}
		if(beginIndex == 0 && endIndex >= max) {
			this.__textFormat.__merge(format);
			var _g1 = 0;
			var _g = this.__textEngine.textFormatRanges.data.get_length();
			while(_g1 < _g) {
				var i = _g1++;
				range = this.__textEngine.textFormatRanges.data.get(i);
				range.format.__merge(this.__textFormat);
			}
		} else {
			var index = this.__textEngine.textFormatRanges.data.get_length();
			var searchIndex;
			while(index > 0) {
				--index;
				range = this.__textEngine.textFormatRanges.data.get(index);
				if(range.start == beginIndex && range.end == endIndex) {
					range.format = openfl_text_TextField.__defaultTextFormat.clone();
					range.format.__merge(format);
					return;
				}
				if(range.start >= beginIndex && range.end <= endIndex) {
					searchIndex = this.__textEngine.textFormatRanges.data.indexOf(range,0);
					if(searchIndex > -1) {
						new openfl__$Vector_AbstractVector(this.__textEngine.textFormatRanges.data.splice(searchIndex,1));
					}
				}
			}
			var prevRange = null;
			var nextRange = null;
			if(beginIndex > 0) {
				var _g11 = 0;
				var _g2 = this.__textEngine.textFormatRanges.data.get_length();
				while(_g11 < _g2) {
					var i1 = _g11++;
					range = this.__textEngine.textFormatRanges.data.get(i1);
					if(range.end >= beginIndex) {
						prevRange = range;
						break;
					}
				}
			}
			if(endIndex < max) {
				var ni = this.__textEngine.textFormatRanges.data.get_length();
				while(--ni >= 0) {
					range = this.__textEngine.textFormatRanges.data.get(ni);
					if(range.start <= endIndex) {
						nextRange = range;
						break;
					}
				}
			}
			if(nextRange == prevRange) {
				nextRange = new openfl__$internal_text_TextFormatRange(nextRange.format.clone(),nextRange.start,nextRange.end);
				this.__textEngine.textFormatRanges.data.push(nextRange);
			}
			if(prevRange != null) {
				prevRange.end = beginIndex;
			}
			if(nextRange != null) {
				nextRange.start = endIndex;
			}
			var textFormat = openfl_text_TextField.__defaultTextFormat.clone();
			textFormat.__merge(format);
			var this1 = this.__textEngine.textFormatRanges;
			var x = new openfl__$internal_text_TextFormatRange(textFormat,beginIndex,endIndex);
			this1.data.push(x);
			this.__textEngine.textFormatRanges.data.sort(function(a,b) {
				if(a.start < b.start || a.end < b.end) {
					return -1;
				} else if(a.start > b.start || a.end > b.end) {
					return 1;
				}
				return 0;
			});
		}
		this.__dirty = true;
		this.__layoutDirty = true;
		this.__setRenderDirty();
	}
	,__allowMouseFocus: function() {
		if(!(this.__textEngine.type == 1 || this.get_tabEnabled())) {
			return this.get_selectable();
		} else {
			return true;
		}
	}
	,__caretBeginningOfLine: function() {
		if(this.__selectionIndex == this.__caretIndex || this.__caretIndex < this.__selectionIndex) {
			this.__caretIndex = this.getLineOffset(this.getLineIndexOfChar(this.__caretIndex));
		} else {
			this.__selectionIndex = this.getLineOffset(this.getLineIndexOfChar(this.__selectionIndex));
		}
	}
	,__caretEndOfLine: function() {
		var lineIndex;
		if(this.__selectionIndex == this.__caretIndex) {
			lineIndex = this.getLineIndexOfChar(this.__caretIndex);
		} else {
			lineIndex = this.getLineIndexOfChar(Std.int($hx_exports.Math.max(this.__caretIndex,this.__selectionIndex)));
		}
		if(lineIndex < this.__textEngine.numLines - 1) {
			this.__caretIndex = this.getLineOffset(lineIndex + 1) - 1;
		} else {
			this.__caretIndex = $hx_$exports_lime_text_UTF8String.get_length(this.__text);
		}
	}
	,__caretNextCharacter: function() {
		if(this.__caretIndex < $hx_$exports_lime_text_UTF8String.get_length(this.__text)) {
			this.__caretIndex++;
		}
	}
	,__caretNextLine: function(lineIndex,caretIndex) {
		if(lineIndex == null) {
			lineIndex = this.getLineIndexOfChar(this.__caretIndex);
		}
		if(lineIndex < this.__textEngine.numLines - 1) {
			if(caretIndex == null) {
				caretIndex = this.__caretIndex;
			}
			this.__caretIndex = this.__getCharIndexOnDifferentLine(caretIndex,lineIndex + 1);
		} else {
			this.__caretIndex = $hx_$exports_lime_text_UTF8String.get_length(this.__text);
		}
	}
	,__caretPreviousCharacter: function() {
		if(this.__caretIndex > 0) {
			this.__caretIndex--;
		}
	}
	,__caretPreviousLine: function(lineIndex,caretIndex) {
		if(lineIndex == null) {
			lineIndex = this.getLineIndexOfChar(this.__caretIndex);
		}
		if(lineIndex > 0) {
			if(caretIndex == null) {
				caretIndex = this.__caretIndex;
			}
			this.__caretIndex = this.__getCharIndexOnDifferentLine(caretIndex,lineIndex - 1);
		} else {
			this.__caretIndex = 0;
		}
	}
	,__disableInput: function() {
		if(this.__inputEnabled && this.stage != null) {
			this.stage.window.set_enableTextEvents(false);
			this.stage.window.onTextInput.remove($bind(this,this.window_onTextInput));
			this.stage.window.onKeyDown.remove($bind(this,this.window_onKeyDown));
			this.__inputEnabled = false;
			this.__stopCursorTimer();
		}
	}
	,__dispatch: function(event) {
		if(event.eventPhase == 2 && event.type == "mouseUp") {
			var event1 = event;
			var group = this.__getGroup(this.get_mouseX(),this.get_mouseY(),true);
			if(group != null) {
				var url = group.format.url;
				if(url != null && url != "") {
					if($hx_exports.StringTools.startsWith(url,"event:")) {
						this.dispatchEvent(new openfl_events_TextEvent("link",false,false,$hx_exports.HxOverrides.substr(url,6,null)));
					} else {
						openfl_Lib.getURL(new openfl_net_URLRequest(url));
					}
				}
			}
		}
		return openfl_display_InteractiveObject.prototype.__dispatch.call(this,event);
	}
	,__enableInput: function() {
		if(this.stage != null) {
			this.stage.window.set_enableTextEvents(true);
			if(!this.__inputEnabled) {
				this.stage.window.set_enableTextEvents(true);
				if(!this.stage.window.onTextInput.has($bind(this,this.window_onTextInput))) {
					this.stage.window.onTextInput.add($bind(this,this.window_onTextInput));
					this.stage.window.onKeyDown.add($bind(this,this.window_onKeyDown));
				}
				this.__inputEnabled = true;
				this.__startCursorTimer();
			}
		}
	}
	,__fromSymbol: function(swf,symbol) {
		this.__symbol = symbol;
		this.set_width(symbol.width);
		this.set_height(symbol.height);
		this.__offsetX = symbol.x;
		this.__offsetY = symbol.y;
		this.set_multiline(symbol.multiline);
		this.set_wordWrap(symbol.wordWrap);
		this.set_displayAsPassword(symbol.password);
		if(symbol.border) {
			this.set_border(true);
			this.set_background(true);
		}
		this.set_selectable(symbol.selectable);
		if(symbol.input) {
			this.set_type(1);
		}
		var format = new openfl_text_TextFormat();
		if(symbol.color != null) {
			format.color = symbol.color & 16777215;
		}
		format.size = $hx_exports.Math.round(symbol.fontHeight / 20);
		var font = swf.symbols.get(symbol.fontID);
		if(font != null) {
			format.__ascent = font.ascent / 20 / 1024;
			format.__descent = font.descent / 20 / 1024;
		}
		format.font = symbol.fontName;
		var found = false;
		var _g = format.font;
		if(_g == null) {
			found = true;
		} else {
			switch(_g) {
			case "":case "_sans":case "_serif":case "_typewriter":
				found = true;
				break;
			default:
				var _g1 = 0;
				var _g11 = openfl_text_Font.enumerateFonts();
				while(_g1 < _g11.length) {
					var font1 = _g11[_g1];
					++_g1;
					if(font1.get_fontName() == format.font) {
						found = true;
						break;
					}
				}
			}
		}
		if(!found) {
			var alpha = new $hx_exports.EReg("[^a-zA-Z]+","g");
			var sanitizedSymbolFontName = alpha.replace(symbol.fontName,"").toLowerCase();
			var _g12 = 0;
			var _g2 = openfl_text_Font.enumerateFonts();
			while(_g12 < _g2.length) {
				var font2 = _g2[_g12];
				++_g12;
				if($hx_exports.HxOverrides.substr(alpha.replace(font2.get_fontName(),""),0,symbol.fontName.length).toLowerCase() == sanitizedSymbolFontName) {
					format.font = font2.get_fontName();
					found = true;
					break;
				}
			}
		}
		if(found) {
			this.set_embedFonts(true);
		} else {
			$hx_exports.haxe.Log.trace("Could not find required font \"" + format.font + "\"",{ fileName : "TextField.hx", lineNumber : 1111, className : "openfl.text.TextField", methodName : "__fromSymbol"});
		}
		if(symbol.align != null) {
			if(symbol.align == "center") {
				format.align = 0;
			} else if(symbol.align == "right") {
				format.align = 4;
			} else if(symbol.align == "justify") {
				format.align = 2;
			}
			format.leftMargin = Std.int(symbol.leftMargin / 20);
			format.rightMargin = Std.int(symbol.rightMargin / 20);
			format.indent = Std.int(symbol.indent / 20);
			format.leading = Std.int(symbol.leading / 20);
		}
		this.set_defaultTextFormat(format);
		if(symbol.text != null) {
			if(symbol.html) {
				this.set_htmlText(symbol.text);
			} else {
				this.set_text(symbol.text);
			}
		}
	}
	,__getAdvance: function(position) {
		return position;
	}
	,__getBounds: function(rect,matrix) {
		this.__updateLayout();
		var bounds = openfl_geom_Rectangle.__pool.get();
		bounds.copyFrom(this.__textEngine.bounds);
		bounds.x += this.__offsetX;
		bounds.y += this.__offsetY;
		bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__getCharIndexOnDifferentLine: function(charIndex,lineIndex) {
		if(charIndex < 0 || charIndex > $hx_$exports_lime_text_UTF8String.get_length(this.__text)) {
			return -1;
		}
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
			return -1;
		}
		var x = null;
		var y = null;
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.data.get_length()) {
			var group = _g1.data.get(_g);
			++_g;
			if(charIndex >= group.startIndex && charIndex <= group.endIndex) {
				x = group.offsetX;
				var _g3 = 0;
				var _g2 = charIndex - group.startIndex;
				while(_g3 < _g2) {
					var i = _g3++;
					x += group.getAdvance(i);
				}
				if(y != null) {
					return this.__getPosition(x,y);
				}
			}
			if(group.lineIndex == lineIndex) {
				y = group.offsetY + group.height / 2;
				if(x != null) {
					return this.__getPosition(x,y);
				}
			}
		}
		return -1;
	}
	,__getCursor: function() {
		var group = this.__getGroup(this.get_mouseX(),this.get_mouseY(),true);
		if(group != null && group.format.url != "") {
			return lime_ui_MouseCursor.POINTER;
		} else if(this.__textEngine.selectable) {
			return lime_ui_MouseCursor.TEXT;
		}
		return null;
	}
	,__getGroup: function(x,y,precise) {
		if(precise == null) {
			precise = false;
		}
		this.__updateLayout();
		x += this.get_scrollH();
		var _g1 = 0;
		var _g = this.get_scrollV() - 1;
		while(_g1 < _g) {
			var i = _g1++;
			y += this.__textEngine.lineHeights.data.get(i);
		}
		if(!precise && y > this.__textEngine.textHeight) {
			y = this.__textEngine.textHeight;
		}
		var firstGroup = true;
		var group;
		var nextGroup;
		var _g11 = 0;
		var _g2 = this.__textEngine.layoutGroups.data.get_length();
		while(_g11 < _g2) {
			var i1 = _g11++;
			group = this.__textEngine.layoutGroups.data.get(i1);
			if(i1 < this.__textEngine.layoutGroups.data.get_length() - 1) {
				nextGroup = this.__textEngine.layoutGroups.data.get(i1 + 1);
			} else {
				nextGroup = null;
			}
			if(firstGroup) {
				if(y < group.offsetY) {
					y = group.offsetY;
				}
				if(x < group.offsetX) {
					x = group.offsetX;
				}
				firstGroup = false;
			}
			if(y >= group.offsetY && y <= group.offsetY + group.height || !precise && nextGroup == null) {
				if(x >= group.offsetX && x <= group.offsetX + group.width || !precise && (nextGroup == null || nextGroup.lineIndex != group.lineIndex)) {
					return group;
				}
			}
		}
		return null;
	}
	,__getPosition: function(x,y) {
		var group = this.__getGroup(x,y);
		if(group == null) {
			return $hx_$exports_lime_text_UTF8String.get_length(this.__text);
		}
		var advance = 0.0;
		var _g1 = 0;
		var _g = group.positions.length;
		while(_g1 < _g) {
			var i = _g1++;
			advance += group.getAdvance(i);
			if(x <= group.offsetX + advance) {
				if(x <= group.offsetX + (advance - group.getAdvance(i)) + group.getAdvance(i) / 2) {
					return group.startIndex + i;
				} else if(group.startIndex + i < group.endIndex) {
					return group.startIndex + i + 1;
				} else {
					return group.endIndex;
				}
			}
		}
		return group.endIndex;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		this.__getRenderTransform();
		this.__updateLayout();
		var px = this.__renderTransform.__transformInverseX(x,y);
		var py = this.__renderTransform.__transformInverseY(x,y);
		if(this.__textEngine.bounds.contains(px,py)) {
			if(stack != null) {
				stack.push(hitObject);
			}
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		this.__getRenderTransform();
		this.__updateLayout();
		var px = this.__renderTransform.__transformInverseX(x,y);
		var py = this.__renderTransform.__transformInverseY(x,y);
		if(this.__textEngine.bounds.contains(px,py)) {
			return true;
		}
		return false;
	}
	,__renderCairo: function(renderSession) {
	}
	,__renderCanvas: function(renderSession) {
		openfl__$internal_renderer_canvas_CanvasTextField.render(this,renderSession,this.__worldTransform);
		if(this.__textEngine.antiAliasType == 0 && this.__textEngine.gridFitType == 1) {
			var smoothingEnabled = renderSession.context.imageSmoothingEnabled;
			if(smoothingEnabled) {
				renderSession.context.mozImageSmoothingEnabled = false;
				renderSession.context.msImageSmoothingEnabled = false;
				renderSession.context.imageSmoothingEnabled = false;
			}
			openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
			if(smoothingEnabled) {
				renderSession.context.mozImageSmoothingEnabled = true;
				renderSession.context.msImageSmoothingEnabled = true;
				renderSession.context.imageSmoothingEnabled = true;
			}
		} else {
			openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
		}
	}
	,__renderDOM: function(renderSession) {
	}
	,__renderDOMClear: function(renderSession) {
	}
	,__renderGL: function(renderSession) {
		openfl__$internal_renderer_canvas_CanvasTextField.render(this,renderSession,this.__worldTransform);
		openfl_display_InteractiveObject.prototype.__renderGL.call(this,renderSession);
	}
	,__renderGLMask: function(renderSession) {
		openfl__$internal_renderer_canvas_CanvasTextField.render(this,renderSession,this.__worldTransform);
		openfl_display_InteractiveObject.prototype.__renderGLMask.call(this,renderSession);
	}
	,__startCursorTimer: function() {
		this.__cursorTimer = $hx_exports.haxe.Timer.delay($bind(this,this.__startCursorTimer),600);
		this.__showCursor = !this.__showCursor;
		this.__dirty = true;
		this.__setRenderDirty();
	}
	,__startTextInput: function() {
		if(this.__caretIndex < 0) {
			this.__caretIndex = $hx_$exports_lime_text_UTF8String.get_length(this.__text);
			this.__selectionIndex = this.__caretIndex;
		}
		var enableInput = true;
		if(enableInput) {
			this.__enableInput();
		}
	}
	,__stopCursorTimer: function() {
		if(this.__cursorTimer != null) {
			this.__cursorTimer.stop();
			this.__cursorTimer = null;
		}
		if(this.__showCursor) {
			this.__showCursor = false;
			this.__dirty = true;
			this.__setRenderDirty();
		}
	}
	,__stopTextInput: function() {
		var disableInput = true;
		if(disableInput) {
			this.__disableInput();
		}
	}
	,__updateLayout: function() {
		if(this.__layoutDirty) {
			var cacheWidth = this.__textEngine.width;
			var cacheHeight = this.__textEngine.height;
			this.__textEngine.update();
			if(this.__textEngine.autoSize != 2) {
				if(this.__textEngine.width != cacheWidth) {
					var _g = this.__textEngine.autoSize;
					switch(_g) {
					case 0:
						var _g1 = this;
						_g1.set_x(_g1.get_x() + (cacheWidth - this.__textEngine.width) / 2);
						break;
					case 3:
						var _g2 = this;
						_g2.set_x(_g2.get_x() + (cacheWidth - this.__textEngine.width));
						break;
					default:
					}
				}
				this.__textEngine.getBounds();
			}
			this.__layoutDirty = false;
		}
	}
	,__updateScrollH: function() {
		if(!this.get_multiline() && this.get_type() == 1) {
			this.__layoutDirty = true;
			this.__updateLayout();
			var offsetX = this.__textEngine.textWidth - this.__textEngine.width + 4;
			if(offsetX > 0) {
				this.set_scrollH($hx_exports.Math.ceil(offsetX));
			} else {
				this.set_scrollH(0);
			}
		}
	}
	,__updateText: function(value) {
		this.__textEngine.set_text(value);
		this.__text = this.__textEngine.text;
		if($hx_$exports_lime_text_UTF8String.get_length(this.__text) < this.__caretIndex) {
			this.__selectionIndex = this.__caretIndex = $hx_$exports_lime_text_UTF8String.get_length(this.__text);
		}
		if(!this.__displayAsPassword) {
			this.__textEngine.set_text(this.__text);
		} else {
			var length = $hx_$exports_lime_text_UTF8String.get_length(this.get_text());
			var mask = "";
			var _g1 = 0;
			var _g = length;
			while(_g1 < _g) {
				var i = _g1++;
				mask += "*";
			}
			this.__textEngine.set_text(mask);
		}
	}
	,__updateTransforms: function(overrideTransform) {
		openfl_display_InteractiveObject.prototype.__updateTransforms.call(this,overrideTransform);
		this.__renderTransform.__translateTransformed(this.__offsetX,this.__offsetY);
	}
	,get_antiAliasType: function() {
		return this.__textEngine.antiAliasType;
	}
	,set_antiAliasType: function(value) {
		var tmp = value != this.__textEngine.antiAliasType;
		return this.__textEngine.antiAliasType = value;
	}
	,get_autoSize: function() {
		return this.__textEngine.autoSize;
	}
	,set_autoSize: function(value) {
		if(value != this.__textEngine.autoSize) {
			this.__dirty = true;
			this.__layoutDirty = true;
			this.__setRenderDirty();
		}
		return this.__textEngine.autoSize = value;
	}
	,get_background: function() {
		return this.__textEngine.background;
	}
	,set_background: function(value) {
		if(value != this.__textEngine.background) {
			this.__dirty = true;
			this.__setRenderDirty();
		}
		return this.__textEngine.background = value;
	}
	,get_backgroundColor: function() {
		return this.__textEngine.backgroundColor;
	}
	,set_backgroundColor: function(value) {
		if(value != this.__textEngine.backgroundColor) {
			this.__dirty = true;
			this.__setRenderDirty();
		}
		return this.__textEngine.backgroundColor = value;
	}
	,get_border: function() {
		return this.__textEngine.border;
	}
	,set_border: function(value) {
		if(value != this.__textEngine.border) {
			this.__dirty = true;
			this.__setRenderDirty();
		}
		return this.__textEngine.border = value;
	}
	,get_borderColor: function() {
		return this.__textEngine.borderColor;
	}
	,set_borderColor: function(value) {
		if(value != this.__textEngine.borderColor) {
			this.__dirty = true;
			this.__setRenderDirty();
		}
		return this.__textEngine.borderColor = value;
	}
	,get_bottomScrollV: function() {
		this.__updateLayout();
		return this.__textEngine.bottomScrollV;
	}
	,get_cacheAsBitmap: function() {
		if(this.__filters != null && this.__filters.length == 1 && Std.is(this.__filters[0],openfl_filters_GlowFilter)) {
			return false;
		}
		return openfl_display_InteractiveObject.prototype.get_cacheAsBitmap.call(this);
	}
	,get_caretIndex: function() {
		return this.__caretIndex;
	}
	,get_defaultTextFormat: function() {
		return this.__textFormat.clone();
	}
	,set_defaultTextFormat: function(value) {
		this.__textFormat.__merge(value);
		this.__layoutDirty = true;
		this.__dirty = true;
		this.__setRenderDirty();
		return value;
	}
	,get_displayAsPassword: function() {
		return this.__displayAsPassword;
	}
	,set_displayAsPassword: function(value) {
		if(value != this.__displayAsPassword) {
			this.__dirty = true;
			this.__layoutDirty = true;
			this.__setRenderDirty();
			this.__displayAsPassword = value;
			this.__updateText(this.__text);
		}
		return value;
	}
	,get_embedFonts: function() {
		return this.__textEngine.embedFonts;
	}
	,set_embedFonts: function(value) {
		return this.__textEngine.embedFonts = value;
	}
	,get_gridFitType: function() {
		return this.__textEngine.gridFitType;
	}
	,set_gridFitType: function(value) {
		return this.__textEngine.gridFitType = value;
	}
	,get_height: function() {
		this.__updateLayout();
		return this.__textEngine.height * $hx_exports.Math.abs(this.get_scaleY());
	}
	,set_height: function(value) {
		if(value != this.__textEngine.height) {
			this.__setTransformDirty();
			this.__dirty = true;
			this.__layoutDirty = true;
			this.__setRenderDirty();
			this.__textEngine.height = value;
		}
		return this.__textEngine.height * $hx_exports.Math.abs(this.get_scaleY());
	}
	,get_htmlText: function() {
		return this.__text;
	}
	,set_htmlText: function(value) {
		if(!this.__isHTML || this.__text != value) {
			this.__dirty = true;
			this.__layoutDirty = true;
			this.__setRenderDirty();
		}
		this.__isHTML = true;
		value = openfl__$internal_text_HTMLParser.parse(value,this.__textFormat,this.__textEngine.textFormatRanges);
		this.__updateText(value);
		return value;
	}
	,get_length: function() {
		if(this.__text != null) {
			return $hx_$exports_lime_text_UTF8String.get_length(this.__text);
		}
		return 0;
	}
	,get_maxChars: function() {
		return this.__textEngine.maxChars;
	}
	,set_maxChars: function(value) {
		if(value != this.__textEngine.maxChars) {
			this.__textEngine.maxChars = value;
			this.__dirty = true;
			this.__layoutDirty = true;
			this.__setRenderDirty();
		}
		return value;
	}
	,get_maxScrollH: function() {
		this.__updateLayout();
		return this.__textEngine.maxScrollH;
	}
	,get_maxScrollV: function() {
		this.__updateLayout();
		return this.__textEngine.maxScrollV;
	}
	,get_mouseWheelEnabled: function() {
		return this.__mouseWheelEnabled;
	}
	,set_mouseWheelEnabled: function(value) {
		return this.__mouseWheelEnabled = value;
	}
	,get_multiline: function() {
		return this.__textEngine.multiline;
	}
	,set_multiline: function(value) {
		if(value != this.__textEngine.multiline) {
			this.__dirty = true;
			this.__layoutDirty = true;
			this.__updateText(this.__text);
			this.__updateScrollH();
			this.__setRenderDirty();
		}
		return this.__textEngine.multiline = value;
	}
	,get_numLines: function() {
		this.__updateLayout();
		return this.__textEngine.numLines;
	}
	,get_restrict: function() {
		return this.__textEngine.restrict;
	}
	,set_restrict: function(value) {
		if(this.__textEngine.restrict != value) {
			this.__textEngine.set_restrict(value);
			this.__updateText(this.__text);
		}
		return value;
	}
	,get_scrollH: function() {
		return this.__textEngine.scrollH;
	}
	,set_scrollH: function(value) {
		this.__updateLayout();
		if(value > this.__textEngine.maxScrollH) {
			value = this.__textEngine.maxScrollH;
		}
		if(value < 0) {
			value = 0;
		}
		if(value != this.__textEngine.scrollH) {
			this.__dirty = true;
			this.__setRenderDirty();
			this.dispatchEvent(new openfl_events_Event("scroll"));
		}
		return this.__textEngine.scrollH = value;
	}
	,get_scrollV: function() {
		return this.__textEngine.scrollV;
	}
	,set_scrollV: function(value) {
		this.__updateLayout();
		if(value > this.__textEngine.maxScrollV) {
			value = this.__textEngine.maxScrollV;
		}
		if(value < 1) {
			value = 1;
		}
		if(value != this.__textEngine.scrollV) {
			this.__dirty = true;
			this.__setRenderDirty();
			this.dispatchEvent(new openfl_events_Event("scroll"));
		}
		return this.__textEngine.scrollV = value;
	}
	,get_selectable: function() {
		return this.__textEngine.selectable;
	}
	,set_selectable: function(value) {
		if(value != this.__textEngine.selectable && this.get_type() == 1) {
			if(this.stage != null && this.stage.get_focus() == this) {
				this.__startTextInput();
			} else if(!value) {
				this.__stopTextInput();
			}
		}
		return this.__textEngine.selectable = value;
	}
	,get_selectionBeginIndex: function() {
		return Std.int($hx_exports.Math.min(this.__caretIndex,this.__selectionIndex));
	}
	,get_selectionEndIndex: function() {
		return Std.int($hx_exports.Math.max(this.__caretIndex,this.__selectionIndex));
	}
	,get_sharpness: function() {
		return this.__textEngine.sharpness;
	}
	,set_sharpness: function(value) {
		if(value != this.__textEngine.sharpness) {
			this.__dirty = true;
			this.__setRenderDirty();
		}
		return this.__textEngine.sharpness = value;
	}
	,get_tabEnabled: function() {
		if(this.__tabEnabled == null) {
			return this.__textEngine.type == 1;
		} else {
			return this.__tabEnabled;
		}
	}
	,get_text: function() {
		return this.__text;
	}
	,set_text: function(value) {
		if(this.__isHTML || this.__text != value) {
			this.__dirty = true;
			this.__layoutDirty = true;
			this.__setRenderDirty();
		} else {
			return value;
		}
		if(this.__textEngine.textFormatRanges.data.get_length() > 1) {
			var this1 = this.__textEngine.textFormatRanges;
			var len = this.__textEngine.textFormatRanges.data.get_length() - 1;
			new openfl__$Vector_AbstractVector(this1.data.splice(1,len));
		}
		var utfValue = value;
		var range = this.__textEngine.textFormatRanges.data.get(0);
		range.format = this.__textFormat;
		range.start = 0;
		range.end = $hx_$exports_lime_text_UTF8String.get_length(utfValue);
		this.__isHTML = false;
		this.__updateText(value);
		return value;
	}
	,get_textColor: function() {
		return this.__textFormat.color;
	}
	,set_textColor: function(value) {
		if(value != this.__textFormat.color) {
			this.__dirty = true;
			this.__setRenderDirty();
		}
		var _g = 0;
		var _g1 = this.__textEngine.textFormatRanges;
		while(_g < _g1.data.get_length()) {
			var range = _g1.data.get(_g);
			++_g;
			range.format.color = value;
		}
		return this.__textFormat.color = value;
	}
	,get_textWidth: function() {
		this.__updateLayout();
		return this.__textEngine.textWidth;
	}
	,get_textHeight: function() {
		this.__updateLayout();
		return this.__textEngine.textHeight;
	}
	,get_type: function() {
		return this.__textEngine.type;
	}
	,set_type: function(value) {
		if(value != this.__textEngine.type) {
			if(value == 1) {
				this.addEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
				this.this_onFocusIn(null);
				this.__textEngine.__useIntAdvances = true;
			} else {
				this.removeEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
				this.__stopTextInput();
				this.__textEngine.__useIntAdvances = null;
			}
			this.__dirty = true;
			this.__setRenderDirty();
		}
		return this.__textEngine.type = value;
	}
	,get_width: function() {
		this.__updateLayout();
		return this.__textEngine.width * $hx_exports.Math.abs(this.__scaleX);
	}
	,set_width: function(value) {
		if(value != this.__textEngine.width) {
			this.__setTransformDirty();
			this.__dirty = true;
			this.__layoutDirty = true;
			this.__setRenderDirty();
			this.__textEngine.width = value;
		}
		return this.__textEngine.width * $hx_exports.Math.abs(this.__scaleX);
	}
	,get_wordWrap: function() {
		return this.__textEngine.wordWrap;
	}
	,set_wordWrap: function(value) {
		if(value != this.__textEngine.wordWrap) {
			this.__dirty = true;
			this.__layoutDirty = true;
			this.__setRenderDirty();
		}
		return this.__textEngine.wordWrap = value;
	}
	,stage_onMouseMove: function(event) {
		if(this.stage == null) {
			return;
		}
		if(this.__textEngine.selectable && this.__selectionIndex >= 0) {
			this.__updateLayout();
			var position = this.__getPosition(this.get_mouseX() + this.get_scrollH(),this.get_mouseY());
			if(position != this.__caretIndex) {
				this.__caretIndex = position;
				this.__dirty = true;
				this.__setRenderDirty();
			}
		}
	}
	,stage_onMouseUp: function(event) {
		if(this.stage == null) {
			return;
		}
		this.stage.removeEventListener("mouseMove",$bind(this,this.stage_onMouseMove));
		this.stage.removeEventListener("mouseUp",$bind(this,this.stage_onMouseUp));
		if(this.stage.get_focus() == this) {
			this.__getWorldTransform();
			this.__updateLayout();
			var px = this.__worldTransform.__transformInverseX(this.get_x(),this.get_y());
			var py = this.__worldTransform.__transformInverseY(this.get_x(),this.get_y());
			var upPos = this.__getPosition(this.get_mouseX() + this.get_scrollH(),this.get_mouseY());
			var leftPos = Std.int($hx_exports.Math.min(this.__selectionIndex,upPos));
			var rightPos = Std.int($hx_exports.Math.max(this.__selectionIndex,upPos));
			this.__selectionIndex = leftPos;
			this.__caretIndex = rightPos;
			if(this.__inputEnabled) {
				this.this_onFocusIn(null);
				this.__stopCursorTimer();
				this.__startCursorTimer();
			}
		}
	}
	,this_onAddedToStage: function(event) {
		this.this_onFocusIn(null);
	}
	,this_onFocusIn: function(event) {
		if(this.get_selectable() && this.get_type() == 1 && this.stage != null && this.stage.get_focus() == this) {
			this.__startTextInput();
		}
	}
	,this_onFocusOut: function(event) {
		this.__stopCursorTimer();
		if(event.relatedObject == null || !Std.is(event.relatedObject,openfl_text_TextField)) {
			this.__stopTextInput();
		} else {
			this.stage.window.onTextInput.remove($bind(this,this.window_onTextInput));
			this.stage.window.onKeyDown.remove($bind(this,this.window_onKeyDown));
			this.__inputEnabled = false;
		}
		if(this.__selectionIndex != this.__caretIndex) {
			this.__selectionIndex = this.__caretIndex;
			this.__dirty = true;
			this.__setRenderDirty();
		}
	}
	,this_onKeyDown: function(event) {
		if(this.get_selectable() && this.get_type() != 1 && event.keyCode == 67 && (event.commandKey || event.ctrlKey)) {
			if(this.__caretIndex != this.__selectionIndex) {
				$hx_exports.lime.system.Clipboard.set_text($hx_$exports_lime_text_UTF8String.substring(this.__text,this.__caretIndex,this.__selectionIndex));
			}
		}
	}
	,this_onMouseDown: function(event) {
		if(!this.get_selectable()) {
			return;
		}
		this.__updateLayout();
		this.__caretIndex = this.__getPosition(this.get_mouseX() + this.get_scrollH(),this.get_mouseY());
		this.__selectionIndex = this.__caretIndex;
		this.__dirty = true;
		this.__setRenderDirty();
		this.stage.addEventListener("mouseMove",$bind(this,this.stage_onMouseMove));
		this.stage.addEventListener("mouseUp",$bind(this,this.stage_onMouseUp));
	}
	,window_onKeyDown: function(key,modifier) {
		switch(key) {
		case 8:
			if(this.__selectionIndex == this.__caretIndex && this.__caretIndex > 0) {
				this.__selectionIndex = this.__caretIndex - 1;
			}
			if(this.__selectionIndex != this.__caretIndex) {
				this.replaceSelectedText("");
				this.__selectionIndex = this.__caretIndex;
				this.dispatchEvent(new openfl_events_Event("change",true));
			}
			break;
		case 97:
			if($hx_$exports_lime_ui_KeyModifier.get_metaKey(modifier) || $hx_$exports_lime_ui_KeyModifier.get_ctrlKey(modifier)) {
				this.__caretIndex = $hx_$exports_lime_text_UTF8String.get_length(this.__text);
				this.__selectionIndex = 0;
			}
			break;
		case 99:
			if($hx_$exports_lime_ui_KeyModifier.get_metaKey(modifier) || $hx_$exports_lime_ui_KeyModifier.get_ctrlKey(modifier)) {
				if(this.__caretIndex != this.__selectionIndex) {
					$hx_exports.lime.system.Clipboard.set_text($hx_$exports_lime_text_UTF8String.substring(this.__text,this.__caretIndex,this.__selectionIndex));
				}
			}
			break;
		case 120:
			if($hx_$exports_lime_ui_KeyModifier.get_metaKey(modifier) || $hx_$exports_lime_ui_KeyModifier.get_ctrlKey(modifier)) {
				if(this.__caretIndex != this.__selectionIndex) {
					$hx_exports.lime.system.Clipboard.set_text($hx_$exports_lime_text_UTF8String.substring(this.__text,this.__caretIndex,this.__selectionIndex));
					this.replaceSelectedText("");
					this.dispatchEvent(new openfl_events_Event("change",true));
				}
			}
			break;
		case 127:
			if(this.__selectionIndex == this.__caretIndex && this.__caretIndex < $hx_$exports_lime_text_UTF8String.get_length(this.__text)) {
				this.__selectionIndex = this.__caretIndex + 1;
			}
			if(this.__selectionIndex != this.__caretIndex) {
				this.replaceSelectedText("");
				this.__selectionIndex = this.__caretIndex;
				this.dispatchEvent(new openfl_events_Event("change",true));
			}
			break;
		case 1073741898:
			this.__caretBeginningOfLine();
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 1073741901:
			this.__caretEndOfLine();
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 1073741903:
			if($hx_$exports_lime_ui_KeyModifier.get_metaKey(modifier)) {
				this.__caretEndOfLine();
				if(!$hx_$exports_lime_ui_KeyModifier.get_shiftKey(modifier)) {
					this.__selectionIndex = this.__caretIndex;
				}
			} else if($hx_$exports_lime_ui_KeyModifier.get_shiftKey(modifier)) {
				this.__caretNextCharacter();
			} else {
				if(this.__selectionIndex == this.__caretIndex) {
					this.__caretNextCharacter();
				} else {
					this.__caretIndex = Std.int($hx_exports.Math.max(this.__caretIndex,this.__selectionIndex));
				}
				this.__selectionIndex = this.__caretIndex;
			}
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 1073741904:
			if($hx_$exports_lime_ui_KeyModifier.get_metaKey(modifier)) {
				this.__caretBeginningOfLine();
				if(!$hx_$exports_lime_ui_KeyModifier.get_shiftKey(modifier)) {
					this.__selectionIndex = this.__caretIndex;
				}
			} else if($hx_$exports_lime_ui_KeyModifier.get_shiftKey(modifier)) {
				this.__caretPreviousCharacter();
			} else {
				if(this.__selectionIndex == this.__caretIndex) {
					this.__caretPreviousCharacter();
				} else {
					this.__caretIndex = Std.int($hx_exports.Math.min(this.__caretIndex,this.__selectionIndex));
				}
				this.__selectionIndex = this.__caretIndex;
			}
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 1073741905:
			if($hx_$exports_lime_ui_KeyModifier.get_shiftKey(modifier)) {
				this.__caretNextLine();
			} else {
				if(this.__selectionIndex == this.__caretIndex) {
					this.__caretNextLine();
				} else {
					var lineIndex = this.getLineIndexOfChar(Std.int($hx_exports.Math.max(this.__caretIndex,this.__selectionIndex)));
					this.__caretNextLine(lineIndex,Std.int($hx_exports.Math.min(this.__caretIndex,this.__selectionIndex)));
				}
				this.__selectionIndex = this.__caretIndex;
			}
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 1073741906:
			if($hx_$exports_lime_ui_KeyModifier.get_shiftKey(modifier)) {
				this.__caretPreviousLine();
			} else {
				if(this.__selectionIndex == this.__caretIndex) {
					this.__caretPreviousLine();
				} else {
					var lineIndex1 = this.getLineIndexOfChar(Std.int($hx_exports.Math.min(this.__caretIndex,this.__selectionIndex)));
					this.__caretPreviousLine(lineIndex1,Std.int($hx_exports.Math.min(this.__caretIndex,this.__selectionIndex)));
				}
				this.__selectionIndex = this.__caretIndex;
			}
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 13:case 1073741912:
			if(this.__textEngine.multiline) {
				this.replaceSelectedText("\n");
				this.dispatchEvent(new openfl_events_Event("change",true));
			}
			break;
		default:
		}
	}
	,window_onTextInput: function(value) {
		this.replaceSelectedText(value);
		this.dispatchEvent(new openfl_events_Event("change",true));
	}
	,__class__: openfl_text_TextField
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{set_wordWrap:"set_wordWrap",get_wordWrap:"get_wordWrap",set_type:"set_type",get_type:"get_type",get_textWidth:"get_textWidth",get_textHeight:"get_textHeight",set_textColor:"set_textColor",get_textColor:"get_textColor",set_text:"set_text",get_text:"get_text",set_sharpness:"set_sharpness",get_sharpness:"get_sharpness",get_selectionEndIndex:"get_selectionEndIndex",get_selectionBeginIndex:"get_selectionBeginIndex",set_selectable:"set_selectable",get_selectable:"get_selectable",set_scrollV:"set_scrollV",get_scrollV:"get_scrollV",set_scrollH:"set_scrollH",get_scrollH:"get_scrollH",set_restrict:"set_restrict",get_restrict:"get_restrict",get_numLines:"get_numLines",set_multiline:"set_multiline",get_multiline:"get_multiline",set_mouseWheelEnabled:"set_mouseWheelEnabled",get_mouseWheelEnabled:"get_mouseWheelEnabled",get_maxScrollV:"get_maxScrollV",get_maxScrollH:"get_maxScrollH",set_maxChars:"set_maxChars",get_maxChars:"get_maxChars",get_length:"get_length",set_htmlText:"set_htmlText",get_htmlText:"get_htmlText",set_gridFitType:"set_gridFitType",get_gridFitType:"get_gridFitType",set_embedFonts:"set_embedFonts",get_embedFonts:"get_embedFonts",set_displayAsPassword:"set_displayAsPassword",get_displayAsPassword:"get_displayAsPassword",set_defaultTextFormat:"set_defaultTextFormat",get_defaultTextFormat:"get_defaultTextFormat",get_caretIndex:"get_caretIndex",get_bottomScrollV:"get_bottomScrollV",set_borderColor:"set_borderColor",get_borderColor:"get_borderColor",set_border:"set_border",get_border:"get_border",set_backgroundColor:"set_backgroundColor",get_backgroundColor:"get_backgroundColor",set_background:"set_background",get_background:"get_background",set_autoSize:"set_autoSize",get_autoSize:"get_autoSize",set_antiAliasType:"set_antiAliasType",get_antiAliasType:"get_antiAliasType"})
});
var openfl_display_FPS = $hx_exports["openfl"]["display"]["FPS"] = function(x,y,color) {
	if(color == null) {
		color = 0;
	}
	if(y == null) {
		y = 10;
	}
	if(x == null) {
		x = 10;
	}
	openfl_text_TextField.call(this);
	this.set_x(x);
	this.set_y(y);
	this.currentFPS = 0;
	this.set_selectable(false);
	this.mouseEnabled = false;
	this.set_defaultTextFormat(new openfl_text_TextFormat("_sans",12,color));
	this.set_text("FPS: ");
	this.cacheCount = 0;
	this.times = [];
	this.addEventListener("enterFrame",$bind(this,this.this_onEnterFrame));
};
$hxClasses["openfl.display.FPS"] = openfl_display_FPS;
openfl_display_FPS.__name__ = ["openfl","display","FPS"];
openfl_display_FPS.__super__ = openfl_text_TextField;
openfl_display_FPS.prototype = $extend(openfl_text_TextField.prototype,{
	currentFPS: null
	,cacheCount: null
	,times: null
	,this_onEnterFrame: function(event) {
		var currentTime = $hx_exports.haxe.Timer.stamp();
		this.times.push(currentTime);
		while(this.times[0] < currentTime - 1) this.times.shift();
		var currentCount = this.times.length;
		this.currentFPS = $hx_exports.Math.round((currentCount + this.cacheCount) / 2);
		if(currentCount != this.cacheCount) {
			this.set_text("FPS: " + this.currentFPS);
		}
		this.cacheCount = currentCount;
	}
	,__class__: openfl_display_FPS
});
var openfl_display_FrameLabel = $hx_exports["openfl"]["display"]["FrameLabel"] = function(name,frame) {
	openfl_events_EventDispatcher.call(this);
	this.__name = name;
	this.__frame = frame;
};
$hxClasses["openfl.display.FrameLabel"] = openfl_display_FrameLabel;
openfl_display_FrameLabel.__name__ = ["openfl","display","FrameLabel"];
openfl_display_FrameLabel.__super__ = openfl_events_EventDispatcher;
openfl_display_FrameLabel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__frame: null
	,__name: null
	,get_frame: function() {
		return this.__frame;
	}
	,get_name: function() {
		return this.__name;
	}
	,__class__: openfl_display_FrameLabel
	,__properties__: {get_name:"get_name",get_frame:"get_frame"}
});
var openfl_display__$GradientType_GradientType_$Impl_$ = $hx_exports["openfl"]["display"]["GradientType"] = {};
$hxClasses["openfl.display._GradientType.GradientType_Impl_"] = openfl_display__$GradientType_GradientType_$Impl_$;
openfl_display__$GradientType_GradientType_$Impl_$.__name__ = ["openfl","display","_GradientType","GradientType_Impl_"];
openfl_display__$GradientType_GradientType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "linear":
		return 0;
	case "radial":
		return 1;
	default:
		return null;
	}
};
openfl_display__$GradientType_GradientType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "linear";
	case 1:
		return "radial";
	default:
		return null;
	}
};
var openfl_display_Graphics = $hx_exports["openfl"]["display"]["Graphics"] = function(owner) {
	this.__dirty = true;
	this.__owner = owner;
	this.__commands = new openfl__$internal_renderer_DrawCommandBuffer();
	this.__strokePadding = 0;
	this.__positionX = 0;
	this.__positionY = 0;
	this.__renderTransform = new openfl_geom_Matrix();
	this.__worldTransform = new openfl_geom_Matrix();
	this.__width = 0;
	this.__height = 0;
	this.moveTo(0,0);
};
$hxClasses["openfl.display.Graphics"] = openfl_display_Graphics;
openfl_display_Graphics.__name__ = ["openfl","display","Graphics"];
openfl_display_Graphics.prototype = {
	__bounds: null
	,__commands: null
	,__dirty: null
	,__height: null
	,__managed: null
	,__positionX: null
	,__positionY: null
	,__renderTransform: null
	,__strokePadding: null
	,__transformDirty: null
	,__visible: null
	,__owner: null
	,__width: null
	,__worldTransform: null
	,__canvas: null
	,__context: null
	,__bitmap: null
	,beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) {
			smooth = false;
		}
		if(repeat == null) {
			repeat = true;
		}
		this.__commands.beginBitmapFill(bitmap,matrix != null ? matrix.clone() : null,repeat,smooth);
		this.__visible = true;
	}
	,beginFill: function(color,alpha) {
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 0;
		}
		this.__commands.beginFill(color & 16777215,alpha);
		if(alpha > 0) {
			this.__visible = true;
		}
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		if(focalPointRatio == null) {
			focalPointRatio = 0;
		}
		if(interpolationMethod == null) {
			interpolationMethod = 1;
		}
		if(spreadMethod == null) {
			spreadMethod = 0;
		}
		this.__commands.beginGradientFill(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
		var _g = 0;
		while(_g < alphas.length) {
			var alpha = alphas[_g];
			++_g;
			if(alpha > 0) {
				this.__visible = true;
				break;
			}
		}
	}
	,clear: function() {
		this.__commands.clear();
		this.__strokePadding = 0;
		if(this.__bounds != null) {
			this.set___dirty(true);
			this.__transformDirty = true;
			this.__bounds = null;
		}
		this.__visible = false;
		this.moveTo(0,0);
	}
	,copyFrom: function(sourceGraphics) {
		this.__bounds = sourceGraphics.__bounds != null ? sourceGraphics.__bounds.clone() : null;
		this.__commands = sourceGraphics.__commands.copy();
		this.set___dirty(true);
		this.__strokePadding = sourceGraphics.__strokePadding;
		this.__positionX = sourceGraphics.__positionX;
		this.__positionY = sourceGraphics.__positionY;
		this.__transformDirty = true;
		this.__visible = sourceGraphics.__visible;
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		var ix1 = anchorX;
		var ix2 = anchorX;
		if(!((controlX1 < anchorX && controlX1 > this.__positionX || controlX1 > anchorX && controlX1 < this.__positionX) && (controlX2 < anchorX && controlX2 > this.__positionX || controlX2 > anchorX && controlX2 < this.__positionX))) {
			var u = 2 * this.__positionX - 4 * controlX1 + 2 * controlX2;
			var v = controlX1 - this.__positionX;
			var w = -this.__positionX + 3 * controlX1 + anchorX - 3 * controlX2;
			var t1 = (-u + $hx_exports.Math.sqrt(u * u - 4 * v * w)) / (2 * w);
			var t2 = (-u - $hx_exports.Math.sqrt(u * u - 4 * v * w)) / (2 * w);
			if(t1 > 0 && t1 < 1) {
				ix1 = this.__calculateBezierCubicPoint(t1,this.__positionX,controlX1,controlX2,anchorX);
			}
			if(t2 > 0 && t2 < 1) {
				ix2 = this.__calculateBezierCubicPoint(t2,this.__positionX,controlX1,controlX2,anchorX);
			}
		}
		var iy1 = anchorY;
		var iy2 = anchorY;
		if(!((controlY1 < anchorY && controlY1 > this.__positionX || controlY1 > anchorY && controlY1 < this.__positionX) && (controlY2 < anchorY && controlY2 > this.__positionX || controlY2 > anchorY && controlY2 < this.__positionX))) {
			var u1 = 2 * this.__positionX - 4 * controlY1 + 2 * controlY2;
			var v1 = controlY1 - this.__positionX;
			var w1 = -this.__positionX + 3 * controlY1 + anchorY - 3 * controlY2;
			var t11 = (-u1 + $hx_exports.Math.sqrt(u1 * u1 - 4 * v1 * w1)) / (2 * w1);
			var t21 = (-u1 - $hx_exports.Math.sqrt(u1 * u1 - 4 * v1 * w1)) / (2 * w1);
			if(t11 > 0 && t11 < 1) {
				iy1 = this.__calculateBezierCubicPoint(t11,this.__positionX,controlY1,controlY2,anchorY);
			}
			if(t21 > 0 && t21 < 1) {
				iy2 = this.__calculateBezierCubicPoint(t21,this.__positionX,controlY1,controlY2,anchorY);
			}
		}
		this.__inflateBounds(ix1 - this.__strokePadding,iy1 - this.__strokePadding);
		this.__inflateBounds(ix1 + this.__strokePadding,iy1 + this.__strokePadding);
		this.__inflateBounds(ix2 - this.__strokePadding,iy2 - this.__strokePadding);
		this.__inflateBounds(ix2 + this.__strokePadding,iy2 + this.__strokePadding);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		this.__commands.cubicCurveTo(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY);
		this.set___dirty(true);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		var ix;
		var iy;
		if(controlX < anchorX && controlX > this.__positionX || controlX > anchorX && controlX < this.__positionX) {
			ix = anchorX;
		} else {
			var tx = (this.__positionX - controlX) / (this.__positionX - 2 * controlX + anchorX);
			ix = this.__calculateBezierQuadPoint(tx,this.__positionX,controlX,anchorX);
		}
		if(controlY < anchorY && controlY > this.__positionY || controlY > anchorY && controlY < this.__positionY) {
			iy = anchorY;
		} else {
			var ty = (this.__positionY - controlY) / (this.__positionY - 2 * controlY + anchorY);
			iy = this.__calculateBezierQuadPoint(ty,this.__positionY,controlY,anchorY);
		}
		this.__inflateBounds(ix - this.__strokePadding,iy - this.__strokePadding);
		this.__inflateBounds(ix + this.__strokePadding,iy + this.__strokePadding);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__commands.curveTo(controlX,controlY,anchorX,anchorY);
		this.set___dirty(true);
	}
	,drawCircle: function(x,y,radius) {
		if(radius <= 0) {
			return;
		}
		this.__inflateBounds(x - radius - this.__strokePadding,y - radius - this.__strokePadding);
		this.__inflateBounds(x + radius + this.__strokePadding,y + radius + this.__strokePadding);
		this.__commands.drawCircle(x,y,radius);
		this.set___dirty(true);
	}
	,drawEllipse: function(x,y,width,height) {
		if(width <= 0 || height <= 0) {
			return;
		}
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		this.__commands.drawEllipse(x,y,width,height);
		this.set___dirty(true);
	}
	,drawGraphicsData: function(graphicsData) {
		var fill;
		var bitmapFill;
		var gradientFill;
		var stroke;
		var path;
		var trianglePath;
		var _g = 0;
		while(_g < graphicsData.data.get_length()) {
			var graphics = graphicsData.data.get(_g);
			++_g;
			var _g1 = graphics.__graphicsDataType;
			switch(_g1) {
			case openfl_display_GraphicsDataType.STROKE:
				stroke = graphics;
				if(stroke.fill != null) {
					var thickness = stroke.thickness;
					if(isNaN(thickness)) {
						thickness = null;
					}
					var _g11 = stroke.fill.__graphicsFillType;
					switch(_g11) {
					case openfl_display_GraphicsFillType.SOLID_FILL:
						fill = stroke.fill;
						this.lineStyle(thickness,fill.color,fill.alpha,stroke.pixelHinting,stroke.scaleMode,stroke.caps,stroke.joints,stroke.miterLimit);
						break;
					case openfl_display_GraphicsFillType.GRADIENT_FILL:
						gradientFill = stroke.fill;
						this.lineStyle(thickness,0,1,stroke.pixelHinting,stroke.scaleMode,stroke.caps,stroke.joints,stroke.miterLimit);
						this.lineGradientStyle(gradientFill.type,gradientFill.colors,gradientFill.alphas,gradientFill.ratios,gradientFill.matrix,gradientFill.spreadMethod,gradientFill.interpolationMethod,gradientFill.focalPointRatio);
						break;
					case openfl_display_GraphicsFillType.BITMAP_FILL:
						bitmapFill = stroke.fill;
						this.lineStyle(thickness,0,1,stroke.pixelHinting,stroke.scaleMode,stroke.caps,stroke.joints,stroke.miterLimit);
						this.lineBitmapStyle(bitmapFill.bitmapData,bitmapFill.matrix,bitmapFill.repeat,bitmapFill.smooth);
						break;
					default:
					}
				} else {
					this.lineStyle();
				}
				break;
			case openfl_display_GraphicsDataType.SOLID:
				fill = graphics;
				this.beginFill(fill.color,fill.alpha);
				break;
			case openfl_display_GraphicsDataType.GRADIENT:
				gradientFill = graphics;
				this.beginGradientFill(gradientFill.type,gradientFill.colors,gradientFill.alphas,gradientFill.ratios,gradientFill.matrix,gradientFill.spreadMethod,gradientFill.interpolationMethod,gradientFill.focalPointRatio);
				break;
			case openfl_display_GraphicsDataType.PATH:
				path = graphics;
				this.drawPath(path.commands,path.data,path.winding);
				break;
			case openfl_display_GraphicsDataType.BITMAP:
				bitmapFill = graphics;
				this.beginBitmapFill(bitmapFill.bitmapData,bitmapFill.matrix,bitmapFill.repeat,bitmapFill.smooth);
				break;
			case openfl_display_GraphicsDataType.END:
				this.endFill();
				break;
			case openfl_display_GraphicsDataType.TRIANGLE_PATH:
				trianglePath = graphics;
				this.drawTriangles(trianglePath.vertices,trianglePath.indices,trianglePath.uvtData,trianglePath.culling);
				break;
			}
		}
	}
	,drawPath: function(commands,data,winding) {
		if(winding == null) {
			winding = 0;
		}
		var dataIndex = 0;
		if(winding == 1) {
			this.__commands.windingNonZero();
		}
		var _g = 0;
		_hx_loop1: while(_g < commands.data.get_length()) {
			var command = commands.data.get(_g);
			++_g;
			switch(command) {
			case 1:
				this.moveTo(data.data.get(dataIndex),data.data.get(dataIndex + 1));
				dataIndex += 2;
				break;
			case 2:
				this.lineTo(data.data.get(dataIndex),data.data.get(dataIndex + 1));
				dataIndex += 2;
				break;
			case 3:
				this.curveTo(data.data.get(dataIndex),data.data.get(dataIndex + 1),data.data.get(dataIndex + 2),data.data.get(dataIndex + 3));
				dataIndex += 4;
				break;
			case 4:
				this.moveTo(data.data.get(dataIndex + 2),data.data.get(dataIndex + 3));
				break _hx_loop1;
			case 5:
				this.lineTo(data.data.get(dataIndex + 2),data.data.get(dataIndex + 3));
				break _hx_loop1;
			case 6:
				this.cubicCurveTo(data.data.get(dataIndex),data.data.get(dataIndex + 1),data.data.get(dataIndex + 2),data.data.get(dataIndex + 3),data.data.get(dataIndex + 4),data.data.get(dataIndex + 5));
				dataIndex += 6;
				break;
			default:
			}
		}
	}
	,drawRect: function(x,y,width,height) {
		if(width <= 0 || height <= 0) {
			return;
		}
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		this.__commands.drawRect(x,y,width,height);
		this.set___dirty(true);
	}
	,drawRoundRect: function(x,y,width,height,ellipseWidth,ellipseHeight) {
		if(width <= 0 || height <= 0) {
			return;
		}
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		this.__commands.drawRoundRect(x,y,width,height,ellipseWidth,ellipseHeight);
		this.set___dirty(true);
	}
	,drawRoundRectComplex: function(x,y,width,height,topLeftRadius,topRightRadius,bottomLeftRadius,bottomRightRadius) {
		if(width <= 0 || height <= 0) {
			return;
		}
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		var xw = x + width;
		var yh = y + height;
		var minSize = width < height ? width * 2 : height * 2;
		topLeftRadius = topLeftRadius < minSize ? topLeftRadius : minSize;
		topRightRadius = topRightRadius < minSize ? topRightRadius : minSize;
		bottomLeftRadius = bottomLeftRadius < minSize ? bottomLeftRadius : minSize;
		bottomRightRadius = bottomRightRadius < minSize ? bottomRightRadius : minSize;
		var anchor = 1 - $hx_exports.Math.sin(45 * ($hx_exports.Math.PI / 180));
		var control = 1 - $hx_exports.Math.tan(22.5 * ($hx_exports.Math.PI / 180));
		var a = bottomRightRadius * anchor;
		var s = bottomRightRadius * control;
		this.moveTo(xw,yh - bottomRightRadius);
		this.curveTo(xw,yh - s,xw - a,yh - a);
		this.curveTo(xw - s,yh,xw - bottomRightRadius,yh);
		a = bottomLeftRadius * anchor;
		s = bottomLeftRadius * control;
		this.lineTo(x + bottomLeftRadius,yh);
		this.curveTo(x + s,yh,x + a,yh - a);
		this.curveTo(x,yh - s,x,yh - bottomLeftRadius);
		a = topLeftRadius * anchor;
		s = topLeftRadius * control;
		this.lineTo(x,y + topLeftRadius);
		this.curveTo(x,y + s,x + a,y + a);
		this.curveTo(x + s,y,x + topLeftRadius,y);
		a = topRightRadius * anchor;
		s = topRightRadius * control;
		this.lineTo(xw - topRightRadius,y);
		this.curveTo(xw - s,y,xw - a,y + a);
		this.curveTo(xw,y + s,xw,y + topRightRadius);
		this.lineTo(xw,yh - bottomRightRadius);
		this.set___dirty(true);
	}
	,drawTriangles: function(vertices,indices,uvtData,culling) {
		if(culling == null) {
			culling = 1;
		}
		if(vertices == null) {
			return;
		}
		var vlen = Std.int(vertices.data.get_length() / 2);
		if(culling == null) {
			culling = 1;
		}
		if(indices == null) {
			if(vlen % 3 != 0) {
				throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Not enough vertices to close a triangle."));
			}
			indices = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
			var _g1 = 0;
			var _g = vlen;
			while(_g1 < _g) {
				var i = _g1++;
				indices.data.push(i);
			}
		}
		this.__inflateBounds(0,0);
		var tmpx = -Infinity;
		var tmpy = -Infinity;
		var maxX = -Infinity;
		var maxY = -Infinity;
		var _g11 = 0;
		var _g2 = vlen;
		while(_g11 < _g2) {
			var i1 = _g11++;
			tmpx = vertices.data.get(i1 * 2);
			tmpy = vertices.data.get(i1 * 2 + 1);
			if(maxX < tmpx) {
				maxX = tmpx;
			}
			if(maxY < tmpy) {
				maxY = tmpy;
			}
		}
		this.__inflateBounds(maxX,maxY);
		this.__commands.drawTriangles(vertices,indices,uvtData,culling);
		this.set___dirty(true);
		this.__visible = true;
	}
	,endFill: function() {
		this.__commands.endFill();
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) {
			smooth = false;
		}
		if(repeat == null) {
			repeat = true;
		}
		this.__commands.lineBitmapStyle(bitmap,matrix != null ? matrix.clone() : null,repeat,smooth);
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		if(focalPointRatio == null) {
			focalPointRatio = 0;
		}
		if(interpolationMethod == null) {
			interpolationMethod = 1;
		}
		if(spreadMethod == null) {
			spreadMethod = 0;
		}
		this.__commands.lineGradientStyle(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		if(miterLimit == null) {
			miterLimit = 3;
		}
		if(scaleMode == null) {
			scaleMode = 2;
		}
		if(pixelHinting == null) {
			pixelHinting = false;
		}
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 0;
		}
		if(thickness != null) {
			if(joints == 1) {
				if(thickness > this.__strokePadding) {
					this.__strokePadding = thickness;
				}
			} else if(thickness / 2 > this.__strokePadding) {
				this.__strokePadding = thickness / 2;
			}
		}
		this.__commands.lineStyle(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit);
		if(thickness != null) {
			this.__visible = true;
		}
	}
	,lineTo: function(x,y) {
		if(!isFinite(x) || !isFinite(y)) {
			return;
		}
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		this.__positionX = x;
		this.__positionY = y;
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding * 2,this.__positionY + this.__strokePadding);
		this.__commands.lineTo(x,y);
		this.set___dirty(true);
	}
	,moveTo: function(x,y) {
		this.__positionX = x;
		this.__positionY = y;
		this.__commands.moveTo(x,y);
	}
	,readGraphicsData: function(recurse) {
		if(recurse == null) {
			recurse = true;
		}
		var graphicsData = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		this.__owner.__readGraphicsData(graphicsData,recurse);
		return graphicsData;
	}
	,__calculateBezierCubicPoint: function(t,p1,p2,p3,p4) {
		var iT = 1 - t;
		return p1 * (iT * iT * iT) + 3 * p2 * t * (iT * iT) + 3 * p3 * iT * (t * t) + p4 * (t * t * t);
	}
	,__calculateBezierQuadPoint: function(t,p1,p2,p3) {
		var iT = 1 - t;
		return iT * iT * p1 + 2 * iT * t * p2 + t * t * p3;
	}
	,__cleanup: function() {
		if(this.__bounds != null) {
			this.set___dirty(true);
			this.__transformDirty = true;
		}
		this.__bitmap = null;
		this.__canvas = null;
		this.__context = null;
	}
	,__getBounds: function(rect,matrix) {
		if(this.__bounds == null) {
			return;
		}
		var bounds = openfl_geom_Rectangle.__pool.get();
		this.__bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__hitTest: function(x,y,shapeFlag,matrix) {
		if(this.__bounds == null) {
			return false;
		}
		var px = matrix.__transformInverseX(x,y);
		var py = matrix.__transformInverseY(x,y);
		if(px > this.__bounds.x && py > this.__bounds.y && this.__bounds.contains(px,py)) {
			if(shapeFlag) {
				return openfl__$internal_renderer_canvas_CanvasGraphics.hitTest(this,px,py);
			}
			return true;
		}
		return false;
	}
	,__inflateBounds: function(x,y) {
		if(this.__bounds == null) {
			this.__bounds = new openfl_geom_Rectangle(x,y,0,0);
			this.__transformDirty = true;
			return;
		}
		if(x < this.__bounds.x) {
			this.__bounds.width += this.__bounds.x - x;
			this.__bounds.x = x;
			this.__transformDirty = true;
		}
		if(y < this.__bounds.y) {
			this.__bounds.height += this.__bounds.y - y;
			this.__bounds.y = y;
			this.__transformDirty = true;
		}
		if(x > this.__bounds.x + this.__bounds.width) {
			this.__bounds.width = x - this.__bounds.x;
		}
		if(y > this.__bounds.y + this.__bounds.height) {
			this.__bounds.height = y - this.__bounds.y;
		}
	}
	,__readGraphicsData: function(graphicsData) {
		var data = new openfl__$internal_renderer_DrawCommandReader(this.__commands);
		var path = null;
		var stroke;
		var _g = 0;
		var _g1 = this.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 3:case 4:case 5:case 6:case 7:case 8:case 15:case 16:
				if(path == null) {
					path = new openfl_display_GraphicsPath();
				}
				break;
			default:
				if(path != null) {
					graphicsData.data.push(path);
					path = null;
				}
			}
			switch(type[1]) {
			case 0:
				var c = data.readBeginBitmapFill();
				var x = new openfl_display_GraphicsBitmapFill(c.obj(0),c.obj(1),c.bool(0),c.bool(1));
				graphicsData.data.push(x);
				break;
			case 1:
				var c1 = data.readBeginFill();
				var x1 = new openfl_display_GraphicsSolidFill(c1.int(0),1);
				graphicsData.data.push(x1);
				break;
			case 2:
				var c2 = data.readBeginGradientFill();
				var x2 = new openfl_display_GraphicsGradientFill(c2.obj(0),c2.iArr(0),c2.fArr(0),c2.iArr(1),c2.obj(1),c2.obj(2),c2.obj(3),c2.float(0));
				graphicsData.data.push(x2);
				break;
			case 3:
				var c3 = data.readCubicCurveTo();
				path.cubicCurveTo(c3.float(0),c3.float(1),c3.float(2),c3.float(3),c3.float(4),c3.float(5));
				break;
			case 4:
				var c4 = data.readCurveTo();
				path.curveTo(c4.float(0),c4.float(1),c4.float(2),c4.float(3));
				break;
			case 5:
				var c5 = data.readDrawCircle();
				path.__drawCircle(c5.float(0),c5.float(1),c5.float(2));
				break;
			case 6:
				var c6 = data.readDrawEllipse();
				path.__drawEllipse(c6.float(0),c6.float(1),c6.float(2),c6.float(3));
				break;
			case 7:
				var c7 = data.readDrawRect();
				path.__drawRect(c7.float(0),c7.float(1),c7.float(2),c7.float(3));
				break;
			case 8:
				var c8 = data.readDrawRoundRect();
				path.__drawRoundRect(c8.float(0),c8.float(1),c8.float(2),c8.float(3),c8.float(4),c8.obj(0) != null ? c8.obj(0) : c8.float(4));
				break;
			case 11:
				data.readEndFill();
				var x3 = new openfl_display_GraphicsEndFill();
				graphicsData.data.push(x3);
				break;
			case 12:
				var c9 = data.readLineBitmapStyle();
				path = null;
				break;
			case 13:
				var c10 = data.readLineGradientStyle();
				break;
			case 14:
				var c11 = data.readLineStyle();
				stroke = new openfl_display_GraphicsStroke(c11.obj(0),c11.bool(0),c11.obj(1),c11.obj(2),c11.obj(3),c11.float(1));
				stroke.fill = new openfl_display_GraphicsSolidFill(c11.int(0),c11.float(0));
				graphicsData.data.push(stroke);
				break;
			case 15:
				var c12 = data.readLineTo();
				path.lineTo(c12.float(0),c12.float(1));
				break;
			case 16:
				var c13 = data.readMoveTo();
				path.moveTo(c13.float(0),c13.float(1));
				break;
			default:
				data.skip(type);
			}
		}
		if(path != null) {
			graphicsData.data.push(path);
		}
	}
	,__update: function() {
		if(this.__bounds == null || this.__bounds.width <= 0 || this.__bounds.height <= 0) {
			return;
		}
		var parentTransform = this.__owner.__renderTransform;
		var scaleX = 1.0;
		var scaleY = 1.0;
		if(parentTransform != null) {
			if(parentTransform.b == 0) {
				scaleX = $hx_exports.Math.abs(parentTransform.a);
			} else {
				scaleX = $hx_exports.Math.sqrt(parentTransform.a * parentTransform.a + parentTransform.b * parentTransform.b);
			}
			if(parentTransform.c == 0) {
				scaleY = $hx_exports.Math.abs(parentTransform.d);
			} else {
				scaleY = $hx_exports.Math.sqrt(parentTransform.c * parentTransform.c + parentTransform.d * parentTransform.d);
			}
		} else {
			return;
		}
		var width = this.__bounds.width * scaleX;
		var height = this.__bounds.height * scaleY;
		if(width < 1 || height < 1) {
			if(this.__width >= 1 || this.__height >= 1) {
				this.set___dirty(true);
			}
			this.__width = 0;
			this.__height = 0;
			return;
		}
		if(openfl_display_Graphics.maxTextureWidth != null && width > openfl_display_Graphics.maxTextureWidth) {
			width = openfl_display_Graphics.maxTextureWidth;
			scaleX = openfl_display_Graphics.maxTextureWidth / this.__bounds.width;
		}
		if(openfl_display_Graphics.maxTextureWidth != null && height > openfl_display_Graphics.maxTextureHeight) {
			height = openfl_display_Graphics.maxTextureHeight;
			scaleY = openfl_display_Graphics.maxTextureHeight / this.__bounds.height;
		}
		this.__renderTransform.a = width / this.__bounds.width;
		this.__renderTransform.d = height / this.__bounds.height;
		var inverseA = 1 / this.__renderTransform.a;
		var inverseD = 1 / this.__renderTransform.d;
		this.__worldTransform.a = inverseA * parentTransform.a;
		this.__worldTransform.b = inverseA * parentTransform.b;
		this.__worldTransform.c = inverseD * parentTransform.c;
		this.__worldTransform.d = inverseD * parentTransform.d;
		var x = this.__bounds.x;
		var y = this.__bounds.y;
		var tx = x * parentTransform.a + y * parentTransform.c + parentTransform.tx;
		var ty = x * parentTransform.b + y * parentTransform.d + parentTransform.ty;
		this.__worldTransform.tx = $hx_exports.Math.floor(tx);
		this.__worldTransform.ty = $hx_exports.Math.floor(ty);
		this.__renderTransform.tx = this.__worldTransform.__transformInverseX(tx,ty);
		this.__renderTransform.ty = this.__worldTransform.__transformInverseY(tx,ty);
		var newWidth = $hx_exports.Math.ceil(width + this.__renderTransform.tx);
		var newHeight = $hx_exports.Math.ceil(height + this.__renderTransform.ty);
		if(newWidth != this.__width || newHeight != this.__height) {
			this.set___dirty(true);
		}
		this.__width = newWidth;
		this.__height = newHeight;
	}
	,set___dirty: function(value) {
		if(value && this.__owner != null) {
			this.__owner.__setRenderDirty();
		}
		return this.__dirty = value;
	}
	,__class__: openfl_display_Graphics
	,__properties__: {set___dirty:"set___dirty"}
};
var openfl_display_IGraphicsFill = $hx_exports["openfl"]["display"]["IGraphicsFill"] = function() { };
$hxClasses["openfl.display.IGraphicsFill"] = openfl_display_IGraphicsFill;
openfl_display_IGraphicsFill.__name__ = ["openfl","display","IGraphicsFill"];
openfl_display_IGraphicsFill.prototype = {
	__graphicsFillType: null
	,__class__: openfl_display_IGraphicsFill
};
var openfl_display_IGraphicsData = $hx_exports["openfl"]["display"]["IGraphicsData"] = function() { };
$hxClasses["openfl.display.IGraphicsData"] = openfl_display_IGraphicsData;
openfl_display_IGraphicsData.__name__ = ["openfl","display","IGraphicsData"];
openfl_display_IGraphicsData.prototype = {
	__graphicsDataType: null
	,__class__: openfl_display_IGraphicsData
};
var openfl_display_GraphicsBitmapFill = $hx_exports["openfl"]["display"]["GraphicsBitmapFill"] = function(bitmapData,matrix,repeat,smooth) {
	if(smooth == null) {
		smooth = false;
	}
	if(repeat == null) {
		repeat = true;
	}
	this.bitmapData = bitmapData;
	this.matrix = matrix;
	this.repeat = repeat;
	this.smooth = smooth;
	this.__graphicsDataType = openfl_display_GraphicsDataType.BITMAP;
	this.__graphicsFillType = openfl_display_GraphicsFillType.BITMAP_FILL;
};
$hxClasses["openfl.display.GraphicsBitmapFill"] = openfl_display_GraphicsBitmapFill;
openfl_display_GraphicsBitmapFill.__name__ = ["openfl","display","GraphicsBitmapFill"];
openfl_display_GraphicsBitmapFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsBitmapFill.prototype = {
	bitmapData: null
	,matrix: null
	,repeat: null
	,smooth: null
	,__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsBitmapFill
};
var openfl_display_GraphicsEndFill = $hx_exports["openfl"]["display"]["GraphicsEndFill"] = function() {
	this.__graphicsDataType = openfl_display_GraphicsDataType.END;
	this.__graphicsFillType = openfl_display_GraphicsFillType.END_FILL;
};
$hxClasses["openfl.display.GraphicsEndFill"] = openfl_display_GraphicsEndFill;
openfl_display_GraphicsEndFill.__name__ = ["openfl","display","GraphicsEndFill"];
openfl_display_GraphicsEndFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsEndFill.prototype = {
	__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsEndFill
};
var openfl_display_GraphicsGradientFill = $hx_exports["openfl"]["display"]["GraphicsGradientFill"] = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	if(focalPointRatio == null) {
		focalPointRatio = 0;
	}
	if(type == null) {
		type = 0;
	}
	if(spreadMethod == null) {
		spreadMethod = 0;
	}
	if(interpolationMethod == null) {
		interpolationMethod = 1;
	}
	this.type = type;
	this.colors = colors;
	this.alphas = alphas;
	this.ratios = ratios;
	this.matrix = matrix;
	this.spreadMethod = spreadMethod;
	this.interpolationMethod = interpolationMethod;
	this.focalPointRatio = focalPointRatio;
	this.__graphicsDataType = openfl_display_GraphicsDataType.GRADIENT;
	this.__graphicsFillType = openfl_display_GraphicsFillType.GRADIENT_FILL;
};
$hxClasses["openfl.display.GraphicsGradientFill"] = openfl_display_GraphicsGradientFill;
openfl_display_GraphicsGradientFill.__name__ = ["openfl","display","GraphicsGradientFill"];
openfl_display_GraphicsGradientFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsGradientFill.prototype = {
	alphas: null
	,colors: null
	,focalPointRatio: null
	,interpolationMethod: null
	,matrix: null
	,ratios: null
	,spreadMethod: null
	,type: null
	,__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsGradientFill
};
var openfl_display_IGraphicsPath = $hx_exports["openfl"]["display"]["IGraphicsPath"] = function() { };
$hxClasses["openfl.display.IGraphicsPath"] = openfl_display_IGraphicsPath;
openfl_display_IGraphicsPath.__name__ = ["openfl","display","IGraphicsPath"];
var openfl_display_GraphicsPath = $hx_exports["openfl"]["display"]["GraphicsPath"] = function(commands,data,winding) {
	if(winding == null) {
		winding = 0;
	}
	this.commands = commands;
	this.data = data;
	this.winding = winding;
	this.__graphicsDataType = openfl_display_GraphicsDataType.PATH;
};
$hxClasses["openfl.display.GraphicsPath"] = openfl_display_GraphicsPath;
openfl_display_GraphicsPath.__name__ = ["openfl","display","GraphicsPath"];
openfl_display_GraphicsPath.__interfaces__ = [openfl_display_IGraphicsPath,openfl_display_IGraphicsData];
openfl_display_GraphicsPath.prototype = {
	commands: null
	,data: null
	,winding: null
	,__graphicsDataType: null
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		if(this.commands == null) {
			this.commands = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
		}
		if(this.data == null) {
			this.data = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		}
		this.commands.data.push(6);
		this.data.data.push(controlX1);
		this.data.data.push(controlY1);
		this.data.data.push(controlX2);
		this.data.data.push(controlY2);
		this.data.data.push(anchorX);
		this.data.data.push(anchorY);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		if(this.commands == null) {
			this.commands = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
		}
		if(this.data == null) {
			this.data = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		}
		this.commands.data.push(3);
		this.data.data.push(controlX);
		this.data.data.push(controlY);
		this.data.data.push(anchorX);
		this.data.data.push(anchorY);
	}
	,lineTo: function(x,y) {
		if(this.commands == null) {
			this.commands = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
		}
		if(this.data == null) {
			this.data = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		}
		this.commands.data.push(2);
		this.data.data.push(x);
		this.data.data.push(y);
	}
	,moveTo: function(x,y) {
		if(this.commands == null) {
			this.commands = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
		}
		if(this.data == null) {
			this.data = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		}
		this.commands.data.push(1);
		this.data.data.push(x);
		this.data.data.push(y);
	}
	,wideLineTo: function(x,y) {
		if(this.commands == null) {
			this.commands = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
		}
		if(this.data == null) {
			this.data = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		}
		this.commands.data.push(2);
		this.data.data.push(x);
		this.data.data.push(y);
	}
	,wideMoveTo: function(x,y) {
		if(this.commands == null) {
			this.commands = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
		}
		if(this.data == null) {
			this.data = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		}
		this.commands.data.push(1);
		this.data.data.push(x);
		this.data.data.push(y);
	}
	,__drawCircle: function(x,y,radius) {
		this.__drawRoundRect(x - radius,y - radius,radius * 2,radius * 2,radius * 2,radius * 2);
	}
	,__drawEllipse: function(x,y,width,height) {
		this.__drawRoundRect(x,y,width,height,width,height);
	}
	,__drawRect: function(x,y,width,height) {
		this.moveTo(x,y);
		this.lineTo(x + width,y);
		this.lineTo(x + width,y + height);
		this.lineTo(x,y + height);
		this.lineTo(x,y);
	}
	,__drawRoundRect: function(x,y,width,height,ellipseWidth,ellipseHeight) {
		ellipseWidth *= 0.5;
		ellipseHeight *= 0.5;
		if(ellipseWidth > width / 2) {
			ellipseWidth = width / 2;
		}
		if(ellipseHeight > height / 2) {
			ellipseHeight = height / 2;
		}
		var xe = x + width;
		var ye = y + height;
		var cx1 = -ellipseWidth + ellipseWidth * openfl_display_GraphicsPath.SIN45;
		var cx2 = -ellipseWidth + ellipseWidth * openfl_display_GraphicsPath.TAN22;
		var cy1 = -ellipseHeight + ellipseHeight * openfl_display_GraphicsPath.SIN45;
		var cy2 = -ellipseHeight + ellipseHeight * openfl_display_GraphicsPath.TAN22;
		this.moveTo(xe,ye - ellipseHeight);
		this.curveTo(xe,ye + cy2,xe + cx1,ye + cy1);
		this.curveTo(xe + cx2,ye,xe - ellipseWidth,ye);
		this.lineTo(x + ellipseWidth,ye);
		this.curveTo(x - cx2,ye,x - cx1,ye + cy1);
		this.curveTo(x,ye + cy2,x,ye - ellipseHeight);
		this.lineTo(x,y + ellipseHeight);
		this.curveTo(x,y - cy2,x - cx1,y - cy1);
		this.curveTo(x - cx2,y,x + ellipseWidth,y);
		this.lineTo(xe - ellipseWidth,y);
		this.curveTo(xe + cx2,y,xe + cx1,y - cy1);
		this.curveTo(xe,y - cy2,xe,y + ellipseHeight);
		this.lineTo(xe,ye - ellipseHeight);
	}
	,__class__: openfl_display_GraphicsPath
};
var openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$ = $hx_exports["openfl"]["display"]["GraphicsPathWinding"] = {};
$hxClasses["openfl.display._GraphicsPathWinding.GraphicsPathWinding_Impl_"] = openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$;
openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.__name__ = ["openfl","display","_GraphicsPathWinding","GraphicsPathWinding_Impl_"];
openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.fromString = function(value) {
	switch(value) {
	case "evenOdd":
		return 0;
	case "nonZero":
		return 1;
	default:
		return null;
	}
};
openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "evenOdd";
	case 1:
		return "nonZero";
	default:
		return null;
	}
};
var openfl_display_GraphicsSolidFill = $hx_exports["openfl"]["display"]["GraphicsSolidFill"] = function(color,alpha) {
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 0;
	}
	this.alpha = alpha;
	this.color = color;
	this.__graphicsDataType = openfl_display_GraphicsDataType.SOLID;
	this.__graphicsFillType = openfl_display_GraphicsFillType.SOLID_FILL;
};
$hxClasses["openfl.display.GraphicsSolidFill"] = openfl_display_GraphicsSolidFill;
openfl_display_GraphicsSolidFill.__name__ = ["openfl","display","GraphicsSolidFill"];
openfl_display_GraphicsSolidFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsSolidFill.prototype = {
	alpha: null
	,color: null
	,__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsSolidFill
};
var openfl_display_IGraphicsStroke = $hx_exports["openfl"]["display"]["IGraphicsStroke"] = function() { };
$hxClasses["openfl.display.IGraphicsStroke"] = openfl_display_IGraphicsStroke;
openfl_display_IGraphicsStroke.__name__ = ["openfl","display","IGraphicsStroke"];
var openfl_display_GraphicsStroke = $hx_exports["openfl"]["display"]["GraphicsStroke"] = function(thickness,pixelHinting,scaleMode,caps,joints,miterLimit,fill) {
	if(miterLimit == null) {
		miterLimit = 3;
	}
	if(joints == null) {
		joints = 2;
	}
	if(caps == null) {
		caps = 0;
	}
	if(scaleMode == null) {
		scaleMode = 2;
	}
	if(pixelHinting == null) {
		pixelHinting = false;
	}
	if(thickness == null) {
		thickness = NaN;
	}
	this.caps = caps;
	this.fill = fill;
	this.joints = joints;
	this.miterLimit = miterLimit;
	this.pixelHinting = pixelHinting;
	this.scaleMode = scaleMode;
	this.thickness = thickness;
	this.__graphicsDataType = openfl_display_GraphicsDataType.STROKE;
};
$hxClasses["openfl.display.GraphicsStroke"] = openfl_display_GraphicsStroke;
openfl_display_GraphicsStroke.__name__ = ["openfl","display","GraphicsStroke"];
openfl_display_GraphicsStroke.__interfaces__ = [openfl_display_IGraphicsStroke,openfl_display_IGraphicsData];
openfl_display_GraphicsStroke.prototype = {
	caps: null
	,fill: null
	,joints: null
	,miterLimit: null
	,pixelHinting: null
	,scaleMode: null
	,thickness: null
	,__graphicsDataType: null
	,__class__: openfl_display_GraphicsStroke
};
var openfl_display_GraphicsTrianglePath = $hx_exports["openfl"]["display"]["GraphicsTrianglePath"] = function(vertices,indices,uvtData,culling) {
	if(culling == null) {
		culling = 1;
	}
	this.vertices = vertices;
	this.indices = indices;
	this.uvtData = uvtData;
	this.culling = culling;
	this.__graphicsDataType = openfl_display_GraphicsDataType.TRIANGLE_PATH;
};
$hxClasses["openfl.display.GraphicsTrianglePath"] = openfl_display_GraphicsTrianglePath;
openfl_display_GraphicsTrianglePath.__name__ = ["openfl","display","GraphicsTrianglePath"];
openfl_display_GraphicsTrianglePath.__interfaces__ = [openfl_display_IGraphicsPath,openfl_display_IGraphicsData];
openfl_display_GraphicsTrianglePath.prototype = {
	culling: null
	,indices: null
	,uvtData: null
	,vertices: null
	,__graphicsDataType: null
	,__class__: openfl_display_GraphicsTrianglePath
};
var openfl_display_GraphicsDataType = $hxClasses["openfl.display.GraphicsDataType"] = { __ename__ : ["openfl","display","GraphicsDataType"], __constructs__ : ["STROKE","SOLID","GRADIENT","PATH","BITMAP","END","TRIANGLE_PATH"] };
openfl_display_GraphicsDataType.STROKE = ["STROKE",0];
openfl_display_GraphicsDataType.STROKE.toString = $estr;
openfl_display_GraphicsDataType.STROKE.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.SOLID = ["SOLID",1];
openfl_display_GraphicsDataType.SOLID.toString = $estr;
openfl_display_GraphicsDataType.SOLID.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.GRADIENT = ["GRADIENT",2];
openfl_display_GraphicsDataType.GRADIENT.toString = $estr;
openfl_display_GraphicsDataType.GRADIENT.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.PATH = ["PATH",3];
openfl_display_GraphicsDataType.PATH.toString = $estr;
openfl_display_GraphicsDataType.PATH.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.BITMAP = ["BITMAP",4];
openfl_display_GraphicsDataType.BITMAP.toString = $estr;
openfl_display_GraphicsDataType.BITMAP.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.END = ["END",5];
openfl_display_GraphicsDataType.END.toString = $estr;
openfl_display_GraphicsDataType.END.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.TRIANGLE_PATH = ["TRIANGLE_PATH",6];
openfl_display_GraphicsDataType.TRIANGLE_PATH.toString = $estr;
openfl_display_GraphicsDataType.TRIANGLE_PATH.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.__empty_constructs__ = [openfl_display_GraphicsDataType.STROKE,openfl_display_GraphicsDataType.SOLID,openfl_display_GraphicsDataType.GRADIENT,openfl_display_GraphicsDataType.PATH,openfl_display_GraphicsDataType.BITMAP,openfl_display_GraphicsDataType.END,openfl_display_GraphicsDataType.TRIANGLE_PATH];
var openfl_display_GraphicsFillType = $hxClasses["openfl.display.GraphicsFillType"] = { __ename__ : ["openfl","display","GraphicsFillType"], __constructs__ : ["SOLID_FILL","GRADIENT_FILL","BITMAP_FILL","END_FILL"] };
openfl_display_GraphicsFillType.SOLID_FILL = ["SOLID_FILL",0];
openfl_display_GraphicsFillType.SOLID_FILL.toString = $estr;
openfl_display_GraphicsFillType.SOLID_FILL.__enum__ = openfl_display_GraphicsFillType;
openfl_display_GraphicsFillType.GRADIENT_FILL = ["GRADIENT_FILL",1];
openfl_display_GraphicsFillType.GRADIENT_FILL.toString = $estr;
openfl_display_GraphicsFillType.GRADIENT_FILL.__enum__ = openfl_display_GraphicsFillType;
openfl_display_GraphicsFillType.BITMAP_FILL = ["BITMAP_FILL",2];
openfl_display_GraphicsFillType.BITMAP_FILL.toString = $estr;
openfl_display_GraphicsFillType.BITMAP_FILL.__enum__ = openfl_display_GraphicsFillType;
openfl_display_GraphicsFillType.END_FILL = ["END_FILL",3];
openfl_display_GraphicsFillType.END_FILL.toString = $estr;
openfl_display_GraphicsFillType.END_FILL.__enum__ = openfl_display_GraphicsFillType;
openfl_display_GraphicsFillType.__empty_constructs__ = [openfl_display_GraphicsFillType.SOLID_FILL,openfl_display_GraphicsFillType.GRADIENT_FILL,openfl_display_GraphicsFillType.BITMAP_FILL,openfl_display_GraphicsFillType.END_FILL];
var openfl_display_ITile = $hx_exports["openfl"]["display"]["ITile"] = function() { };
$hxClasses["openfl.display.ITile"] = openfl_display_ITile;
openfl_display_ITile.__name__ = ["openfl","display","ITile"];
openfl_display_ITile.prototype = {
	get_alpha: null
	,set_alpha: null
	,get_colorTransform: null
	,set_colorTransform: null
	,get_id: null
	,set_id: null
	,get_matrix: null
	,set_matrix: null
	,get_rect: null
	,set_rect: null
	,get_shader: null
	,set_shader: null
	,get_tileset: null
	,set_tileset: null
	,get_visible: null
	,set_visible: null
	,__class__: openfl_display_ITile
	,__properties__: {set_visible:"set_visible",get_visible:"get_visible",set_tileset:"set_tileset",get_tileset:"get_tileset",set_shader:"set_shader",get_shader:"get_shader",set_rect:"set_rect",get_rect:"get_rect",set_matrix:"set_matrix",get_matrix:"get_matrix",set_id:"set_id",get_id:"get_id",set_colorTransform:"set_colorTransform",get_colorTransform:"get_colorTransform",set_alpha:"set_alpha",get_alpha:"get_alpha"}
};
var openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$ = $hx_exports["openfl"]["display"]["InterpolationMethod"] = {};
$hxClasses["openfl.display._InterpolationMethod.InterpolationMethod_Impl_"] = openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$;
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.__name__ = ["openfl","display","_InterpolationMethod","InterpolationMethod_Impl_"];
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.fromString = function(value) {
	switch(value) {
	case "linearRGB":
		return 0;
	case "rgb":
		return 1;
	default:
		return null;
	}
};
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "linearRGB";
	case 1:
		return "rgb";
	default:
		return null;
	}
};
var openfl_display_JPEGEncoderOptions = $hx_exports["openfl"]["display"]["JPEGEncoderOptions"] = function(quality) {
	if(quality == null) {
		quality = 80;
	}
	this.quality = quality;
};
$hxClasses["openfl.display.JPEGEncoderOptions"] = openfl_display_JPEGEncoderOptions;
openfl_display_JPEGEncoderOptions.__name__ = ["openfl","display","JPEGEncoderOptions"];
openfl_display_JPEGEncoderOptions.prototype = {
	quality: null
	,__class__: openfl_display_JPEGEncoderOptions
};
var openfl_display__$JointStyle_JointStyle_$Impl_$ = $hx_exports["openfl"]["display"]["JointStyle"] = {};
$hxClasses["openfl.display._JointStyle.JointStyle_Impl_"] = openfl_display__$JointStyle_JointStyle_$Impl_$;
openfl_display__$JointStyle_JointStyle_$Impl_$.__name__ = ["openfl","display","_JointStyle","JointStyle_Impl_"];
openfl_display__$JointStyle_JointStyle_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bevel":
		return 0;
	case "miter":
		return 1;
	case "round":
		return 2;
	default:
		return null;
	}
};
openfl_display__$JointStyle_JointStyle_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bevel";
	case 1:
		return "miter";
	case 2:
		return "round";
	default:
		return null;
	}
};
var openfl_display__$LineScaleMode_LineScaleMode_$Impl_$ = $hx_exports["openfl"]["display"]["LineScaleMode"] = {};
$hxClasses["openfl.display._LineScaleMode.LineScaleMode_Impl_"] = openfl_display__$LineScaleMode_LineScaleMode_$Impl_$;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.__name__ = ["openfl","display","_LineScaleMode","LineScaleMode_Impl_"];
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "horizontal":
		return 0;
	case "none":
		return 1;
	case "normal":
		return 2;
	case "vertical":
		return 3;
	default:
		return null;
	}
};
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "horizontal";
	case 1:
		return "none";
	case 2:
		return "normal";
	case 3:
		return "vertical";
	default:
		return null;
	}
};
var openfl_display_Loader = $hx_exports["openfl"]["display"]["Loader"] = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.contentLoaderInfo = openfl_display_LoaderInfo.create(this);
	this.uncaughtErrorEvents = this.contentLoaderInfo.uncaughtErrorEvents;
};
$hxClasses["openfl.display.Loader"] = openfl_display_Loader;
openfl_display_Loader.__name__ = ["openfl","display","Loader"];
openfl_display_Loader.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Loader.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	content: null
	,contentLoaderInfo: null
	,uncaughtErrorEvents: null
	,__library: null
	,__path: null
	,__unloaded: null
	,close: function() {
		openfl__$internal_Lib.notImplemented({ fileName : "Loader.hx", lineNumber : 59, className : "openfl.display.Loader", methodName : "close"});
	}
	,load: function(request,context) {
		this.contentLoaderInfo.loaderURL = openfl_Lib.get_current().get_loaderInfo().url;
		this.contentLoaderInfo.url = request.url;
		this.__unloaded = false;
		if(request.contentType == null || request.contentType == "") {
			var extension = "";
			this.__path = request.url;
			var queryIndex = this.__path.indexOf("?");
			if(queryIndex > -1) {
				this.__path = this.__path.substring(0,queryIndex);
			}
			while($hx_exports.StringTools.endsWith(this.__path,"/")) this.__path = this.__path.substring(0,this.__path.length - 1);
			if($hx_exports.StringTools.endsWith(this.__path,".bundle")) {
				this.__path += "/library.json";
				if(queryIndex > -1) {
					request.url = this.__path + request.url.substring(queryIndex);
				} else {
					request.url = this.__path;
				}
			}
			var extIndex = this.__path.lastIndexOf(".");
			if(extIndex > -1) {
				extension = this.__path.substring(extIndex + 1);
			}
			var tmp;
			switch(extension) {
			case "gif":
				tmp = "image/gif";
				break;
			case "jpeg":case "jpg":
				tmp = "image/jpeg";
				break;
			case "js":
				tmp = "application/javascript";
				break;
			case "json":
				tmp = "application/json";
				break;
			case "png":
				tmp = "image/png";
				break;
			case "swf":
				tmp = "application/x-shockwave-flash";
				break;
			default:
				tmp = "application/x-www-form-urlencoded";
			}
			this.contentLoaderInfo.contentType = tmp;
		} else {
			this.contentLoaderInfo.contentType = request.contentType;
		}
		if(this.contentLoaderInfo.contentType.indexOf("image/") > -1 && request.method == "GET" && (request.requestHeaders == null || request.requestHeaders.length == 0) && request.userAgent == null) {
			openfl_display_BitmapData.loadFromFile(request.url).onComplete($bind(this,this.BitmapData_onLoad)).onError($bind(this,this.BitmapData_onError)).onProgress($bind(this,this.BitmapData_onProgress));
			return;
		}
		var loader = new openfl_net_URLLoader();
		loader.dataFormat = 0;
		if(this.contentLoaderInfo.contentType.indexOf("/json") > -1 || this.contentLoaderInfo.contentType.indexOf("/javascript") > -1 || this.contentLoaderInfo.contentType.indexOf("/ecmascript") > -1) {
			loader.dataFormat = 1;
		}
		loader.addEventListener("complete",$bind(this,this.loader_onComplete));
		loader.addEventListener("ioError",$bind(this,this.loader_onError));
		loader.addEventListener("progress",$bind(this,this.loader_onProgress));
		loader.load(request);
	}
	,loadBytes: function(buffer,context) {
		openfl_display_BitmapData.loadFromBytes(buffer).onComplete($bind(this,this.BitmapData_onLoad)).onError($bind(this,this.BitmapData_onError));
	}
	,unload: function() {
		if(!this.__unloaded) {
			while(this.get_numChildren() > 0) this.removeChildAt(0);
			if(this.__library != null) {
				openfl_utils_Assets.unloadLibrary(this.contentLoaderInfo.url);
				this.__library = null;
			}
			this.content = null;
			this.contentLoaderInfo.url = null;
			this.contentLoaderInfo.contentType = null;
			this.contentLoaderInfo.content = null;
			this.contentLoaderInfo.bytesLoaded = 0;
			this.contentLoaderInfo.bytesTotal = 0;
			this.contentLoaderInfo.width = 0;
			this.contentLoaderInfo.height = 0;
			this.__unloaded = true;
			this.contentLoaderInfo.dispatchEvent(new openfl_events_Event("unload"));
		}
	}
	,unloadAndStop: function(gc) {
		if(gc == null) {
			gc = true;
		}
		if(this.content != null) {
			this.content.__stopAllMovieClips();
		}
		var _g1 = 0;
		var _g = this.get_numChildren();
		while(_g1 < _g) {
			var i = _g1++;
			this.getChildAt(i).__stopAllMovieClips();
		}
		this.unload();
		var gc1 = gc;
	}
	,setContent: function(c) {
		this.content = c;
		this.addChild(c);
	}
	,__dispatchError: function(text) {
		var event = new openfl_events_IOErrorEvent("ioError");
		event.text = text;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,BitmapData_onError: function(error) {
		this.__dispatchError(Std.string(error));
	}
	,BitmapData_onLoad: function(bitmapData) {
		this.content = new openfl_display_Bitmap(bitmapData);
		this.contentLoaderInfo.content = this.content;
		this.addChild(this.content);
		this.contentLoaderInfo.dispatchEvent(new openfl_events_Event("complete"));
	}
	,BitmapData_onProgress: function(bytesLoaded,bytesTotal) {
		var event = new openfl_events_ProgressEvent("progress");
		event.bytesLoaded = bytesLoaded;
		event.bytesTotal = bytesTotal;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,loader_onComplete: function(event) {
		var _gthis = this;
		var loader = event.target;
		if(this.contentLoaderInfo.contentType != null && this.contentLoaderInfo.contentType.indexOf("/json") > -1) {
			var manifest = $hx_exports.lime.utils.AssetManifest.parse(loader.data,$hx_exports.haxe.io.Path.directory(this.__path));
			if(manifest == null) {
				this.__dispatchError("Cannot parse asset manifest");
				return;
			}
			var library = $hx_exports.lime.utils.AssetLibrary.fromManifest(manifest);
			if(library == null) {
				this.__dispatchError("Cannot open library");
				return;
			}
			if(Std.is(library,openfl_utils_AssetLibrary)) {
				library.load().onComplete(function(_) {
					_gthis.__library = library;
					openfl_utils_Assets.registerLibrary(_gthis.contentLoaderInfo.url,_gthis.__library);
					if(manifest.name != null && !openfl_utils_Assets.hasLibrary(manifest.name)) {
						openfl_utils_Assets.registerLibrary(manifest.name,_gthis.__library);
					}
					_gthis.content = _gthis.__library.getMovieClip("");
					_gthis.contentLoaderInfo.content = _gthis.content;
					_gthis.addChild(_gthis.content);
					_gthis.contentLoaderInfo.dispatchEvent(new openfl_events_Event("complete"));
				}).onError(function(e) {
					_gthis.__dispatchError(e);
				});
			}
		} else if(this.contentLoaderInfo.contentType != null && (this.contentLoaderInfo.contentType.indexOf("/javascript") > -1 || this.contentLoaderInfo.contentType.indexOf("/ecmascript") > -1)) {
			this.content = new openfl_display_Sprite();
			this.contentLoaderInfo.content = this.content;
			this.addChild(this.content);
			eval("(function () {" + Std.string(loader.data) + "})()");
			this.contentLoaderInfo.dispatchEvent(new openfl_events_Event("complete"));
		} else {
			openfl_display_BitmapData.loadFromBytes(loader.data).onComplete($bind(this,this.BitmapData_onLoad)).onError($bind(this,this.BitmapData_onError));
		}
	}
	,loader_onError: function(event) {
		event.target = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,loader_onProgress: function(event) {
		event.target = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,__class__: openfl_display_Loader
});
var openfl_display_LoaderInfo = $hx_exports["openfl"]["display"]["LoaderInfo"] = function() {
	openfl_events_EventDispatcher.call(this);
	this.applicationDomain = openfl_system_ApplicationDomain.currentDomain;
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.childAllowsParent = true;
	this.parameters = { };
};
$hxClasses["openfl.display.LoaderInfo"] = openfl_display_LoaderInfo;
openfl_display_LoaderInfo.__name__ = ["openfl","display","LoaderInfo"];
openfl_display_LoaderInfo.create = function(loader) {
	var loaderInfo = new openfl_display_LoaderInfo();
	loaderInfo.uncaughtErrorEvents = new openfl_events_UncaughtErrorEvents();
	if(loader != null) {
		loaderInfo.loader = loader;
	} else {
		loaderInfo.url = openfl_display_LoaderInfo.__rootURL;
	}
	return loaderInfo;
};
openfl_display_LoaderInfo.__super__ = openfl_events_EventDispatcher;
openfl_display_LoaderInfo.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	applicationDomain: null
	,bytes: null
	,bytesLoaded: null
	,bytesTotal: null
	,childAllowsParent: null
	,content: null
	,contentType: null
	,frameRate: null
	,height: null
	,loader: null
	,loaderURL: null
	,parameters: null
	,parentAllowsChild: null
	,sameDomain: null
	,sharedEvents: null
	,uncaughtErrorEvents: null
	,url: null
	,width: null
	,__completed: null
	,__complete: function() {
		if(!this.__completed) {
			if(this.bytesLoaded < this.bytesTotal) {
				this.bytesLoaded = this.bytesTotal;
			}
			this.__update(this.bytesLoaded,this.bytesTotal);
			this.__completed = true;
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,__update: function(bytesLoaded,bytesTotal) {
		this.bytesLoaded = bytesLoaded;
		this.bytesTotal = bytesTotal;
		this.dispatchEvent(new openfl_events_ProgressEvent("progress",false,false,bytesLoaded,bytesTotal));
	}
	,__class__: openfl_display_LoaderInfo
});
var openfl_display_MovieClip = $hx_exports["openfl"]["display"]["MovieClip"] = function() {
	openfl_display_Sprite.call(this);
	this.__cachedManuallyAddedDisplayObjects = [];
	this.__cachedChildrenFrameSymbolInstacesDisplayObjects = [];
	this.__currentFrame = 1;
	this.__currentLabels = [];
	this.__totalFrames = 0;
	this.__isInstanceFieldsSetup = false;
	this.enabled = true;
	if(openfl_display_MovieClip.__initSymbol != null) {
		this.__swf = openfl_display_MovieClip.__initSWF;
		this.__symbol = openfl_display_MovieClip.__initSymbol;
		openfl_display_MovieClip.__initSWF = null;
		openfl_display_MovieClip.__initSymbol = null;
		this.__fromSymbol(this.__swf,this.__symbol);
	}
};
$hxClasses["openfl.display.MovieClip"] = openfl_display_MovieClip;
openfl_display_MovieClip.__name__ = ["openfl","display","MovieClip"];
openfl_display_MovieClip.__initSWF = null;
openfl_display_MovieClip.__initSymbol = null;
openfl_display_MovieClip.__super__ = openfl_display_Sprite;
openfl_display_MovieClip.prototype = $extend(openfl_display_Sprite.prototype,{
	enabled: null
	,__cachedChildrenFrameSymbolInstacesDisplayObjects: null
	,__cachedManuallyAddedDisplayObjects: null
	,__activeInstances: null
	,__activeInstancesByFrameObjectID: null
	,__lastInstancesByFrameObjectID: null
	,__currentFrame: null
	,__currentFrameLabel: null
	,__currentLabel: null
	,__currentLabels: null
	,__frameScripts: null
	,__frameTime: null
	,__lastFrameUpdate: null
	,__playing: null
	,__swf: null
	,__symbol: null
	,__timeElapsed: null
	,__totalFrames: null
	,__isInstanceFieldsSetup: null
	,addFrameScript: function(index,method) {
		if(index < 0) {
			return;
		}
		var frame = index + 1;
		if(method != null) {
			if(this.__frameScripts == null) {
				this.__frameScripts = new $hx_exports.haxe.ds.IntMap();
			}
			this.__frameScripts.set(frame,method);
		} else if(this.__frameScripts != null) {
			this.__frameScripts.remove(frame);
		}
	}
	,__initializeSelf: function() {
		if(this.__lastFrameUpdate == -2) {
			this.__enterFrame(0);
		}
	}
	,gotoAndPlay: function(frame,scene) {
		this.play();
		this.__goto(this.__resolveFrameReference(frame));
	}
	,gotoAndStop: function(frame,scene) {
		this.stop();
		this.__goto(this.__resolveFrameReference(frame));
	}
	,nextFrame: function() {
		this.__goto(this.__currentFrame + 1);
		this.stop();
	}
	,play: function() {
		if(this.__symbol == null || this.__playing || this.__totalFrames < 2) {
			return;
		}
		this.__playing = true;
		this.__frameTime = Std.int(1000 / this.__swf.frameRate);
		this.__timeElapsed = 0;
	}
	,prevFrame: function() {
		this.stop();
		this.__goto(this.__currentFrame - 1);
	}
	,stop: function() {
		this.__playing = false;
	}
	,__addChildAtInternal: function(child,index) {
		var addedChild = openfl_display_Sprite.prototype.__addChildAtInternal.call(this,child,index);
		this.__cacheChild(addedChild);
		return addedChild;
	}
	,__cacheChild: function(child) {
		if(child != null) {
			var cached = false;
			if(this.__cachedChildrenFrameSymbolInstacesDisplayObjects.indexOf(child) >= 0 || this.__cachedManuallyAddedDisplayObjects.indexOf(child) >= 0) {
				cached = true;
			} else if(this.__activeInstances != null) {
				var _g = 0;
				var _g1 = this.__activeInstances;
				while(_g < _g1.length) {
					var instance = _g1[_g];
					++_g;
					if(instance.displayObject == child) {
						cached = true;
						this.__cachedChildrenFrameSymbolInstacesDisplayObjects.push(child);
						break;
					}
				}
			}
			if(!cached) {
				this.__cachedManuallyAddedDisplayObjects.push(child);
			}
		}
	}
	,removeChild: function(child) {
		if(child != null && child.parent == this) {
			$hx_exports.HxOverrides.remove(this.__cachedManuallyAddedDisplayObjects,child);
		}
		return openfl_display_Sprite.prototype.removeChild.call(this,child);
	}
	,__enterFrame: function(deltaTime) {
		if(this.__symbol == null) {
			openfl_display_Sprite.prototype.__enterFrame.call(this,deltaTime);
			return;
		}
		var nextFrame = -1;
		var shouldRunTotalFramesScripts = false;
		var startFrame = this.__currentFrame;
		if(this.__playing) {
			nextFrame = this.__getNextFrame(deltaTime);
		} else {
			nextFrame = this.__currentFrame;
		}
		var updateToFrame = startFrame;
		var runInitScript = false;
		if(this.__lastFrameUpdate == -2) {
			runInitScript = true;
		}
		while(updateToFrame != nextFrame || this.__lastFrameUpdate < 0) {
			var shouldRunScriptAtFrame = false;
			if(this.__playing) {
				if(this.__frameScripts != null) {
					if(nextFrame < updateToFrame) {
						var key = this.__frameScripts.keys();
						while(key.hasNext()) {
							var key1 = key.next();
							if(key1 > updateToFrame) {
								shouldRunScriptAtFrame = true;
								updateToFrame = key1;
								break;
							}
						}
						if(!shouldRunScriptAtFrame) {
							updateToFrame = 0;
						}
					}
					if(!shouldRunScriptAtFrame) {
						var key2 = this.__frameScripts.keys();
						while(key2.hasNext()) {
							var key3 = key2.next();
							if(key3 > updateToFrame && key3 <= nextFrame) {
								shouldRunScriptAtFrame = true;
								updateToFrame = key3;
								break;
							}
						}
					}
				}
			} else if(runInitScript) {
				shouldRunScriptAtFrame = true;
				updateToFrame = 1;
			}
			if(!shouldRunScriptAtFrame) {
				updateToFrame = nextFrame;
			}
			this.__currentFrame = updateToFrame;
			this.__updateFrameObjectsAndChildren();
			var runScriptOverride = false;
			if(runInitScript) {
				runInitScript = false;
				this.__setupInstanceFields();
				if(this.__frameScripts != null && updateToFrame == 1 && this.__frameScripts.exists(1)) {
					runScriptOverride = true;
				}
			}
			if(shouldRunScriptAtFrame && this.__playing || runScriptOverride) {
				var currentFrameBeforeScript = this.__currentFrame;
				var script = this.__frameScripts.get(updateToFrame);
				script();
				if(this.__currentFrame != currentFrameBeforeScript || !this.__playing) {
					openfl_display_Sprite.prototype.__enterFrame.call(this,deltaTime);
					return;
				}
			}
		}
		if(runInitScript) {
			runInitScript = false;
			this.__setupInstanceFields();
		}
		openfl_display_Sprite.prototype.__enterFrame.call(this,deltaTime);
	}
	,__updateFrameObjectsAndChildren: function() {
		if(this.__currentFrame == this.__lastFrameUpdate) {
			return;
		}
		this.__updateFrameLabel();
		var loopedSinceLastFrameUpdate = this.__lastFrameUpdate > this.__currentFrame;
		var currentInstancesByFrameObjectID = null;
		if(!loopedSinceLastFrameUpdate && this.__lastFrameUpdate >= 0 && this.__lastInstancesByFrameObjectID != null) {
			currentInstancesByFrameObjectID = this.__lastInstancesByFrameObjectID;
		} else {
			currentInstancesByFrameObjectID = new $hx_exports.haxe.ds.IntMap();
		}
		var frame;
		var frameData;
		var instance;
		var updateFrameStart = loopedSinceLastFrameUpdate || this.__lastFrameUpdate < 0 ? 0 : this.__lastFrameUpdate;
		var _g1 = updateFrameStart;
		var _g = this.__currentFrame;
		while(_g1 < _g) {
			var i = _g1++;
			frame = i + 1;
			frameData = this.__symbol.frames[i];
			if(frameData.objects == null) {
				continue;
			}
			var _g2 = 0;
			var _g3 = frameData.objects;
			while(_g2 < _g3.length) {
				var frameObject = _g3[_g2];
				++_g2;
				var _g4 = frameObject.type;
				switch(_g4[1]) {
				case 0:
					instance = this.__activeInstancesByFrameObjectID.get(frameObject.id);
					if(instance != null) {
						currentInstancesByFrameObjectID.set(frameObject.id,instance);
						this.__updateDisplayObject(instance.displayObject,frameObject);
					}
					break;
				case 1:
					instance = currentInstancesByFrameObjectID.get(frameObject.id);
					if(instance != null && instance.displayObject != null) {
						this.__updateDisplayObject(instance.displayObject,frameObject);
					}
					break;
				case 2:
					currentInstancesByFrameObjectID.remove(frameObject.id);
					break;
				}
			}
		}
		var currentInstances = [];
		var currentMasks = [];
		var instance1 = currentInstancesByFrameObjectID.iterator();
		while(instance1.hasNext()) {
			var instance2 = instance1.next();
			if(currentInstances.indexOf(instance2) == -1) {
				if(instance2.clipDepth > 0) {
					currentMasks.push(instance2);
				} else {
					currentInstances.push(instance2);
				}
			}
		}
		this.__lastInstancesByFrameObjectID = currentInstancesByFrameObjectID;
		currentInstances.sort($bind(this,this.__sortDepths));
		var existingChild;
		var targetDepth;
		var targetChild;
		var child;
		var maskApplied;
		var length = currentInstances.length;
		var currentInstancesIndex = 0;
		var childrenIndex = 0;
		while(childrenIndex < this.__children.length) {
			child = this.__children[childrenIndex];
			if(child != null) {
				if(this.__cachedManuallyAddedDisplayObjects.indexOf(child) < 0) {
					var shouldRemove = true;
					var _g5 = 0;
					while(_g5 < currentInstances.length) {
						var instance3 = currentInstances[_g5];
						++_g5;
						if(child == instance3.displayObject) {
							shouldRemove = false;
							break;
						}
					}
					if(shouldRemove && child != null) {
						this.removeChild(child);
						if(!loopedSinceLastFrameUpdate) {
							this.__children.splice(childrenIndex,0,null);
						}
					}
				}
			}
			++childrenIndex;
		}
		currentInstancesIndex = 0;
		childrenIndex = 0;
		while(currentInstancesIndex < length) {
			existingChild = childrenIndex >= this.__children.length ? null : this.__children[childrenIndex];
			instance = currentInstances[currentInstancesIndex];
			targetDepth = instance.depth;
			targetChild = instance.displayObject;
			if(existingChild != targetChild) {
				if(existingChild != null && this.__cachedManuallyAddedDisplayObjects.indexOf(existingChild) >= 0) {
					--currentInstancesIndex;
					child = existingChild;
				} else {
					child = targetChild;
					if(existingChild == null && childrenIndex < this.__children.length) {
						this.__children.splice(childrenIndex,1);
					}
					this.__addChildAtInternal(targetChild,childrenIndex);
				}
			} else {
				child = existingChild;
			}
			maskApplied = false;
			var _g6 = 0;
			while(_g6 < currentMasks.length) {
				var mask = currentMasks[_g6];
				++_g6;
				if(targetDepth > mask.depth && targetDepth <= mask.clipDepth) {
					child.set_mask(mask.displayObject);
					maskApplied = true;
					break;
				}
			}
			if(currentMasks.length > 0 && !maskApplied && child.get_mask() != null) {
				child.set_mask(null);
			}
			++childrenIndex;
			++currentInstancesIndex;
		}
		childrenIndex = 0;
		while(childrenIndex < this.__children.length) if(this.__children[childrenIndex] == null) {
			this.__children.splice(childrenIndex,1);
		} else {
			++childrenIndex;
		}
		this.__lastFrameUpdate = this.__currentFrame;
	}
	,__fromSymbol: function(swf,symbol) {
		var _gthis = this;
		if(this.__activeInstancesByFrameObjectID != null) {
			return;
		}
		this.__swf = swf;
		this.__symbol = symbol;
		this.__activeInstances = [];
		this.__activeInstancesByFrameObjectID = new $hx_exports.haxe.ds.IntMap();
		this.__currentFrame = 1;
		this.__lastFrameUpdate = -2;
		this.__totalFrames = this.__symbol.frames.length;
		var frame;
		var frameData;
		var _g1 = 0;
		var _g = this.__symbol.frames.length;
		while(_g1 < _g) {
			var i = _g1++;
			frame = i + 1;
			frameData = this.__symbol.frames[i];
			var labelSingle = frameData.label;
			var addLabel = labelSingle != null;
			if(frameData.labels != null) {
				var _g2 = 0;
				var _g3 = frameData.labels;
				while(_g2 < _g3.length) {
					var label = _g3[_g2];
					++_g2;
					addLabel = addLabel && label != labelSingle;
					this.__currentLabels.push(new openfl_display_FrameLabel(label,i + 1));
				}
			}
			if(addLabel) {
				this.__currentLabels.push(new openfl_display_FrameLabel(labelSingle,i + 1));
			}
			if(frameData.script != null) {
				if(this.__frameScripts == null) {
					this.__frameScripts = new $hx_exports.haxe.ds.IntMap();
				}
				this.__frameScripts.set(frame,frameData.script);
			} else if(frameData.scriptSource != null) {
				if(this.__frameScripts == null) {
					this.__frameScripts = new $hx_exports.haxe.ds.IntMap();
				}
				try {
					var script = [eval("(function(){" + frameData.scriptSource + "})")];
					var wrapper = (function(script1) {
						return function() {
							try {
								script1[0].call(_gthis);
							} catch( e ) {
								if (e instanceof js__$Boot_HaxeError) e = e.val;
								var p = _gthis;
								var name = [];
								while(true) {
									name.push(p.__name);
									p = p.parent;
									if(!(null != p)) {
										break;
									}
								}
								name.reverse();
								var r = "(empty __swf)";
								if(_gthis.__swf != null) {
									r = _gthis.__swf.library.rootPath;
								}
								$hx_exports.haxe.Log.trace("Error evaluating frame script\n" + "swf: " + r + "\n" + "symbol path: " + name.join(".") + "\n" + Std.string(e) + "\n" + $hx_exports.haxe.CallStack.exceptionStack().map((function() {
									return function(a) {
										return a[2];
									};
								})()).join("\n") + "\n" + Std.string(e.stack) + "\n" + script1[0].toString(),{ fileName : "MovieClip.hx", lineNumber : 633, className : "openfl.display.MovieClip", methodName : "__fromSymbol"});
							}
						};
					})(script);
					this.__frameScripts.set(frame,wrapper);
				} catch( e1 ) {
					var p1 = this;
					var name1 = [];
					while(true) {
						name1.push(p1.__name);
						p1 = p1.parent;
						if(!(null != p1)) {
							break;
						}
					}
					name1.reverse();
					var r1 = "(empty __swf)";
					if(this.__swf != null) {
						r1 = this.__swf.library.rootPath;
					}
					$hx_exports.lime.utils.Log.warn("Unable to evaluate frame script source\n" + "swf: " + r1 + "\n" + "symbol path: " + name1.join(".") + "\n" + "symbol: " + (this.__symbol.className == null ? "null " : "\"" + this.__symbol.className + "\"") + "\n" + "frame: " + frame + "\n" + frameData.scriptSource,null,{ fileName : "MovieClip.hx", lineNumber : 658, className : "openfl.display.MovieClip", methodName : "__fromSymbol"});
				}
			}
		}
		var frame1;
		var frameData1;
		var instance;
		var duplicate;
		var symbol1;
		var displayObject;
		var lastObjectToHavePlacementData = null;
		var _g11 = 0;
		var _g4 = this.__totalFrames;
		while(_g11 < _g4) {
			var i1 = _g11++;
			frame1 = i1 + 1;
			frameData1 = this.__symbol.frames[i1];
			if(frameData1.objects == null) {
				continue;
			}
			var _g21 = 0;
			var _g31 = frameData1.objects;
			while(_g21 < _g31.length) {
				var frameObject = _g31[_g21];
				++_g21;
				if(frameObject.type == openfl__$internal_timeline_FrameObjectType.CREATE) {
					if(this.__activeInstancesByFrameObjectID.exists(frameObject.id)) {
						continue;
					} else {
						instance = null;
						duplicate = false;
						if(frameData1.objects.length <= 2) {
							if(frameObject.name != null || frameObject.matrix != null || frameObject.colorTransform != null || frameObject.filters != null) {
								lastObjectToHavePlacementData = frameObject.lastFrameObjectWithPlacementData = frameObject;
							} else if(lastObjectToHavePlacementData != null) {
								frameObject.lastFrameObjectWithPlacementData = lastObjectToHavePlacementData;
							}
						}
						var _g41 = 0;
						var _g5 = this.__activeInstances;
						while(_g41 < _g5.length) {
							var activeInstance = _g5[_g41];
							++_g41;
							if(activeInstance.displayObject != null && activeInstance.characterID == frameObject.symbol && activeInstance.depth == frameObject.depth) {
								instance = activeInstance;
								duplicate = true;
								break;
							}
						}
					}
					if(instance == null) {
						symbol1 = this.__swf.symbols.get(frameObject.symbol);
						if(symbol1 != null) {
							displayObject = symbol1.__createObject(this.__swf);
							if(displayObject != null) {
								displayObject.parent = this;
								displayObject.stage = this.stage;
								instance = new openfl_display__$MovieClip_FrameSymbolInstance(frame1,frameObject.id,frameObject.symbol,frameObject.depth,displayObject,frameObject.clipDepth);
							}
						}
					}
					if(instance != null) {
						this.__activeInstancesByFrameObjectID.set(frameObject.id,instance);
						if(!duplicate) {
							this.__activeInstances.push(instance);
							this.__updateDisplayObject(instance.displayObject,frameObject);
						}
					}
				}
			}
		}
		if(this.__totalFrames > 1) {
			this.play();
		}
		this.__updateFrameObjectsAndChildren();
		this.__currentFrame = 1;
		this.__lastFrameUpdate = -2;
	}
	,__setupInstanceFields: function() {
		if(!this.__isInstanceFieldsSetup) {
			this.__isInstanceFieldsSetup = true;
			var _g = 0;
			var _g1 = Type.getInstanceFields(Type.getClass(this));
			while(_g < _g1.length) {
				var field = _g1[_g];
				++_g;
				var _g2 = 0;
				var _g3 = this.__children;
				while(_g2 < _g3.length) {
					var child = _g3[_g2];
					++_g2;
					if(child.get_name() == field) {
						Reflect.setField(this,field,child);
					}
				}
			}
		}
	}
	,__getNextFrame: function(deltaTime) {
		this.__timeElapsed += deltaTime;
		var nextFrame = this.__currentFrame < 0 ? 0 : this.__currentFrame + $hx_exports.Math.floor(this.__timeElapsed / this.__frameTime);
		if(nextFrame < 1) {
			nextFrame = 1;
		}
		if(nextFrame > this.__totalFrames) {
			nextFrame = $hx_exports.Math.floor((nextFrame - 1) % this.__totalFrames) + 1;
		}
		this.__timeElapsed %= this.__frameTime;
		return nextFrame;
	}
	,__goto: function(frame) {
		if(this.__symbol == null) {
			return;
		}
		if(frame < 1) {
			frame = 1;
		} else if(frame > this.__totalFrames) {
			frame = this.__totalFrames;
		}
		if(this.__lastFrameUpdate == -2) {
			this.__enterFrame(0);
		}
		if(this.__currentFrame != frame) {
			this.__currentFrame = frame;
			this.__lastFrameUpdate = -1;
			this.__updateFrameObjectsAndChildren();
			if(this.__frameScripts != null && this.__frameScripts.exists(frame)) {
				var script = this.__frameScripts.get(frame);
				script();
			}
		}
		openfl_display_Sprite.prototype.__enterFrame.call(this,0);
	}
	,__resolveFrameReference: function(frame) {
		if(typeof(frame) == "number" && ((frame | 0) === frame)) {
			return frame;
		} else if(typeof(frame) == "string") {
			var label = frame;
			var _g = 0;
			var _g1 = this.__currentLabels;
			while(_g < _g1.length) {
				var frameLabel = _g1[_g];
				++_g;
				if(frameLabel.get_name() == label) {
					return frameLabel.get_frame();
				}
			}
			var p = this;
			var name = [];
			while(true) {
				name.push(p.__name);
				p = p.parent;
				if(!(null != p)) {
					break;
				}
			}
			name.reverse();
			var r = "(empty __swf)";
			if(this.__swf != null) {
				r = this.__swf.library.rootPath;
			}
			$hx_exports.lime.utils.Log.warn("Error #2109: Frame label " + label + " not found in scene.\n" + "swf: " + r + "\n" + "symbol path: " + name.join(".") + "\n" + "symbol: " + (this.__symbol.className == null ? "null " : "\"" + this.__symbol.className + "\"") + "\n" + "frame: " + Std.string(frame),null,{ fileName : "MovieClip.hx", lineNumber : 909, className : "openfl.display.MovieClip", methodName : "__resolveFrameReference"});
			return 1;
		} else {
			throw new js__$Boot_HaxeError("Invalid type for frame " + Type.getClassName(frame));
		}
	}
	,__sortDepths: function(a,b) {
		return a.depth - b.depth;
	}
	,__stopAllMovieClips: function() {
		openfl_display_Sprite.prototype.__stopAllMovieClips.call(this);
		this.stop();
	}
	,__updateDisplayObject: function(displayObject,frameObject) {
		if(displayObject == null) {
			return;
		}
		var currFrameObject = frameObject.lastFrameObjectWithPlacementData != null ? frameObject.lastFrameObjectWithPlacementData : frameObject;
		if(currFrameObject.name != null) {
			displayObject.set_name(currFrameObject.name);
		}
		if(currFrameObject.matrix != null) {
			displayObject.get_transform().set_matrix(currFrameObject.matrix);
		}
		if(currFrameObject.colorTransform != null) {
			displayObject.get_transform().set_colorTransform(currFrameObject.colorTransform);
		}
		if(currFrameObject.filters != null) {
			var filters = [];
			var _g = 0;
			var _g1 = currFrameObject.filters;
			while(_g < _g1.length) {
				var filter = _g1[_g];
				++_g;
				switch(filter[1]) {
				case 0:
					var quality = filter[4];
					var blurY = filter[3];
					var blurX = filter[2];
					filters.push(new openfl_filters_BlurFilter(blurX,blurY,quality));
					break;
				case 1:
					var matrix = filter[2];
					filters.push(new openfl_filters_ColorMatrixFilter(matrix));
					break;
				case 2:
					var hideObject = filter[12];
					var knockout = filter[11];
					var inner = filter[10];
					var quality1 = filter[9];
					var strength = filter[8];
					var blurY1 = filter[7];
					var blurX1 = filter[6];
					var alpha = filter[5];
					var color = filter[4];
					var angle = filter[3];
					var distance = filter[2];
					filters.push(new openfl_filters_DropShadowFilter(distance,angle,color,alpha,blurX1,blurY1,strength,quality1,inner,knockout,hideObject));
					break;
				case 3:
					var knockout1 = filter[9];
					var inner1 = filter[8];
					var quality2 = filter[7];
					var strength1 = filter[6];
					var blurY2 = filter[5];
					var blurX2 = filter[4];
					var alpha1 = filter[3];
					var color1 = filter[2];
					filters.push(new openfl_filters_GlowFilter(color1,alpha1,blurX2,blurY2,strength1,quality2,inner1,knockout1));
					break;
				}
			}
			displayObject.set_filters(filters);
		} else {
			displayObject.set_filters(null);
		}
		if(currFrameObject.visible != null) {
			displayObject.set_visible(currFrameObject.visible);
		}
		if(currFrameObject.blendMode != null) {
			displayObject.set_blendMode(currFrameObject.blendMode);
		}
		var tmp = currFrameObject.cacheAsBitmap != null;
	}
	,__updateFrameLabel: function() {
		var labels = this.__symbol.frames[this.__currentFrame - 1].labels;
		this.__currentFrameLabel = labels != null && labels.length > 0 ? labels[0] : this.__symbol.frames[this.__currentFrame - 1].label;
		if(this.__currentFrameLabel != null) {
			this.__currentLabel = this.__currentFrameLabel;
		} else {
			this.__currentLabel = null;
			var _g = 0;
			var _g1 = this.__currentLabels;
			while(_g < _g1.length) {
				var label = _g1[_g];
				++_g;
				if(label.get_frame() < this.__currentFrame) {
					this.__currentLabel = label.get_name();
				} else {
					break;
				}
			}
		}
	}
	,get_currentFrame: function() {
		return this.__currentFrame;
	}
	,get_currentFrameLabel: function() {
		return this.__currentFrameLabel;
	}
	,get_currentLabel: function() {
		return this.__currentLabel;
	}
	,get_currentLabels: function() {
		return this.__currentLabels;
	}
	,get_framesLoaded: function() {
		return this.__totalFrames;
	}
	,get_isPlaying: function() {
		return this.__playing;
	}
	,get_totalFrames: function() {
		return this.__totalFrames;
	}
	,get_width: function() {
		if(this.__swf != null && this.__swf.frameSizeMaxPixel != null && this.__symbol == this.__swf.root) {
			var thisWidth = openfl_display_Sprite.prototype.get_width.call(this);
			var frameSizeWidth = this.__swf.frameSizeMaxPixel.x - this.__swf.frameSizeMinPixel.x;
			if(frameSizeWidth > thisWidth) {
				return frameSizeWidth;
			} else {
				return thisWidth;
			}
		} else {
			return openfl_display_Sprite.prototype.get_width.call(this);
		}
	}
	,get_height: function() {
		if(this.__swf != null && this.__swf.frameSizeMaxPixel != null && this.__symbol == this.__swf.root) {
			var thisHeight = openfl_display_Sprite.prototype.get_height.call(this);
			var frameSizeHeight = this.__swf.frameSizeMaxPixel.y - this.__swf.frameSizeMinPixel.y;
			if(frameSizeHeight > thisHeight) {
				return frameSizeHeight;
			} else {
				return thisHeight;
			}
		} else {
			return openfl_display_Sprite.prototype.get_height.call(this);
		}
	}
	,__class__: openfl_display_MovieClip
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{get_totalFrames:"get_totalFrames",get_isPlaying:"get_isPlaying",get_framesLoaded:"get_framesLoaded",get_currentLabels:"get_currentLabels",get_currentLabel:"get_currentLabel",get_currentFrameLabel:"get_currentFrameLabel",get_currentFrame:"get_currentFrame"})
});
var openfl_display__$MovieClip_FrameSymbolInstance = function(initFrame,initFrameObjectID,characterID,depth,displayObject,clipDepth) {
	this.initFrame = initFrame;
	this.initFrameObjectID = initFrameObjectID;
	this.characterID = characterID;
	this.depth = depth;
	this.displayObject = displayObject;
	this.clipDepth = clipDepth;
};
$hxClasses["openfl.display._MovieClip.FrameSymbolInstance"] = openfl_display__$MovieClip_FrameSymbolInstance;
openfl_display__$MovieClip_FrameSymbolInstance.__name__ = ["openfl","display","_MovieClip","FrameSymbolInstance"];
openfl_display__$MovieClip_FrameSymbolInstance.prototype = {
	characterID: null
	,clipDepth: null
	,depth: null
	,displayObject: null
	,initFrame: null
	,initFrameObjectID: null
	,__class__: openfl_display__$MovieClip_FrameSymbolInstance
};
var openfl_display_OpenGLView = $hx_exports["openfl"]["display"]["OpenGLView"] = function() {
	openfl_display_DirectRenderer.call(this,"OpenGLView");
};
$hxClasses["openfl.display.OpenGLView"] = openfl_display_OpenGLView;
openfl_display_OpenGLView.__name__ = ["openfl","display","OpenGLView"];
openfl_display_OpenGLView.__properties__ = {get_isSupported:"get_isSupported"};
openfl_display_OpenGLView.get_isSupported = function() {
	if(!window.WebGLRenderingContext) {
		return false;
	}
	if($hx_exports.lime.graphics.opengl.GL.context != null) {
		return true;
	} else {
		var canvas = $hx_exports.js.Browser.get_document().createElement("canvas");
		var context = canvas.getContext("webgl");
		if(context == null) {
			context = canvas.getContext("experimental-webgl");
		}
		return context != null;
	}
};
openfl_display_OpenGLView.__super__ = openfl_display_DirectRenderer;
openfl_display_OpenGLView.prototype = $extend(openfl_display_DirectRenderer.prototype,{
	__added: null
	,__initialized: null
	,__enterFrame: function(deltaTime) {
		if(this.__render != null) {
			this.__setRenderDirty();
		}
	}
	,__renderCanvas: function(renderSession) {
	}
	,__renderDOM: function(renderSession) {
		if(this.stage != null && this.__worldVisible && this.__renderable) {
			if(!this.__added) {
				renderSession.element.appendChild(this.__canvas);
				this.__added = true;
				openfl__$internal_renderer_dom_DOMRenderer.initializeElement(this,this.__canvas,renderSession);
			}
			if(this.__context != null) {
				var rect = null;
				if(this.__scrollRect == null) {
					rect = new openfl_geom_Rectangle(0,0,this.stage.stageWidth,this.stage.stageHeight);
				} else {
					rect = new openfl_geom_Rectangle(this.get_x() + this.__scrollRect.x,this.get_y() + this.__scrollRect.y,this.__scrollRect.width,this.__scrollRect.height);
				}
				if(this.__render != null) {
					this.__render(rect);
				}
			}
		} else if(this.__added) {
			renderSession.element.removeChild(this.__canvas);
			this.__added = false;
		}
	}
	,__renderGL: function(renderSession) {
		if(this.stage != null && this.__renderable) {
			var rect = null;
			if(this.__scrollRect == null) {
				rect = new openfl_geom_Rectangle(0,0,this.stage.stageWidth,this.stage.stageHeight);
			} else {
				rect = new openfl_geom_Rectangle(this.get_x() + this.__scrollRect.x,this.get_y() + this.__scrollRect.y,this.__scrollRect.width,this.__scrollRect.height);
			}
			renderSession.shaderManager.setShader(null);
			renderSession.blendModeManager.setBlendMode(null);
			if(this.__render != null) {
				this.__render(rect);
			}
		}
	}
	,__renderGLMask: function(renderSession) {
	}
	,__class__: openfl_display_OpenGLView
});
var openfl_display_PNGEncoderOptions = $hx_exports["openfl"]["display"]["PNGEncoderOptions"] = function(fastCompression) {
	if(fastCompression == null) {
		fastCompression = false;
	}
	this.fastCompression = fastCompression;
};
$hxClasses["openfl.display.PNGEncoderOptions"] = openfl_display_PNGEncoderOptions;
openfl_display_PNGEncoderOptions.__name__ = ["openfl","display","PNGEncoderOptions"];
openfl_display_PNGEncoderOptions.prototype = {
	fastCompression: null
	,__class__: openfl_display_PNGEncoderOptions
};
var openfl_display__$PixelSnapping_PixelSnapping_$Impl_$ = $hx_exports["openfl"]["display"]["PixelSnapping"] = {};
$hxClasses["openfl.display._PixelSnapping.PixelSnapping_Impl_"] = openfl_display__$PixelSnapping_PixelSnapping_$Impl_$;
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.__name__ = ["openfl","display","_PixelSnapping","PixelSnapping_Impl_"];
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.fromString = function(value) {
	switch(value) {
	case "always":
		return 0;
	case "auto":
		return 1;
	case "never":
		return 2;
	default:
		return null;
	}
};
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "always";
	case 1:
		return "auto";
	case 2:
		return "never";
	default:
		return null;
	}
};
var openfl_display_Preloader = $hx_exports["openfl"]["display"]["Preloader"] = function(display) {
	$hx_exports.lime.app.Preloader.call(this);
	this.display = display;
	if(display != null) {
		display.addEventListener("unload",$bind(this,this.display_onUnload));
		openfl_Lib.get_current().addChild(display);
	}
};
$hxClasses["openfl.display.Preloader"] = openfl_display_Preloader;
openfl_display_Preloader.__name__ = ["openfl","display","Preloader"];
openfl_display_Preloader.__super__ = $hx_exports.lime.app.Preloader;
openfl_display_Preloader.prototype = $extend($hx_exports.lime.app.Preloader.prototype,{
	display: null
	,ready: null
	,start: function() {
		if(this.simulateProgress) {
			return;
		}
		this.ready = true;
		openfl_Lib.get_current().get_loaderInfo().__complete();
		if(this.display != null) {
			var complete = new openfl_events_Event("complete",true,true);
			this.display.dispatchEvent(complete);
			if(!complete.isDefaultPrevented()) {
				this.display.dispatchEvent(new openfl_events_Event("unload"));
			}
		} else {
			$hx_exports.lime.app.Preloader.prototype.start.call(this);
		}
	}
	,update: function(loaded,total) {
		openfl_Lib.get_current().get_loaderInfo().__update(loaded,total);
		if(this.display != null) {
			this.display.dispatchEvent(new openfl_events_ProgressEvent("progress",true,true,loaded,total));
		}
	}
	,display_onUnload: function(event) {
		if(this.display != null) {
			this.display.removeEventListener("unload",$bind(this,this.display_onUnload));
			if(this.display.parent == openfl_Lib.get_current()) {
				openfl_Lib.get_current().removeChild(this.display);
			}
			openfl_Lib.get_current().stage.set_focus(null);
			this.display = null;
		}
		if(this.ready && !this.simulateProgress) {
			$hx_exports.lime.app.Preloader.prototype.start.call(this);
		}
	}
	,__class__: openfl_display_Preloader
});
var openfl_display_DefaultPreloader = $hx_exports["openfl"]["display"]["DefaultPreloader"] = function() {
	openfl_display_Sprite.call(this);
	var backgroundColor = this.getBackgroundColor();
	var r = backgroundColor >> 16 & 255;
	var g = backgroundColor >> 8 & 255;
	var b = backgroundColor & 255;
	var perceivedLuminosity = 0.299 * r + 0.587 * g + 0.114 * b;
	var color = 0;
	if(perceivedLuminosity < 70) {
		color = 16777215;
	}
	var x = 30;
	var height = 7;
	var y = this.getHeight() / 2 - height / 2;
	var width = this.getWidth() - x * 2;
	var padding = 2;
	this.outline = new openfl_display_Sprite();
	this.outline.get_graphics().beginFill(color,0.07);
	this.outline.get_graphics().drawRect(0,0,width,height);
	this.outline.set_x(x);
	this.outline.set_y(y);
	this.outline.set_alpha(0);
	this.addChild(this.outline);
	this.progress = new openfl_display_Sprite();
	this.progress.get_graphics().beginFill(color,0.35);
	this.progress.get_graphics().drawRect(0,0,width - padding * 2,height - padding * 2);
	this.progress.set_x(x + padding);
	this.progress.set_y(y + padding);
	this.progress.set_scaleX(0);
	this.progress.set_alpha(0);
	this.addChild(this.progress);
	this.startAnimation = openfl_Lib.getTimer() + 100;
	this.endAnimation = this.startAnimation + 1000;
	this.addEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
};
$hxClasses["openfl.display.DefaultPreloader"] = openfl_display_DefaultPreloader;
openfl_display_DefaultPreloader.__name__ = ["openfl","display","DefaultPreloader"];
openfl_display_DefaultPreloader.__super__ = openfl_display_Sprite;
openfl_display_DefaultPreloader.prototype = $extend(openfl_display_Sprite.prototype,{
	endAnimation: null
	,outline: null
	,progress: null
	,startAnimation: null
	,getBackgroundColor: function() {
		return openfl_Lib.get_current().stage.window.config.background;
	}
	,getHeight: function() {
		var height = openfl_Lib.get_current().stage.window.config.height;
		if(height > 0) {
			return height;
		} else {
			return openfl_Lib.get_current().stage.stageHeight;
		}
	}
	,getWidth: function() {
		var width = openfl_Lib.get_current().stage.window.config.width;
		if(width > 0) {
			return width;
		} else {
			return openfl_Lib.get_current().stage.stageWidth;
		}
	}
	,onInit: function() {
		this.addEventListener("enterFrame",$bind(this,this.this_onEnterFrame));
	}
	,onLoaded: function() {
		this.removeEventListener("enterFrame",$bind(this,this.this_onEnterFrame));
		this.dispatchEvent(new openfl_events_Event("unload"));
	}
	,onUpdate: function(bytesLoaded,bytesTotal) {
		var percentLoaded = 0.0;
		if(bytesTotal > 0) {
			percentLoaded = bytesLoaded / bytesTotal;
			if(percentLoaded > 1) {
				percentLoaded = 1;
			}
		}
		this.progress.set_scaleX(percentLoaded);
	}
	,this_onAddedToStage: function(event) {
		this.removeEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
		this.onInit();
		this.onUpdate(this.get_loaderInfo().bytesLoaded,this.get_loaderInfo().bytesTotal);
		this.addEventListener("progress",$bind(this,this.this_onProgress));
		this.addEventListener("complete",$bind(this,this.this_onComplete));
	}
	,this_onComplete: function(event) {
		event.preventDefault();
		this.removeEventListener("progress",$bind(this,this.this_onProgress));
		this.removeEventListener("complete",$bind(this,this.this_onComplete));
		this.onLoaded();
	}
	,this_onEnterFrame: function(event) {
		var elapsed = openfl_Lib.getTimer() - this.startAnimation;
		var total = this.endAnimation - this.startAnimation;
		var percent = elapsed / total;
		if(percent < 0) {
			percent = 0;
		}
		if(percent > 1) {
			percent = 1;
		}
		this.outline.set_alpha(percent);
		this.progress.set_alpha(percent);
	}
	,this_onProgress: function(event) {
		this.onUpdate(Std.int(event.bytesLoaded),Std.int(event.bytesTotal));
	}
	,__class__: openfl_display_DefaultPreloader
});
var openfl_display_ShaderData = $hx_exports["openfl"]["display"]["ShaderData"] = function(byteArray) {
};
$hxClasses["openfl.display.ShaderData"] = openfl_display_ShaderData;
openfl_display_ShaderData.__name__ = ["openfl","display","ShaderData"];
openfl_display_ShaderData.prototype = {
	aAlpha: null
	,aPosition: null
	,aTexCoord: null
	,uImage0: null
	,uMatrix: null
	,__class__: openfl_display_ShaderData
};
var openfl_display_ShaderInput = $hx_exports["openfl"]["display"]["ShaderInput"] = function() {
	this.channels = 0;
	this.height = 0;
	this.index = 0;
	this.width = 0;
};
$hxClasses["openfl.display.ShaderInput"] = openfl_display_ShaderInput;
openfl_display_ShaderInput.__name__ = ["openfl","display","ShaderInput"];
openfl_display_ShaderInput.prototype = {
	channels: null
	,height: null
	,index: null
	,input: null
	,name: null
	,smoothing: null
	,width: null
	,__class__: openfl_display_ShaderInput
};
var openfl_display_ShaderJob = $hx_exports["openfl"]["display"]["ShaderJob"] = function(shader,target,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	openfl_events_EventDispatcher.call(this);
	this.height = height;
	this.width = 0;
	this.progress = 0;
};
$hxClasses["openfl.display.ShaderJob"] = openfl_display_ShaderJob;
openfl_display_ShaderJob.__name__ = ["openfl","display","ShaderJob"];
openfl_display_ShaderJob.__super__ = openfl_events_EventDispatcher;
openfl_display_ShaderJob.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	height: null
	,progress: null
	,shader: null
	,target: null
	,width: null
	,cancel: function() {
	}
	,start: function(waitForCompletion) {
		if(waitForCompletion == null) {
			waitForCompletion = false;
		}
	}
	,__class__: openfl_display_ShaderJob
});
var openfl_display_ShaderParameter = $hx_exports["openfl"]["display"]["ShaderParameter"] = function() {
	this.index = 0;
};
$hxClasses["openfl.display.ShaderParameter"] = openfl_display_ShaderParameter;
openfl_display_ShaderParameter.__name__ = ["openfl","display","ShaderParameter"];
openfl_display_ShaderParameter.prototype = {
	index: null
	,name: null
	,type: null
	,value: null
	,__class__: openfl_display_ShaderParameter
};
var openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$ = $hx_exports["openfl"]["display"]["ShaderParameterType"] = {};
$hxClasses["openfl.display._ShaderParameterType.ShaderParameterType_Impl_"] = openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.__name__ = ["openfl","display","_ShaderParameterType","ShaderParameterType_Impl_"];
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bool":
		return 0;
	case "bool2":
		return 1;
	case "bool3":
		return 1;
	case "bool4":
		return 1;
	case "float":
		return 4;
	case "float2":
		return 5;
	case "float3":
		return 6;
	case "float4":
		return 7;
	case "int":
		return 8;
	case "int2":
		return 9;
	case "int3":
		return 10;
	case "int4":
		return 11;
	case "matrix2x2":
		return 12;
	case "matrix2x3":
		return 13;
	case "matrix2x4":
		return 14;
	case "matrix3x2":
		return 15;
	case "matrix3x3":
		return 16;
	case "matrix3x4":
		return 17;
	case "matrix4x2":
		return 18;
	case "matrix4x3":
		return 19;
	case "matrix4x4":
		return 20;
	default:
		return null;
	}
};
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bool";
	case 1:
		return "bool2";
	case 2:
		return "bool3";
	case 3:
		return "bool4";
	case 4:
		return "float";
	case 5:
		return "float2";
	case 6:
		return "float3";
	case 7:
		return "float4";
	case 8:
		return "int";
	case 9:
		return "int2";
	case 10:
		return "int3";
	case 11:
		return "int4";
	case 12:
		return "matrix2x2";
	case 13:
		return "matrix2x3";
	case 14:
		return "matrix2x4";
	case 15:
		return "matrix3x2";
	case 16:
		return "matrix3x3";
	case 17:
		return "matrix3x4";
	case 18:
		return "matrix4x2";
	case 19:
		return "matrix4x3";
	case 20:
		return "matrix4x4";
	default:
		return null;
	}
};
var openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$ = $hx_exports["openfl"]["display"]["ShaderPrecision"] = {};
$hxClasses["openfl.display._ShaderPrecision.ShaderPrecision_Impl_"] = openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$;
openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$.__name__ = ["openfl","display","_ShaderPrecision","ShaderPrecision_Impl_"];
openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$.fromString = function(value) {
	switch(value) {
	case "fast":
		return 0;
	case "full":
		return 1;
	default:
		return null;
	}
};
openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "fast";
	case 1:
		return "full";
	default:
		return null;
	}
};
var openfl_display_Shape = $hx_exports["openfl"]["display"]["Shape"] = function() {
	openfl_display_DisplayObject.call(this);
};
$hxClasses["openfl.display.Shape"] = openfl_display_Shape;
openfl_display_Shape.__name__ = ["openfl","display","Shape"];
openfl_display_Shape.__interfaces__ = [openfl_display_IShaderDrawable];
openfl_display_Shape.__super__ = openfl_display_DisplayObject;
openfl_display_Shape.prototype = $extend(openfl_display_DisplayObject.prototype,{
	shader: null
	,get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics(this);
		}
		return this.__graphics;
	}
	,__class__: openfl_display_Shape
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{get_graphics:"get_graphics"})
});
var openfl_display_SimpleButton = $hx_exports["openfl"]["display"]["SimpleButton"] = function(upState,overState,downState,hitTestState) {
	openfl_display_InteractiveObject.call(this);
	this.enabled = true;
	this.trackAsMenu = false;
	this.useHandCursor = true;
	this.__upState = upState != null ? upState : new openfl_display_DisplayObject();
	this.__overState = overState;
	this.__downState = downState;
	this.__hitTestState = hitTestState != null ? hitTestState : new openfl_display_DisplayObject();
	this.addEventListener("mouseDown",$bind(this,this.__this_onMouseDown));
	this.addEventListener("mouseOut",$bind(this,this.__this_onMouseOut));
	this.addEventListener("mouseOver",$bind(this,this.__this_onMouseOver));
	this.addEventListener("mouseUp",$bind(this,this.__this_onMouseUp));
	this.__tabEnabled = true;
	this.set___currentState(this.__upState);
	if(openfl_display_SimpleButton.__initSymbol != null) {
		var swf = openfl_display_SimpleButton.__initSWF;
		this.__symbol = openfl_display_SimpleButton.__initSymbol;
		openfl_display_SimpleButton.__initSWF = null;
		openfl_display_SimpleButton.__initSymbol = null;
		this.__fromSymbol(swf,this.__symbol);
	}
};
$hxClasses["openfl.display.SimpleButton"] = openfl_display_SimpleButton;
openfl_display_SimpleButton.__name__ = ["openfl","display","SimpleButton"];
openfl_display_SimpleButton.__initSWF = null;
openfl_display_SimpleButton.__initSymbol = null;
openfl_display_SimpleButton.__super__ = openfl_display_InteractiveObject;
openfl_display_SimpleButton.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	enabled: null
	,trackAsMenu: null
	,useHandCursor: null
	,__currentState: null
	,__downState: null
	,__hitTestState: null
	,__ignoreEvent: null
	,__overState: null
	,__previousStates: null
	,__soundTransform: null
	,__symbol: null
	,__upState: null
	,__fromSymbol: function(swf,symbol) {
		this.__symbol = symbol;
		if(symbol.downState != null) {
			this.set_downState(symbol.downState.__createObject(swf));
		}
		if(symbol.hitState != null) {
			this.set_hitTestState(symbol.hitState.__createObject(swf));
		}
		if(symbol.overState != null) {
			this.set_overState(symbol.overState.__createObject(swf));
		}
		if(symbol.upState != null) {
			this.set_upState(symbol.upState.__createObject(swf));
		}
	}
	,__getBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		this.__currentState.__getBounds(rect,this.__currentState.__worldTransform);
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect != null) {
			openfl_display_InteractiveObject.prototype.__getRenderBounds.call(this,rect,matrix);
			return;
		} else {
			openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		}
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		this.__currentState.__getRenderBounds(rect,this.__currentState.__worldTransform);
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__getCursor: function() {
		if(this.useHandCursor && !this.__ignoreEvent) {
			return lime_ui_MouseCursor.POINTER;
		} else {
			return null;
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		var hitTest = false;
		if(this.get_hitTestState() != null) {
			if(this.get_hitTestState().__hitTest(x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
				if(stack != null) {
					if(stack.length == 0) {
						stack[0] = hitObject;
					} else {
						stack[stack.length - 1] = hitObject;
					}
				}
				hitTest = true;
			}
		} else if(this.__currentState != null) {
			if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) {
				return false;
			}
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
				return false;
			}
			if(this.__currentState.__hitTest(x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
				hitTest = interactiveOnly;
			}
		}
		if(stack != null) {
			while(stack.length > 1 && stack[stack.length - 1] == stack[stack.length - 2]) stack.pop();
		}
		return hitTest;
	}
	,__hitTestMask: function(x,y) {
		var hitTest = false;
		if(this.__currentState.__hitTestMask(x,y)) {
			hitTest = true;
		}
		return hitTest;
	}
	,__renderCairo: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0 || this.__currentState == null) {
			return;
		}
		renderSession.maskManager.pushObject(this);
		this.__currentState.__renderCairo(renderSession);
		renderSession.maskManager.popObject(this);
	}
	,__renderCairoMask: function(renderSession) {
		this.__currentState.__renderCairoMask(renderSession);
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0 || this.__currentState == null) {
			return;
		}
		renderSession.maskManager.pushObject(this);
		this.__currentState.__renderCanvas(renderSession);
		renderSession.maskManager.popObject(this);
	}
	,__renderCanvasMask: function(renderSession) {
		var bounds = openfl_geom_Rectangle.__pool.get();
		this.__getLocalBounds(bounds);
		renderSession.context.rect(0,0,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
		this.__currentState.__renderCanvasMask(renderSession);
	}
	,__renderDOM: function(renderSession) {
		renderSession.maskManager.pushObject(this);
		var _g = 0;
		var _g1 = this.__previousStates;
		while(_g < _g1.data.get_length()) {
			var previousState = _g1.data.get(_g);
			++_g;
			previousState.__renderDOM(renderSession);
		}
		this.__previousStates.data.set_length(0);
		if(this.__currentState != null) {
			if(this.__currentState.stage != this.stage) {
				this.__currentState.__setStageReference(this.stage);
			}
			this.__currentState.__renderDOM(renderSession);
		}
		renderSession.maskManager.popObject(this);
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0 || this.__currentState == null) {
			return;
		}
		renderSession.maskManager.pushObject(this);
		this.__currentState.__renderGL(renderSession);
		renderSession.maskManager.popObject(this);
	}
	,__renderGLMask: function(renderSession) {
		if(this.__currentState == null) {
			return;
		}
		this.__currentState.__renderGLMask(renderSession);
	}
	,__setStageReference: function(stage) {
		openfl_display_InteractiveObject.prototype.__setStageReference.call(this,stage);
		if(this.__currentState != null) {
			this.__currentState.__setStageReference(stage);
		}
		if(this.get_hitTestState() != null && this.get_hitTestState() != this.__currentState) {
			this.get_hitTestState().__setStageReference(stage);
		}
	}
	,__setTransformDirty: function() {
		openfl_display_InteractiveObject.prototype.__setTransformDirty.call(this);
		if(this.__currentState != null) {
			this.__currentState.__setTransformDirty();
		}
		if(this.get_hitTestState() != null && this.get_hitTestState() != this.__currentState) {
			this.get_hitTestState().__setTransformDirty();
		}
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		openfl_display_InteractiveObject.prototype.__update.call(this,transformOnly,updateChildren,maskGraphics);
		if(updateChildren) {
			if(this.__currentState != null) {
				this.__currentState.__update(transformOnly,true,maskGraphics);
			}
			if(this.get_hitTestState() != null && this.get_hitTestState() != this.__currentState) {
				this.get_hitTestState().__update(transformOnly,true,maskGraphics);
			}
		}
	}
	,__updateChildren: function(transformOnly) {
		openfl_display_InteractiveObject.prototype.__updateChildren.call(this,transformOnly);
		if(this.__currentState != null) {
			this.__currentState.__updateChildren(transformOnly);
		}
		if(this.get_hitTestState() != null && this.get_hitTestState() != this.__currentState) {
			this.get_hitTestState().__updateChildren(transformOnly);
		}
	}
	,__updateTransforms: function(overrideTransform) {
		openfl_display_InteractiveObject.prototype.__updateTransforms.call(this,overrideTransform);
		if(this.__currentState != null) {
			this.__currentState.__updateTransforms();
		}
		if(this.get_hitTestState() != null && this.get_hitTestState() != this.__currentState) {
			this.get_hitTestState().__updateTransforms();
		}
	}
	,get_downState: function() {
		return this.__downState;
	}
	,set_downState: function(downState) {
		if(this.__downState != null && this.__currentState == this.__downState) {
			this.set___currentState(this.__downState);
		}
		return this.__downState = downState;
	}
	,get_hitTestState: function() {
		return this.__hitTestState;
	}
	,set_hitTestState: function(hitTestState) {
		if(this.__hitTestState != null && this.__hitTestState != hitTestState) {
			if(this.__hitTestState != this.get_downState() && this.__hitTestState != this.get_upState() && this.__hitTestState != this.get_overState()) {
				this.__hitTestState.__renderParent = null;
			}
		}
		if(hitTestState != null) {
			hitTestState.__renderParent = this;
			hitTestState.__setRenderDirty();
		}
		return this.__hitTestState = hitTestState;
	}
	,get_overState: function() {
		return this.__overState;
	}
	,set_overState: function(overState) {
		if(this.__overState != null && this.__currentState == this.__overState) {
			this.set___currentState(overState);
		}
		return this.__overState = overState;
	}
	,get_soundTransform: function() {
		if(this.__soundTransform == null) {
			this.__soundTransform = new openfl_media_SoundTransform();
		}
		return new openfl_media_SoundTransform(this.__soundTransform.volume,this.__soundTransform.pan);
	}
	,set_soundTransform: function(value) {
		this.__soundTransform = new openfl_media_SoundTransform(value.volume,value.pan);
		return value;
	}
	,get_upState: function() {
		return this.__upState;
	}
	,set_upState: function(upState) {
		if(this.__upState != null && this.__currentState == this.__upState) {
			this.set___currentState(upState);
		}
		return this.__upState = upState;
	}
	,set___currentState: function(value) {
		if(this.__currentState != null && this.__currentState != this.get_hitTestState()) {
			this.__currentState.__renderParent = null;
		}
		if(value != null && value.parent != null) {
			value.parent.removeChild(value);
		}
		if(value != this.__currentState) {
			if(value != null) {
				value.__renderParent = this;
				value.__setRenderDirty();
			}
			this.__setRenderDirty();
		}
		this.__currentState = value;
		return value;
	}
	,__this_onMouseDown: function(event) {
		this.set___currentState(this.get_downState());
	}
	,__this_onMouseOut: function(event) {
		this.__ignoreEvent = false;
		if(this.get_upState() != this.__currentState) {
			this.set___currentState(this.get_upState());
		}
	}
	,__this_onMouseOver: function(event) {
		if(event.buttonDown) {
			this.__ignoreEvent = true;
		}
		if(this.get_overState() != this.__currentState && this.get_overState() != null && !this.__ignoreEvent) {
			this.set___currentState(this.get_overState());
		}
	}
	,__this_onMouseUp: function(event) {
		this.__ignoreEvent = false;
		if(this.get_overState() != null) {
			this.set___currentState(this.get_overState());
		} else {
			this.set___currentState(this.get_upState());
		}
	}
	,__class__: openfl_display_SimpleButton
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{set___currentState:"set___currentState",set_upState:"set_upState",get_upState:"get_upState",set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform",set_overState:"set_overState",get_overState:"get_overState",set_hitTestState:"set_hitTestState",get_hitTestState:"get_hitTestState",set_downState:"set_downState",get_downState:"get_downState"})
});
var openfl_display__$SpreadMethod_SpreadMethod_$Impl_$ = $hx_exports["openfl"]["display"]["SpreadMethod"] = {};
$hxClasses["openfl.display._SpreadMethod.SpreadMethod_Impl_"] = openfl_display__$SpreadMethod_SpreadMethod_$Impl_$;
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.__name__ = ["openfl","display","_SpreadMethod","SpreadMethod_Impl_"];
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.fromString = function(value) {
	switch(value) {
	case "pad":
		return 0;
	case "reflect":
		return 1;
	case "repeat":
		return 2;
	default:
		return null;
	}
};
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "pad";
	case 1:
		return "reflect";
	case 2:
		return "repeat";
	default:
		return null;
	}
};
var openfl_display_Stage = $hx_exports["openfl"]["display"]["Stage"] = function($window,color) {
	openfl_display_DisplayObjectContainer.call(this);
	this.application = $window.application;
	this.window = $window;
	if(color == null) {
		this.__transparent = true;
		this.set_color(0);
	} else {
		this.set_color(color);
	}
	this.set_name(null);
	this.__contentsScaleFactor = $window.get_scale();
	this.__deltaTime = 0;
	this.__displayState = 2;
	this.__mouseX = 0;
	this.__mouseY = 0;
	this.__lastClickTime = 0;
	this.__logicalWidth = 0;
	this.__logicalHeight = 0;
	this.__displayMatrix = new openfl_geom_Matrix();
	this.__renderDirty = true;
	this.__wasFullscreen = $window.get_fullscreen();
	this.stage3Ds = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	var this1 = this.stage3Ds;
	var x = new openfl_display_Stage3D();
	this1.data.push(x);
	this.__resize();
	this.stage = this;
	this.align = 6;
	this.allowsFullScreen = false;
	this.allowsFullScreenInteractive = false;
	this.quality = 1;
	this.scaleMode = 2;
	this.showDefaultContextMenu = true;
	this.softKeyboardRect = new openfl_geom_Rectangle();
	this.stageFocusRect = true;
	this.__macKeyboard = /AppleWebKit/.test (navigator.userAgent) && /Mobile\/\w+/.test (navigator.userAgent) || /Mac/.test (navigator.platform);
	this.__clearBeforeRender = true;
	this.__stack = [];
	this.__rollOutStack = [];
	this.__touchData = new $hx_exports.haxe.ds.IntMap();
	if(openfl_Lib.get_current().stage == null) {
		this.stage.addChild(openfl_Lib.get_current());
	}
};
$hxClasses["openfl.display.Stage"] = openfl_display_Stage;
openfl_display_Stage.__name__ = ["openfl","display","Stage"];
openfl_display_Stage.__interfaces__ = [$hx_exports.lime.app.IModule];
openfl_display_Stage.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Stage.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	align: null
	,allowsFullScreen: null
	,allowsFullScreenInteractive: null
	,application: null
	,quality: null
	,scaleMode: null
	,showDefaultContextMenu: null
	,softKeyboardRect: null
	,stage3Ds: null
	,stageFocusRect: null
	,stageHeight: null
	,stageWidth: null
	,window: null
	,__cacheFocus: null
	,__clearBeforeRender: null
	,__color: null
	,__colorSplit: null
	,__colorString: null
	,__contentsScaleFactor: null
	,__deltaTime: null
	,__dirty: null
	,__displayMatrix: null
	,__displayState: null
	,__dragBounds: null
	,__dragObject: null
	,__dragOffsetX: null
	,__dragOffsetY: null
	,__focus: null
	,__fullscreen: null
	,__invalidated: null
	,__lastClickTime: null
	,__logicalWidth: null
	,__logicalHeight: null
	,__macKeyboard: null
	,__mouseDownLeft: null
	,__mouseDownMiddle: null
	,__mouseDownRight: null
	,__mouseOverTarget: null
	,__mouseX: null
	,__mouseY: null
	,__primaryTouch: null
	,__renderer: null
	,__rendering: null
	,__rollOutStack: null
	,__stack: null
	,__touchData: null
	,__transparent: null
	,__wasDirty: null
	,__wasFullscreen: null
	,addRenderer: function(renderer) {
		var f = $bind(this,this.render);
		var renderer1 = renderer;
		var tmp = function() {
			f(renderer1);
		};
		renderer.onRender.add(tmp);
		var f1 = $bind(this,this.onRenderContextLost);
		var renderer2 = renderer;
		var tmp1 = function() {
			f1(renderer2);
		};
		renderer.onContextLost.add(tmp1);
		var f2 = $bind(this,this.onRenderContextRestored);
		var renderer3 = renderer;
		var tmp2 = function(context) {
			f2(renderer3,context);
		};
		renderer.onContextRestored.add(tmp2);
	}
	,addWindow: function($window) {
		if(this.window != $window) {
			return;
		}
		var f = $bind(this,this.onWindowActivate);
		var window1 = $window;
		var tmp = function() {
			f(window1);
		};
		$window.onActivate.add(tmp);
		var f1 = $bind(this,this.onWindowClose);
		var window2 = $window;
		var tmp1 = function() {
			f1(window2);
		};
		$window.onClose.add(tmp1,false,-9000);
		var f2 = $bind(this,this.onWindowCreate);
		var window3 = $window;
		var tmp2 = function() {
			f2(window3);
		};
		$window.onCreate.add(tmp2);
		var f3 = $bind(this,this.onWindowDeactivate);
		var window4 = $window;
		var tmp3 = function() {
			f3(window4);
		};
		$window.onDeactivate.add(tmp3);
		var f4 = $bind(this,this.onWindowDropFile);
		var window5 = $window;
		var tmp4 = function(file) {
			f4(window5,file);
		};
		$window.onDropFile.add(tmp4);
		var f5 = $bind(this,this.onWindowEnter);
		var window6 = $window;
		var tmp5 = function() {
			f5(window6);
		};
		$window.onEnter.add(tmp5);
		var f6 = $bind(this,this.onWindowFocusIn);
		var window7 = $window;
		var tmp6 = function() {
			f6(window7);
		};
		$window.onFocusIn.add(tmp6);
		var f7 = $bind(this,this.onWindowFocusOut);
		var window8 = $window;
		var tmp7 = function() {
			f7(window8);
		};
		$window.onFocusOut.add(tmp7);
		var f8 = $bind(this,this.onWindowFullscreen);
		var window9 = $window;
		var tmp8 = function() {
			f8(window9);
		};
		$window.onFullscreen.add(tmp8);
		var f9 = $bind(this,this.onKeyDown);
		var window10 = $window;
		var tmp9 = function(keyCode,modifier) {
			f9(window10,keyCode,modifier);
		};
		$window.onKeyDown.add(tmp9);
		var f10 = $bind(this,this.onKeyUp);
		var window11 = $window;
		var tmp10 = function(keyCode1,modifier1) {
			f10(window11,keyCode1,modifier1);
		};
		$window.onKeyUp.add(tmp10);
		var f11 = $bind(this,this.onWindowLeave);
		var window12 = $window;
		var tmp11 = function() {
			f11(window12);
		};
		$window.onLeave.add(tmp11);
		var f12 = $bind(this,this.onWindowMinimize);
		var window13 = $window;
		var tmp12 = function() {
			f12(window13);
		};
		$window.onMinimize.add(tmp12);
		var f13 = $bind(this,this.onMouseDown);
		var window14 = $window;
		var tmp13 = function(x,y,button) {
			f13(window14,x,y,button);
		};
		$window.onMouseDown.add(tmp13);
		var f14 = $bind(this,this.onMouseMove);
		var window15 = $window;
		var tmp14 = function(x1,y1) {
			f14(window15,x1,y1);
		};
		$window.onMouseMove.add(tmp14);
		var f15 = $bind(this,this.onMouseMoveRelative);
		var window16 = $window;
		var tmp15 = function(x2,y2) {
			f15(window16,x2,y2);
		};
		$window.onMouseMoveRelative.add(tmp15);
		var f16 = $bind(this,this.onMouseUp);
		var window17 = $window;
		var tmp16 = function(x3,y3,button1) {
			f16(window17,x3,y3,button1);
		};
		$window.onMouseUp.add(tmp16);
		var f17 = $bind(this,this.onMouseWheel);
		var window18 = $window;
		var tmp17 = function(deltaX,deltaY) {
			f17(window18,deltaX,deltaY);
		};
		$window.onMouseWheel.add(tmp17);
		var f18 = $bind(this,this.onWindowMove);
		var window19 = $window;
		var tmp18 = function(x4,y4) {
			f18(window19,x4,y4);
		};
		$window.onMove.add(tmp18);
		var f19 = $bind(this,this.onWindowResize);
		var window20 = $window;
		var tmp19 = function(width,height) {
			f19(window20,width,height);
		};
		$window.onResize.add(tmp19);
		var f20 = $bind(this,this.onWindowRestore);
		var window21 = $window;
		var tmp20 = function() {
			f20(window21);
		};
		$window.onRestore.add(tmp20);
		var f21 = $bind(this,this.onTextEdit);
		var window22 = $window;
		var tmp21 = function(text,start,length) {
			f21(window22,text,start,length);
		};
		$window.onTextEdit.add(tmp21);
		var f22 = $bind(this,this.onTextInput);
		var window23 = $window;
		var tmp22 = function(text1) {
			f22(window23,text1);
		};
		$window.onTextInput.add(tmp22);
		if($window.id > -1) {
			this.onWindowCreate($window);
		}
	}
	,registerModule: function(application) {
		application.onExit.add($bind(this,this.onModuleExit),false,0);
		application.onUpdate.add($bind(this,this.update));
		var gamepad = $hx_exports.lime.ui.Gamepad.devices.iterator();
		while(gamepad.hasNext()) {
			var gamepad1 = gamepad.next();
			this.__onGamepadConnect(gamepad1);
		}
		$hx_exports.lime.ui.Gamepad.onConnect.add($bind(this,this.__onGamepadConnect));
		$hx_exports.lime.ui.Touch.onStart.add($bind(this,this.onTouchStart));
		$hx_exports.lime.ui.Touch.onMove.add($bind(this,this.onTouchMove));
		$hx_exports.lime.ui.Touch.onEnd.add($bind(this,this.onTouchEnd));
	}
	,removeRenderer: function(renderer) {
	}
	,removeWindow: function($window) {
	}
	,setPreloader: function(preloader) {
	}
	,unregisterModule: function(application) {
		application.onExit.remove($bind(this,this.onModuleExit));
		application.onUpdate.remove($bind(this,this.update));
		$hx_exports.lime.ui.Gamepad.onConnect.remove($bind(this,this.__onGamepadConnect));
		$hx_exports.lime.ui.Touch.onStart.remove($bind(this,this.onTouchStart));
		$hx_exports.lime.ui.Touch.onMove.remove($bind(this,this.onTouchMove));
		$hx_exports.lime.ui.Touch.onEnd.remove($bind(this,this.onTouchEnd));
	}
	,invalidate: function() {
		this.__invalidated = true;
	}
	,localToGlobal: function(pos) {
		return pos.clone();
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
		try {
			openfl_ui_GameInput.__onGamepadAxisMove(gamepad,axis,value);
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onGamepadButtonDown: function(gamepad,button) {
		try {
			openfl_ui_GameInput.__onGamepadButtonDown(gamepad,button);
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onGamepadButtonUp: function(gamepad,button) {
		try {
			openfl_ui_GameInput.__onGamepadButtonUp(gamepad,button);
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onGamepadConnect: function(gamepad) {
		try {
			openfl_ui_GameInput.__onGamepadConnect(gamepad);
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onGamepadDisconnect: function(gamepad) {
		try {
			openfl_ui_GameInput.__onGamepadDisconnect(gamepad);
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
	}
	,onJoystickButtonDown: function(joystick,button) {
	}
	,onJoystickButtonUp: function(joystick,button) {
	}
	,onJoystickConnect: function(joystick) {
	}
	,onJoystickDisconnect: function(joystick) {
	}
	,onJoystickHatMove: function(joystick,hat,position) {
	}
	,onJoystickTrackballMove: function(joystick,trackball,value) {
	}
	,onKeyDown: function($window,keyCode,modifier) {
		if(this.window == null || this.window != $window) {
			return;
		}
		try {
			this.__onKey("keyDown",keyCode,modifier);
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onKeyUp: function($window,keyCode,modifier) {
		if(this.window == null || this.window != $window) {
			return;
		}
		try {
			this.__onKey("keyUp",keyCode,modifier);
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onModuleExit: function(code) {
		if(this.window != null) {
			try {
				this.__broadcastEvent(new openfl_events_Event("deactivate"));
			} catch( e ) {
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				this.__handleError(e);
			}
		}
	}
	,onMouseDown: function($window,x,y,button) {
		if(this.window == null || this.window != $window) {
			return;
		}
		try {
			var type;
			switch(button) {
			case 1:
				type = "middleMouseDown";
				break;
			case 2:
				type = "rightMouseDown";
				break;
			default:
				type = "mouseDown";
			}
			this.__onMouse(type,Std.int(x * $window.get_scale()),Std.int(y * $window.get_scale()),button);
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onMouseMove: function($window,x,y) {
		if(this.window == null || this.window != $window) {
			return;
		}
		try {
			this.__onMouse("mouseMove",Std.int(x * $window.get_scale()),Std.int(y * $window.get_scale()),0);
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onMouseMoveRelative: function($window,x,y) {
	}
	,onMouseUp: function($window,x,y,button) {
		if(this.window == null || this.window != $window) {
			return;
		}
		try {
			var type;
			switch(button) {
			case 1:
				type = "middleMouseUp";
				break;
			case 2:
				type = "rightMouseUp";
				break;
			default:
				type = "mouseUp";
			}
			this.__onMouse(type,Std.int(x * $window.get_scale()),Std.int(y * $window.get_scale()),button);
			if(!this.showDefaultContextMenu && button == 2) {
				$window.onMouseUp.cancel();
			}
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onMouseWheel: function($window,deltaX,deltaY) {
		if(this.window == null || this.window != $window) {
			return;
		}
		try {
			this.__onMouseWheel(Std.int(deltaX * $window.get_scale()),Std.int(deltaY * $window.get_scale()));
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onPreloadComplete: function() {
	}
	,onPreloadProgress: function(loaded,total) {
	}
	,onRenderContextLost: function(renderer) {
		this.__renderer = null;
	}
	,onRenderContextRestored: function(renderer,context) {
		this.__createRenderer();
	}
	,onTextEdit: function($window,text,start,length) {
	}
	,onTextInput: function($window,text) {
		if(this.window == null || this.window != $window) {
			return;
		}
		try {
			var stack = [];
			if(this.__focus == null) {
				this.__getInteractive(stack);
			} else {
				this.__focus.__getInteractive(stack);
			}
			var event = new openfl_events_TextEvent("textInput",true,false,text);
			if(stack.length > 0) {
				stack.reverse();
				this.__dispatchStack(event,stack);
			} else {
				this.__dispatchEvent(event);
			}
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onTouchMove: function(touch) {
		try {
			this.__onTouch("touchMove",touch);
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onTouchEnd: function(touch) {
		try {
			if(this.__primaryTouch == touch) {
				this.__primaryTouch = null;
			}
			this.__onTouch("touchEnd",touch);
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onTouchStart: function(touch) {
		try {
			if(this.__primaryTouch == null) {
				this.__primaryTouch = touch;
			}
			this.__onTouch("touchBegin",touch);
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowActivate: function($window) {
		if(this.window == null || this.window != $window) {
			return;
		}
	}
	,onWindowClose: function($window) {
		if(this.window == $window) {
			this.window = null;
		}
		try {
			this.__primaryTouch = null;
			this.__broadcastEvent(new openfl_events_Event("deactivate"));
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowCreate: function($window) {
		if(this.window == null || this.window != $window) {
			return;
		}
		try {
			if($window.renderer != null) {
				this.__createRenderer();
			}
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowDeactivate: function($window) {
		if(this.window == null || this.window != $window) {
			return;
		}
	}
	,onWindowDropFile: function($window,file) {
	}
	,onWindowEnter: function($window) {
	}
	,onWindowFocusIn: function($window) {
		if(this.window == null || this.window != $window) {
			return;
		}
		try {
			this.__renderDirty = true;
			this.__broadcastEvent(new openfl_events_Event("activate"));
			this.set_focus(this.__cacheFocus);
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowFocusOut: function($window) {
		if(this.window == null || this.window != $window) {
			return;
		}
		try {
			this.__primaryTouch = null;
			this.__broadcastEvent(new openfl_events_Event("deactivate"));
			var currentFocus = this.get_focus();
			this.set_focus(null);
			this.__cacheFocus = currentFocus;
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowFullscreen: function($window) {
		if(this.window == null || this.window != $window) {
			return;
		}
		try {
			this.__resize();
			if(!this.__wasFullscreen) {
				this.__wasFullscreen = true;
				if(this.__displayState == 2) {
					this.__displayState = 1;
				}
				this.__dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,false,true));
			}
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowLeave: function($window) {
		if(this.window == null || this.window != $window) {
			return;
		}
		try {
			this.__dispatchEvent(new openfl_events_Event("mouseLeave"));
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowMinimize: function($window) {
		if(this.window == null || this.window != $window) {
			return;
		}
	}
	,onWindowMove: function($window,x,y) {
	}
	,onWindowResize: function($window,width,height) {
		if(this.window == null || this.window != $window) {
			return;
		}
		try {
			this.__renderDirty = true;
			this.__resize();
			if(this.__wasFullscreen && !$window.get_fullscreen()) {
				this.__wasFullscreen = false;
				this.__displayState = 2;
				this.__dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,true,true));
			}
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowRestore: function($window) {
		if(this.window == null || this.window != $window) {
			return;
		}
	}
	,render: function(renderer) {
		if(renderer.window == null || renderer.window != this.window) {
			return;
		}
		try {
			if(this.__rendering) {
				return;
			}
			this.__rendering = true;
			if(this.__renderer != null && (openfl_display_Stage3D.__active || this.stage3Ds.data.get(0).__contextRequested)) {
				this.__renderer.clear();
				this.__renderer.renderStage3D();
				this.__renderDirty = true;
			}
			this.__broadcastEvent(new openfl_events_Event("enterFrame"));
			this.__broadcastEvent(new openfl_events_Event("frameConstructed"));
			this.__broadcastEvent(new openfl_events_Event("exitFrame"));
			if(this.__invalidated) {
				this.__invalidated = false;
				this.__broadcastEvent(new openfl_events_Event("render"));
			}
			this.__renderable = true;
			this.__enterFrame(this.__deltaTime);
			this.__deltaTime = 0;
			this.__update(false,true);
			if(this.__renderer != null && this.__renderDirty) {
				if(!openfl_display_Stage3D.__active) {
					this.__renderer.clear();
				}
				if(renderer.type == lime_graphics_RendererType.CAIRO) {
					var _g = renderer.context;
					if(_g[1] == 4) {
						var cairo = _g[2];
					}
				}
				this.__renderer.render();
			} else {
				renderer.onRender.cancel();
			}
			this.__rendering = false;
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,update: function(deltaTime) {
		this.__deltaTime = deltaTime;
	}
	,__broadcastEvent: function(event) {
		if(openfl_display_DisplayObject.__broadcastEvents.exists(event.type)) {
			var dispatchers = openfl_display_DisplayObject.__broadcastEvents.get(event.type);
			var _g = 0;
			while(_g < dispatchers.length) {
				var dispatcher = dispatchers[_g];
				++_g;
				dispatcher.__dispatch(event);
			}
		}
	}
	,__createRenderer: function() {
		var _g = this.window.renderer.context;
		switch(_g[1]) {
		case 0:
			var gl = _g[2];
			this.__renderer = new openfl__$internal_renderer_opengl_GLRenderer(this,gl);
			break;
		case 1:
			var context = _g[2];
			this.__renderer = new openfl__$internal_renderer_canvas_CanvasRenderer(this,context);
			break;
		case 2:
			var element = _g[2];
			break;
		case 4:
			var cairo = _g[2];
			break;
		case 5:
			var ctx = _g[2];
			break;
		default:
		}
	}
	,__drag: function(mouse) {
		var parent = this.__dragObject.parent;
		if(parent != null) {
			parent.__getWorldTransform().__transformInversePoint(mouse);
		}
		var x = mouse.x + this.__dragOffsetX;
		var y = mouse.y + this.__dragOffsetY;
		if(this.__dragBounds != null) {
			if(x < this.__dragBounds.x) {
				x = this.__dragBounds.x;
			} else if(x > this.__dragBounds.get_right()) {
				x = this.__dragBounds.get_right();
			}
			if(y < this.__dragBounds.y) {
				y = this.__dragBounds.y;
			} else if(y > this.__dragBounds.get_bottom()) {
				y = this.__dragBounds.get_bottom();
			}
		}
		this.__dragObject.set_x(x);
		this.__dragObject.set_y(y);
	}
	,__getInteractive: function(stack) {
		if(stack != null) {
			stack.push(this);
		}
		return true;
	}
	,__globalToLocal: function(global,local) {
		if(global != local) {
			local.copyFrom(global);
		}
		return local;
	}
	,__handleError: function(e) {
		var event = new openfl_events_UncaughtErrorEvent("uncaughtError",true,true,e);
		openfl_Lib.get_current().__loaderInfo.uncaughtErrorEvents.dispatchEvent(event);
		if(!event.__preventDefault) {
			try {
				var exc = $hx_exports.haxe.CallStack.lastException;
				if(exc != null && Reflect.hasField(exc,"stack") && exc.stack != null && exc.stack != "") {
					console.log(exc.stack);
					e.stack = exc.stack;
				} else {
					var msg = $hx_exports.haxe.CallStack.toString($hx_exports.haxe.CallStack.callStack());
					console.log(msg);
				}
			} catch( e2 ) {
			}
			throw e;
		}
	}
	,__onKey: function(type,keyCode,modifier) {
		openfl_events_MouseEvent.__altKey = $hx_$exports_lime_ui_KeyModifier.get_altKey(modifier);
		openfl_events_MouseEvent.__commandKey = $hx_$exports_lime_ui_KeyModifier.get_metaKey(modifier);
		openfl_events_MouseEvent.__ctrlKey = $hx_$exports_lime_ui_KeyModifier.get_ctrlKey(modifier);
		openfl_events_MouseEvent.__shiftKey = $hx_$exports_lime_ui_KeyModifier.get_shiftKey(modifier);
		var stack = [];
		if(this.__focus == null) {
			this.__getInteractive(stack);
		} else {
			this.__focus.__getInteractive(stack);
		}
		if(stack.length > 0) {
			var keyLocation = openfl_ui_Keyboard.__getKeyLocation(keyCode);
			var keyCode1 = openfl_ui_Keyboard.__convertKeyCode(keyCode);
			var charCode = openfl_ui_Keyboard.__getCharCode(keyCode1,$hx_$exports_lime_ui_KeyModifier.get_shiftKey(modifier));
			var event = new openfl_events_KeyboardEvent(type,true,true,charCode,keyCode1,keyLocation,this.__macKeyboard ? $hx_$exports_lime_ui_KeyModifier.get_ctrlKey(modifier) || $hx_$exports_lime_ui_KeyModifier.get_metaKey(modifier) : $hx_$exports_lime_ui_KeyModifier.get_ctrlKey(modifier),$hx_$exports_lime_ui_KeyModifier.get_altKey(modifier),$hx_$exports_lime_ui_KeyModifier.get_shiftKey(modifier),$hx_$exports_lime_ui_KeyModifier.get_ctrlKey(modifier),$hx_$exports_lime_ui_KeyModifier.get_metaKey(modifier));
			stack.reverse();
			this.__dispatchStack(event,stack);
			if(event.__preventDefault) {
				if(type == "keyDown") {
					this.window.onKeyDown.cancel();
				} else {
					this.window.onKeyUp.cancel();
				}
			}
		}
	}
	,__onGamepadConnect: function(gamepad) {
		this.onGamepadConnect(gamepad);
		var f = $bind(this,this.onGamepadAxisMove);
		var gamepad1 = gamepad;
		var tmp = function(axis,value) {
			f(gamepad1,axis,value);
		};
		gamepad.onAxisMove.add(tmp);
		var f1 = $bind(this,this.onGamepadButtonDown);
		var gamepad2 = gamepad;
		var tmp1 = function(button) {
			f1(gamepad2,button);
		};
		gamepad.onButtonDown.add(tmp1);
		var f2 = $bind(this,this.onGamepadButtonUp);
		var gamepad3 = gamepad;
		var tmp2 = function(button1) {
			f2(gamepad3,button1);
		};
		gamepad.onButtonUp.add(tmp2);
		var f3 = $bind(this,this.onGamepadDisconnect);
		var gamepad4 = gamepad;
		var tmp3 = function() {
			f3(gamepad4);
		};
		gamepad.onDisconnect.add(tmp3);
	}
	,__onMouse: function(type,x,y,button) {
		if(button > 2) {
			return;
		}
		var targetPoint = openfl_geom_Point.__pool.get();
		targetPoint.setTo(x,y);
		this.__displayMatrix.__transformInversePoint(targetPoint);
		this.__mouseX = targetPoint.x;
		this.__mouseY = targetPoint.y;
		var stack = [];
		var target = null;
		if(this.__hitTest(this.__mouseX,this.__mouseY,true,stack,true,this)) {
			target = stack[stack.length - 1];
		} else {
			target = this;
			stack = [this];
		}
		if(target == null) {
			target = this;
		}
		var clickType = null;
		switch(type) {
		case "middleMouseDown":
			this.__mouseDownMiddle = target;
			break;
		case "middleMouseUp":
			if(this.__mouseDownMiddle == target) {
				clickType = "middleClick";
			}
			this.__mouseDownMiddle = null;
			break;
		case "mouseDown":
			if(target.__allowMouseFocus()) {
				this.set_focus(target);
			} else {
				this.set_focus(null);
			}
			this.__mouseDownLeft = target;
			openfl_events_MouseEvent.__buttonDown = true;
			break;
		case "mouseUp":
			if(this.__mouseDownLeft != null) {
				openfl_events_MouseEvent.__buttonDown = false;
				if(this.__mouseX < 0 || this.__mouseY < 0) {
					this.__dispatchEvent(openfl_events_MouseEvent.__create("releaseOutside",1,this.__mouseX,this.__mouseY,new openfl_geom_Point(this.__mouseX,this.__mouseY),this));
				} else if(this.__mouseDownLeft == target) {
					clickType = "click";
				}
				this.__mouseDownLeft = null;
			}
			break;
		case "rightMouseDown":
			this.__mouseDownRight = target;
			break;
		case "rightMouseUp":
			if(this.__mouseDownRight == target) {
				clickType = "rightClick";
			}
			this.__mouseDownRight = null;
			break;
		default:
		}
		var localPoint = openfl_geom_Point.__pool.get();
		this.__dispatchStack(openfl_events_MouseEvent.__create(type,button,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,localPoint),target),stack);
		if(clickType != null) {
			this.__dispatchStack(openfl_events_MouseEvent.__create(clickType,button,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,localPoint),target),stack);
			if(type == "mouseUp" && (js_Boot.__cast(target , openfl_display_InteractiveObject)).doubleClickEnabled) {
				var currentTime = openfl_Lib.getTimer();
				if(currentTime - this.__lastClickTime < 500) {
					this.__dispatchStack(openfl_events_MouseEvent.__create("doubleClick",button,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,localPoint),target),stack);
					this.__lastClickTime = 0;
				} else {
					this.__lastClickTime = currentTime;
				}
			}
		}
		if(openfl_ui_Mouse.__cursor == "auto") {
			var cursor = null;
			if(this.__mouseDownLeft != null) {
				cursor = this.__mouseDownLeft.__getCursor();
			} else {
				var _g = 0;
				while(_g < stack.length) {
					var target1 = stack[_g];
					++_g;
					cursor = target1.__getCursor();
					if(cursor != null) {
						$hx_exports.lime.ui.Mouse.set_cursor(cursor);
						break;
					}
				}
			}
			if(cursor == null) {
				$hx_exports.lime.ui.Mouse.set_cursor(lime_ui_MouseCursor.ARROW);
			}
		}
		var event;
		if(target != this.__mouseOverTarget) {
			if(this.__mouseOverTarget != null) {
				event = openfl_events_MouseEvent.__create("mouseOut",button,this.__mouseX,this.__mouseY,this.__mouseOverTarget.__globalToLocal(targetPoint,localPoint),this.__mouseOverTarget);
				this.__mouseOverTarget.__dispatchEvent(event);
			}
		}
		var _g1 = 0;
		var _g11 = this.__rollOutStack;
		while(_g1 < _g11.length) {
			var target2 = _g11[_g1];
			++_g1;
			if(stack.indexOf(target2) == -1) {
				$hx_exports.HxOverrides.remove(this.__rollOutStack,target2);
				event = openfl_events_MouseEvent.__create("rollOut",button,this.__mouseX,this.__mouseY,this.__mouseOverTarget.__globalToLocal(targetPoint,localPoint),this.__mouseOverTarget);
				event.bubbles = false;
				target2.__dispatchEvent(event);
			}
		}
		var _g2 = 0;
		while(_g2 < stack.length) {
			var target3 = stack[_g2];
			++_g2;
			if(this.__rollOutStack.indexOf(target3) == -1 && this.__mouseOverTarget != null) {
				if(target3.hasEventListener("rollOver")) {
					event = openfl_events_MouseEvent.__create("rollOver",button,this.__mouseX,this.__mouseY,this.__mouseOverTarget.__globalToLocal(targetPoint,localPoint),target3);
					event.bubbles = false;
					target3.__dispatchEvent(event);
				}
				if(target3.hasEventListener("rollOut")) {
					this.__rollOutStack.push(target3);
				}
			}
		}
		if(target != this.__mouseOverTarget) {
			if(target != null) {
				event = openfl_events_MouseEvent.__create("mouseOver",button,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,localPoint),target);
				event.bubbles = true;
				target.__dispatchEvent(event);
			}
			this.__mouseOverTarget = target;
		}
		if(this.__dragObject != null) {
			this.__drag(targetPoint);
			var dropTarget = null;
			if(this.__mouseOverTarget == this.__dragObject) {
				var cacheMouseEnabled = this.__dragObject.mouseEnabled;
				var cacheMouseChildren = this.__dragObject.mouseChildren;
				this.__dragObject.mouseEnabled = false;
				this.__dragObject.mouseChildren = false;
				var stack1 = [];
				if(this.__hitTest(this.__mouseX,this.__mouseY,true,stack1,true,this)) {
					dropTarget = stack1[stack1.length - 1];
				}
				this.__dragObject.mouseEnabled = cacheMouseEnabled;
				this.__dragObject.mouseChildren = cacheMouseChildren;
			} else if(this.__mouseOverTarget != this) {
				dropTarget = this.__mouseOverTarget;
			}
			this.__dragObject.dropTarget = dropTarget;
		}
		openfl_geom_Point.__pool.release(targetPoint);
		openfl_geom_Point.__pool.release(localPoint);
	}
	,__onMouseWheel: function(deltaX,deltaY) {
		var x = this.__mouseX;
		var y = this.__mouseY;
		var stack = [];
		var target = null;
		if(this.__hitTest(this.__mouseX,this.__mouseY,true,stack,true,this)) {
			target = stack[stack.length - 1];
		} else {
			target = this;
			stack = [this];
		}
		if(target == null) {
			target = this;
		}
		var targetPoint = openfl_geom_Point.__pool.get();
		targetPoint.setTo(x,y);
		this.__displayMatrix.__transformInversePoint(targetPoint);
		var delta = Std.int(deltaY);
		this.__dispatchStack(openfl_events_MouseEvent.__create("mouseWheel",0,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,targetPoint),target,delta),stack);
		openfl_geom_Point.__pool.release(targetPoint);
	}
	,__onTouch: function(type,touch) {
		var targetPoint = openfl_geom_Point.__pool.get();
		targetPoint.setTo($hx_exports.Math.round(touch.x * this.window.get_width() * this.window.get_scale()),$hx_exports.Math.round(touch.y * this.window.get_height() * this.window.get_scale()));
		this.__displayMatrix.__transformInversePoint(targetPoint);
		var touchX = targetPoint.x;
		var touchY = targetPoint.y;
		var stack = [];
		var target = null;
		if(this.__hitTest(touchX,touchY,false,stack,true,this)) {
			target = stack[stack.length - 1];
		} else {
			target = this;
			stack = [this];
		}
		if(target == null) {
			target = this;
		}
		var touchId = touch.id;
		var touchData = null;
		if(this.__touchData.exists(touchId)) {
			touchData = this.__touchData.get(touchId);
		} else {
			touchData = openfl__$internal_TouchData.__pool.get();
			touchData.reset();
			touchData.touch = touch;
			this.__touchData.set(touchId,touchData);
		}
		var touchType = null;
		var releaseTouchData = false;
		switch(type) {
		case "touchBegin":
			touchData.touchDownTarget = target;
			break;
		case "touchEnd":
			if(touchData.touchDownTarget == target) {
				touchType = "touchTap";
			}
			touchData.touchDownTarget = null;
			releaseTouchData = true;
			break;
		default:
		}
		var localPoint = openfl_geom_Point.__pool.get();
		var isPrimaryTouchPoint = this.__primaryTouch == touch;
		var touchEvent = openfl_events_TouchEvent.__create(type,null,touchX,touchY,target.__globalToLocal(targetPoint,localPoint),target);
		touchEvent.touchPointID = touchId;
		touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
		this.__dispatchStack(touchEvent,stack);
		if(touchType != null) {
			touchEvent = openfl_events_TouchEvent.__create(touchType,null,touchX,touchY,target.__globalToLocal(targetPoint,localPoint),target);
			touchEvent.touchPointID = touchId;
			touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
			this.__dispatchStack(touchEvent,stack);
		}
		var touchOverTarget = touchData.touchOverTarget;
		if(target != touchOverTarget && touchOverTarget != null) {
			touchEvent = openfl_events_TouchEvent.__create("touchOut",null,touchX,touchY,touchOverTarget.__globalToLocal(targetPoint,localPoint),touchOverTarget);
			touchEvent.touchPointID = touchId;
			touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
			touchOverTarget.__dispatchEvent(touchEvent);
		}
		var touchOutStack = touchData.rollOutStack;
		var _g = 0;
		while(_g < touchOutStack.length) {
			var target1 = touchOutStack[_g];
			++_g;
			if(stack.indexOf(target1) == -1) {
				$hx_exports.HxOverrides.remove(touchOutStack,target1);
				touchEvent = openfl_events_TouchEvent.__create("touchRollOut",null,touchX,touchY,touchOverTarget.__globalToLocal(targetPoint,localPoint),touchOverTarget);
				touchEvent.touchPointID = touchId;
				touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
				touchEvent.bubbles = false;
				target1.__dispatchEvent(touchEvent);
			}
		}
		var _g1 = 0;
		while(_g1 < stack.length) {
			var target2 = stack[_g1];
			++_g1;
			if(touchOutStack.indexOf(target2) == -1) {
				if(target2.hasEventListener("touchRollOver")) {
					touchEvent = openfl_events_TouchEvent.__create("touchRollOver",null,touchX,touchY,touchOverTarget.__globalToLocal(targetPoint,localPoint),target2);
					touchEvent.touchPointID = touchId;
					touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
					touchEvent.bubbles = false;
					target2.__dispatchEvent(touchEvent);
				}
				if(target2.hasEventListener("touchRollOut")) {
					touchOutStack.push(target2);
				}
			}
		}
		if(target != touchOverTarget) {
			if(target != null) {
				touchEvent = openfl_events_TouchEvent.__create("touchOver",null,touchX,touchY,target.__globalToLocal(targetPoint,localPoint),target);
				touchEvent.touchPointID = touchId;
				touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
				touchEvent.bubbles = true;
				target.__dispatchEvent(touchEvent);
			}
			touchData.touchOverTarget = target;
		}
		openfl_geom_Point.__pool.release(targetPoint);
		openfl_geom_Point.__pool.release(localPoint);
		if(releaseTouchData) {
			this.__touchData.remove(touchId);
			touchData.reset();
			openfl__$internal_TouchData.__pool.release(touchData);
		}
	}
	,__resize: function() {
		var cacheWidth = this.stageWidth;
		var cacheHeight = this.stageHeight;
		var windowWidth = Std.int(this.window.get_width() * this.window.get_scale());
		var windowHeight = Std.int(this.window.get_height() * this.window.get_scale());
		this.__logicalWidth = windowWidth;
		this.__logicalHeight = windowHeight;
		this.__displayMatrix.identity();
		if(this.__logicalWidth == 0 && this.__logicalHeight == 0) {
			this.stageWidth = windowWidth;
			this.stageHeight = windowHeight;
		} else {
			this.stageWidth = this.__logicalWidth;
			this.stageHeight = this.__logicalHeight;
			var scaleX = windowWidth / this.stageWidth;
			var scaleY = windowHeight / this.stageHeight;
			var targetScale = $hx_exports.Math.min(scaleX,scaleY);
			var offsetX = $hx_exports.Math.round((windowWidth - this.stageWidth * targetScale) / 2);
			var offsetY = $hx_exports.Math.round((windowHeight - this.stageHeight * targetScale) / 2);
			this.__displayMatrix.scale(targetScale,targetScale);
			this.__displayMatrix.translate(offsetX,offsetY);
		}
		var _g = 0;
		var _g1 = this.stage3Ds;
		while(_g < _g1.data.get_length()) {
			var stage3D = _g1.data.get(_g);
			++_g;
			stage3D.__resize(this.stageWidth,this.stageHeight);
		}
		if(this.__renderer != null) {
			this.__renderer.resize(windowWidth,windowHeight);
		}
		if(this.stageWidth != cacheWidth || this.stageHeight != cacheHeight) {
			this.__dispatchEvent(new openfl_events_Event("resize"));
		}
	}
	,__setLogicalSize: function(width,height) {
		this.__logicalWidth = width;
		this.__logicalHeight = height;
		this.__resize();
	}
	,__startDrag: function(sprite,lockCenter,bounds) {
		this.__dragBounds = bounds == null ? null : bounds.clone();
		this.__dragObject = sprite;
		if(this.__dragObject != null) {
			if(lockCenter) {
				this.__dragOffsetX = 0;
				this.__dragOffsetY = 0;
			} else {
				var mouse = openfl_geom_Point.__pool.get();
				mouse.setTo(this.get_mouseX(),this.get_mouseY());
				var parent = this.__dragObject.parent;
				if(parent != null) {
					parent.__getWorldTransform().__transformInversePoint(mouse);
				}
				this.__dragOffsetX = this.__dragObject.get_x() - mouse.x;
				this.__dragOffsetY = this.__dragObject.get_y() - mouse.y;
				openfl_geom_Point.__pool.release(mouse);
			}
		}
	}
	,__stopDrag: function(sprite) {
		this.__dragBounds = null;
		this.__dragObject = null;
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		if(transformOnly) {
			if(this.__transformDirty) {
				openfl_display_DisplayObjectContainer.prototype.__update.call(this,true,updateChildren,maskGraphics);
				if(updateChildren) {
					this.__transformDirty = false;
				}
			}
		} else if(this.__transformDirty || this.__renderDirty) {
			openfl_display_DisplayObjectContainer.prototype.__update.call(this,false,updateChildren,maskGraphics);
			var updateChildren1 = updateChildren;
		}
		openfl_display_Stage.frameID++;
	}
	,get_color: function() {
		return this.__color;
	}
	,set_color: function(value) {
		var r = (value & 16711680) >>> 16;
		var g = (value & 65280) >>> 8;
		var b = value & 255;
		this.__colorSplit = [r / 255,g / 255,b / 255];
		this.__colorString = "#" + $hx_exports.StringTools.hex(value & 16777215,6);
		return this.__color = value;
	}
	,get_contentsScaleFactor: function() {
		return this.__contentsScaleFactor;
	}
	,get_displayState: function() {
		return this.__displayState;
	}
	,set_displayState: function(value) {
		if(this.window != null) {
			if(value == 2) {
				if(this.window.get_fullscreen()) {
					this.window.set_fullscreen(false);
				}
			} else if(!this.window.get_fullscreen()) {
				this.window.set_fullscreen(true);
			}
		}
		return this.__displayState = value;
	}
	,get_focus: function() {
		return this.__focus;
	}
	,set_focus: function(value) {
		if(value != this.__focus) {
			var oldFocus = this.__focus;
			this.__focus = value;
			this.__cacheFocus = value;
			if(oldFocus != null) {
				var event = new openfl_events_FocusEvent("focusOut",true,false,this.__focus,false,0);
				var stack = [];
				oldFocus.__getInteractive(stack);
				stack.reverse();
				this.__dispatchStack(event,stack);
			}
			if(this.__focus != null) {
				var event1 = new openfl_events_FocusEvent("focusIn",true,false,oldFocus,false,0);
				var stack1 = [];
				value.__getInteractive(stack1);
				stack1.reverse();
				this.__dispatchStack(event1,stack1);
			}
		}
		return this.__focus;
	}
	,get_frameRate: function() {
		if(this.application != null) {
			return this.application.get_frameRate();
		}
		return 0;
	}
	,set_frameRate: function(value) {
		if(this.application != null) {
			return this.application.set_frameRate(value);
		}
		return value;
	}
	,get_fullScreenHeight: function() {
		return this.window.get_display().currentMode.height;
	}
	,get_fullScreenWidth: function() {
		return this.window.get_display().currentMode.width;
	}
	,set_height: function(value) {
		return this.get_height();
	}
	,get_mouseX: function() {
		return this.__mouseX;
	}
	,get_mouseY: function() {
		return this.__mouseY;
	}
	,set_rotation: function(value) {
		return 0;
	}
	,set_scaleX: function(value) {
		return 0;
	}
	,set_scaleY: function(value) {
		return 0;
	}
	,set_transform: function(value) {
		return this.get_transform();
	}
	,set_width: function(value) {
		return this.get_width();
	}
	,set_x: function(value) {
		return 0;
	}
	,set_y: function(value) {
		return 0;
	}
	,__class__: openfl_display_Stage
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{get_fullScreenWidth:"get_fullScreenWidth",get_fullScreenHeight:"get_fullScreenHeight",set_frameRate:"set_frameRate",get_frameRate:"get_frameRate",set_focus:"set_focus",get_focus:"get_focus",set_displayState:"set_displayState",get_displayState:"get_displayState",get_contentsScaleFactor:"get_contentsScaleFactor",set_color:"set_color",get_color:"get_color"})
});
var openfl_display_Stage3D = $hx_exports["openfl"]["display"]["Stage3D"] = function() {
	openfl_events_EventDispatcher.call(this);
	this.__x = 0;
	this.__y = 0;
	this.visible = true;
};
$hxClasses["openfl.display.Stage3D"] = openfl_display_Stage3D;
openfl_display_Stage3D.__name__ = ["openfl","display","Stage3D"];
openfl_display_Stage3D.__active = null;
openfl_display_Stage3D.__super__ = openfl_events_EventDispatcher;
openfl_display_Stage3D.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	context3D: null
	,visible: null
	,__contextRequested: null
	,__stage: null
	,__x: null
	,__y: null
	,__canvas: null
	,__renderContext: null
	,__style: null
	,__webgl: null
	,requestContext3D: function(context3DRenderMode,profile) {
		if(profile == null) {
			profile = 0;
		}
		if(context3DRenderMode == null) {
			context3DRenderMode = 0;
		}
		this.__contextRequested = true;
		if(this.context3D != null) {
			$hx_exports.haxe.Timer.delay($bind(this,this.__dispatchCreate),1);
		}
	}
	,requestContext3DMatchingProfiles: function(profiles) {
		this.requestContext3D();
	}
	,__createContext: function(stage,renderSession) {
		this.__stage = stage;
		if(renderSession.gl != null) {
			this.context3D = new openfl_display3D_Context3D(this,renderSession);
			this.__dispatchCreate();
		} else {
			this.__canvas = $hx_exports.js.Browser.get_document().createElement("canvas");
			this.__canvas.width = stage.stageWidth;
			this.__canvas.height = stage.stageHeight;
			var $window = stage.window;
			var transparentBackground = Reflect.hasField($window.config,"background") && $window.config.background == null;
			var colorDepth = Reflect.hasField($window.config,"colorDepth") ? $window.config.colorDepth : 16;
			var options = { alpha : transparentBackground || colorDepth > 16, antialias : Reflect.hasField($window.config,"antialiasing") && $window.config.antialiasing > 0, depth : Reflect.hasField($window.config,"depthBuffer") ? $window.config.depthBuffer : true, premultipliedAlpha : true, stencil : Reflect.hasField($window.config,"stencilBuffer") && $window.config.stencilBuffer, preserveDrawingBuffer : false};
			this.__webgl = $hx_exports.js.html._CanvasElement.CanvasUtil.getContextWebGL(this.__canvas,options);
			if(this.__webgl != null) {
				this.__renderContext = new $hx_exports.lime._backend.html5.HTML5GLRenderContext(this.__webgl);
				$hx_exports.lime.graphics.opengl.GL.context = this.__renderContext;
				this.context3D = new openfl_display3D_Context3D(this,renderSession);
				renderSession.element.appendChild(this.__canvas);
				this.__style = this.__canvas.style;
				this.__style.setProperty("position","absolute",null);
				this.__style.setProperty("top","0",null);
				this.__style.setProperty("left","0",null);
				this.__style.setProperty(renderSession.transformOriginProperty,"0 0 0",null);
				this.__style.setProperty("z-index","-1",null);
				this.__dispatchCreate();
			} else {
				this.__dispatchError();
			}
		}
	}
	,__dispatchError: function() {
		this.__contextRequested = false;
		this.dispatchEvent(new openfl_events_ErrorEvent("error",false,false,"Context3D not available"));
	}
	,__dispatchCreate: function() {
		if(this.__contextRequested) {
			this.__contextRequested = false;
			this.dispatchEvent(new openfl_events_Event("context3DCreate"));
		}
	}
	,__renderCairo: function(stage,renderSession) {
		if(!this.visible) {
			return;
		}
		if(this.__contextRequested) {
			this.__dispatchError();
			this.__contextRequested = false;
		}
	}
	,__renderCanvas: function(stage,renderSession) {
		if(!this.visible) {
			return;
		}
		if(this.__contextRequested) {
			this.__dispatchError();
			this.__contextRequested = false;
		}
	}
	,__renderDOM: function(stage,renderSession) {
		if(!this.visible) {
			return;
		}
		if(this.__contextRequested && this.context3D == null) {
			this.__createContext(stage,renderSession);
		}
		if(this.context3D != null) {
			$hx_exports.lime.graphics.opengl.GL.context = this.__renderContext;
			this.__resetContext3DStates();
		}
	}
	,__renderGL: function(stage,renderSession) {
		if(!this.visible) {
			return;
		}
		if(this.__contextRequested && this.context3D == null) {
			this.__createContext(stage,renderSession);
		}
		if(this.context3D != null) {
			this.__resetContext3DStates();
			openfl__$internal_stage3D_opengl_GLStage3D.render(this,renderSession);
		}
	}
	,__resize: function(width,height) {
		if(this.__canvas != null) {
			this.__canvas.width = width;
			this.__canvas.height = height;
		}
	}
	,__resetContext3DStates: function() {
		this.context3D.__updateBlendFactors();
		this.context3D.__updateBackbufferViewport();
	}
	,get_x: function() {
		return this.__x;
	}
	,set_x: function(value) {
		if(this.__x == value) {
			return value;
		}
		this.__x = value;
		if(this.context3D != null) {
			this.context3D.__updateBackbufferViewport();
		}
		return value;
	}
	,get_y: function() {
		return this.__y;
	}
	,set_y: function(value) {
		if(this.__y == value) {
			return value;
		}
		this.__y = value;
		if(this.context3D != null) {
			this.context3D.__updateBackbufferViewport();
		}
		return value;
	}
	,__class__: openfl_display_Stage3D
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
});
var openfl_display__$StageAlign_StageAlign_$Impl_$ = $hx_exports["openfl"]["display"]["StageAlign"] = {};
$hxClasses["openfl.display._StageAlign.StageAlign_Impl_"] = openfl_display__$StageAlign_StageAlign_$Impl_$;
openfl_display__$StageAlign_StageAlign_$Impl_$.__name__ = ["openfl","display","_StageAlign","StageAlign_Impl_"];
openfl_display__$StageAlign_StageAlign_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bottom":
		return 0;
	case "bottomLeft":
		return 1;
	case "bottomRight":
		return 2;
	case "left":
		return 3;
	case "right":
		return 4;
	case "top":
		return 5;
	case "topLeft":
		return 6;
	case "topRight":
		return 7;
	default:
		return null;
	}
};
openfl_display__$StageAlign_StageAlign_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bottom";
	case 1:
		return "bottomLeft";
	case 2:
		return "bottomRight";
	case 3:
		return "left";
	case 4:
		return "right";
	case 5:
		return "top";
	case 6:
		return "topLeft";
	case 7:
		return "topRight";
	default:
		return null;
	}
};
var openfl_display__$StageDisplayState_StageDisplayState_$Impl_$ = $hx_exports["openfl"]["display"]["StageDisplayState"] = {};
$hxClasses["openfl.display._StageDisplayState.StageDisplayState_Impl_"] = openfl_display__$StageDisplayState_StageDisplayState_$Impl_$;
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.__name__ = ["openfl","display","_StageDisplayState","StageDisplayState_Impl_"];
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.fromString = function(value) {
	switch(value) {
	case "fullScreen":
		return 0;
	case "fullScreenInteractive":
		return 1;
	case "normal":
		return 2;
	default:
		return null;
	}
};
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "fullScreen";
	case 1:
		return "fullScreenInteractive";
	case 2:
		return "normal";
	default:
		return null;
	}
};
var openfl_display__$StageQuality_StageQuality_$Impl_$ = $hx_exports["openfl"]["display"]["StageQuality"] = {};
$hxClasses["openfl.display._StageQuality.StageQuality_Impl_"] = openfl_display__$StageQuality_StageQuality_$Impl_$;
openfl_display__$StageQuality_StageQuality_$Impl_$.__name__ = ["openfl","display","_StageQuality","StageQuality_Impl_"];
openfl_display__$StageQuality_StageQuality_$Impl_$.fromString = function(value) {
	switch(value) {
	case "best":
		return 0;
	case "high":
		return 1;
	case "low":
		return 2;
	case "medium":
		return 3;
	default:
		return null;
	}
};
openfl_display__$StageQuality_StageQuality_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "best";
	case 1:
		return "high";
	case 2:
		return "low";
	case 3:
		return "medium";
	default:
		return null;
	}
};
var openfl_display__$StageScaleMode_StageScaleMode_$Impl_$ = $hx_exports["openfl"]["display"]["StageScaleMode"] = {};
$hxClasses["openfl.display._StageScaleMode.StageScaleMode_Impl_"] = openfl_display__$StageScaleMode_StageScaleMode_$Impl_$;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.__name__ = ["openfl","display","_StageScaleMode","StageScaleMode_Impl_"];
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "exactFit":
		return 0;
	case "noBorder":
		return 1;
	case "noScale":
		return 2;
	case "showAll":
		return 3;
	default:
		return null;
	}
};
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "exactFit";
	case 1:
		return "noBorder";
	case 2:
		return "noScale";
	case 3:
		return "showAll";
	default:
		return null;
	}
};
var openfl_geom_Matrix = $hx_exports["openfl"]["geom"]["Matrix"] = function(a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0;
	}
	if(tx == null) {
		tx = 0;
	}
	if(d == null) {
		d = 1;
	}
	if(c == null) {
		c = 0;
	}
	if(b == null) {
		b = 0;
	}
	if(a == null) {
		a = 1;
	}
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["openfl.geom.Matrix"] = openfl_geom_Matrix;
openfl_geom_Matrix.__name__ = ["openfl","geom","Matrix"];
openfl_geom_Matrix.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,__array: null
	,clone: function() {
		return new openfl_geom_Matrix(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector3D) {
		if(column > 2) {
			throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
		} else if(column == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyColumnTo: function(column,vector3D) {
		if(column > 2) {
			throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			vector3D.x = this.a;
			vector3D.y = this.c;
			vector3D.z = 0;
		} else if(column == 1) {
			vector3D.x = this.b;
			vector3D.y = this.d;
			vector3D.z = 0;
		} else {
			vector3D.x = this.tx;
			vector3D.y = this.ty;
			vector3D.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix) {
		this.a = sourceMatrix.a;
		this.b = sourceMatrix.b;
		this.c = sourceMatrix.c;
		this.d = sourceMatrix.d;
		this.tx = sourceMatrix.tx;
		this.ty = sourceMatrix.ty;
	}
	,copyRowFrom: function(row,vector3D) {
		if(row > 2) {
			throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
		} else if(row == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyRowTo: function(row,vector3D) {
		if(row > 2) {
			throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			vector3D.x = this.a;
			vector3D.y = this.b;
			vector3D.z = this.tx;
		} else if(row == 1) {
			vector3D.x = this.c;
			vector3D.y = this.d;
			vector3D.z = this.ty;
		} else {
			vector3D.setTo(0,0,1);
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		if(rotation != 0) {
			var cos = $hx_exports.Math.cos(rotation);
			var sin = $hx_exports.Math.sin(rotation);
			this.a = cos * scaleX;
			this.b = sin * scaleY;
			this.c = -sin * scaleX;
			this.d = cos * scaleY;
		} else {
			this.a = scaleX;
			this.b = 0;
			this.c = 0;
			this.d = scaleY;
		}
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = $hx_exports.Math.cos(rotation);
			var sin = $hx_exports.Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,deltaTransformPoint: function(point) {
		return new openfl_geom_Point(point.x * this.a + point.y * this.c,point.x * this.b + point.y * this.d);
	}
	,equals: function(matrix) {
		if(matrix != null && this.tx == matrix.tx && this.ty == matrix.ty && this.a == matrix.a && this.b == matrix.b && this.c == matrix.c) {
			return this.d == matrix.d;
		} else {
			return false;
		}
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,rotate: function(theta) {
		var cos = $hx_exports.Math.cos(theta);
		var sin = $hx_exports.Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) {
			scale = 1;
		}
		this.a = $hx_exports.Math.cos(theta) * scale;
		this.c = $hx_exports.Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) {
			roundPixels = false;
		}
		if(roundPixels) {
			return "matrix3d(" + this.a + ", " + this.b + ", 0, 0, " + this.c + ", " + this.d + ", 0, 0, 0, 0, 1, 0, " + Std.int(this.tx) + ", " + Std.int(this.ty) + ", 0, 1)";
		} else {
			return "matrix3d(" + this.a + ", " + this.b + ", 0, 0, " + this.c + ", " + this.d + ", 0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
		}
	}
	,toMozString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformPoint: function(pos) {
		return new openfl_geom_Point(this.__transformX(pos.x,pos.y),this.__transformY(pos.x,pos.y));
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,toArray: function(transpose) {
		if(transpose == null) {
			transpose = false;
		}
		if(this.__array == null) {
			var this1 = new Float32Array(9);
			this.__array = this1;
		}
		if(transpose) {
			this.__array[0] = this.a;
			this.__array[1] = this.b;
			this.__array[2] = 0;
			this.__array[3] = this.c;
			this.__array[4] = this.d;
			this.__array[5] = 0;
			this.__array[6] = this.tx;
			this.__array[7] = this.ty;
			this.__array[8] = 1;
		} else {
			this.__array[0] = this.a;
			this.__array[1] = this.c;
			this.__array[2] = this.tx;
			this.__array[3] = this.b;
			this.__array[4] = this.d;
			this.__array[5] = this.ty;
			this.__array[6] = 0;
			this.__array[7] = 0;
			this.__array[8] = 1;
		}
		return this.__array;
	}
	,__cleanValues: function() {
		this.a = $hx_exports.Math.round(this.a * 1000) / 1000;
		this.b = $hx_exports.Math.round(this.b * 1000) / 1000;
		this.c = $hx_exports.Math.round(this.c * 1000) / 1000;
		this.d = $hx_exports.Math.round(this.d * 1000) / 1000;
		this.tx = $hx_exports.Math.round(this.tx * 10) / 10;
		this.ty = $hx_exports.Math.round(this.ty * 10) / 10;
	}
	,__toMatrix3: function() {
		openfl_geom_Matrix.__matrix3.setTo(this.a,this.b,this.c,this.d,this.tx,this.ty);
		return openfl_geom_Matrix.__matrix3;
	}
	,__transformInversePoint: function(point) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			point.x = -this.tx;
			point.y = -this.ty;
		} else {
			var px = 1.0 / norm * (this.c * (this.ty - point.y) + this.d * (point.x - this.tx));
			point.y = 1.0 / norm * (this.a * (point.y - this.ty) + this.b * (this.tx - point.x));
			point.x = px;
		}
	}
	,__transformInverseX: function(px,py) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			return -this.tx;
		} else {
			return 1.0 / norm * (this.c * (this.ty - py) + this.d * (px - this.tx));
		}
	}
	,__transformInverseY: function(px,py) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			return -this.ty;
		} else {
			return 1.0 / norm * (this.a * (py - this.ty) + this.b * (this.tx - px));
		}
	}
	,__transformPoint: function(point) {
		var px = point.x;
		var py = point.y;
		point.x = this.__transformX(px,py);
		point.y = this.__transformY(px,py);
	}
	,__transformX: function(px,py) {
		return px * this.a + py * this.c + this.tx;
	}
	,__transformY: function(px,py) {
		return px * this.b + py * this.d + this.ty;
	}
	,__translateTransformed: function(px,py) {
		this.tx = this.__transformX(px,py);
		this.ty = this.__transformY(px,py);
	}
	,__class__: openfl_geom_Matrix
};
var openfl_display_Tile = $hx_exports["openfl"]["display"]["Tile"] = function(id,x,y,scaleX,scaleY,rotation,originX,originY) {
	if(originY == null) {
		originY = 0;
	}
	if(originX == null) {
		originX = 0;
	}
	if(rotation == null) {
		rotation = 0;
	}
	if(scaleY == null) {
		scaleY = 1;
	}
	if(scaleX == null) {
		scaleX = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	if(id == null) {
		id = 0;
	}
	this.__id = id;
	this.__matrix = new openfl_geom_Matrix();
	if(x != 0) {
		this.set_x(x);
	}
	if(y != 0) {
		this.set_y(y);
	}
	if(scaleX != 1) {
		this.set_scaleX(scaleX);
	}
	if(scaleY != 1) {
		this.set_scaleY(scaleY);
	}
	if(rotation != 0) {
		this.set_rotation(rotation);
	}
	this.__originX = originX;
	this.__originY = originY;
	this.__alpha = 1;
	this.__visible = true;
	this.__alphaDirty = true;
	this.__sourceDirty = true;
	this.__transformDirty = true;
	this.__visibleDirty = true;
};
$hxClasses["openfl.display.Tile"] = openfl_display_Tile;
openfl_display_Tile.__name__ = ["openfl","display","Tile"];
openfl_display_Tile.__interfaces__ = [openfl_display_ITile];
openfl_display_Tile.__fromTileArray = function(position,tileArray) {
	var cachePosition = tileArray.position;
	tileArray.position = position;
	var tile = new openfl_display_Tile();
	tile.set_alpha(tileArray.get_alpha());
	tile.set_id(tileArray.get_id());
	tileArray.set_matrix(tile.get_matrix());
	tileArray.position = cachePosition;
	return tile;
};
openfl_display_Tile.prototype = {
	data: null
	,parent: null
	,__alpha: null
	,__alphaDirty: null
	,__colorTransform: null
	,__colorTransformDirty: null
	,__id: null
	,__matrix: null
	,__originX: null
	,__originY: null
	,__rect: null
	,__rotation: null
	,__rotationCosine: null
	,__rotationSine: null
	,__scaleX: null
	,__scaleY: null
	,__shader: null
	,__shaderDirty: null
	,__sourceDirty: null
	,__tileset: null
	,__transformDirty: null
	,__visible: null
	,__visibleDirty: null
	,clone: function() {
		var tile = new openfl_display_Tile(this.__id);
		tile.set_matrix(this.__matrix.clone());
		tile.set_tileset(this.__tileset);
		return tile;
	}
	,__setRenderDirty: function() {
		if(this.parent != null) {
			this.parent.__setRenderDirty();
		}
	}
	,__updateTileArray: function(position,tileArray,forceUpdate) {
		var cachePosition = tileArray.position;
		tileArray.position = position;
		if(this.__shaderDirty || forceUpdate) {
			tileArray.set_shader(this.__shader);
			this.__shaderDirty = false;
		}
		if(this.__colorTransformDirty || forceUpdate) {
			tileArray.set_colorTransform(this.__colorTransform);
			this.__colorTransformDirty = false;
		}
		if(this.__visibleDirty || forceUpdate) {
			tileArray.set_visible(this.__visible);
			tileArray.__bufferDirty = true;
			this.__visibleDirty = false;
		}
		if(this.__alphaDirty || forceUpdate) {
			tileArray.set_alpha(this.__alpha);
			tileArray.__bufferDirty = true;
			this.__alphaDirty = false;
		}
		if(this.__sourceDirty || forceUpdate) {
			if(this.__rect == null) {
				tileArray.set_id(this.__id);
			} else {
				tileArray.set_rect(this.get_rect());
			}
			tileArray.set_tileset(this.__tileset);
			tileArray.__bufferDirty = true;
			this.__sourceDirty = true;
		}
		if(this.__transformDirty || forceUpdate) {
			if(this.__originX != 0 || this.__originY != 0) {
				openfl_display_Tile.__tempMatrix.setTo(1,0,0,1,-this.__originX,-this.__originY);
				openfl_display_Tile.__tempMatrix.concat(this.__matrix);
				tileArray.set_matrix(openfl_display_Tile.__tempMatrix);
			} else {
				tileArray.set_matrix(this.__matrix);
			}
			tileArray.__bufferDirty = true;
			this.__transformDirty = false;
		}
		tileArray.position = cachePosition;
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		this.__alphaDirty = true;
		this.__setRenderDirty();
		return this.__alpha = value;
	}
	,get_colorTransform: function() {
		if(this.__colorTransform == null) {
			this.__colorTransform = new openfl_geom_ColorTransform();
		}
		return this.__colorTransform;
	}
	,set_colorTransform: function(value) {
		if(this.__colorTransform == null) {
			if(value != null) {
				this.__colorTransform = value.__clone();
			}
		} else if(value != null) {
			this.__colorTransform.__copyFrom(value);
		} else {
			this.__colorTransform.__identity();
		}
		this.__colorTransformDirty = true;
		this.__setRenderDirty();
		return value;
	}
	,get_id: function() {
		return this.__id;
	}
	,set_id: function(value) {
		this.__sourceDirty = true;
		this.__setRenderDirty();
		return this.__id = value;
	}
	,get_matrix: function() {
		return this.__matrix;
	}
	,set_matrix: function(value) {
		this.__rotation = null;
		this.__scaleX = null;
		this.__scaleY = null;
		this.__transformDirty = true;
		this.__setRenderDirty();
		return this.__matrix = value;
	}
	,get_originX: function() {
		return this.__originX;
	}
	,set_originX: function(value) {
		this.__transformDirty = true;
		this.__setRenderDirty();
		return this.__originX = value;
	}
	,get_originY: function() {
		return this.__originY;
	}
	,set_originY: function(value) {
		this.__transformDirty = true;
		this.__setRenderDirty();
		return this.__originY = value;
	}
	,get_rect: function() {
		return this.__rect;
	}
	,set_rect: function(value) {
		this.__sourceDirty = true;
		this.__setRenderDirty();
		return this.__rect = value;
	}
	,get_rotation: function() {
		if(this.__rotation == null) {
			if(this.__matrix.b == 0 && this.__matrix.c == 0) {
				this.__rotation = 0;
				this.__rotationSine = 0;
				this.__rotationCosine = 1;
			} else {
				var radians = $hx_exports.Math.atan2(this.__matrix.d,this.__matrix.c) - $hx_exports.Math.PI / 2;
				this.__rotation = radians * (180 / $hx_exports.Math.PI);
				this.__rotationSine = $hx_exports.Math.sin(radians);
				this.__rotationCosine = $hx_exports.Math.cos(radians);
			}
		}
		return this.__rotation;
	}
	,set_rotation: function(value) {
		if(value != this.__rotation) {
			this.__rotation = value;
			var radians = value * ($hx_exports.Math.PI / 180);
			this.__rotationSine = $hx_exports.Math.sin(radians);
			this.__rotationCosine = $hx_exports.Math.cos(radians);
			var __scaleX = this.get_scaleX();
			var __scaleY = this.get_scaleY();
			this.__matrix.a = this.__rotationCosine * __scaleX;
			this.__matrix.b = this.__rotationSine * __scaleX;
			this.__matrix.c = -this.__rotationSine * __scaleY;
			this.__matrix.d = this.__rotationCosine * __scaleY;
			this.__transformDirty = true;
			this.__setRenderDirty();
		}
		return value;
	}
	,get_scaleX: function() {
		if(this.__scaleX == null) {
			if(this.get_matrix().b == 0) {
				this.__scaleX = this.__matrix.a;
			} else {
				this.__scaleX = $hx_exports.Math.sqrt(this.__matrix.a * this.__matrix.a + this.__matrix.b * this.__matrix.b);
			}
		}
		return this.__scaleX;
	}
	,set_scaleX: function(value) {
		if(this.__scaleX != value) {
			this.__scaleX = value;
			if(this.__matrix.b == 0) {
				this.__matrix.a = value;
			} else {
				var rotation = this.get_rotation();
				var a = this.__rotationCosine * value;
				var b = this.__rotationSine * value;
				this.__matrix.a = a;
				this.__matrix.b = b;
			}
			this.__transformDirty = true;
			this.__setRenderDirty();
		}
		return value;
	}
	,get_scaleY: function() {
		if(this.__scaleY == null) {
			if(this.__matrix.c == 0) {
				this.__scaleY = this.get_matrix().d;
			} else {
				this.__scaleY = $hx_exports.Math.sqrt(this.__matrix.c * this.__matrix.c + this.__matrix.d * this.__matrix.d);
			}
		}
		return this.__scaleY;
	}
	,set_scaleY: function(value) {
		if(this.__scaleY != value) {
			this.__scaleY = value;
			if(this.__matrix.c == 0) {
				this.__matrix.d = value;
			} else {
				var rotation = this.get_rotation();
				var c = -this.__rotationSine * value;
				var d = this.__rotationCosine * value;
				this.__matrix.c = c;
				this.__matrix.d = d;
			}
			this.__transformDirty = true;
			this.__setRenderDirty();
		}
		return value;
	}
	,get_shader: function() {
		return this.__shader;
	}
	,set_shader: function(value) {
		this.__shaderDirty = true;
		this.__setRenderDirty();
		return this.__shader = value;
	}
	,get_tileset: function() {
		return this.__tileset;
	}
	,set_tileset: function(value) {
		this.__sourceDirty = true;
		this.__setRenderDirty();
		return this.__tileset = value;
	}
	,get_visible: function() {
		return this.__visible;
	}
	,set_visible: function(value) {
		this.__visibleDirty = true;
		this.__setRenderDirty();
		return this.__visible = value;
	}
	,get_x: function() {
		return this.__matrix.tx;
	}
	,set_x: function(value) {
		this.__transformDirty = true;
		this.__setRenderDirty();
		return this.__matrix.tx = value;
	}
	,get_y: function() {
		return this.__matrix.ty;
	}
	,set_y: function(value) {
		this.__transformDirty = true;
		this.__setRenderDirty();
		return this.__matrix.ty = value;
	}
	,__class__: openfl_display_Tile
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_visible:"set_visible",get_visible:"get_visible",set_tileset:"set_tileset",get_tileset:"get_tileset",set_shader:"set_shader",get_shader:"get_shader",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_rotation:"set_rotation",get_rotation:"get_rotation",set_rect:"set_rect",get_rect:"get_rect",set_originY:"set_originY",get_originY:"get_originY",set_originX:"set_originX",get_originX:"get_originX",set_matrix:"set_matrix",get_matrix:"get_matrix",set_id:"set_id",get_id:"get_id",set_colorTransform:"set_colorTransform",get_colorTransform:"get_colorTransform",set_alpha:"set_alpha",get_alpha:"get_alpha"}
};
var openfl_display_TileArray = $hx_exports["openfl"]["display"]["TileArray"] = function(length) {
	if(length == null) {
		length = 0;
	}
	this.__cacheAlpha = -1;
	this.__data = openfl__$Vector_Vector_$Impl_$.toFloatVector(null,length * 21);
	this.__dirty = openfl__$Vector_Vector_$Impl_$.toBoolVector(null,length * 5);
	this.__shaders = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,length);
	this.__tilesets = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,length);
	this.__visible = openfl__$Vector_Vector_$Impl_$.toBoolVector(null,length);
	this.__length = length;
};
$hxClasses["openfl.display.TileArray"] = openfl_display_TileArray;
openfl_display_TileArray.__name__ = ["openfl","display","TileArray"];
openfl_display_TileArray.__interfaces__ = [openfl_display_ITile];
openfl_display_TileArray.prototype = {
	position: null
	,__buffer: null
	,__bufferContext: null
	,__bufferDirty: null
	,__bufferData: null
	,__bufferSkipped: null
	,__cacheAlpha: null
	,__cacheDefaultTileset: null
	,__colorTransform: null
	,__data: null
	,__dirty: null
	,__length: null
	,__matrix: null
	,__rect: null
	,__shaders: null
	,__tilesets: null
	,__visible: null
	,iterator: function() {
		return new openfl_display__$TileArray_TileArrayIterator(this);
	}
	,__init: function(position) {
		this.position = position;
		this.set_alpha(1);
		this.set_colorTransform(null);
		this.set_id(0);
		this.set_matrix(null);
		this.set_tileset(null);
		this.set_visible(true);
		this.__dirty.data.set(4 + position * 5,true);
	}
	,__updateGLBuffer: function(gl,defaultTileset,worldAlpha,defaultColorTransform) {
		var _gthis = this;
		var attributeLength = 25;
		var stride = attributeLength * 6;
		var bufferLength = this.__length * stride;
		if(this.__bufferData == null) {
			var this1;
			if(bufferLength != null) {
				this1 = new Float32Array(bufferLength);
			} else {
				this1 = null;
			}
			this.__bufferData = this1;
			this.__bufferSkipped = openfl__$Vector_Vector_$Impl_$.toBoolVector(null,this.__length);
			this.__bufferDirty = true;
		} else if(this.__bufferData.length != bufferLength) {
			var this2;
			if(bufferLength != null) {
				this2 = new Float32Array(bufferLength);
			} else {
				this2 = null;
			}
			var data = this2;
			if(this.__bufferData.length <= data.length) {
				data.set(this.__bufferData);
				if(this.__bufferData.length == 0) {
					this.__bufferDirty = true;
				} else {
					var cacheLength = this.__bufferData.length;
					var _g1 = cacheLength;
					var _g = bufferLength;
					while(_g1 < _g) {
						var i = _g1++;
						this.__dirty.data.set(4 + this.position * 5,true);
					}
				}
			} else {
				data.set(this.__bufferData.subarray(0,data.length));
			}
			this.__bufferData = data;
			this.__bufferSkipped.data.set_length(this.__length);
			this.__bufferDirty = true;
		}
		if(this.__buffer == null || this.__bufferContext != gl) {
			this.__bufferContext = gl;
			this.__buffer = gl.createBuffer();
		}
		gl.bindBuffer(gl.ARRAY_BUFFER,this.__buffer);
		if(this.__bufferDirty || this.__cacheAlpha != worldAlpha || this.__cacheDefaultTileset != defaultTileset) {
			var tileMatrix;
			var tileColorTransform;
			var tileRect = null;
			var offset = 0;
			var alpha;
			var visible;
			var tileset;
			var tileData;
			var id;
			var bitmapWidth;
			var bitmapHeight;
			var tileWidth;
			var tileHeight;
			var uvX;
			var uvY;
			var uvWidth;
			var uvHeight;
			var x;
			var y;
			var x2;
			var y2;
			var x3;
			var y3;
			var x4;
			var y4;
			var redMultiplier;
			var greenMultiplier;
			var blueMultiplier;
			var alphaMultiplier;
			var redOffset;
			var greenOffset;
			var blueOffset;
			var alphaOffset;
			this.position = 0;
			var __skipTile = function(i1,offset1) {
				var _g2 = 0;
				while(_g2 < 6) {
					var i2 = _g2++;
					_gthis.__bufferData[offset1 + attributeLength * i2 + 4] = 0;
				}
				_gthis.__bufferSkipped.data.set(i1,true);
			};
			var _g11 = 0;
			var _g3 = this.__length;
			while(_g11 < _g3) {
				var i3 = _g11++;
				this.position = i3;
				offset = i3 * stride;
				alpha = this.get_alpha();
				visible = this.get_visible();
				if(!visible || alpha <= 0) {
					__skipTile(i3,offset);
					continue;
				}
				tileset = this.get_tileset();
				if(tileset == null) {
					tileset = defaultTileset;
				}
				if(tileset == null) {
					__skipTile(i3,offset);
					continue;
				}
				id = this.get_id();
				if(id > -1) {
					if(id >= tileset.__data.length) {
						__skipTile(i3,offset);
						continue;
					}
					tileData = tileset.__data[id];
					if(tileData == null) {
						__skipTile(i3,offset);
						continue;
					}
					tileWidth = tileData.width;
					tileHeight = tileData.height;
					uvX = tileData.__uvX;
					uvY = tileData.__uvY;
					uvWidth = tileData.__uvWidth;
					uvHeight = tileData.__uvHeight;
				} else {
					tileRect = this.get_rect();
					if(tileRect == null) {
						__skipTile(i3,offset);
						continue;
					}
					tileWidth = tileRect.width;
					tileHeight = tileRect.height;
					if(tileWidth <= 0 || tileHeight <= 0) {
						__skipTile(i3,offset);
						continue;
					}
					bitmapWidth = tileset.__bitmapData.width;
					bitmapHeight = tileset.__bitmapData.height;
					uvX = tileRect.x / bitmapWidth;
					uvY = tileRect.y / bitmapHeight;
					uvWidth = tileRect.get_right() / bitmapWidth;
					uvHeight = tileRect.get_bottom() / bitmapHeight;
				}
				tileMatrix = this.get_matrix();
				x = tileMatrix.__transformX(0,0);
				y = tileMatrix.__transformY(0,0);
				x2 = tileMatrix.__transformX(tileWidth,0);
				y2 = tileMatrix.__transformY(tileWidth,0);
				x3 = tileMatrix.__transformX(0,tileHeight);
				y3 = tileMatrix.__transformY(0,tileHeight);
				x4 = tileMatrix.__transformX(tileWidth,tileHeight);
				y4 = tileMatrix.__transformY(tileWidth,tileHeight);
				alpha *= worldAlpha;
				tileColorTransform = this.get_colorTransform();
				tileColorTransform.__combine(defaultColorTransform);
				redMultiplier = tileColorTransform.redMultiplier;
				greenMultiplier = tileColorTransform.greenMultiplier;
				blueMultiplier = tileColorTransform.blueMultiplier;
				alphaMultiplier = tileColorTransform.alphaMultiplier;
				redOffset = tileColorTransform.redOffset;
				greenOffset = tileColorTransform.greenOffset;
				blueOffset = tileColorTransform.blueOffset;
				alphaOffset = tileColorTransform.alphaOffset;
				this.__bufferData[offset] = x;
				this.__bufferData[offset + 1] = y;
				this.__bufferData[offset + 2] = uvX;
				this.__bufferData[offset + 3] = uvY;
				this.__bufferData[offset + attributeLength] = x2;
				this.__bufferData[offset + attributeLength + 1] = y2;
				this.__bufferData[offset + attributeLength + 2] = uvWidth;
				this.__bufferData[offset + attributeLength + 3] = uvY;
				this.__bufferData[offset + attributeLength * 2] = x3;
				this.__bufferData[offset + attributeLength * 2 + 1] = y3;
				this.__bufferData[offset + attributeLength * 2 + 2] = uvX;
				this.__bufferData[offset + attributeLength * 2 + 3] = uvHeight;
				this.__bufferData[offset + attributeLength * 3] = x3;
				this.__bufferData[offset + attributeLength * 3 + 1] = y3;
				this.__bufferData[offset + attributeLength * 3 + 2] = uvX;
				this.__bufferData[offset + attributeLength * 3 + 3] = uvHeight;
				this.__bufferData[offset + attributeLength * 4] = x2;
				this.__bufferData[offset + attributeLength * 4 + 1] = y2;
				this.__bufferData[offset + attributeLength * 4 + 2] = uvWidth;
				this.__bufferData[offset + attributeLength * 4 + 3] = uvY;
				this.__bufferData[offset + attributeLength * 5] = x4;
				this.__bufferData[offset + attributeLength * 5 + 1] = y4;
				this.__bufferData[offset + attributeLength * 5 + 2] = uvWidth;
				this.__bufferData[offset + attributeLength * 5 + 3] = uvHeight;
				var _g21 = 0;
				while(_g21 < 6) {
					var i4 = _g21++;
					this.__bufferData[offset + attributeLength * i4 + 4] = alpha;
					this.__bufferData[offset + attributeLength * i4 + 5] = redMultiplier;
					this.__bufferData[offset + attributeLength * i4 + 10] = greenMultiplier;
					this.__bufferData[offset + attributeLength * i4 + 15] = blueMultiplier;
					this.__bufferData[offset + attributeLength * i4 + 20] = alphaMultiplier;
					this.__bufferData[offset + attributeLength * i4 + 21] = redOffset / 255;
					this.__bufferData[offset + attributeLength * i4 + 22] = greenOffset / 255;
					this.__bufferData[offset + attributeLength * i4 + 23] = blueOffset / 255;
					this.__bufferData[offset + attributeLength * i4 + 24] = alphaOffset / 255;
				}
				this.__bufferSkipped.data.set(i3,false);
			}
			gl.bufferData(gl.ARRAY_BUFFER,this.__bufferData.byteLength,$hx_$exports_lime_utils_DataPointer.fromArrayBufferView(this.__bufferData),gl.DYNAMIC_DRAW);
			this.__cacheAlpha = worldAlpha;
			this.__cacheDefaultTileset = defaultTileset;
			this.__bufferDirty = false;
		}
		return this.__buffer;
	}
	,get_alpha: function() {
		return this.__data.data.get(11 + this.position * 21);
	}
	,set_alpha: function(value) {
		this.__dirty.data.set(2 + this.position * 5,true);
		return this.__data.data.set(11 + this.position * 21,value);
	}
	,get_colorTransform: function() {
		if(this.__colorTransform == null) {
			this.__colorTransform = new openfl_geom_ColorTransform();
		}
		var i = 12 + this.position * 21;
		var tmp = this.__data.data.get(i);
		this.__colorTransform.redMultiplier = tmp;
		var tmp1 = this.__data.data.get(i + 1);
		this.__colorTransform.greenMultiplier = tmp1;
		var tmp2 = this.__data.data.get(i + 2);
		this.__colorTransform.blueMultiplier = tmp2;
		var tmp3 = this.__data.data.get(i + 3);
		this.__colorTransform.alphaMultiplier = tmp3;
		var tmp4 = this.__data.data.get(i + 4);
		this.__colorTransform.redOffset = tmp4;
		var tmp5 = this.__data.data.get(i + 5);
		this.__colorTransform.greenOffset = tmp5;
		var tmp6 = this.__data.data.get(i + 6);
		this.__colorTransform.blueOffset = tmp6;
		var tmp7 = this.__data.data.get(i + 7);
		this.__colorTransform.alphaOffset = tmp7;
		return this.__colorTransform;
	}
	,set_colorTransform: function(value) {
		var i = 12 + this.position * 21;
		if(value != null) {
			this.__data.data.set(i,value.redMultiplier);
			this.__data.data.set(i + 1,value.greenMultiplier);
			this.__data.data.set(i + 2,value.blueMultiplier);
			this.__data.data.set(i + 3,value.alphaMultiplier);
			this.__data.data.set(i + 4,value.redOffset);
			this.__data.data.set(i + 5,value.greenOffset);
			this.__data.data.set(i + 6,value.blueOffset);
			this.__data.data.set(i + 7,value.alphaOffset);
		} else {
			this.__data.data.set(i,1);
			this.__data.data.set(i + 1,1);
			this.__data.data.set(i + 2,1);
			this.__data.data.set(i + 3,1);
			this.__data.data.set(i + 4,0);
			this.__data.data.set(i + 5,0);
			this.__data.data.set(i + 6,0);
			this.__data.data.set(i + 7,0);
		}
		this.__dirty.data.set(3 + this.position * 5,true);
		return value;
	}
	,get_id: function() {
		return Std.int(this.__data.data.get(this.position * 21));
	}
	,set_id: function(value) {
		this.__dirty.data.set(this.position * 5,true);
		this.__data.data.set(this.position * 21,value);
		return value;
	}
	,get_length: function() {
		return this.__length;
	}
	,set_length: function(value) {
		this.__data.data.set_length(value * 21);
		this.__dirty.data.set_length(value * 5);
		this.__shaders.data.set_length(value);
		this.__tilesets.data.set_length(value);
		this.__visible.data.set_length(value);
		if(value > this.__length) {
			var cachePosition = this.position;
			var _g1 = this.__length;
			var _g = value;
			while(_g1 < _g) {
				var i = _g1++;
				this.__init(i);
			}
			this.position = cachePosition;
		}
		this.__length = value;
		return value;
	}
	,get_matrix: function() {
		if(this.__matrix == null) {
			this.__matrix = new openfl_geom_Matrix();
		}
		var i = 5 + this.position * 21;
		var tmp = this.__data.data.get(i);
		this.__matrix.a = tmp;
		var tmp1 = this.__data.data.get(i + 1);
		this.__matrix.b = tmp1;
		var tmp2 = this.__data.data.get(i + 2);
		this.__matrix.c = tmp2;
		var tmp3 = this.__data.data.get(i + 3);
		this.__matrix.d = tmp3;
		var tmp4 = this.__data.data.get(i + 4);
		this.__matrix.tx = tmp4;
		var tmp5 = this.__data.data.get(i + 5);
		this.__matrix.ty = tmp5;
		return this.__matrix;
	}
	,set_matrix: function(value) {
		var i = 5 + this.position * 21;
		if(value != null) {
			this.__data.data.set(i,value.a);
			this.__data.data.set(i + 1,value.b);
			this.__data.data.set(i + 2,value.c);
			this.__data.data.set(i + 3,value.d);
			this.__data.data.set(i + 4,value.tx);
			this.__data.data.set(i + 5,value.ty);
		} else {
			this.__data.data.set(i,1);
			this.__data.data.set(i + 1,0);
			this.__data.data.set(i + 2,0);
			this.__data.data.set(i + 3,1);
			this.__data.data.set(i + 4,0);
			this.__data.data.set(i + 5,0);
		}
		this.__dirty.data.set(1 + this.position * 5,true);
		return value;
	}
	,get_rect: function() {
		if(this.__rect == null) {
			this.__rect = new openfl_geom_Rectangle();
		}
		var i = 1 + this.position * 21;
		var tmp = this.__data.data.get(i);
		this.__rect.x = tmp;
		var tmp1 = this.__data.data.get(i + 1);
		this.__rect.y = tmp1;
		var tmp2 = this.__data.data.get(i + 2);
		this.__rect.width = tmp2;
		var tmp3 = this.__data.data.get(i + 3);
		this.__rect.height = tmp3;
		return this.__rect;
	}
	,set_rect: function(value) {
		if(value != null) {
			this.__data.data.set(this.position * 21,-1);
			var i = 1 + this.position * 21;
			this.__data.data.set(i,value.x);
			this.__data.data.set(i + 1,value.y);
			this.__data.data.set(i + 2,value.width);
			this.__data.data.set(i + 3,value.height);
		} else {
			var i1 = 1 + this.position * 21;
			this.__data.data.set(i1,0);
			this.__data.data.set(i1 + 1,0);
			this.__data.data.set(i1 + 2,0);
			this.__data.data.set(i1 + 3,0);
		}
		this.__dirty.data.set(this.position * 5,true);
		return value;
	}
	,get_shader: function() {
		return this.__shaders.data.get(this.position);
	}
	,set_shader: function(value) {
		this.__shaders.data.set(this.position,value);
		return value;
	}
	,get_tileset: function() {
		return this.__tilesets.data.get(this.position);
	}
	,set_tileset: function(value) {
		this.__tilesets.data.set(this.position,value);
		return value;
	}
	,get_visible: function() {
		return this.__visible.data.get(this.position);
	}
	,set_visible: function(value) {
		this.__visible.data.set(this.position,value);
		return value;
	}
	,__class__: openfl_display_TileArray
	,__properties__: {set_visible:"set_visible",get_visible:"get_visible",set_tileset:"set_tileset",get_tileset:"get_tileset",set_shader:"set_shader",get_shader:"get_shader",set_rect:"set_rect",get_rect:"get_rect",set_matrix:"set_matrix",get_matrix:"get_matrix",set_length:"set_length",get_length:"get_length",set_id:"set_id",get_id:"get_id",set_colorTransform:"set_colorTransform",get_colorTransform:"get_colorTransform",set_alpha:"set_alpha",get_alpha:"get_alpha"}
};
var openfl_display__$TileArray_TileArrayIterator = function(data) {
	this.data = data;
	this.cachePosition = data.position;
	this.position = 0;
};
$hxClasses["openfl.display._TileArray.TileArrayIterator"] = openfl_display__$TileArray_TileArrayIterator;
openfl_display__$TileArray_TileArrayIterator.__name__ = ["openfl","display","_TileArray","TileArrayIterator"];
openfl_display__$TileArray_TileArrayIterator.prototype = {
	cachePosition: null
	,data: null
	,position: null
	,hasNext: function() {
		if(this.position < this.data.get_length()) {
			return true;
		} else {
			this.data.position = this.cachePosition;
			return false;
		}
	}
	,next: function() {
		this.data.position = this.position++;
		return this.data;
	}
	,__class__: openfl_display__$TileArray_TileArrayIterator
};
var openfl_display_Tilemap = $hx_exports["openfl"]["display"]["Tilemap"] = function(width,height,tileset,smoothing) {
	if(smoothing == null) {
		smoothing = true;
	}
	openfl_display_DisplayObject.call(this);
	this.__tileset = tileset;
	this.smoothing = smoothing;
	this.__tiles = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this.numTiles = 0;
	this.__width = width;
	this.__height = height;
};
$hxClasses["openfl.display.Tilemap"] = openfl_display_Tilemap;
openfl_display_Tilemap.__name__ = ["openfl","display","Tilemap"];
openfl_display_Tilemap.__interfaces__ = [openfl_display_IShaderDrawable];
openfl_display_Tilemap.__super__ = openfl_display_DisplayObject;
openfl_display_Tilemap.prototype = $extend(openfl_display_DisplayObject.prototype,{
	numTiles: null
	,shader: null
	,smoothing: null
	,__tiles: null
	,__tileset: null
	,__tileArray: null
	,__tileArrayDirty: null
	,__height: null
	,__width: null
	,addTile: function(tile) {
		if(tile == null) {
			return null;
		}
		if(tile.parent == this) {
			this.removeTile(tile);
		}
		this.__tiles.data.set(this.numTiles,tile);
		tile.parent = this;
		this.numTiles++;
		this.__setRenderDirty();
		return tile;
	}
	,addTileAt: function(tile,index) {
		if(tile == null) {
			return null;
		}
		if(tile.parent == this) {
			var cacheLength = this.__tiles.data.get_length();
			this.removeTile(tile);
			if(cacheLength > this.__tiles.data.get_length()) {
				--index;
			}
		}
		this.__tiles.data.insertAt(index,tile);
		tile.parent = this;
		this.__tileArrayDirty = true;
		this.numTiles++;
		this.__setRenderDirty();
		return tile;
	}
	,addTiles: function(tiles) {
		var _g = 0;
		while(_g < tiles.length) {
			var tile = tiles[_g];
			++_g;
			this.addTile(tile);
		}
		return tiles;
	}
	,contains: function(tile) {
		return this.__tiles.data.indexOf(tile,0) > -1;
	}
	,getTileAt: function(index) {
		if(index >= 0 && index < this.numTiles) {
			var tile = this.__tiles.data.get(index);
			if(tile == null && this.__tileArray != null && index < this.__tileArray.get_length()) {
				tile = openfl_display_Tile.__fromTileArray(index,this.__tileArray);
				this.__tiles.data.set(index,tile);
			}
			return this.__tiles.data.get(index);
		}
		return null;
	}
	,getTileIndex: function(tile) {
		var _g1 = 0;
		var _g = this.__tiles.data.get_length();
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__tiles.data.get(i) == tile) {
				return i;
			}
		}
		return -1;
	}
	,getTiles: function() {
		this.__updateTileArray();
		if(this.__tileArray == null) {
			this.__tileArray = new openfl_display_TileArray();
		}
		return this.__tileArray;
	}
	,removeTile: function(tile) {
		var cacheLength = this.__tiles.data.get_length();
		var _g1 = 0;
		var _g = this.__tiles.data.get_length();
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__tiles.data.get(i) == tile) {
				tile.parent = null;
				new openfl__$Vector_AbstractVector(this.__tiles.data.splice(i,1));
				break;
			}
		}
		this.__tileArrayDirty = true;
		if(cacheLength > this.__tiles.data.get_length()) {
			this.numTiles--;
		}
		if(this.numTiles <= 0 && this.__tileArray != null) {
			this.__tileArray.set_length(0);
		}
		this.__setRenderDirty();
		return tile;
	}
	,removeTileAt: function(index) {
		if(index >= 0 && index < this.numTiles) {
			return this.removeTile(this.__tiles.data.get(index));
		}
		return null;
	}
	,removeTiles: function(beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 2147483647;
		}
		if(beginIndex == null) {
			beginIndex = 0;
		}
		if(beginIndex < 0) {
			beginIndex = 0;
		}
		if(endIndex > this.__tiles.data.get_length() - 1) {
			endIndex = this.__tiles.data.get_length() - 1;
		}
		var removed = new openfl__$Vector_AbstractVector(this.__tiles.data.splice(beginIndex,endIndex - beginIndex + 1));
		var _g = 0;
		while(_g < removed.data.get_length()) {
			var tile = removed.data.get(_g);
			++_g;
			tile.parent = null;
		}
		this.__tileArrayDirty = true;
		this.numTiles = this.__tiles.data.get_length();
		if(this.numTiles == 0 && this.__tileArray != null) {
			this.__tileArray.set_length(0);
		}
		this.__setRenderDirty();
	}
	,setTiles: function(tileArray) {
		this.__tileArray = tileArray;
		this.numTiles = this.__tileArray.get_length();
		this.__tileArray.__bufferDirty = true;
		this.__tileArrayDirty = false;
		this.__tiles.data.set_length(0);
		this.__setRenderDirty();
	}
	,__getBounds: function(rect,matrix) {
		var bounds = openfl_geom_Rectangle.__pool.get();
		bounds.setTo(0,0,this.__width,this.__height);
		bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		this.__getRenderTransform();
		var px = this.__renderTransform.__transformInverseX(x,y);
		var py = this.__renderTransform.__transformInverseY(x,y);
		if(px > 0 && py > 0 && px <= this.__width && py <= this.__height) {
			if(stack != null && !interactiveOnly) {
				stack.push(hitObject);
			}
			return true;
		}
		return false;
	}
	,__renderCairo: function(renderSession) {
	}
	,__renderCanvas: function(renderSession) {
		this.__updateCacheBitmap(renderSession,!this.__worldColorTransform.__isDefault());
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			openfl__$internal_renderer_canvas_CanvasBitmap.render(this.__cacheBitmap,renderSession);
		} else {
			openfl__$internal_renderer_canvas_CanvasDisplayObject.render(this,renderSession);
			openfl__$internal_renderer_canvas_CanvasTilemap.render(this,renderSession);
		}
	}
	,__renderDOM: function(renderSession) {
	}
	,__renderDOMClear: function(renderSession) {
	}
	,__renderFlash: function() {
		openfl__$internal_renderer_flash_FlashTilemap.render(this);
	}
	,__renderGL: function(renderSession) {
		this.__updateCacheBitmap(renderSession,false);
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			openfl__$internal_renderer_opengl_GLBitmap.render(this.__cacheBitmap,renderSession);
		} else {
			openfl__$internal_renderer_opengl_GLDisplayObject.render(this,renderSession);
			openfl__$internal_renderer_opengl_GLTilemap.render(this,renderSession);
		}
	}
	,__renderGLMask: function(renderSession) {
		this.__updateCacheBitmap(renderSession,false);
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			openfl__$internal_renderer_opengl_GLBitmap.renderMask(this.__cacheBitmap,renderSession);
		} else {
			openfl__$internal_renderer_opengl_GLDisplayObject.renderMask(this,renderSession);
			openfl__$internal_renderer_opengl_GLTilemap.renderMask(this,renderSession);
		}
	}
	,__updateCacheBitmap: function(renderSession,force) {
		if(this.get_filters() == null) {
			return;
		}
		openfl_display_DisplayObject.prototype.__updateCacheBitmap.call(this,renderSession,force);
	}
	,__updateTileArray: function() {
		if(this.__tiles.data.get_length() > 0) {
			if(this.__tileArray == null) {
				this.__tileArray = new openfl_display_TileArray();
			}
			this.__tileArray.set_length(this.numTiles);
			var tile;
			var _g1 = 0;
			var _g = this.__tiles.data.get_length();
			while(_g1 < _g) {
				var i = _g1++;
				tile = this.__tiles.data.get(i);
				if(tile != null) {
					tile.__updateTileArray(i,this.__tileArray,this.__tileArrayDirty);
				}
			}
		}
		this.__tileArrayDirty = false;
	}
	,get_height: function() {
		return this.__height * $hx_exports.Math.abs(this.get_scaleY());
	}
	,set_height: function(value) {
		this.__height = Std.int(value);
		return this.__height * $hx_exports.Math.abs(this.get_scaleY());
	}
	,get_tileset: function() {
		return this.__tileset;
	}
	,set_tileset: function(value) {
		this.__tileArrayDirty = true;
		return this.__tileset = value;
	}
	,get_width: function() {
		return this.__width * $hx_exports.Math.abs(this.__scaleX);
	}
	,set_width: function(value) {
		this.__width = Std.int(value);
		return this.__width * $hx_exports.Math.abs(this.__scaleX);
	}
	,__class__: openfl_display_Tilemap
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_tileset:"set_tileset",get_tileset:"get_tileset"})
});
var openfl_display_Tileset = $hx_exports["openfl"]["display"]["Tileset"] = function(bitmapData,rects) {
	this.__data = [];
	this.__bitmapData = bitmapData;
	if(rects != null) {
		var _g = 0;
		while(_g < rects.length) {
			var rect = rects[_g];
			++_g;
			this.addRect(rect);
		}
	}
};
$hxClasses["openfl.display.Tileset"] = openfl_display_Tileset;
openfl_display_Tileset.__name__ = ["openfl","display","Tileset"];
openfl_display_Tileset.prototype = {
	__bitmapData: null
	,__data: null
	,addRect: function(rect) {
		if(rect == null) {
			return -1;
		}
		var tileData = new openfl_display__$Tileset_TileData(rect);
		tileData.__update(this.__bitmapData);
		this.__data.push(tileData);
		return this.__data.length - 1;
	}
	,clone: function() {
		var tileset = new openfl_display_Tileset(this.__bitmapData,null);
		var rect = openfl_geom_Rectangle.__pool.get();
		var _g = 0;
		var _g1 = this.__data;
		while(_g < _g1.length) {
			var tileData = _g1[_g];
			++_g;
			rect.setTo(tileData.x,tileData.y,tileData.width,tileData.height);
			tileset.addRect(rect);
		}
		openfl_geom_Rectangle.__pool.release(rect);
		return tileset;
	}
	,getRect: function(id) {
		if(id < this.__data.length && id >= 0) {
			return new openfl_geom_Rectangle(this.__data[id].x,this.__data[id].y,this.__data[id].width,this.__data[id].height);
		}
		return null;
	}
	,get_bitmapData: function() {
		return this.__bitmapData;
	}
	,set_bitmapData: function(value) {
		this.__bitmapData = value;
		var _g = 0;
		var _g1 = this.__data;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			data.__update(this.__bitmapData);
		}
		return value;
	}
	,__class__: openfl_display_Tileset
	,__properties__: {set_bitmapData:"set_bitmapData",get_bitmapData:"get_bitmapData"}
};
var openfl_display__$Tileset_TileData = function(rect) {
	if(rect != null) {
		this.x = Std.int(rect.x);
		this.y = Std.int(rect.y);
		this.width = Std.int(rect.width);
		this.height = Std.int(rect.height);
	}
};
$hxClasses["openfl.display._Tileset.TileData"] = openfl_display__$Tileset_TileData;
openfl_display__$Tileset_TileData.__name__ = ["openfl","display","_Tileset","TileData"];
openfl_display__$Tileset_TileData.prototype = {
	height: null
	,width: null
	,x: null
	,y: null
	,__bitmapData: null
	,__uvHeight: null
	,__uvWidth: null
	,__uvX: null
	,__uvY: null
	,__update: function(bitmapData) {
		if(bitmapData != null) {
			this.__uvX = this.x / bitmapData.width;
			this.__uvY = this.y / bitmapData.height;
			this.__uvWidth = (this.x + this.width) / bitmapData.width;
			this.__uvHeight = (this.y + this.height) / bitmapData.height;
		}
	}
	,__class__: openfl_display__$Tileset_TileData
};
var openfl_display__$TriangleCulling_TriangleCulling_$Impl_$ = $hx_exports["openfl"]["display"]["TriangleCulling"] = {};
$hxClasses["openfl.display._TriangleCulling.TriangleCulling_Impl_"] = openfl_display__$TriangleCulling_TriangleCulling_$Impl_$;
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.__name__ = ["openfl","display","_TriangleCulling","TriangleCulling_Impl_"];
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.fromString = function(value) {
	switch(value) {
	case "negative":
		return 0;
	case "none":
		return 1;
	case "positive":
		return 2;
	default:
		return null;
	}
};
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "negative";
	case 1:
		return "none";
	case 2:
		return "positive";
	default:
		return null;
	}
};
var openfl_display_Window = $hx_exports["openfl"]["display"]["Window"] = function(config) {
	$hx_exports.lime.ui.Window.call(this,config);
};
$hxClasses["openfl.display.Window"] = openfl_display_Window;
openfl_display_Window.__name__ = ["openfl","display","Window"];
openfl_display_Window.__super__ = $hx_exports.lime.ui.Window;
openfl_display_Window.prototype = $extend($hx_exports.lime.ui.Window.prototype,{
	create: function(application) {
		$hx_exports.lime.ui.Window.prototype.create.call(this,application);
		this.stage = new openfl_display_Stage(this,Reflect.hasField(this.config,"background") ? this.config.background : 16777215);
		if(Reflect.hasField(this.config,"parameters")) {
			try {
				this.stage.loaderInfo.parameters = this.config.parameters;
			} catch( e ) {
			}
		}
		if(Reflect.hasField(this.config,"resizable") && !this.config.resizable) {
			this.stage.__setLogicalSize(this.config.width,this.config.height);
		}
		application.addModule(this.stage);
	}
	,__class__: openfl_display_Window
});
var openfl_display3D_Context3D = $hx_exports["openfl"]["display3D"]["Context3D"] = function(stage3D,renderSession) {
	this.totalGPUMemory = 0;
	this.profile = 0;
	this.driverInfo = "OpenGL (Direct blitting)";
	this.backBufferWidth = 0;
	this.backBufferHeight = 0;
	openfl_events_EventDispatcher.call(this);
	this.__stage3D = stage3D;
	this.__renderSession = renderSession;
	openfl__$internal_stage3D_opengl_GLContext3D.create(this);
};
$hxClasses["openfl.display3D.Context3D"] = openfl_display3D_Context3D;
openfl_display3D_Context3D.__name__ = ["openfl","display3D","Context3D"];
openfl_display3D_Context3D.__super__ = openfl_events_EventDispatcher;
openfl_display3D_Context3D.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	backBufferHeight: null
	,backBufferWidth: null
	,driverInfo: null
	,maxBackBufferHeight: null
	,maxBackBufferWidth: null
	,profile: null
	,totalGPUMemory: null
	,__backBufferAntiAlias: null
	,__backBufferEnableDepthAndStencil: null
	,__backBufferWantsBestResolution: null
	,__depthRenderBuffer: null
	,__depthStencilRenderBuffer: null
	,__enableErrorChecking: null
	,__fragmentConstants: null
	,__framebuffer: null
	,__frameCount: null
	,__maxAnisotropyCubeTexture: null
	,__maxAnisotropyTexture2D: null
	,__positionScale: null
	,__program: null
	,__renderSession: null
	,__renderToTexture: null
	,__rttDepthAndStencil: null
	,__samplerDirty: null
	,__samplerTextures: null
	,__samplerStates: null
	,__scissorRectangle: null
	,__stage3D: null
	,__stats: null
	,__statsCache: null
	,__stencilCompareMode: null
	,__stencilRef: null
	,__stencilReadMask: null
	,__stencilRenderBuffer: null
	,__supportsAnisotropicFiltering: null
	,__supportsPackedDepthStencil: null
	,__vertexConstants: null
	,clear: function(red,green,blue,alpha,depth,stencil,mask) {
		if(mask == null) {
			mask = 7;
		}
		if(stencil == null) {
			stencil = 0;
		}
		if(depth == null) {
			depth = 1;
		}
		if(alpha == null) {
			alpha = 1;
		}
		if(blue == null) {
			blue = 0;
		}
		if(green == null) {
			green = 0;
		}
		if(red == null) {
			red = 0;
		}
		openfl__$internal_stage3D_opengl_GLContext3D.clear(this,red,green,blue,alpha,depth,stencil,mask);
	}
	,configureBackBuffer: function(width,height,antiAlias,enableDepthAndStencil,wantsBestResolution,wantsBestResolutionOnBrowserZoom) {
		if(wantsBestResolutionOnBrowserZoom == null) {
			wantsBestResolutionOnBrowserZoom = false;
		}
		if(wantsBestResolution == null) {
			wantsBestResolution = false;
		}
		if(enableDepthAndStencil == null) {
			enableDepthAndStencil = true;
		}
		openfl__$internal_stage3D_opengl_GLContext3D.configureBackBuffer(this,width,height,antiAlias,enableDepthAndStencil,wantsBestResolution,wantsBestResolutionOnBrowserZoom);
	}
	,createCubeTexture: function(size,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) {
			streamingLevels = 0;
		}
		return new openfl_display3D_textures_CubeTexture(this,size,format,optimizeForRenderToTexture,streamingLevels);
	}
	,createIndexBuffer: function(numIndices,bufferUsage) {
		if(bufferUsage == null) {
			bufferUsage = 1;
		}
		return new openfl_display3D_IndexBuffer3D(this,numIndices,bufferUsage);
	}
	,createProgram: function() {
		return new openfl_display3D_Program3D(this);
	}
	,createRectangleTexture: function(width,height,format,optimizeForRenderToTexture) {
		return new openfl_display3D_textures_RectangleTexture(this,width,height,openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.toString(format),optimizeForRenderToTexture);
	}
	,createTexture: function(width,height,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) {
			streamingLevels = 0;
		}
		return new openfl_display3D_textures_Texture(this,width,height,format,optimizeForRenderToTexture,streamingLevels);
	}
	,createVertexBuffer: function(numVertices,data32PerVertex,bufferUsage) {
		if(bufferUsage == null) {
			bufferUsage = 1;
		}
		return new openfl_display3D_VertexBuffer3D(this,numVertices,data32PerVertex,openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.toString(bufferUsage));
	}
	,createVideoTexture: function() {
		return new openfl_display3D_textures_VideoTexture(this);
	}
	,dispose: function(recreate) {
		if(recreate == null) {
			recreate = true;
		}
		openfl__$internal_stage3D_opengl_GLContext3D.dispose(this,recreate);
	}
	,drawToBitmapData: function(destination) {
		if(destination == null) {
			return;
		}
		openfl__$internal_stage3D_opengl_GLContext3D.drawToBitmapData(this,destination);
	}
	,drawTriangles: function(indexBuffer,firstIndex,numTriangles) {
		if(numTriangles == null) {
			numTriangles = -1;
		}
		if(firstIndex == null) {
			firstIndex = 0;
		}
		if(this.__program == null) {
			return;
		}
		openfl__$internal_stage3D_opengl_GLContext3D.drawTriangles(this,indexBuffer,firstIndex,numTriangles);
	}
	,present: function() {
		openfl__$internal_stage3D_opengl_GLContext3D.present(this);
	}
	,setBlendFactors: function(sourceFactor,destinationFactor) {
		openfl__$internal_stage3D_opengl_GLContext3D.setBlendFactors(this,sourceFactor,destinationFactor);
	}
	,setColorMask: function(red,green,blue,alpha) {
		openfl__$internal_stage3D_opengl_GLContext3D.setColorMask(this,red,green,blue,alpha);
	}
	,setCulling: function(triangleFaceToCull) {
		openfl__$internal_stage3D_opengl_GLContext3D.setCulling(this,triangleFaceToCull);
	}
	,setDepthTest: function(depthMask,passCompareMode) {
		openfl__$internal_stage3D_opengl_GLContext3D.setDepthTest(this,depthMask,passCompareMode);
	}
	,setProgram: function(program) {
		if(program == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		openfl__$internal_stage3D_opengl_GLContext3D.setProgram(this,program);
	}
	,setProgramConstantsFromByteArray: function(programType,firstRegister,numRegisters,data,byteArrayOffset) {
		if(numRegisters == 0) {
			return;
		}
		openfl__$internal_stage3D_opengl_GLContext3D.setProgramConstantsFromByteArray(this,programType,firstRegister,numRegisters,data,byteArrayOffset);
	}
	,setProgramConstantsFromMatrix: function(programType,firstRegister,matrix,transposedMatrix) {
		if(transposedMatrix == null) {
			transposedMatrix = false;
		}
		openfl__$internal_stage3D_opengl_GLContext3D.setProgramConstantsFromMatrix(this,programType,firstRegister,matrix,transposedMatrix);
	}
	,setProgramConstantsFromVector: function(programType,firstRegister,data,numRegisters) {
		if(numRegisters == null) {
			numRegisters = -1;
		}
		if(numRegisters == 0) {
			return;
		}
		openfl__$internal_stage3D_opengl_GLContext3D.setProgramConstantsFromVector(this,programType,firstRegister,data,numRegisters);
	}
	,setRenderToBackBuffer: function() {
		openfl__$internal_stage3D_opengl_GLContext3D.setRenderToBackBuffer(this);
	}
	,setRenderToTexture: function(texture,enableDepthAndStencil,antiAlias,surfaceSelector) {
		if(surfaceSelector == null) {
			surfaceSelector = 0;
		}
		if(antiAlias == null) {
			antiAlias = 0;
		}
		if(enableDepthAndStencil == null) {
			enableDepthAndStencil = false;
		}
		openfl__$internal_stage3D_opengl_GLContext3D.setRenderToTexture(this,texture,enableDepthAndStencil,antiAlias,surfaceSelector);
	}
	,setSamplerStateAt: function(sampler,wrap,filter,mipfilter) {
		openfl__$internal_stage3D_opengl_GLContext3D.setSamplerStateAt(this,sampler,wrap,filter,mipfilter);
	}
	,setScissorRectangle: function(rectangle) {
		openfl__$internal_stage3D_opengl_GLContext3D.setScissorRectangle(this,rectangle);
	}
	,setStencilActions: function(triangleFace,compareMode,actionOnBothPass,actionOnDepthFail,actionOnDepthPassStencilFail) {
		if(actionOnDepthPassStencilFail == null) {
			actionOnDepthPassStencilFail = 5;
		}
		if(actionOnDepthFail == null) {
			actionOnDepthFail = 5;
		}
		if(actionOnBothPass == null) {
			actionOnBothPass = 5;
		}
		if(compareMode == null) {
			compareMode = 0;
		}
		if(triangleFace == null) {
			triangleFace = 2;
		}
		openfl__$internal_stage3D_opengl_GLContext3D.setStencilActions(this,triangleFace,compareMode,actionOnBothPass,actionOnDepthFail,actionOnDepthPassStencilFail);
	}
	,setStencilReferenceValue: function(referenceValue,readMask,writeMask) {
		if(writeMask == null) {
			writeMask = 255;
		}
		if(readMask == null) {
			readMask = 255;
		}
		openfl__$internal_stage3D_opengl_GLContext3D.setStencilReferenceValue(this,referenceValue,readMask,writeMask);
	}
	,setTextureAt: function(sampler,texture) {
		openfl__$internal_stage3D_opengl_GLContext3D.setTextureAt(this,sampler,texture);
	}
	,setVertexBufferAt: function(index,buffer,bufferOffset,format) {
		if(format == null) {
			format = 4;
		}
		if(bufferOffset == null) {
			bufferOffset = 0;
		}
		openfl__$internal_stage3D_opengl_GLContext3D.setVertexBufferAt(this,index,buffer,bufferOffset,format);
	}
	,__updateBackbufferViewport: function() {
		openfl__$internal_stage3D_opengl_GLContext3D.__updateBackbufferViewportTEMP(this);
	}
	,__updateBlendFactors: function() {
		openfl__$internal_stage3D_opengl_GLContext3D.__updateBlendFactorsTEMP(this);
	}
	,get_enableErrorChecking: function() {
		return this.__enableErrorChecking;
	}
	,set_enableErrorChecking: function(value) {
		openfl__$internal_stage3D_opengl_GLContext3D.setEnableErrorChecking(value);
		return this.__enableErrorChecking = value;
	}
	,__class__: openfl_display3D_Context3D
	,__properties__: {set_enableErrorChecking:"set_enableErrorChecking",get_enableErrorChecking:"get_enableErrorChecking"}
});
var openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3D.Context3DTelemetry_Impl_"] = openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.__name__ = ["openfl","display3D","_Context3D","Context3DTelemetry_Impl_"];
var openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$ = $hx_exports["openfl"]["display3D"]["Context3DBlendFactor"] = {};
$hxClasses["openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_"] = openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.__name__ = ["openfl","display3D","_Context3DBlendFactor","Context3DBlendFactor_Impl_"];
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.fromString = function(value) {
	switch(value) {
	case "destinationAlpha":
		return 0;
	case "destinationColor":
		return 1;
	case "one":
		return 2;
	case "oneMinusDestinationAlpha":
		return 3;
	case "oneMinusDestinationColor":
		return 4;
	case "oneMinusSourceAlpha":
		return 5;
	case "oneMinusSourceColor":
		return 6;
	case "sourceAlpha":
		return 7;
	case "sourceColor":
		return 8;
	case "zero":
		return 9;
	default:
		return null;
	}
};
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "destinationAlpha";
	case 1:
		return "destinationColor";
	case 2:
		return "one";
	case 3:
		return "oneMinusDestinationAlpha";
	case 4:
		return "oneMinusDestinationColor";
	case 5:
		return "oneMinusSourceAlpha";
	case 6:
		return "oneMinusSourceColor";
	case 7:
		return "sourceAlpha";
	case 8:
		return "sourceColor";
	case 9:
		return "zero";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$ = $hx_exports["openfl"]["display3D"]["Context3DBufferUsage"] = {};
$hxClasses["openfl.display3D._Context3DBufferUsage.Context3DBufferUsage_Impl_"] = openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$;
openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.__name__ = ["openfl","display3D","_Context3DBufferUsage","Context3DBufferUsage_Impl_"];
openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.fromString = function(value) {
	switch(value) {
	case "dynamicDraw":
		return 0;
	case "staticDraw":
		return 1;
	default:
		return null;
	}
};
openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "dynamicDraw";
	case 1:
		return "staticDraw";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$ = $hx_exports["openfl"]["display3D"]["Context3DCompareMode"] = {};
$hxClasses["openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_"] = openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.__name__ = ["openfl","display3D","_Context3DCompareMode","Context3DCompareMode_Impl_"];
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "always":
		return 0;
	case "equal":
		return 1;
	case "greater":
		return 2;
	case "greaterEqual":
		return 3;
	case "less":
		return 4;
	case "lessEqual":
		return 5;
	case "never":
		return 6;
	case "notEqual":
		return 7;
	default:
		return null;
	}
};
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "always";
	case 1:
		return "equal";
	case 2:
		return "greater";
	case 3:
		return "greaterEqual";
	case 4:
		return "less";
	case 5:
		return "lessEqual";
	case 6:
		return "never";
	case 7:
		return "notEqual";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$ = $hx_exports["openfl"]["display3D"]["Context3DMipFilter"] = {};
$hxClasses["openfl.display3D._Context3DMipFilter.Context3DMipFilter_Impl_"] = openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$;
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.__name__ = ["openfl","display3D","_Context3DMipFilter","Context3DMipFilter_Impl_"];
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.fromString = function(value) {
	switch(value) {
	case "miplinear":
		return 0;
	case "mipnearest":
		return 1;
	case "mipnone":
		return 2;
	default:
		return null;
	}
};
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "miplinear";
	case 1:
		return "mipnearest";
	case 2:
		return "mipnone";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$ = $hx_exports["openfl"]["display3D"]["Context3DProfile"] = {};
$hxClasses["openfl.display3D._Context3DProfile.Context3DProfile_Impl_"] = openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.__name__ = ["openfl","display3D","_Context3DProfile","Context3DProfile_Impl_"];
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.fromString = function(value) {
	switch(value) {
	case "baseline":
		return 0;
	case "baselineConstrained":
		return 1;
	case "baselineExtended":
		return 2;
	case "standard":
		return 3;
	case "standardConstrained":
		return 4;
	case "standardExtended":
		return 5;
	default:
		return null;
	}
};
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "baseline";
	case 1:
		return "baselineConstrained";
	case 2:
		return "baselineExtended";
	case 3:
		return "standard";
	case 4:
		return "standardConstrained";
	case 5:
		return "standardExtended";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$ = $hx_exports["openfl"]["display3D"]["Context3DProgramType"] = {};
$hxClasses["openfl.display3D._Context3DProgramType.Context3DProgramType_Impl_"] = openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$;
openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.__name__ = ["openfl","display3D","_Context3DProgramType","Context3DProgramType_Impl_"];
openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "fragment":
		return 0;
	case "vertex":
		return 1;
	default:
		return null;
	}
};
openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "fragment";
	case 1:
		return "vertex";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$ = $hx_exports["openfl"]["display3D"]["Context3DRenderMode"] = {};
$hxClasses["openfl.display3D._Context3DRenderMode.Context3DRenderMode_Impl_"] = openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$;
openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.__name__ = ["openfl","display3D","_Context3DRenderMode","Context3DRenderMode_Impl_"];
openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "auto":
		return 0;
	case "software":
		return 1;
	default:
		return null;
	}
};
openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "auto";
	case 1:
		return "software";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$ = $hx_exports["openfl"]["display3D"]["Context3DStencilAction"] = {};
$hxClasses["openfl.display3D._Context3DStencilAction.Context3DStencilAction_Impl_"] = openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.__name__ = ["openfl","display3D","_Context3DStencilAction","Context3DStencilAction_Impl_"];
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.fromString = function(value) {
	switch(value) {
	case "decrementSaturate":
		return 0;
	case "decrementWrap":
		return 1;
	case "incrementSaturate":
		return 2;
	case "incrementWrap":
		return 3;
	case "invert":
		return 4;
	case "keep":
		return 5;
	case "set":
		return 6;
	case "zero":
		return 7;
	default:
		return null;
	}
};
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "decrementSaturate";
	case 1:
		return "decrementWrap";
	case 2:
		return "incrementSaturate";
	case 3:
		return "incrementWrap";
	case 4:
		return "invert";
	case 5:
		return "keep";
	case 6:
		return "set";
	case 7:
		return "zero";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$ = $hx_exports["openfl"]["display3D"]["Context3DTextureFilter"] = {};
$hxClasses["openfl.display3D._Context3DTextureFilter.Context3DTextureFilter_Impl_"] = openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.__name__ = ["openfl","display3D","_Context3DTextureFilter","Context3DTextureFilter_Impl_"];
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.fromString = function(value) {
	switch(value) {
	case "anisotropic16x":
		return 0;
	case "anisotropic2x":
		return 1;
	case "anisotropic4x":
		return 2;
	case "anisotropic8x":
		return 3;
	case "linear":
		return 4;
	case "nearest":
		return 5;
	default:
		return null;
	}
};
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "anisotropic16x";
	case 1:
		return "anisotropic2x";
	case 2:
		return "anisotropic4x";
	case 3:
		return "anisotropic8x";
	case 4:
		return "linear";
	case 5:
		return "nearest";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$ = $hx_exports["openfl"]["display3D"]["Context3DTextureFormat"] = {};
$hxClasses["openfl.display3D._Context3DTextureFormat.Context3DTextureFormat_Impl_"] = openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.__name__ = ["openfl","display3D","_Context3DTextureFormat","Context3DTextureFormat_Impl_"];
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bgrPacked565":
		return 0;
	case "bgra":
		return 1;
	case "bgraPacked4444":
		return 2;
	case "compressed":
		return 3;
	case "compressedAlpha":
		return 4;
	case "rgbaHalfFloat":
		return 5;
	default:
		return null;
	}
};
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bgrPacked565";
	case 1:
		return "bgra";
	case 2:
		return "bgraPacked4444";
	case 3:
		return "compressed";
	case 4:
		return "compressedAlpha";
	case 5:
		return "rgbaHalfFloat";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$ = $hx_exports["openfl"]["display3D"]["Context3DTriangleFace"] = {};
$hxClasses["openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_"] = openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.__name__ = ["openfl","display3D","_Context3DTriangleFace","Context3DTriangleFace_Impl_"];
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.fromString = function(value) {
	switch(value) {
	case "back":
		return 0;
	case "front":
		return 1;
	case "frontAndBack":
		return 2;
	case "none":
		return 3;
	default:
		return null;
	}
};
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "back";
	case 1:
		return "front";
	case 2:
		return "frontAndBack";
	case 3:
		return "none";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$ = $hx_exports["openfl"]["display3D"]["Context3DVertexBufferFormat"] = {};
$hxClasses["openfl.display3D._Context3DVertexBufferFormat.Context3DVertexBufferFormat_Impl_"] = openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.__name__ = ["openfl","display3D","_Context3DVertexBufferFormat","Context3DVertexBufferFormat_Impl_"];
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bytes4":
		return 0;
	case "float1":
		return 1;
	case "float2":
		return 2;
	case "float3":
		return 3;
	case "float4":
		return 4;
	default:
		return null;
	}
};
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bytes4";
	case 1:
		return "float1";
	case 2:
		return "float2";
	case 3:
		return "float3";
	case 4:
		return "float4";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$ = $hx_exports["openfl"]["display3D"]["Context3DWrapMode"] = {};
$hxClasses["openfl.display3D._Context3DWrapMode.Context3DWrapMode_Impl_"] = openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$;
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.__name__ = ["openfl","display3D","_Context3DWrapMode","Context3DWrapMode_Impl_"];
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "clamp":
		return 0;
	case "clamp_u_repeat_y":
		return 1;
	case "repeat":
		return 2;
	case "repeat_u_clamp_y":
		return 3;
	default:
		return null;
	}
};
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "clamp";
	case 1:
		return "clamp_u_repeat_y";
	case 2:
		return "repeat";
	case 3:
		return "repeat_u_clamp_y";
	default:
		return null;
	}
};
var openfl_display3D_IndexBuffer3D = $hx_exports["openfl"]["display3D"]["IndexBuffer3D"] = function(context3D,numIndices,bufferUsage) {
	this.__context = context3D;
	this.__numIndices = numIndices;
	openfl__$internal_stage3D_opengl_GLIndexBuffer3D.create(this,this.__context.__renderSession,bufferUsage);
};
$hxClasses["openfl.display3D.IndexBuffer3D"] = openfl_display3D_IndexBuffer3D;
openfl_display3D_IndexBuffer3D.__name__ = ["openfl","display3D","IndexBuffer3D"];
openfl_display3D_IndexBuffer3D.prototype = {
	__context: null
	,__elementType: null
	,__id: null
	,__memoryUsage: null
	,__numIndices: null
	,__tempInt16Array: null
	,__usage: null
	,dispose: function() {
		openfl__$internal_stage3D_opengl_GLIndexBuffer3D.dispose(this,this.__context.__renderSession);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,startOffset,count) {
		openfl__$internal_stage3D_opengl_GLIndexBuffer3D.uploadFromByteArray(this,this.__context.__renderSession,data,byteArrayOffset,startOffset,count);
	}
	,uploadFromTypedArray: function(data,byteLength) {
		if(byteLength == null) {
			byteLength = -1;
		}
		openfl__$internal_stage3D_opengl_GLIndexBuffer3D.uploadFromTypedArray(this,this.__context.__renderSession,data);
	}
	,uploadFromVector: function(data,startOffset,count) {
		openfl__$internal_stage3D_opengl_GLIndexBuffer3D.uploadFromVector(this,this.__context.__renderSession,data,startOffset,count);
	}
	,__class__: openfl_display3D_IndexBuffer3D
};
var openfl_display3D_Program3D = $hx_exports["openfl"]["display3D"]["Program3D"] = function(context3D) {
	this.__context = context3D;
	this.__memUsage = 0;
	this.__samplerUsageMask = 0;
	this.__uniforms = new $hx_exports.List();
	this.__samplerUniforms = new $hx_exports.List();
	this.__alphaSamplerUniforms = new $hx_exports.List();
	this.__samplerStates = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,8);
};
$hxClasses["openfl.display3D.Program3D"] = openfl_display3D_Program3D;
openfl_display3D_Program3D.__name__ = ["openfl","display3D","Program3D"];
openfl_display3D_Program3D.prototype = {
	__alphaSamplerUniforms: null
	,__context: null
	,__fragmentShaderID: null
	,__fragmentSource: null
	,__fragmentUniformMap: null
	,__memUsage: null
	,__positionScale: null
	,__programID: null
	,__samplerStates: null
	,__samplerUniforms: null
	,__samplerUsageMask: null
	,__uniforms: null
	,__vertexShaderID: null
	,__vertexSource: null
	,__vertexUniformMap: null
	,dispose: function() {
		openfl__$internal_stage3D_opengl_GLProgram3D.dispose(this,this.__context.__renderSession);
	}
	,upload: function(vertexProgram,fragmentProgram) {
		openfl__$internal_stage3D_opengl_GLProgram3D.upload(this,this.__context.__renderSession,vertexProgram,fragmentProgram);
	}
	,__flush: function() {
		this.__vertexUniformMap.flush();
		this.__fragmentUniformMap.flush();
	}
	,__getSamplerState: function(sampler) {
		return this.__samplerStates.data.get(sampler);
	}
	,__markDirty: function(isVertex,index,count) {
		if(isVertex) {
			this.__vertexUniformMap.markDirty(index,count);
		} else {
			this.__fragmentUniformMap.markDirty(index,count);
		}
	}
	,__setPositionScale: function(positionScale) {
		if(this.__positionScale != null) {
			openfl__$internal_stage3D_opengl_GLProgram3D.setPositionScale(this,this.__context.__renderSession,positionScale);
		}
	}
	,__setSamplerState: function(sampler,state) {
		this.__samplerStates.data.set(sampler,state);
	}
	,__use: function() {
		openfl__$internal_stage3D_opengl_GLProgram3D.use(this,this.__context.__renderSession);
	}
	,__class__: openfl_display3D_Program3D
};
var openfl_display3D_Uniform = function(gl) {
	this.gl = gl;
	this.isDirty = true;
	var this1 = new lime_utils_BytePointerData(null,0);
	this.regDataPointer = this1;
};
$hxClasses["openfl.display3D.Uniform"] = openfl_display3D_Uniform;
openfl_display3D_Uniform.__name__ = ["openfl","display3D","Uniform"];
openfl_display3D_Uniform.prototype = {
	name: null
	,location: null
	,type: null
	,size: null
	,regData: null
	,regIndex: null
	,regCount: null
	,isDirty: null
	,gl: null
	,regDataPointer: null
	,flush: function() {
		openfl__$internal_stage3D_opengl_GLProgram3D.flushUniform(this,this.gl);
	}
	,__class__: openfl_display3D_Uniform
};
var openfl_display3D_UniformMap = function(list) {
	this.__uniforms = list;
	this.__uniforms.sort(function(a,b) {
		return Reflect.compare(a.regIndex,b.regIndex);
	});
	var total = 0;
	var _g = 0;
	var _g1 = this.__uniforms;
	while(_g < _g1.length) {
		var uniform = _g1[_g];
		++_g;
		if(uniform.regIndex + uniform.regCount > total) {
			total = uniform.regIndex + uniform.regCount;
		}
	}
	this.__registerLookup = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,total);
	var _g2 = 0;
	var _g11 = this.__uniforms;
	while(_g2 < _g11.length) {
		var uniform1 = _g11[_g2];
		++_g2;
		var _g3 = 0;
		var _g21 = uniform1.regCount;
		while(_g3 < _g21) {
			var i = _g3++;
			this.__registerLookup.data.set(uniform1.regIndex + i,uniform1);
		}
	}
	this.__anyDirty = this.__allDirty = true;
};
$hxClasses["openfl.display3D.UniformMap"] = openfl_display3D_UniformMap;
openfl_display3D_UniformMap.__name__ = ["openfl","display3D","UniformMap"];
openfl_display3D_UniformMap.prototype = {
	__allDirty: null
	,__anyDirty: null
	,__registerLookup: null
	,__uniforms: null
	,flush: function() {
		if(this.__anyDirty) {
			var _g = 0;
			var _g1 = this.__uniforms;
			while(_g < _g1.length) {
				var uniform = _g1[_g];
				++_g;
				if(this.__allDirty || uniform.isDirty) {
					uniform.flush();
					uniform.isDirty = false;
				}
			}
			this.__anyDirty = this.__allDirty = false;
		}
	}
	,markAllDirty: function() {
		this.__allDirty = true;
		this.__anyDirty = true;
	}
	,markDirty: function(start,count) {
		if(this.__allDirty) {
			return;
		}
		var end = start + count;
		if(end > this.__registerLookup.data.get_length()) {
			end = this.__registerLookup.data.get_length();
		}
		var index = start;
		while(index < end) {
			var uniform = this.__registerLookup.data.get(index);
			if(uniform != null) {
				uniform.isDirty = true;
				this.__anyDirty = true;
				index = uniform.regIndex + uniform.regCount;
			} else {
				++index;
			}
		}
	}
	,__class__: openfl_display3D_UniformMap
};
var openfl_display3D_VertexBuffer3D = $hx_exports["openfl"]["display3D"]["VertexBuffer3D"] = function(context3D,numVertices,dataPerVertex,bufferUsage) {
	this.__context = context3D;
	this.__numVertices = numVertices;
	this.__vertexSize = dataPerVertex;
	openfl__$internal_stage3D_opengl_GLVertexBuffer3D.create(this,this.__context.__renderSession,openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.fromString(bufferUsage));
};
$hxClasses["openfl.display3D.VertexBuffer3D"] = openfl_display3D_VertexBuffer3D;
openfl_display3D_VertexBuffer3D.__name__ = ["openfl","display3D","VertexBuffer3D"];
openfl_display3D_VertexBuffer3D.prototype = {
	__context: null
	,__data: null
	,__id: null
	,__memoryUsage: null
	,__numVertices: null
	,__stride: null
	,__tempFloat32Array: null
	,__usage: null
	,__vertexSize: null
	,dispose: function() {
		openfl__$internal_stage3D_opengl_GLVertexBuffer3D.dispose(this,this.__context.__renderSession);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,startVertex,numVertices) {
		openfl__$internal_stage3D_opengl_GLVertexBuffer3D.uploadFromByteArray(this,this.__context.__renderSession,data,byteArrayOffset,startVertex,numVertices);
	}
	,uploadFromTypedArray: function(data,byteLength) {
		if(byteLength == null) {
			byteLength = -1;
		}
		openfl__$internal_stage3D_opengl_GLVertexBuffer3D.uploadFromTypedArray(this,this.__context.__renderSession,data);
	}
	,uploadFromVector: function(data,startVertex,numVertices) {
		openfl__$internal_stage3D_opengl_GLVertexBuffer3D.uploadFromVector(this,this.__context.__renderSession,data,startVertex,numVertices);
	}
	,__class__: openfl_display3D_VertexBuffer3D
};
var openfl_display3D_textures_TextureBase = $hx_exports["openfl"]["display3D"]["textures"]["TextureBase"] = function(context) {
	openfl_events_EventDispatcher.call(this);
	this.__context = context;
	openfl__$internal_stage3D_opengl_GLTextureBase.create(this,this.__context.__renderSession);
};
$hxClasses["openfl.display3D.textures.TextureBase"] = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_TextureBase.__name__ = ["openfl","display3D","textures","TextureBase"];
openfl_display3D_textures_TextureBase.__super__ = openfl_events_EventDispatcher;
openfl_display3D_textures_TextureBase.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__alphaTexture: null
	,__context: null
	,__format: null
	,__height: null
	,__internalFormat: null
	,__optimizeForRenderToTexture: null
	,__samplerState: null
	,__streamingLevels: null
	,__textureContext: null
	,__textureID: null
	,__textureTarget: null
	,__width: null
	,dispose: function() {
		openfl__$internal_stage3D_opengl_GLTextureBase.dispose(this,this.__context.__renderSession);
	}
	,__getImage: function(bitmapData) {
		return openfl__$internal_stage3D_opengl_GLTextureBase.getImage(this,this.__context.__renderSession,bitmapData);
	}
	,__getTexture: function() {
		return this.__textureID;
	}
	,__setSamplerState: function(state) {
		openfl__$internal_stage3D_opengl_GLTextureBase.setSamplerState(this,this.__context.__renderSession,state);
	}
	,__class__: openfl_display3D_textures_TextureBase
});
var openfl_display3D_textures_CubeTexture = $hx_exports["openfl"]["display3D"]["textures"]["CubeTexture"] = function(context,size,format,optimizeForRenderToTexture,streamingLevels) {
	openfl_display3D_textures_TextureBase.call(this,context);
	this.__size = size;
	this.__optimizeForRenderToTexture = optimizeForRenderToTexture;
	this.__streamingLevels = streamingLevels;
	openfl__$internal_stage3D_opengl_GLCubeTexture.create(this,this.__context.__renderSession);
};
$hxClasses["openfl.display3D.textures.CubeTexture"] = openfl_display3D_textures_CubeTexture;
openfl_display3D_textures_CubeTexture.__name__ = ["openfl","display3D","textures","CubeTexture"];
openfl_display3D_textures_CubeTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_CubeTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	__size: null
	,__uploadedSides: null
	,uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) {
			async = false;
		}
		var _gthis = this;
		if(!async) {
			openfl__$internal_stage3D_opengl_GLCubeTexture.uploadCompressedTextureFromByteArray(this,this.__context.__renderSession,data,byteArrayOffset);
		} else {
			$hx_exports.haxe.Timer.delay(function() {
				openfl__$internal_stage3D_opengl_GLCubeTexture.uploadCompressedTextureFromByteArray(_gthis,_gthis.__context.__renderSession,data,byteArrayOffset);
				_gthis.dispatchEvent(new openfl_events_Event("textureReady"));
			},1);
		}
	}
	,uploadFromBitmapData: function(source,side,miplevel,generateMipmap) {
		if(generateMipmap == null) {
			generateMipmap = false;
		}
		if(miplevel == null) {
			miplevel = 0;
		}
		if(source == null) {
			return;
		}
		openfl__$internal_stage3D_opengl_GLCubeTexture.uploadFromBitmapData(this,this.__context.__renderSession,source,side,miplevel,generateMipmap);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,side,miplevel) {
		if(miplevel == null) {
			miplevel = 0;
		}
		openfl__$internal_stage3D_opengl_GLCubeTexture.uploadFromByteArray(this,this.__context.__renderSession,data,byteArrayOffset,side,miplevel);
	}
	,uploadFromTypedArray: function(data,side,miplevel) {
		if(miplevel == null) {
			miplevel = 0;
		}
		if(data == null) {
			return;
		}
		openfl__$internal_stage3D_opengl_GLCubeTexture.uploadFromTypedArray(this,this.__context.__renderSession,data,side,miplevel);
	}
	,__setSamplerState: function(state) {
		openfl__$internal_stage3D_opengl_GLCubeTexture.setSamplerState(this,this.__context.__renderSession,state);
	}
	,__class__: openfl_display3D_textures_CubeTexture
});
var openfl_display3D_textures_RectangleTexture = $hx_exports["openfl"]["display3D"]["textures"]["RectangleTexture"] = function(context,width,height,format,optimizeForRenderToTexture) {
	openfl_display3D_textures_TextureBase.call(this,context);
	this.__width = width;
	this.__height = height;
	this.__optimizeForRenderToTexture = optimizeForRenderToTexture;
	openfl__$internal_stage3D_opengl_GLRectangleTexture.create(this,this.__context.__renderSession);
};
$hxClasses["openfl.display3D.textures.RectangleTexture"] = openfl_display3D_textures_RectangleTexture;
openfl_display3D_textures_RectangleTexture.__name__ = ["openfl","display3D","textures","RectangleTexture"];
openfl_display3D_textures_RectangleTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_RectangleTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	uploadFromBitmapData: function(source) {
		openfl__$internal_stage3D_opengl_GLRectangleTexture.uploadFromBitmapData(this,this.__context.__renderSession,source);
	}
	,uploadFromByteArray: function(data,byteArrayOffset) {
		openfl__$internal_stage3D_opengl_GLRectangleTexture.uploadFromByteArray(this,this.__context.__renderSession,data,byteArrayOffset);
	}
	,uploadFromTypedArray: function(data) {
		openfl__$internal_stage3D_opengl_GLRectangleTexture.uploadFromTypedArray(this,this.__context.__renderSession,data);
	}
	,__setSamplerState: function(state) {
		openfl__$internal_stage3D_opengl_GLRectangleTexture.setSamplerState(this,this.__context.__renderSession,state);
	}
	,__class__: openfl_display3D_textures_RectangleTexture
});
var openfl_display3D_textures_Texture = $hx_exports["openfl"]["display3D"]["textures"]["Texture"] = function(context,width,height,format,optimizeForRenderToTexture,streamingLevels) {
	openfl_display3D_textures_TextureBase.call(this,context);
	this.__width = width;
	this.__height = height;
	this.__optimizeForRenderToTexture = optimizeForRenderToTexture;
	this.__streamingLevels = streamingLevels;
	openfl__$internal_stage3D_opengl_GLTexture.create(this,this.__context.__renderSession);
};
$hxClasses["openfl.display3D.textures.Texture"] = openfl_display3D_textures_Texture;
openfl_display3D_textures_Texture.__name__ = ["openfl","display3D","textures","Texture"];
openfl_display3D_textures_Texture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_Texture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) {
			async = false;
		}
		var _gthis = this;
		if(!async) {
			openfl__$internal_stage3D_opengl_GLTexture.uploadCompressedTextureFromByteArray(this,this.__context.__renderSession,data,byteArrayOffset);
		} else {
			$hx_exports.haxe.Timer.delay(function() {
				openfl__$internal_stage3D_opengl_GLTexture.uploadCompressedTextureFromByteArray(_gthis,_gthis.__context.__renderSession,data,byteArrayOffset);
				_gthis.dispatchEvent(new openfl_events_Event("textureReady"));
			},1);
		}
	}
	,uploadFromBitmapData: function(source,miplevel,generateMipmap) {
		if(generateMipmap == null) {
			generateMipmap = false;
		}
		if(miplevel == null) {
			miplevel = 0;
		}
		openfl__$internal_stage3D_opengl_GLTexture.uploadFromBitmapData(this,this.__context.__renderSession,source,miplevel,generateMipmap);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,miplevel) {
		if(miplevel == null) {
			miplevel = 0;
		}
		openfl__$internal_stage3D_opengl_GLTexture.uploadFromByteArray(this,this.__context.__renderSession,data,byteArrayOffset,miplevel);
	}
	,uploadFromTypedArray: function(data,miplevel) {
		if(miplevel == null) {
			miplevel = 0;
		}
		openfl__$internal_stage3D_opengl_GLTexture.uploadFromTypedArray(this,this.__context.__renderSession,data,miplevel);
	}
	,__setSamplerState: function(state) {
		openfl__$internal_stage3D_opengl_GLTexture.setSamplerState(this,this.__context.__renderSession,state);
	}
	,__class__: openfl_display3D_textures_Texture
});
var openfl_display3D_textures_VideoTexture = $hx_exports["openfl"]["display3D"]["textures"]["VideoTexture"] = function(context) {
	openfl_display3D_textures_TextureBase.call(this,context);
	openfl__$internal_stage3D_opengl_GLVideoTexture.create(this,this.__context.__renderSession);
};
$hxClasses["openfl.display3D.textures.VideoTexture"] = openfl_display3D_textures_VideoTexture;
openfl_display3D_textures_VideoTexture.__name__ = ["openfl","display3D","textures","VideoTexture"];
openfl_display3D_textures_VideoTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_VideoTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	videoHeight: null
	,videoWidth: null
	,__netStream: null
	,attachNetStream: function(netStream) {
		var _gthis = this;
		this.__netStream = netStream;
		if(this.__netStream.__video.readyState == 4) {
			$hx_exports.haxe.Timer.delay(function() {
				_gthis.__textureReady();
			},0);
		} else {
			this.__netStream.__video.addEventListener("canplay",function(_) {
				_gthis.__textureReady();
			},false);
		}
	}
	,__getTexture: function() {
		return openfl__$internal_stage3D_opengl_GLVideoTexture.getTexture(this,this.__context.__renderSession);
	}
	,__textureReady: function() {
		this.videoWidth = this.__netStream.__video.videoWidth;
		this.videoHeight = this.__netStream.__video.videoHeight;
		this.dispatchEvent(new openfl_events_Event("textureReady"));
	}
	,__class__: openfl_display3D_textures_VideoTexture
});
var openfl_errors_Error = $hx_exports["openfl"]["errors"]["Error"] = function(message,id) {
	if(id == null) {
		id = 0;
	}
	if(message == null) {
		message = "";
	}
	this.message = message;
	this.errorID = id;
	this.name = "Error";
};
$hxClasses["openfl.errors.Error"] = openfl_errors_Error;
openfl_errors_Error.__name__ = ["openfl","errors","Error"];
openfl_errors_Error.prototype = {
	errorID: null
	,message: null
	,name: null
	,getStackTrace: function() {
		return $hx_exports.haxe.CallStack.toString($hx_exports.haxe.CallStack.exceptionStack());
	}
	,toString: function() {
		if(this.message != null) {
			return this.message;
		} else {
			return "Error";
		}
	}
	,__class__: openfl_errors_Error
};
var openfl_errors_ArgumentError = $hx_exports["openfl"]["errors"]["ArgumentError"] = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message);
	this.name = "ArgumentError";
};
$hxClasses["openfl.errors.ArgumentError"] = openfl_errors_ArgumentError;
openfl_errors_ArgumentError.__name__ = ["openfl","errors","ArgumentError"];
openfl_errors_ArgumentError.__super__ = openfl_errors_Error;
openfl_errors_ArgumentError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_ArgumentError
});
var openfl_errors_IOError = $hx_exports["openfl"]["errors"]["IOError"] = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message);
	this.name = "IOError";
};
$hxClasses["openfl.errors.IOError"] = openfl_errors_IOError;
openfl_errors_IOError.__name__ = ["openfl","errors","IOError"];
openfl_errors_IOError.__super__ = openfl_errors_Error;
openfl_errors_IOError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_IOError
});
var openfl_errors_EOFError = $hx_exports["openfl"]["errors"]["EOFError"] = function() {
	openfl_errors_IOError.call(this,"End of file was encountered");
	this.name = "EOFError";
	this.errorID = 2030;
};
$hxClasses["openfl.errors.EOFError"] = openfl_errors_EOFError;
openfl_errors_EOFError.__name__ = ["openfl","errors","EOFError"];
openfl_errors_EOFError.__super__ = openfl_errors_IOError;
openfl_errors_EOFError.prototype = $extend(openfl_errors_IOError.prototype,{
	__class__: openfl_errors_EOFError
});
var openfl_errors_IllegalOperationError = $hx_exports["openfl"]["errors"]["IllegalOperationError"] = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message,0);
	this.name = "IllegalOperationError";
};
$hxClasses["openfl.errors.IllegalOperationError"] = openfl_errors_IllegalOperationError;
openfl_errors_IllegalOperationError.__name__ = ["openfl","errors","IllegalOperationError"];
openfl_errors_IllegalOperationError.__super__ = openfl_errors_Error;
openfl_errors_IllegalOperationError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_IllegalOperationError
});
var openfl_errors_RangeError = $hx_exports["openfl"]["errors"]["RangeError"] = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message,0);
	this.name = "RangeError";
};
$hxClasses["openfl.errors.RangeError"] = openfl_errors_RangeError;
openfl_errors_RangeError.__name__ = ["openfl","errors","RangeError"];
openfl_errors_RangeError.__super__ = openfl_errors_Error;
openfl_errors_RangeError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_RangeError
});
var openfl_errors_SecurityError = $hx_exports["openfl"]["errors"]["SecurityError"] = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message,0);
	this.name = "SecurityError";
};
$hxClasses["openfl.errors.SecurityError"] = openfl_errors_SecurityError;
openfl_errors_SecurityError.__name__ = ["openfl","errors","SecurityError"];
openfl_errors_SecurityError.__super__ = openfl_errors_Error;
openfl_errors_SecurityError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_SecurityError
});
var openfl_errors_TypeError = $hx_exports["openfl"]["errors"]["TypeError"] = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message,0);
	this.name = "TypeError";
};
$hxClasses["openfl.errors.TypeError"] = openfl_errors_TypeError;
openfl_errors_TypeError.__name__ = ["openfl","errors","TypeError"];
openfl_errors_TypeError.__super__ = openfl_errors_Error;
openfl_errors_TypeError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_TypeError
});
var openfl_events_Event = $hx_exports["openfl"]["events"]["Event"] = function(type,bubbles,cancelable) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	this.type = type;
	this.bubbles = bubbles;
	this.cancelable = cancelable;
	this.eventPhase = 2;
};
$hxClasses["openfl.events.Event"] = openfl_events_Event;
openfl_events_Event.__name__ = ["openfl","events","Event"];
openfl_events_Event.prototype = {
	bubbles: null
	,cancelable: null
	,currentTarget: null
	,eventPhase: null
	,target: null
	,type: null
	,__isCanceled: null
	,__isCanceledNow: null
	,__preventDefault: null
	,clone: function() {
		var event = new openfl_events_Event(this.type,this.bubbles,this.cancelable);
		event.eventPhase = this.eventPhase;
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		return event;
	}
	,formatToString: function(className,p1,p2,p3,p4,p5) {
		var parameters = [];
		if(p1 != null) {
			parameters.push(p1);
		}
		if(p2 != null) {
			parameters.push(p2);
		}
		if(p3 != null) {
			parameters.push(p3);
		}
		if(p4 != null) {
			parameters.push(p4);
		}
		if(p5 != null) {
			parameters.push(p5);
		}
		return Reflect.callMethod(this,$bind(this,this.__formatToString),[className,parameters]);
	}
	,isDefaultPrevented: function() {
		return this.__preventDefault;
	}
	,preventDefault: function() {
		if(this.cancelable) {
			this.__preventDefault = true;
		}
	}
	,stopImmediatePropagation: function() {
		this.__isCanceled = true;
		this.__isCanceledNow = true;
	}
	,stopPropagation: function() {
		this.__isCanceled = true;
	}
	,toString: function() {
		return this.__formatToString("Event",["type","bubbles","cancelable"]);
	}
	,__formatToString: function(className,parameters) {
		var output = "[" + className;
		var arg = null;
		var _g = 0;
		while(_g < parameters.length) {
			var param = parameters[_g];
			++_g;
			arg = Reflect.field(this,param);
			if(typeof(arg) == "string") {
				output += " " + param + "=\"" + Std.string(arg) + "\"";
			} else {
				output += " " + param + "=" + Std.string(arg);
			}
		}
		output += "]";
		return output;
	}
	,__class__: openfl_events_Event
};
var openfl_events_AccelerometerEvent = $hx_exports["openfl"]["events"]["AccelerometerEvent"] = function(type,bubbles,cancelable,timestamp,accelerationX,accelerationY,accelerationZ) {
	if(accelerationZ == null) {
		accelerationZ = 0;
	}
	if(accelerationY == null) {
		accelerationY = 0;
	}
	if(accelerationX == null) {
		accelerationX = 0;
	}
	if(timestamp == null) {
		timestamp = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.timestamp = timestamp;
	this.accelerationX = accelerationX;
	this.accelerationY = accelerationY;
	this.accelerationZ = accelerationZ;
};
$hxClasses["openfl.events.AccelerometerEvent"] = openfl_events_AccelerometerEvent;
openfl_events_AccelerometerEvent.__name__ = ["openfl","events","AccelerometerEvent"];
openfl_events_AccelerometerEvent.__super__ = openfl_events_Event;
openfl_events_AccelerometerEvent.prototype = $extend(openfl_events_Event.prototype,{
	accelerationX: null
	,accelerationY: null
	,accelerationZ: null
	,timestamp: null
	,clone: function() {
		var event = new openfl_events_AccelerometerEvent(this.type,this.bubbles,this.cancelable,this.timestamp,this.accelerationX,this.accelerationY,this.accelerationZ);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("AccelerometerEvent",["type","bubbles","cancelable","timestamp","accelerationX","accelerationY","accelerationZ"]);
	}
	,__class__: openfl_events_AccelerometerEvent
});
var openfl_events_ActivityEvent = $hx_exports["openfl"]["events"]["ActivityEvent"] = function(type,bubbles,cancelable,activating) {
	if(activating == null) {
		activating = false;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.activating = activating;
};
$hxClasses["openfl.events.ActivityEvent"] = openfl_events_ActivityEvent;
openfl_events_ActivityEvent.__name__ = ["openfl","events","ActivityEvent"];
openfl_events_ActivityEvent.__super__ = openfl_events_Event;
openfl_events_ActivityEvent.prototype = $extend(openfl_events_Event.prototype,{
	activating: null
	,clone: function() {
		var event = new openfl_events_ActivityEvent(this.type,this.bubbles,this.cancelable,this.activating);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ActivityEvent",["type","bubbles","cancelable","activating"]);
	}
	,__class__: openfl_events_ActivityEvent
});
var openfl_events_TextEvent = $hx_exports["openfl"]["events"]["TextEvent"] = function(type,bubbles,cancelable,text) {
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.text = text;
};
$hxClasses["openfl.events.TextEvent"] = openfl_events_TextEvent;
openfl_events_TextEvent.__name__ = ["openfl","events","TextEvent"];
openfl_events_TextEvent.__super__ = openfl_events_Event;
openfl_events_TextEvent.prototype = $extend(openfl_events_Event.prototype,{
	text: null
	,clone: function() {
		var event = new openfl_events_TextEvent(this.type,this.bubbles,this.cancelable,this.text);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("TextEvent",["type","bubbles","cancelable","text"]);
	}
	,__class__: openfl_events_TextEvent
});
var openfl_events_ErrorEvent = $hx_exports["openfl"]["events"]["ErrorEvent"] = function(type,bubbles,cancelable,text,id) {
	if(id == null) {
		id = 0;
	}
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_TextEvent.call(this,type,bubbles,cancelable,text);
	this.errorID = id;
};
$hxClasses["openfl.events.ErrorEvent"] = openfl_events_ErrorEvent;
openfl_events_ErrorEvent.__name__ = ["openfl","events","ErrorEvent"];
openfl_events_ErrorEvent.__super__ = openfl_events_TextEvent;
openfl_events_ErrorEvent.prototype = $extend(openfl_events_TextEvent.prototype,{
	errorID: null
	,clone: function() {
		var event = new openfl_events_ErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ErrorEvent",["type","bubbles","cancelable","text","errorID"]);
	}
	,__class__: openfl_events_ErrorEvent
});
var openfl_events_AsyncErrorEvent = $hx_exports["openfl"]["events"]["AsyncErrorEvent"] = function(type,bubbles,cancelable,text,error) {
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable);
	this.text = text;
	this.error = error;
};
$hxClasses["openfl.events.AsyncErrorEvent"] = openfl_events_AsyncErrorEvent;
openfl_events_AsyncErrorEvent.__name__ = ["openfl","events","AsyncErrorEvent"];
openfl_events_AsyncErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_AsyncErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	error: null
	,clone: function() {
		var event = new openfl_events_AsyncErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.error);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("AsyncErrorEvent",["type","bubbles","cancelable","text","error"]);
	}
	,__class__: openfl_events_AsyncErrorEvent
});
var openfl_events_ContextMenuEvent = $hx_exports["openfl"]["events"]["ContextMenuEvent"] = function(type,bubbles,cancelable,mouseTarget,contextMenuOwner) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.mouseTarget = mouseTarget;
	this.contextMenuOwner = contextMenuOwner;
};
$hxClasses["openfl.events.ContextMenuEvent"] = openfl_events_ContextMenuEvent;
openfl_events_ContextMenuEvent.__name__ = ["openfl","events","ContextMenuEvent"];
openfl_events_ContextMenuEvent.__super__ = openfl_events_Event;
openfl_events_ContextMenuEvent.prototype = $extend(openfl_events_Event.prototype,{
	contextMenuOwner: null
	,mouseTarget: null
	,clone: function() {
		var event = new openfl_events_ContextMenuEvent(this.type,this.bubbles,this.cancelable,this.mouseTarget,this.contextMenuOwner);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ContextMenuEvent",["type","bubbles","cancelable","mouseTarget","contextMenuOwner"]);
	}
	,__class__: openfl_events_ContextMenuEvent
});
var openfl_events_DataEvent = $hx_exports["openfl"]["events"]["DataEvent"] = function(type,bubbles,cancelable,data) {
	if(data == null) {
		data = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_TextEvent.call(this,type,bubbles,cancelable);
	this.data = data;
};
$hxClasses["openfl.events.DataEvent"] = openfl_events_DataEvent;
openfl_events_DataEvent.__name__ = ["openfl","events","DataEvent"];
openfl_events_DataEvent.__super__ = openfl_events_TextEvent;
openfl_events_DataEvent.prototype = $extend(openfl_events_TextEvent.prototype,{
	data: null
	,clone: function() {
		var event = new openfl_events_DataEvent(this.type,this.bubbles,this.cancelable,this.data);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("DataEvent",["type","bubbles","cancelable","data"]);
	}
	,__class__: openfl_events_DataEvent
});
var openfl_events__$EventDispatcher_DispatchIterator = function(list) {
	this.list = list;
	this.index = list.length;
};
$hxClasses["openfl.events._EventDispatcher.DispatchIterator"] = openfl_events__$EventDispatcher_DispatchIterator;
openfl_events__$EventDispatcher_DispatchIterator.__name__ = ["openfl","events","_EventDispatcher","DispatchIterator"];
openfl_events__$EventDispatcher_DispatchIterator.prototype = {
	active: null
	,index: null
	,isCopy: null
	,list: null
	,copy: function() {
		if(!this.isCopy) {
			this.list = this.list.slice();
			this.isCopy = true;
		}
	}
	,hasNext: function() {
		if(this.index < this.list.length) {
			return true;
		} else {
			this.active = false;
			return false;
		}
	}
	,next: function() {
		return this.list[this.index++];
	}
	,remove: function(listener,listIndex) {
		if(this.active) {
			if(!this.isCopy) {
				if(listIndex < this.index) {
					this.index--;
				}
			} else {
				var _g1 = this.index;
				var _g = this.list.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(this.list[i] == listener) {
						this.list.splice(i,1);
						break;
					}
				}
			}
		}
	}
	,reset: function(list) {
		this.list = list;
		this.active = true;
		this.isCopy = false;
		this.index = 0;
	}
	,__class__: openfl_events__$EventDispatcher_DispatchIterator
};
var openfl_events__$EventDispatcher_Listener = $hx_exports["openfl"]["events"]["_EventDispatcher"]["Listener"] = function(callback,useCapture,priority) {
	this.callback = callback;
	this.useCapture = useCapture;
	this.priority = priority;
};
$hxClasses["openfl.events._EventDispatcher.Listener"] = openfl_events__$EventDispatcher_Listener;
openfl_events__$EventDispatcher_Listener.__name__ = ["openfl","events","_EventDispatcher","Listener"];
openfl_events__$EventDispatcher_Listener.prototype = {
	callback: null
	,priority: null
	,useCapture: null
	,match: function(callback,useCapture) {
		if(Reflect.compareMethods(this.callback,callback)) {
			return this.useCapture == useCapture;
		} else {
			return false;
		}
	}
	,__class__: openfl_events__$EventDispatcher_Listener
};
var openfl_events_FocusEvent = $hx_exports["openfl"]["events"]["FocusEvent"] = function(type,bubbles,cancelable,relatedObject,shiftKey,keyCode) {
	if(keyCode == null) {
		keyCode = 0;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.keyCode = keyCode;
	this.shiftKey = shiftKey;
	this.relatedObject = relatedObject;
};
$hxClasses["openfl.events.FocusEvent"] = openfl_events_FocusEvent;
openfl_events_FocusEvent.__name__ = ["openfl","events","FocusEvent"];
openfl_events_FocusEvent.__super__ = openfl_events_Event;
openfl_events_FocusEvent.prototype = $extend(openfl_events_Event.prototype,{
	keyCode: null
	,relatedObject: null
	,shiftKey: null
	,clone: function() {
		var event = new openfl_events_FocusEvent(this.type,this.bubbles,this.cancelable,this.relatedObject,this.shiftKey,this.keyCode);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("FocusEvent",["type","bubbles","cancelable","relatedObject","shiftKey","keyCode"]);
	}
	,__class__: openfl_events_FocusEvent
});
var openfl_events_FullScreenEvent = $hx_exports["openfl"]["events"]["FullScreenEvent"] = function(type,bubbles,cancelable,fullScreen,interactive) {
	if(interactive == null) {
		interactive = false;
	}
	if(fullScreen == null) {
		fullScreen = false;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_ActivityEvent.call(this,type,bubbles,cancelable);
	this.fullScreen = fullScreen;
	this.interactive = interactive;
};
$hxClasses["openfl.events.FullScreenEvent"] = openfl_events_FullScreenEvent;
openfl_events_FullScreenEvent.__name__ = ["openfl","events","FullScreenEvent"];
openfl_events_FullScreenEvent.__super__ = openfl_events_ActivityEvent;
openfl_events_FullScreenEvent.prototype = $extend(openfl_events_ActivityEvent.prototype,{
	fullScreen: null
	,interactive: null
	,clone: function() {
		var event = new openfl_events_FullScreenEvent(this.type,this.bubbles,this.cancelable,this.fullScreen,this.interactive);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("FullscreenEvent",["type","bubbles","cancelable","fullscreen","interactive"]);
	}
	,__class__: openfl_events_FullScreenEvent
});
var openfl_events_GameInputEvent = $hx_exports["openfl"]["events"]["GameInputEvent"] = function(type,bubbles,cancelable,device) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.device = device;
};
$hxClasses["openfl.events.GameInputEvent"] = openfl_events_GameInputEvent;
openfl_events_GameInputEvent.__name__ = ["openfl","events","GameInputEvent"];
openfl_events_GameInputEvent.__super__ = openfl_events_Event;
openfl_events_GameInputEvent.prototype = $extend(openfl_events_Event.prototype,{
	device: null
	,clone: function() {
		var event = new openfl_events_GameInputEvent(this.type,this.bubbles,this.cancelable,this.device);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("GameInputEvent",["type","bubbles","cancelable","device"]);
	}
	,__class__: openfl_events_GameInputEvent
});
var openfl_events_HTTPStatusEvent = $hx_exports["openfl"]["events"]["HTTPStatusEvent"] = function(type,bubbles,cancelable,status,redirected) {
	if(redirected == null) {
		redirected = false;
	}
	if(status == null) {
		status = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	this.status = status;
	this.redirected = redirected;
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.HTTPStatusEvent"] = openfl_events_HTTPStatusEvent;
openfl_events_HTTPStatusEvent.__name__ = ["openfl","events","HTTPStatusEvent"];
openfl_events_HTTPStatusEvent.__super__ = openfl_events_Event;
openfl_events_HTTPStatusEvent.prototype = $extend(openfl_events_Event.prototype,{
	redirected: null
	,responseHeaders: null
	,responseURL: null
	,status: null
	,clone: function() {
		var event = new openfl_events_HTTPStatusEvent(this.type,this.bubbles,null,this.status,this.redirected);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("HTTPStatusEvent",["type","bubbles","cancelable","status","redirected"]);
	}
	,__class__: openfl_events_HTTPStatusEvent
});
var openfl_events_IOErrorEvent = $hx_exports["openfl"]["events"]["IOErrorEvent"] = function(type,bubbles,cancelable,text,id) {
	if(id == null) {
		id = 0;
	}
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.IOErrorEvent"] = openfl_events_IOErrorEvent;
openfl_events_IOErrorEvent.__name__ = ["openfl","events","IOErrorEvent"];
openfl_events_IOErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_IOErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	clone: function() {
		var event = new openfl_events_IOErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("IOErrorEvent",["type","bubbles","cancelable","text","errorID"]);
	}
	,__class__: openfl_events_IOErrorEvent
});
var openfl_events_KeyboardEvent = $hx_exports["openfl"]["events"]["KeyboardEvent"] = function(type,bubbles,cancelable,charCodeValue,keyCodeValue,keyLocationValue,ctrlKeyValue,altKeyValue,shiftKeyValue,controlKeyValue,commandKeyValue) {
	if(commandKeyValue == null) {
		commandKeyValue = false;
	}
	if(controlKeyValue == null) {
		controlKeyValue = false;
	}
	if(shiftKeyValue == null) {
		shiftKeyValue = false;
	}
	if(altKeyValue == null) {
		altKeyValue = false;
	}
	if(ctrlKeyValue == null) {
		ctrlKeyValue = false;
	}
	if(keyCodeValue == null) {
		keyCodeValue = 0;
	}
	if(charCodeValue == null) {
		charCodeValue = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.charCode = charCodeValue;
	this.keyCode = keyCodeValue;
	this.keyLocation = keyLocationValue != null ? keyLocationValue : 0;
	this.ctrlKey = ctrlKeyValue;
	this.altKey = altKeyValue;
	this.shiftKey = shiftKeyValue;
	this.controlKey = controlKeyValue;
	this.commandKey = commandKeyValue;
};
$hxClasses["openfl.events.KeyboardEvent"] = openfl_events_KeyboardEvent;
openfl_events_KeyboardEvent.__name__ = ["openfl","events","KeyboardEvent"];
openfl_events_KeyboardEvent.__super__ = openfl_events_Event;
openfl_events_KeyboardEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,charCode: null
	,ctrlKey: null
	,commandKey: null
	,controlKey: null
	,keyCode: null
	,keyLocation: null
	,shiftKey: null
	,clone: function() {
		var event = new openfl_events_KeyboardEvent(this.type,this.bubbles,this.cancelable,this.charCode,this.keyCode,this.keyLocation,this.ctrlKey,this.altKey,this.shiftKey,this.controlKey,this.commandKey);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("KeyboardEvent",["type","bubbles","cancelable","charCode","keyCode","keyLocation","ctrlKey","altKey","shiftKey"]);
	}
	,__class__: openfl_events_KeyboardEvent
});
var openfl_events_MouseEvent = $hx_exports["openfl"]["events"]["MouseEvent"] = function(type,bubbles,cancelable,localX,localY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta,commandKey,clickCount) {
	if(clickCount == null) {
		clickCount = 0;
	}
	if(commandKey == null) {
		commandKey = false;
	}
	if(delta == null) {
		delta = 0;
	}
	if(buttonDown == null) {
		buttonDown = false;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(altKey == null) {
		altKey = false;
	}
	if(ctrlKey == null) {
		ctrlKey = false;
	}
	if(localY == null) {
		localY = 0;
	}
	if(localX == null) {
		localX = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.shiftKey = shiftKey;
	this.altKey = altKey;
	this.ctrlKey = ctrlKey;
	this.bubbles = bubbles;
	this.relatedObject = relatedObject;
	this.delta = delta;
	this.localX = localX;
	this.localY = localY;
	this.buttonDown = buttonDown;
	this.commandKey = commandKey;
	this.clickCount = clickCount;
	this.isRelatedObjectInaccessible = false;
	this.stageX = NaN;
	this.stageY = NaN;
};
$hxClasses["openfl.events.MouseEvent"] = openfl_events_MouseEvent;
openfl_events_MouseEvent.__name__ = ["openfl","events","MouseEvent"];
openfl_events_MouseEvent.__altKey = null;
openfl_events_MouseEvent.__buttonDown = null;
openfl_events_MouseEvent.__commandKey = null;
openfl_events_MouseEvent.__ctrlKey = null;
openfl_events_MouseEvent.__shiftKey = null;
openfl_events_MouseEvent.__create = function(type,button,stageX,stageY,local,target,delta) {
	if(delta == null) {
		delta = 0;
	}
	var event = new openfl_events_MouseEvent(type,true,false,local.x,local.y,null,openfl_events_MouseEvent.__ctrlKey,openfl_events_MouseEvent.__altKey,openfl_events_MouseEvent.__shiftKey,openfl_events_MouseEvent.__buttonDown,delta,openfl_events_MouseEvent.__commandKey);
	event.stageX = stageX;
	event.stageY = stageY;
	event.target = target;
	return event;
};
openfl_events_MouseEvent.__super__ = openfl_events_Event;
openfl_events_MouseEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,buttonDown: null
	,commandKey: null
	,clickCount: null
	,ctrlKey: null
	,delta: null
	,isRelatedObjectInaccessible: null
	,localX: null
	,localY: null
	,relatedObject: null
	,shiftKey: null
	,stageX: null
	,stageY: null
	,clone: function() {
		var event = new openfl_events_MouseEvent(this.type,this.bubbles,this.cancelable,this.localX,this.localY,this.relatedObject,this.ctrlKey,this.altKey,this.shiftKey,this.buttonDown,this.delta,this.commandKey,this.clickCount);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("MouseEvent",["type","bubbles","cancelable","localX","localY","relatedObject","ctrlKey","altKey","shiftKey","buttonDown","delta"]);
	}
	,updateAfterEvent: function() {
	}
	,__class__: openfl_events_MouseEvent
});
var openfl_events_NetStatusEvent = $hx_exports["openfl"]["events"]["NetStatusEvent"] = function(type,bubbles,cancelable,info) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	this.info = info;
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.NetStatusEvent"] = openfl_events_NetStatusEvent;
openfl_events_NetStatusEvent.__name__ = ["openfl","events","NetStatusEvent"];
openfl_events_NetStatusEvent.__super__ = openfl_events_Event;
openfl_events_NetStatusEvent.prototype = $extend(openfl_events_Event.prototype,{
	info: null
	,clone: function() {
		var event = new openfl_events_NetStatusEvent(this.type,this.bubbles,this.cancelable,this.info);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("NetStatusEvent",["type","bubbles","cancelable","info"]);
	}
	,__class__: openfl_events_NetStatusEvent
});
var openfl_events_ProgressEvent = $hx_exports["openfl"]["events"]["ProgressEvent"] = function(type,bubbles,cancelable,bytesLoaded,bytesTotal) {
	if(bytesTotal == null) {
		bytesTotal = 0;
	}
	if(bytesLoaded == null) {
		bytesLoaded = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.bytesLoaded = bytesLoaded;
	this.bytesTotal = bytesTotal;
};
$hxClasses["openfl.events.ProgressEvent"] = openfl_events_ProgressEvent;
openfl_events_ProgressEvent.__name__ = ["openfl","events","ProgressEvent"];
openfl_events_ProgressEvent.__super__ = openfl_events_Event;
openfl_events_ProgressEvent.prototype = $extend(openfl_events_Event.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,clone: function() {
		var event = new openfl_events_ProgressEvent(this.type,this.bubbles,this.cancelable,this.bytesLoaded,this.bytesTotal);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ProgressEvent",["type","bubbles","cancelable","bytesLoaded","bytesTotal"]);
	}
	,__class__: openfl_events_ProgressEvent
});
var openfl_events_SampleDataEvent = $hx_exports["openfl"]["events"]["SampleDataEvent"] = function(type,bubbles,cancelable) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	var this1 = new openfl_utils_ByteArrayData(0);
	this.data = this1;
	this.data.set_endian(1);
	this.position = 0.0;
};
$hxClasses["openfl.events.SampleDataEvent"] = openfl_events_SampleDataEvent;
openfl_events_SampleDataEvent.__name__ = ["openfl","events","SampleDataEvent"];
openfl_events_SampleDataEvent.__super__ = openfl_events_Event;
openfl_events_SampleDataEvent.prototype = $extend(openfl_events_Event.prototype,{
	data: null
	,position: null
	,clone: function() {
		var event = new openfl_events_SampleDataEvent(this.type,this.bubbles,this.cancelable);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("SampleDataEvent",["type","bubbles","cancelable"]);
	}
	,__class__: openfl_events_SampleDataEvent
});
var openfl_events_SecurityErrorEvent = $hx_exports["openfl"]["events"]["SecurityErrorEvent"] = function(type,bubbles,cancelable,text,id) {
	if(id == null) {
		id = 0;
	}
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.SecurityErrorEvent"] = openfl_events_SecurityErrorEvent;
openfl_events_SecurityErrorEvent.__name__ = ["openfl","events","SecurityErrorEvent"];
openfl_events_SecurityErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_SecurityErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	clone: function() {
		var event = new openfl_events_SecurityErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("SecurityErrorEvent",["type","bubbles","cancelable","text","errorID"]);
	}
	,__class__: openfl_events_SecurityErrorEvent
});
var openfl_events_TimerEvent = $hx_exports["openfl"]["events"]["TimerEvent"] = function(type,bubbles,cancelable) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.TimerEvent"] = openfl_events_TimerEvent;
openfl_events_TimerEvent.__name__ = ["openfl","events","TimerEvent"];
openfl_events_TimerEvent.__super__ = openfl_events_Event;
openfl_events_TimerEvent.prototype = $extend(openfl_events_Event.prototype,{
	clone: function() {
		var event = new openfl_events_TimerEvent(this.type,this.bubbles,this.cancelable);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("TimerEvent",["type","bubbles","cancelable"]);
	}
	,updateAfterEvent: function() {
	}
	,__class__: openfl_events_TimerEvent
});
var openfl_events_TouchEvent = $hx_exports["openfl"]["events"]["TouchEvent"] = function(type,bubbles,cancelable,touchPointID,isPrimaryTouchPoint,localX,localY,sizeX,sizeY,pressure,relatedObject,ctrlKey,altKey,shiftKey,commandKey,controlKey,timestamp,touchIntent,samples,isTouchPointCanceled) {
	if(isTouchPointCanceled == null) {
		isTouchPointCanceled = false;
	}
	if(timestamp == null) {
		timestamp = 0;
	}
	if(controlKey == null) {
		controlKey = false;
	}
	if(commandKey == null) {
		commandKey = false;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(altKey == null) {
		altKey = false;
	}
	if(ctrlKey == null) {
		ctrlKey = false;
	}
	if(pressure == null) {
		pressure = 0;
	}
	if(sizeY == null) {
		sizeY = 0;
	}
	if(sizeX == null) {
		sizeX = 0;
	}
	if(localY == null) {
		localY = 0;
	}
	if(localX == null) {
		localX = 0;
	}
	if(isPrimaryTouchPoint == null) {
		isPrimaryTouchPoint = false;
	}
	if(touchPointID == null) {
		touchPointID = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.touchPointID = touchPointID;
	this.isPrimaryTouchPoint = isPrimaryTouchPoint;
	this.localX = localX;
	this.localY = localY;
	this.sizeX = sizeX;
	this.sizeY = sizeY;
	this.pressure = pressure;
	this.relatedObject = relatedObject;
	this.ctrlKey = ctrlKey;
	this.altKey = altKey;
	this.shiftKey = shiftKey;
	this.commandKey = commandKey;
	this.controlKey = controlKey;
	this.stageX = NaN;
	this.stageY = NaN;
};
$hxClasses["openfl.events.TouchEvent"] = openfl_events_TouchEvent;
openfl_events_TouchEvent.__name__ = ["openfl","events","TouchEvent"];
openfl_events_TouchEvent.__create = function(type,touch,stageX,stageY,local,target) {
	var evt = new openfl_events_TouchEvent(type,true,false,0,true,local.x,local.y,1,1,1);
	evt.stageX = stageX;
	evt.stageY = stageY;
	evt.target = target;
	return evt;
};
openfl_events_TouchEvent.__super__ = openfl_events_Event;
openfl_events_TouchEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,commandKey: null
	,controlKey: null
	,ctrlKey: null
	,delta: null
	,isPrimaryTouchPoint: null
	,localX: null
	,localY: null
	,pressure: null
	,relatedObject: null
	,shiftKey: null
	,sizeX: null
	,sizeY: null
	,stageX: null
	,stageY: null
	,touchPointID: null
	,clone: function() {
		var event = new openfl_events_TouchEvent(this.type,this.bubbles,this.cancelable,this.touchPointID,this.isPrimaryTouchPoint,this.localX,this.localY,this.sizeX,this.sizeY,this.pressure,this.relatedObject,this.ctrlKey,this.altKey,this.shiftKey,this.commandKey,this.controlKey);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("TouchEvent",["type","bubbles","cancelable","touchPointID","isPrimaryTouchPoint","localX","localY","sizeX","sizeY","pressure","relatedObject","ctrlKey","altKey","shiftKey","commandKey","controlKey"]);
	}
	,updateAfterEvent: function() {
	}
	,__class__: openfl_events_TouchEvent
});
var openfl_events_UncaughtErrorEvent = $hx_exports["openfl"]["events"]["UncaughtErrorEvent"] = function(type,bubbles,cancelable,error) {
	if(cancelable == null) {
		cancelable = true;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable);
	this.error = error;
};
$hxClasses["openfl.events.UncaughtErrorEvent"] = openfl_events_UncaughtErrorEvent;
openfl_events_UncaughtErrorEvent.__name__ = ["openfl","events","UncaughtErrorEvent"];
openfl_events_UncaughtErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_UncaughtErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	error: null
	,clone: function() {
		var event = new openfl_events_UncaughtErrorEvent(this.type,this.bubbles,this.cancelable,this.error);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("UncaughtErrorEvent",["type","bubbles","cancelable","error"]);
	}
	,__class__: openfl_events_UncaughtErrorEvent
});
var openfl_events_UncaughtErrorEvents = $hx_exports["openfl"]["events"]["UncaughtErrorEvents"] = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.events.UncaughtErrorEvents"] = openfl_events_UncaughtErrorEvents;
openfl_events_UncaughtErrorEvents.__name__ = ["openfl","events","UncaughtErrorEvents"];
openfl_events_UncaughtErrorEvents.__super__ = openfl_events_EventDispatcher;
openfl_events_UncaughtErrorEvents.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_events_UncaughtErrorEvents
});
var openfl_external_ExternalInterface = $hx_exports["openfl"]["external"]["ExternalInterface"] = function() { };
$hxClasses["openfl.external.ExternalInterface"] = openfl_external_ExternalInterface;
openfl_external_ExternalInterface.__name__ = ["openfl","external","ExternalInterface"];
openfl_external_ExternalInterface.objectID = null;
openfl_external_ExternalInterface.addCallback = function(functionName,closure) {
	if(openfl__$internal_Lib.application.get_window().backend.element != null) {
		openfl__$internal_Lib.application.get_window().backend.element[functionName] = closure;
	}
};
openfl_external_ExternalInterface.call = function(functionName,p1,p2,p3,p4,p5) {
	var callResponse = null;
	if(!new $hx_exports.EReg("^\\(.+\\)$","").match(functionName)) {
		var thisArg = functionName.split(".").slice(0,-1).join(".");
		if(thisArg.length > 0) {
			functionName += ".bind(" + thisArg + ")";
		}
	}
	var fn;
	try {
		fn = js_Lib["eval"](functionName);
	} catch( e ) {
		return null;
	}
	if(ValueType.TFunction != Type["typeof"](fn)) {
		return null;
	}
	if(p1 == null) {
		callResponse = fn();
	} else if(p2 == null) {
		callResponse = fn(p1);
	} else if(p3 == null) {
		callResponse = fn(p1,p2);
	} else if(p4 == null) {
		callResponse = fn(p1,p2,p3);
	} else if(p5 == null) {
		callResponse = fn(p1,p2,p3,p4);
	} else {
		callResponse = fn(p1,p2,p3,p4,p5);
	}
	return callResponse;
};
var openfl_filters_BitmapFilter = $hx_exports["openfl"]["filters"]["BitmapFilter"] = function() {
	this.__bottomExtension = 0;
	this.__leftExtension = 0;
	this.__needSecondBitmapData = true;
	this.__numShaderPasses = 0;
	this.__preserveObject = false;
	this.__rightExtension = 0;
	this.__topExtension = 0;
};
$hxClasses["openfl.filters.BitmapFilter"] = openfl_filters_BitmapFilter;
openfl_filters_BitmapFilter.__name__ = ["openfl","filters","BitmapFilter"];
openfl_filters_BitmapFilter.prototype = {
	__bottomExtension: null
	,__leftExtension: null
	,__needSecondBitmapData: null
	,__numShaderPasses: null
	,__preserveObject: null
	,__renderDirty: null
	,__rightExtension: null
	,__topExtension: null
	,clone: function() {
		return new openfl_filters_BitmapFilter();
	}
	,__applyFilter: function(bitmapData,sourceBitmapData,sourceRect,destPoint) {
		return sourceBitmapData;
	}
	,__initShader: function(renderSession,pass) {
		return renderSession.shaderManager.defaultShader;
	}
	,__class__: openfl_filters_BitmapFilter
};
var openfl_filters__$BitmapFilterType_BitmapFilterType_$Impl_$ = $hx_exports["openfl"]["filters"]["BitmapFilterType"] = {};
$hxClasses["openfl.filters._BitmapFilterType.BitmapFilterType_Impl_"] = openfl_filters__$BitmapFilterType_BitmapFilterType_$Impl_$;
openfl_filters__$BitmapFilterType_BitmapFilterType_$Impl_$.__name__ = ["openfl","filters","_BitmapFilterType","BitmapFilterType_Impl_"];
openfl_filters__$BitmapFilterType_BitmapFilterType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "full":
		return 0;
	case "inner":
		return 1;
	case "outer":
		return 2;
	default:
		return null;
	}
};
openfl_filters__$BitmapFilterType_BitmapFilterType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "full";
	case 1:
		return "inner";
	case 2:
		return "outer";
	default:
		return null;
	}
};
var openfl_filters_BlurFilter = $hx_exports["openfl"]["filters"]["BlurFilter"] = function(blurX,blurY,quality) {
	if(quality == null) {
		quality = 1;
	}
	if(blurY == null) {
		blurY = 4;
	}
	if(blurX == null) {
		blurX = 4;
	}
	openfl_filters_BitmapFilter.call(this);
	this.__blurX = blurX;
	this.__blurY = blurY;
	this.__quality = quality;
	this.__needSecondBitmapData = true;
	this.__preserveObject = false;
};
$hxClasses["openfl.filters.BlurFilter"] = openfl_filters_BlurFilter;
openfl_filters_BlurFilter.__name__ = ["openfl","filters","BlurFilter"];
openfl_filters_BlurFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_BlurFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	__blurX: null
	,__blurY: null
	,__horizontalPasses: null
	,__quality: null
	,__verticalPasses: null
	,clone: function() {
		return new openfl_filters_BlurFilter(this.__blurX,this.__blurY,this.__quality);
	}
	,__applyFilter: function(bitmapData,sourceBitmapData,sourceRect,destPoint) {
		var finalImage = $hx_exports.lime.graphics.utils.ImageDataUtil.gaussianBlur(bitmapData.image,sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),this.__blurX,this.__blurY,this.__quality);
		if(finalImage == bitmapData.image) {
			return bitmapData;
		}
		return sourceBitmapData;
	}
	,__initShader: function(renderSession,pass) {
		return null;
	}
	,get_blurX: function() {
		return this.__blurX;
	}
	,set_blurX: function(value) {
		if(value != this.__blurX) {
			this.__blurX = value;
			this.__renderDirty = true;
			this.__leftExtension = value > 0 ? $hx_exports.Math.ceil(value) : 0;
			this.__rightExtension = this.__leftExtension;
		}
		return value;
	}
	,get_blurY: function() {
		return this.__blurY;
	}
	,set_blurY: function(value) {
		if(value != this.__blurY) {
			this.__blurY = value;
			this.__renderDirty = true;
			this.__topExtension = value > 0 ? $hx_exports.Math.ceil(value) : 0;
			this.__bottomExtension = this.__topExtension;
		}
		return value;
	}
	,get_quality: function() {
		return this.__quality;
	}
	,set_quality: function(value) {
		this.__horizontalPasses = this.__blurX <= 0 ? 0 : $hx_exports.Math.round(this.__blurX * (value / 4)) + 1;
		this.__verticalPasses = this.__blurY <= 0 ? 0 : $hx_exports.Math.round(this.__blurY * (value / 4)) + 1;
		this.__numShaderPasses = this.__horizontalPasses + this.__verticalPasses;
		if(value != this.__quality) {
			this.__renderDirty = true;
		}
		return this.__quality = value;
	}
	,__class__: openfl_filters_BlurFilter
	,__properties__: {set_quality:"set_quality",get_quality:"get_quality",set_blurY:"set_blurY",get_blurY:"get_blurY",set_blurX:"set_blurX",get_blurX:"get_blurX"}
});
var openfl_filters__$BlurFilter_BlurShader = function() {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\tuniform sampler2D uImage0;\n\t\t\n\t\tvarying vec2 vBlurCoords[7];\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 sum = vec4(0.0);\n\t\t\tsum += texture2D(uImage0, vBlurCoords[0]) * 0.00443;\n\t\t\tsum += texture2D(uImage0, vBlurCoords[1]) * 0.05399;\n\t\t\tsum += texture2D(uImage0, vBlurCoords[2]) * 0.24197;\n\t\t\tsum += texture2D(uImage0, vBlurCoords[3]) * 0.39894;\n\t\t\tsum += texture2D(uImage0, vBlurCoords[4]) * 0.24197;\n\t\t\tsum += texture2D(uImage0, vBlurCoords[5]) * 0.05399;\n\t\t\tsum += texture2D(uImage0, vBlurCoords[6]) * 0.00443;\n\t\t\t\n\t\t\tgl_FragColor = sum;\n\t\t\t\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute float aAlpha;\n\t\tattribute vec4 aPosition;\n\t\tattribute vec2 aTexCoord;\n\t\tvarying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\t\n\t\tuniform mat4 uMatrix;\n\t\t\n\t\tuniform vec2 uRadius;\n\t\tvarying vec2 vBlurCoords[7];\n\t\tuniform vec2 uTextureSize;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvAlpha = aAlpha;\n\t\t\tvTexCoord = aTexCoord;\n\t\t\tgl_Position = uMatrix * aPosition;\n\t\t\t\n\t\t\tvec2 r = uRadius / uTextureSize;\n\t\t\tvBlurCoords[0] = aTexCoord - r * 1.0;\n\t\t\tvBlurCoords[1] = aTexCoord - r * 0.75;\n\t\t\tvBlurCoords[2] = aTexCoord - r * 0.5;\n\t\t\tvBlurCoords[3] = aTexCoord;\n\t\t\tvBlurCoords[4] = aTexCoord + r * 0.5;\n\t\t\tvBlurCoords[5] = aTexCoord + r * 0.75;\n\t\t\tvBlurCoords[6] = aTexCoord + r * 1.0;\n\t\t\t\n\t\t}";
	}
	openfl_display_Shader.call(this);
	this.get_data().uRadius.value = [0,0];
};
$hxClasses["openfl.filters._BlurFilter.BlurShader"] = openfl_filters__$BlurFilter_BlurShader;
openfl_filters__$BlurFilter_BlurShader.__name__ = ["openfl","filters","_BlurFilter","BlurShader"];
openfl_filters__$BlurFilter_BlurShader.__super__ = openfl_display_Shader;
openfl_filters__$BlurFilter_BlurShader.prototype = $extend(openfl_display_Shader.prototype,{
	__update: function() {
		var tmp = this.get_data().uImage0.input.width;
		this.get_data().uTextureSize.value = [tmp,this.get_data().uImage0.input.height];
		openfl_display_Shader.prototype.__update.call(this);
	}
	,__class__: openfl_filters__$BlurFilter_BlurShader
});
var openfl_filters_ColorMatrixFilter = $hx_exports["openfl"]["filters"]["ColorMatrixFilter"] = function(matrix) {
	openfl_filters_BitmapFilter.call(this);
	this.__matrix = matrix;
	this.__numShaderPasses = 0;
	this.__needSecondBitmapData = false;
};
$hxClasses["openfl.filters.ColorMatrixFilter"] = openfl_filters_ColorMatrixFilter;
openfl_filters_ColorMatrixFilter.__name__ = ["openfl","filters","ColorMatrixFilter"];
openfl_filters_ColorMatrixFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_ColorMatrixFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	__matrix: null
	,clone: function() {
		return new openfl_filters_ColorMatrixFilter(this.__matrix);
	}
	,__applyFilter: function(destBitmapData,sourceBitmapData,sourceRect,destPoint) {
		var sourceImage = sourceBitmapData.image;
		var image = destBitmapData.image;
		$hx_exports.lime.graphics.utils.ImageCanvasUtil.convertToData(sourceImage);
		$hx_exports.lime.graphics.utils.ImageCanvasUtil.convertToData(image);
		var sourceData = sourceImage.get_data();
		var destData = image.get_data();
		var offsetX = Std.int(destPoint.x - sourceRect.x);
		var offsetY = Std.int(destPoint.y - sourceRect.y);
		var sourceStride = sourceBitmapData.width * 4;
		var destStride = destBitmapData.width * 4;
		var sourceFormat = sourceImage.buffer.format;
		var destFormat = image.buffer.format;
		var sourcePremultiplied = sourceImage.buffer.premultiplied;
		var destPremultiplied = image.buffer.premultiplied;
		var sourcePixel;
		var destPixel = 0;
		var sourceOffset;
		var destOffset;
		var _g1 = Std.int(sourceRect.y);
		var _g = Std.int(sourceRect.height);
		while(_g1 < _g) {
			var row = _g1++;
			var _g3 = Std.int(sourceRect.x);
			var _g2 = Std.int(sourceRect.width);
			while(_g3 < _g2) {
				var column = _g3++;
				sourceOffset = row * sourceStride + column * 4;
				destOffset = (row + offsetX) * destStride + (column + offsetY) * 4;
				switch(sourceFormat) {
				case 0:
					sourcePixel = (sourceData[sourceOffset] & 255) << 24 | (sourceData[sourceOffset + 1] & 255) << 16 | (sourceData[sourceOffset + 2] & 255) << 8 | sourceData[sourceOffset + 3] & 255;
					break;
				case 1:
					sourcePixel = (sourceData[sourceOffset + 1] & 255) << 24 | (sourceData[sourceOffset + 2] & 255) << 16 | (sourceData[sourceOffset + 3] & 255) << 8 | sourceData[sourceOffset] & 255;
					break;
				case 2:
					sourcePixel = (sourceData[sourceOffset + 2] & 255) << 24 | (sourceData[sourceOffset + 1] & 255) << 16 | (sourceData[sourceOffset] & 255) << 8 | sourceData[sourceOffset + 3] & 255;
					break;
				}
				if(sourcePremultiplied) {
					if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
						$hx_$exports_lime_math_color_RGBA.unmult = 255.0 / (sourcePixel & 255);
						sourcePixel = ($hx_$exports_lime_math_color_RGBA.__clamp[$hx_exports.Math.round((sourcePixel >>> 24 & 255) * $hx_$exports_lime_math_color_RGBA.unmult)] & 255) << 24 | ($hx_$exports_lime_math_color_RGBA.__clamp[$hx_exports.Math.round((sourcePixel >>> 16 & 255) * $hx_$exports_lime_math_color_RGBA.unmult)] & 255) << 16 | ($hx_$exports_lime_math_color_RGBA.__clamp[$hx_exports.Math.round((sourcePixel >>> 8 & 255) * $hx_$exports_lime_math_color_RGBA.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
					}
				}
				if((sourcePixel & 255) == 0) {
					destPixel = 0;
				} else {
					var value = Std.int($hx_exports.Math.min(this.__matrix[0] * (sourcePixel >>> 24 & 255) + this.__matrix[1] * (sourcePixel >>> 16 & 255) + this.__matrix[2] * (sourcePixel >>> 8 & 255) + this.__matrix[3] * (sourcePixel & 255) + this.__matrix[4],255));
					destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
					var value1 = Std.int($hx_exports.Math.min(this.__matrix[5] * (sourcePixel >>> 24 & 255) + this.__matrix[6] * (sourcePixel >>> 16 & 255) + this.__matrix[7] * (sourcePixel >>> 8 & 255) + this.__matrix[8] * (sourcePixel & 255) + this.__matrix[9],255));
					destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
					var value2 = Std.int($hx_exports.Math.min(this.__matrix[10] * (sourcePixel >>> 24 & 255) + this.__matrix[11] * (sourcePixel >>> 16 & 255) + this.__matrix[12] * (sourcePixel >>> 8 & 255) + this.__matrix[13] * (sourcePixel & 255) + this.__matrix[14],255));
					destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
					var value3 = Std.int($hx_exports.Math.min(this.__matrix[15] * (sourcePixel >>> 24 & 255) + this.__matrix[16] * (sourcePixel >>> 16 & 255) + this.__matrix[17] * (sourcePixel >>> 8 & 255) + this.__matrix[18] * (sourcePixel & 255) + this.__matrix[19],255));
					destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value3 & 255;
				}
				if(destPremultiplied) {
					if((destPixel & 255) == 0) {
						if(destPixel != 0) {
							destPixel = 0;
						}
					} else if((destPixel & 255) != 255) {
						$hx_$exports_lime_math_color_RGBA.a16 = $hx_$exports_lime_math_color_RGBA.__alpha16[destPixel & 255];
						destPixel = ((destPixel >>> 24 & 255) * $hx_$exports_lime_math_color_RGBA.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * $hx_$exports_lime_math_color_RGBA.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * $hx_$exports_lime_math_color_RGBA.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
					}
				}
				switch(destFormat) {
				case 0:
					destData[destOffset] = destPixel >>> 24 & 255;
					destData[destOffset + 1] = destPixel >>> 16 & 255;
					destData[destOffset + 2] = destPixel >>> 8 & 255;
					destData[destOffset + 3] = destPixel & 255;
					break;
				case 1:
					destData[destOffset] = destPixel & 255;
					destData[destOffset + 1] = destPixel >>> 24 & 255;
					destData[destOffset + 2] = destPixel >>> 16 & 255;
					destData[destOffset + 3] = destPixel >>> 8 & 255;
					break;
				case 2:
					destData[destOffset] = destPixel >>> 8 & 255;
					destData[destOffset + 1] = destPixel >>> 16 & 255;
					destData[destOffset + 2] = destPixel >>> 24 & 255;
					destData[destOffset + 3] = destPixel & 255;
					break;
				}
			}
		}
		destBitmapData.image.dirty = true;
		return destBitmapData;
	}
	,__initShader: function(renderSession,pass) {
		return null;
	}
	,get_matrix: function() {
		return this.__matrix;
	}
	,set_matrix: function(value) {
		if(value == null) {
			value = [1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0];
		}
		return this.__matrix = value;
	}
	,__class__: openfl_filters_ColorMatrixFilter
	,__properties__: {set_matrix:"set_matrix",get_matrix:"get_matrix"}
});
var openfl_filters__$ColorMatrixFilter_ColorMatrixShader = function() {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\tuniform sampler2D uImage0;\n\t\t\n\t\tuniform mat4 uMultipliers;\n\t\tuniform vec4 uOffsets;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 color = texture2D (uImage0, vTexCoord);\n\t\t\t\n\t\t\tif (color.a == 0.0) {\n\t\t\t\t\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\t\t\t\tcolor = uOffsets + color * uMultipliers;\n\t\t\t\t\n\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a * vAlpha, color.a * vAlpha);\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}";
	}
	openfl_display_Shader.call(this);
	this.get_data().uMultipliers.value = [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
	this.get_data().uOffsets.value = [0,0,0,0];
};
$hxClasses["openfl.filters._ColorMatrixFilter.ColorMatrixShader"] = openfl_filters__$ColorMatrixFilter_ColorMatrixShader;
openfl_filters__$ColorMatrixFilter_ColorMatrixShader.__name__ = ["openfl","filters","_ColorMatrixFilter","ColorMatrixShader"];
openfl_filters__$ColorMatrixFilter_ColorMatrixShader.__super__ = openfl_display_Shader;
openfl_filters__$ColorMatrixFilter_ColorMatrixShader.prototype = $extend(openfl_display_Shader.prototype,{
	init: function(matrix) {
		var multipliers = this.get_data().uMultipliers.value;
		var offsets = this.get_data().uOffsets.value;
		multipliers[0] = matrix[0];
		multipliers[1] = matrix[1];
		multipliers[2] = matrix[2];
		multipliers[3] = matrix[3];
		multipliers[4] = matrix[5];
		multipliers[5] = matrix[6];
		multipliers[6] = matrix[7];
		multipliers[7] = matrix[8];
		multipliers[8] = matrix[10];
		multipliers[9] = matrix[11];
		multipliers[10] = matrix[12];
		multipliers[11] = matrix[13];
		multipliers[12] = matrix[15];
		multipliers[13] = matrix[16];
		multipliers[14] = matrix[17];
		multipliers[15] = matrix[18];
		offsets[0] = matrix[4] / 255.0;
		offsets[1] = matrix[9] / 255.0;
		offsets[2] = matrix[14] / 255.0;
		offsets[3] = matrix[19] / 255.0;
	}
	,__class__: openfl_filters__$ColorMatrixFilter_ColorMatrixShader
});
var openfl_filters_ConvolutionFilter = $hx_exports["openfl"]["filters"]["ConvolutionFilter"] = function(matrixX,matrixY,matrix,divisor,bias,preserveAlpha,clamp,color,alpha) {
	if(alpha == null) {
		alpha = 0.0;
	}
	if(color == null) {
		color = 0;
	}
	if(clamp == null) {
		clamp = true;
	}
	if(preserveAlpha == null) {
		preserveAlpha = true;
	}
	if(bias == null) {
		bias = 0.0;
	}
	if(divisor == null) {
		divisor = 1.0;
	}
	if(matrixY == null) {
		matrixY = 0;
	}
	if(matrixX == null) {
		matrixX = 0;
	}
	openfl_filters_BitmapFilter.call(this);
	this.matrixX = matrixX;
	this.matrixY = matrixY;
	this.__matrix = matrix;
	this.divisor = divisor;
	this.bias = bias;
	this.preserveAlpha = preserveAlpha;
	this.clamp = clamp;
	this.color = color;
	this.alpha = alpha;
	this.__numShaderPasses = 0;
};
$hxClasses["openfl.filters.ConvolutionFilter"] = openfl_filters_ConvolutionFilter;
openfl_filters_ConvolutionFilter.__name__ = ["openfl","filters","ConvolutionFilter"];
openfl_filters_ConvolutionFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_ConvolutionFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	alpha: null
	,bias: null
	,clamp: null
	,color: null
	,divisor: null
	,matrixX: null
	,matrixY: null
	,preserveAlpha: null
	,__matrix: null
	,clone: function() {
		return new openfl_filters_ConvolutionFilter(this.matrixX,this.matrixY,this.__matrix,this.divisor,this.bias,this.preserveAlpha,this.clamp,this.color,this.alpha);
	}
	,__initShader: function(renderSession,pass) {
		return null;
	}
	,get_matrix: function() {
		return this.__matrix;
	}
	,set_matrix: function(v) {
		if(v == null) {
			v = [0,0,0,0,1,0,0,0,0];
		}
		if(v.length != 9) {
			throw new js__$Boot_HaxeError("Only a 3x3 matrix is supported");
		}
		return this.__matrix = v;
	}
	,__class__: openfl_filters_ConvolutionFilter
	,__properties__: {set_matrix:"set_matrix",get_matrix:"get_matrix"}
});
var openfl_filters__$ConvolutionFilter_ConvolutionShader = function() {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying vec2 vBlurCoords[9];\n\t\tvarying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\t\n\t\tuniform sampler2D uImage0;\n\t\t\n\t\tuniform float uBias;\n\t\tuniform mat3 uConvoMatrix;\n\t\tuniform float uDivisor;\n\t\tuniform bool uPreserveAlpha;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 tc = texture2D (uImage0, vBlurCoords[4]);\n\t\t\tvec4 c = vec4 (0.0);\n\t\t\t\n\t\t\tc += texture2D (uImage0, vBlurCoords[0]) * uConvoMatrix[0][0];\n\t\t\tc += texture2D (uImage0, vBlurCoords[1]) * uConvoMatrix[0][1];\n\t\t\tc += texture2D (uImage0, vBlurCoords[2]) * uConvoMatrix[0][2];\n\t\t\t\n\t\t\tc += texture2D (uImage0, vBlurCoords[3]) * uConvoMatrix[1][0];\n\t\t\tc += tc * uConvoMatrix[1][1];\n\t\t\tc += texture2D (uImage0, vBlurCoords[5]) * uConvoMatrix[1][2];\n\t\t\t\n\t\t\tc += texture2D (uImage0, vBlurCoords[6]) * uConvoMatrix[2][0];\n\t\t\tc += texture2D (uImage0, vBlurCoords[7]) * uConvoMatrix[2][1];\n\t\t\tc += texture2D (uImage0, vBlurCoords[8]) * uConvoMatrix[2][2];\n\t\t\t\n\t\t\tif (uDivisor > 0) {\n\t\t\t\t\n\t\t\t\tc /= vec4 (uDivisor, uDivisor, uDivisor, uDivisor);\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tc += vec4 (uBias, uBias, uBias, uBias);\n\t\t\t\n\t\t\tif (uPreserveAlpha) {\n\t\t\t\t\n\t\t\t\tc.a = tc.a;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tgl_FragColor = c * vAlpha;\n\t\t\t\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute float aAlpha;\n\t\tattribute vec4 aPosition;\n\t\tattribute vec2 aTexCoord;\n\t\t\n\t\tvarying vec2 vBlurCoords[9];\n\t\tvarying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\t\n\t\tuniform mat4 uMatrix;\n\t\tuniform vec2 uTextureSize;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec2 r = vec2 (1.0, 1.0) / uTextureSize;\n\t\t\tvec2 t = aTexCoord;\n\t\t\t\n\t\t\tvBlurCoords[0] = t + r * vec2 (-1.0, -1.0);\n\t\t\tvBlurCoords[1] = t + r * vec2 (0.0, -1.0);\n\t\t\tvBlurCoords[2] = t + r * vec2 (1.0, -1.0);\n\t\t\t\n\t\t\tvBlurCoords[3] = t + r * vec2 (-1.0, 0.0);\n\t\t\tvBlurCoords[4] = t;\n\t\t\tvBlurCoords[5] = t + r * vec2 (1.0, 0.0);\n\t\t\t\n\t\t\tvBlurCoords[6] = t + r * vec2 (-1.0, 1.0);\n\t\t\tvBlurCoords[7] = t + r * vec2 (0.0, 1.0);\n\t\t\tvBlurCoords[8] = t + r * vec2 (1.0, 1.0);\n\t\t\t\n\t\t\tvAlpha = aAlpha;\n\t\t\tvTexCoord = aTexCoord;\n\t\t\tgl_Position = uMatrix * aPosition;\n\t\t\t\n\t\t}";
	}
	openfl_display_Shader.call(this);
	this.get_data().uDivisor.value = [1];
	this.get_data().uBias.value = [0];
	this.get_data().uPreserveAlpha.value = [true];
};
$hxClasses["openfl.filters._ConvolutionFilter.ConvolutionShader"] = openfl_filters__$ConvolutionFilter_ConvolutionShader;
openfl_filters__$ConvolutionFilter_ConvolutionShader.__name__ = ["openfl","filters","_ConvolutionFilter","ConvolutionShader"];
openfl_filters__$ConvolutionFilter_ConvolutionShader.__super__ = openfl_display_Shader;
openfl_filters__$ConvolutionFilter_ConvolutionShader.prototype = $extend(openfl_display_Shader.prototype,{
	__update: function() {
		var tmp = this.get_data().uImage0.input.width;
		this.get_data().uTextureSize.value = [tmp,this.get_data().uImage0.input.height];
		openfl_display_Shader.prototype.__update.call(this);
	}
	,__class__: openfl_filters__$ConvolutionFilter_ConvolutionShader
});
var openfl_filters_DropShadowFilter = $hx_exports["openfl"]["filters"]["DropShadowFilter"] = function(distance,angle,color,alpha,blurX,blurY,strength,quality,inner,knockout,hideObject) {
	if(hideObject == null) {
		hideObject = false;
	}
	if(knockout == null) {
		knockout = false;
	}
	if(inner == null) {
		inner = false;
	}
	if(quality == null) {
		quality = 1;
	}
	if(strength == null) {
		strength = 1;
	}
	if(blurY == null) {
		blurY = 4;
	}
	if(blurX == null) {
		blurX = 4;
	}
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 0;
	}
	if(angle == null) {
		angle = 45;
	}
	if(distance == null) {
		distance = 4;
	}
	openfl_filters_BitmapFilter.call(this);
	this.__offsetX = 0;
	this.__offsetY = 0;
	this.__distance = distance;
	this.__angle = angle;
	this.__color = color;
	this.__alpha = alpha;
	this.__blurX = blurX;
	this.__blurY = blurY;
	this.__strength = strength;
	this.__quality = quality;
	this.__inner = inner;
	this.__knockout = knockout;
	this.__hideObject = hideObject;
	this.__updateSize();
	this.__needSecondBitmapData = true;
	this.__preserveObject = !this.__hideObject;
};
$hxClasses["openfl.filters.DropShadowFilter"] = openfl_filters_DropShadowFilter;
openfl_filters_DropShadowFilter.__name__ = ["openfl","filters","DropShadowFilter"];
openfl_filters_DropShadowFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_DropShadowFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	__alpha: null
	,__angle: null
	,__blurX: null
	,__blurY: null
	,__color: null
	,__distance: null
	,__hideObject: null
	,__inner: null
	,__knockout: null
	,__offsetX: null
	,__offsetY: null
	,__quality: null
	,__strength: null
	,clone: function() {
		return new openfl_filters_DropShadowFilter(this.__distance,this.__angle,this.__color,this.__alpha,this.__blurX,this.__blurY,this.__strength,this.__quality,this.__inner,this.__knockout,this.__hideObject);
	}
	,__applyFilter: function(bitmapData,sourceBitmapData,sourceRect,destPoint) {
		var a = this.__color >> 24 & 255;
		var r = this.__color >> 16 & 255;
		var g = this.__color >> 8 & 255;
		var b = this.__color & 255;
		sourceBitmapData.colorTransform(sourceBitmapData.rect,new openfl_geom_ColorTransform(0,0,0,1,r,g,b,a));
		destPoint.x += this.__offsetX;
		destPoint.y += this.__offsetY;
		var finalImage = $hx_exports.lime.graphics.utils.ImageDataUtil.gaussianBlur(bitmapData.image,sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),this.__blurX,this.__blurY,this.__quality,this.__strength);
		if(finalImage == bitmapData.image) {
			return bitmapData;
		}
		return sourceBitmapData;
	}
	,__updateSize: function() {
		this.__offsetX = Std.int(this.__distance * $hx_exports.Math.cos(this.__angle * $hx_exports.Math.PI / 180));
		this.__offsetY = Std.int(this.__distance * $hx_exports.Math.sin(this.__angle * $hx_exports.Math.PI / 180));
		this.__topExtension = $hx_exports.Math.ceil((this.__offsetY < 0 ? -this.__offsetY : 0) + this.__blurY);
		this.__bottomExtension = $hx_exports.Math.ceil((this.__offsetY > 0 ? this.__offsetY : 0) + this.__blurY);
		this.__leftExtension = $hx_exports.Math.ceil((this.__offsetX < 0 ? -this.__offsetX : 0) + this.__blurX);
		this.__rightExtension = $hx_exports.Math.ceil((this.__offsetX > 0 ? this.__offsetX : 0) + this.__blurX);
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value != this.__alpha) {
			this.__renderDirty = true;
		}
		return this.__alpha = value;
	}
	,get_angle: function() {
		return this.__angle;
	}
	,set_angle: function(value) {
		if(value != this.__angle) {
			this.__angle = value;
			this.__renderDirty = true;
			this.__updateSize();
		}
		return value;
	}
	,get_blurX: function() {
		return this.__blurX;
	}
	,set_blurX: function(value) {
		if(value != this.__blurX) {
			this.__blurX = value;
			this.__renderDirty = true;
			this.__updateSize();
		}
		return value;
	}
	,get_blurY: function() {
		return this.__blurY;
	}
	,set_blurY: function(value) {
		if(value != this.__blurY) {
			this.__blurY = value;
			this.__renderDirty = true;
			this.__updateSize();
		}
		return value;
	}
	,get_color: function() {
		return this.__color;
	}
	,set_color: function(value) {
		if(value != this.__color) {
			this.__renderDirty = true;
		}
		return this.__color = value;
	}
	,get_distance: function() {
		return this.__distance;
	}
	,set_distance: function(value) {
		if(value != this.__distance) {
			this.__distance = value;
			this.__renderDirty = true;
			this.__updateSize();
		}
		return value;
	}
	,get_hideObject: function() {
		return this.__hideObject;
	}
	,set_hideObject: function(value) {
		if(value != this.__hideObject) {
			this.__renderDirty = true;
			this.__preserveObject = !value;
		}
		return this.__hideObject = value;
	}
	,get_inner: function() {
		return this.__inner;
	}
	,set_inner: function(value) {
		if(value != this.__inner) {
			this.__renderDirty = true;
		}
		return this.__inner = value;
	}
	,get_knockout: function() {
		return this.__knockout;
	}
	,set_knockout: function(value) {
		if(value != this.__knockout) {
			this.__renderDirty = true;
		}
		return this.__knockout = value;
	}
	,get_quality: function() {
		return this.__quality;
	}
	,set_quality: function(value) {
		if(value != this.__quality) {
			this.__renderDirty = true;
		}
		return this.__quality = value;
	}
	,get_strength: function() {
		return this.__strength;
	}
	,set_strength: function(value) {
		if(value != this.__strength) {
			this.__renderDirty = true;
		}
		return this.__strength = value;
	}
	,__class__: openfl_filters_DropShadowFilter
	,__properties__: {set_strength:"set_strength",get_strength:"get_strength",set_quality:"set_quality",get_quality:"get_quality",set_knockout:"set_knockout",get_knockout:"get_knockout",set_inner:"set_inner",get_inner:"get_inner",set_hideObject:"set_hideObject",get_hideObject:"get_hideObject",set_distance:"set_distance",get_distance:"get_distance",set_color:"set_color",get_color:"get_color",set_blurY:"set_blurY",get_blurY:"get_blurY",set_blurX:"set_blurX",get_blurX:"get_blurX",set_angle:"set_angle",get_angle:"get_angle",set_alpha:"set_alpha",get_alpha:"get_alpha"}
});
var openfl_filters_GlowFilter = $hx_exports["openfl"]["filters"]["GlowFilter"] = function(color,alpha,blurX,blurY,strength,quality,inner,knockout) {
	if(knockout == null) {
		knockout = false;
	}
	if(inner == null) {
		inner = false;
	}
	if(quality == null) {
		quality = 1;
	}
	if(strength == null) {
		strength = 2;
	}
	if(blurY == null) {
		blurY = 6;
	}
	if(blurX == null) {
		blurX = 6;
	}
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 16711680;
	}
	openfl_filters_BitmapFilter.call(this);
	this.__color = color;
	this.__alpha = alpha;
	this.__blurX = blurX;
	this.__blurY = blurY;
	this.__strength = strength;
	this.__quality = quality;
	this.__inner = inner;
	this.__knockout = knockout;
	this.__needSecondBitmapData = true;
	this.__preserveObject = true;
};
$hxClasses["openfl.filters.GlowFilter"] = openfl_filters_GlowFilter;
openfl_filters_GlowFilter.__name__ = ["openfl","filters","GlowFilter"];
openfl_filters_GlowFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_GlowFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	__alpha: null
	,__blurX: null
	,__blurY: null
	,__color: null
	,__horizontalPasses: null
	,__inner: null
	,__knockout: null
	,__quality: null
	,__strength: null
	,__verticalPasses: null
	,clone: function() {
		return new openfl_filters_GlowFilter(this.__color,this.__alpha,this.__blurX,this.__blurY,this.__strength,this.__quality,this.__inner,this.__knockout);
	}
	,__applyFilter: function(bitmapData,sourceBitmapData,sourceRect,destPoint) {
		var r = this.__color >> 16 & 255;
		var g = this.__color >> 8 & 255;
		var b = this.__color & 255;
		sourceBitmapData.colorTransform(sourceBitmapData.rect,new openfl_geom_ColorTransform(0,0,0,1,r,g,b,this.__alpha * 255));
		var finalImage = $hx_exports.lime.graphics.utils.ImageDataUtil.gaussianBlur(bitmapData.image,sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),this.__blurX,this.__blurY,this.__quality,this.__strength);
		if(finalImage == bitmapData.image) {
			return bitmapData;
		}
		return sourceBitmapData;
	}
	,__initShader: function(renderSession,pass) {
		return null;
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value != this.__alpha) {
			this.__renderDirty = true;
		}
		return this.__alpha = value;
	}
	,get_blurX: function() {
		return this.__blurX;
	}
	,set_blurX: function(value) {
		if(value != this.__blurX) {
			this.__blurX = value;
			this.__renderDirty = true;
			this.__leftExtension = value > 0 ? $hx_exports.Math.ceil(value) : 0;
			this.__rightExtension = this.__leftExtension;
		}
		return value;
	}
	,get_blurY: function() {
		return this.__blurY;
	}
	,set_blurY: function(value) {
		if(value != this.__blurY) {
			this.__blurY = value;
			this.__renderDirty = true;
			this.__topExtension = value > 0 ? $hx_exports.Math.ceil(value) : 0;
			this.__bottomExtension = this.__topExtension;
		}
		return value;
	}
	,get_color: function() {
		return this.__color;
	}
	,set_color: function(value) {
		if(value != this.__color) {
			this.__renderDirty = true;
		}
		return this.__color = value;
	}
	,get_inner: function() {
		return this.__inner;
	}
	,set_inner: function(value) {
		if(value != this.__inner) {
			this.__renderDirty = true;
		}
		return this.__inner = value;
	}
	,get_knockout: function() {
		return this.__knockout;
	}
	,set_knockout: function(value) {
		if(value != this.__knockout) {
			this.__renderDirty = true;
		}
		return this.__knockout = value;
	}
	,get_quality: function() {
		return this.__quality;
	}
	,set_quality: function(value) {
		this.__horizontalPasses = this.__blurX <= 0 ? 0 : $hx_exports.Math.round(this.__blurX * (value / 4)) + 1;
		this.__verticalPasses = this.__blurY <= 0 ? 0 : $hx_exports.Math.round(this.__blurY * (value / 4)) + 1;
		this.__numShaderPasses = this.__horizontalPasses + this.__verticalPasses;
		if(value != this.__quality) {
			this.__renderDirty = true;
		}
		return this.__quality = value;
	}
	,get_strength: function() {
		return this.__strength;
	}
	,set_strength: function(value) {
		if(value != this.__strength) {
			this.__renderDirty = true;
		}
		return this.__strength = value;
	}
	,__class__: openfl_filters_GlowFilter
	,__properties__: {set_strength:"set_strength",get_strength:"get_strength",set_quality:"set_quality",get_quality:"get_quality",set_knockout:"set_knockout",get_knockout:"get_knockout",set_inner:"set_inner",get_inner:"get_inner",set_color:"set_color",get_color:"get_color",set_blurY:"set_blurY",get_blurY:"get_blurY",set_blurX:"set_blurX",get_blurX:"get_blurX",set_alpha:"set_alpha",get_alpha:"get_alpha"}
});
var openfl_filters__$GlowFilter_GlowShader = function() {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\tuniform sampler2D uImage0;\n\t\t\n\t\tuniform vec4 uColor;\n\t\t\n\t\tvarying vec2 vBlurCoords[7];\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tfloat a = 0.0;\n\t\t\ta += texture2D(uImage0, vBlurCoords[0]).a * 0.00443;\n\t\t\ta += texture2D(uImage0, vBlurCoords[1]).a * 0.05399;\n\t\t\ta += texture2D(uImage0, vBlurCoords[2]).a * 0.24197;\n\t\t\ta += texture2D(uImage0, vBlurCoords[3]).a * 0.39894;\n\t\t\ta += texture2D(uImage0, vBlurCoords[4]).a * 0.24197;\n\t\t\ta += texture2D(uImage0, vBlurCoords[5]).a * 0.05399;\n\t\t\ta += texture2D(uImage0, vBlurCoords[6]).a * 0.00443;\n\t\t\ta *= uColor.a;\n\t\t\t\n\t\t\tgl_FragColor = vec4(uColor.rgb * a, a);\n\t\t\t\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute float aAlpha;\n\t\tattribute vec4 aPosition;\n\t\tattribute vec2 aTexCoord;\n\t\tvarying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\t\n\t\tuniform mat4 uMatrix;\n\t\t\n\t\tuniform vec2 uRadius;\n\t\tvarying vec2 vBlurCoords[7];\n\t\tuniform vec2 uTextureSize;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvAlpha = aAlpha;\n\t\t\tvTexCoord = aTexCoord;\n\t\t\tgl_Position = uMatrix * aPosition;\n\t\t\t\n\t\t\tvec2 r = uRadius / uTextureSize;\n\t\t\tvBlurCoords[0] = aTexCoord - r * 1.0;\n\t\t\tvBlurCoords[1] = aTexCoord - r * 0.75;\n\t\t\tvBlurCoords[2] = aTexCoord - r * 0.5;\n\t\t\tvBlurCoords[3] = aTexCoord;\n\t\t\tvBlurCoords[4] = aTexCoord + r * 0.5;\n\t\t\tvBlurCoords[5] = aTexCoord + r * 0.75;\n\t\t\tvBlurCoords[6] = aTexCoord + r * 1.0;\n\t\t\t\n\t\t}";
	}
	openfl_display_Shader.call(this);
	this.get_data().uRadius.value = [0,0];
	this.get_data().uColor.value = [0,0,0,0];
};
$hxClasses["openfl.filters._GlowFilter.GlowShader"] = openfl_filters__$GlowFilter_GlowShader;
openfl_filters__$GlowFilter_GlowShader.__name__ = ["openfl","filters","_GlowFilter","GlowShader"];
openfl_filters__$GlowFilter_GlowShader.__super__ = openfl_display_Shader;
openfl_filters__$GlowFilter_GlowShader.prototype = $extend(openfl_display_Shader.prototype,{
	__update: function() {
		var tmp = this.get_data().uImage0.input.width;
		this.get_data().uTextureSize.value = [tmp,this.get_data().uImage0.input.height];
		openfl_display_Shader.prototype.__update.call(this);
	}
	,__class__: openfl_filters__$GlowFilter_GlowShader
});
var openfl_filters_ShaderFilter = $hx_exports["openfl"]["filters"]["ShaderFilter"] = function(shader) {
	openfl_filters_BitmapFilter.call(this);
	this.shader = shader;
	this.__numShaderPasses = 0;
};
$hxClasses["openfl.filters.ShaderFilter"] = openfl_filters_ShaderFilter;
openfl_filters_ShaderFilter.__name__ = ["openfl","filters","ShaderFilter"];
openfl_filters_ShaderFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_ShaderFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	bottomExtension: null
	,leftExtension: null
	,rightExtension: null
	,shader: null
	,topExtension: null
	,clone: function() {
		var filter = new openfl_filters_ShaderFilter(this.shader);
		filter.bottomExtension = this.bottomExtension;
		filter.leftExtension = this.leftExtension;
		filter.rightExtension = this.rightExtension;
		filter.topExtension = this.topExtension;
		return filter;
	}
	,__initShader: function(renderSession,pass) {
		return this.shader;
	}
	,__class__: openfl_filters_ShaderFilter
});
var openfl_filters__$BlurShader_$ShaderData = function(byteArray) {
	openfl_display_ShaderData.call(this,byteArray);
};
$hxClasses["openfl.filters._BlurShader_ShaderData"] = openfl_filters__$BlurShader_$ShaderData;
openfl_filters__$BlurShader_$ShaderData.__name__ = ["openfl","filters","_BlurShader_ShaderData"];
openfl_filters__$BlurShader_$ShaderData.__super__ = openfl_display_ShaderData;
openfl_filters__$BlurShader_$ShaderData.prototype = $extend(openfl_display_ShaderData.prototype,{
	uRadius: null
	,uTextureSize: null
	,__class__: openfl_filters__$BlurShader_$ShaderData
});
var openfl_filters__$ColorMatrixShader_$ShaderData = function(byteArray) {
	openfl_display_ShaderData.call(this,byteArray);
};
$hxClasses["openfl.filters._ColorMatrixShader_ShaderData"] = openfl_filters__$ColorMatrixShader_$ShaderData;
openfl_filters__$ColorMatrixShader_$ShaderData.__name__ = ["openfl","filters","_ColorMatrixShader_ShaderData"];
openfl_filters__$ColorMatrixShader_$ShaderData.__super__ = openfl_display_ShaderData;
openfl_filters__$ColorMatrixShader_$ShaderData.prototype = $extend(openfl_display_ShaderData.prototype,{
	uMultipliers: null
	,uOffsets: null
	,__class__: openfl_filters__$ColorMatrixShader_$ShaderData
});
var openfl_filters__$ConvolutionShader_$ShaderData = function(byteArray) {
	openfl_display_ShaderData.call(this,byteArray);
};
$hxClasses["openfl.filters._ConvolutionShader_ShaderData"] = openfl_filters__$ConvolutionShader_$ShaderData;
openfl_filters__$ConvolutionShader_$ShaderData.__name__ = ["openfl","filters","_ConvolutionShader_ShaderData"];
openfl_filters__$ConvolutionShader_$ShaderData.__super__ = openfl_display_ShaderData;
openfl_filters__$ConvolutionShader_$ShaderData.prototype = $extend(openfl_display_ShaderData.prototype,{
	uTextureSize: null
	,uBias: null
	,uConvoMatrix: null
	,uDivisor: null
	,uPreserveAlpha: null
	,__class__: openfl_filters__$ConvolutionShader_$ShaderData
});
var openfl_filters__$GlowShader_$ShaderData = function(byteArray) {
	openfl_display_ShaderData.call(this,byteArray);
};
$hxClasses["openfl.filters._GlowShader_ShaderData"] = openfl_filters__$GlowShader_$ShaderData;
openfl_filters__$GlowShader_$ShaderData.__name__ = ["openfl","filters","_GlowShader_ShaderData"];
openfl_filters__$GlowShader_$ShaderData.__super__ = openfl_display_ShaderData;
openfl_filters__$GlowShader_$ShaderData.prototype = $extend(openfl_display_ShaderData.prototype,{
	uRadius: null
	,uTextureSize: null
	,uColor: null
	,__class__: openfl_filters__$GlowShader_$ShaderData
});
var openfl_geom_Matrix3D = $hx_exports["openfl"]["geom"]["Matrix3D"] = function(v) {
	if(v != null && v.data.get_length() == 16) {
		var data = null;
		this.rawData = new openfl__$Vector_AbstractVector(v.data.concat(data));
	} else {
		var a = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
		var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vector.data.set(i,a[i]);
		}
		this.rawData = vector;
	}
};
$hxClasses["openfl.geom.Matrix3D"] = openfl_geom_Matrix3D;
openfl_geom_Matrix3D.__name__ = ["openfl","geom","Matrix3D"];
openfl_geom_Matrix3D.create2D = function(x,y,scale,rotation) {
	if(rotation == null) {
		rotation = 0;
	}
	if(scale == null) {
		scale = 1;
	}
	var theta = rotation * $hx_exports.Math.PI / 180.0;
	var c = $hx_exports.Math.cos(theta);
	var s = $hx_exports.Math.sin(theta);
	var a = [c * scale,-s * scale,0,0,s * scale,c * scale,0,0,0,0,1,0,x,y,0,1];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vector.data.set(i,a[i]);
	}
	return new openfl_geom_Matrix3D(vector);
};
openfl_geom_Matrix3D.createABCD = function(a,b,c,d,tx,ty) {
	var a1 = [a,b,0,0,c,d,0,0,0,0,1,0,tx,ty,0,1];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g1 = 0;
	var _g = a1.length;
	while(_g1 < _g) {
		var i = _g1++;
		vector.data.set(i,a1[i]);
	}
	return new openfl_geom_Matrix3D(vector);
};
openfl_geom_Matrix3D.createOrtho = function(x0,x1,y0,y1,zNear,zFar) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	var sz = 1.0 / (zFar - zNear);
	var a = [2.0 * sx,0,0,0,0,2.0 * sy,0,0,0,0,-2.0 * sz,0,-(x0 + x1) * sx,-(y0 + y1) * sy,-(zNear + zFar) * sz,1];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vector.data.set(i,a[i]);
	}
	return new openfl_geom_Matrix3D(vector);
};
openfl_geom_Matrix3D.interpolate = function(thisMat,toMat,percent) {
	var m = new openfl_geom_Matrix3D();
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		var this1 = m.rawData;
		var value = thisMat.rawData.data.get(i) + (toMat.rawData.data.get(i) - thisMat.rawData.data.get(i)) * percent;
		this1.data.set(i,value);
	}
	return m;
};
openfl_geom_Matrix3D.__getAxisRotation = function(x,y,z,degrees) {
	var m = new openfl_geom_Matrix3D();
	var a1 = new openfl_geom_Vector3D(x,y,z);
	var rad = -degrees * ($hx_exports.Math.PI / 180);
	var c = $hx_exports.Math.cos(rad);
	var s = $hx_exports.Math.sin(rad);
	var t = 1.0 - c;
	m.rawData.data.set(0,c + a1.x * a1.x * t);
	m.rawData.data.set(5,c + a1.y * a1.y * t);
	m.rawData.data.set(10,c + a1.z * a1.z * t);
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	m.rawData.data.set(4,tmp1 + tmp2);
	m.rawData.data.set(1,tmp1 - tmp2);
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	m.rawData.data.set(8,tmp1 - tmp2);
	m.rawData.data.set(2,tmp1 + tmp2);
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	m.rawData.data.set(9,tmp1 + tmp2);
	m.rawData.data.set(6,tmp1 - tmp2);
	return m;
};
openfl_geom_Matrix3D.prototype = {
	rawData: null
	,append: function(lhs) {
		var m111 = this.rawData.data.get(0);
		var m121 = this.rawData.data.get(4);
		var m131 = this.rawData.data.get(8);
		var m141 = this.rawData.data.get(12);
		var m112 = this.rawData.data.get(1);
		var m122 = this.rawData.data.get(5);
		var m132 = this.rawData.data.get(9);
		var m142 = this.rawData.data.get(13);
		var m113 = this.rawData.data.get(2);
		var m123 = this.rawData.data.get(6);
		var m133 = this.rawData.data.get(10);
		var m143 = this.rawData.data.get(14);
		var m114 = this.rawData.data.get(3);
		var m124 = this.rawData.data.get(7);
		var m134 = this.rawData.data.get(11);
		var m144 = this.rawData.data.get(15);
		var m211 = lhs.rawData.data.get(0);
		var m221 = lhs.rawData.data.get(4);
		var m231 = lhs.rawData.data.get(8);
		var m241 = lhs.rawData.data.get(12);
		var m212 = lhs.rawData.data.get(1);
		var m222 = lhs.rawData.data.get(5);
		var m232 = lhs.rawData.data.get(9);
		var m242 = lhs.rawData.data.get(13);
		var m213 = lhs.rawData.data.get(2);
		var m223 = lhs.rawData.data.get(6);
		var m233 = lhs.rawData.data.get(10);
		var m243 = lhs.rawData.data.get(14);
		var m214 = lhs.rawData.data.get(3);
		var m224 = lhs.rawData.data.get(7);
		var m234 = lhs.rawData.data.get(11);
		var m244 = lhs.rawData.data.get(15);
		this.rawData.data.set(0,m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241);
		this.rawData.data.set(1,m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242);
		this.rawData.data.set(2,m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243);
		this.rawData.data.set(3,m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244);
		this.rawData.data.set(4,m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241);
		this.rawData.data.set(5,m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242);
		this.rawData.data.set(6,m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243);
		this.rawData.data.set(7,m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244);
		this.rawData.data.set(8,m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241);
		this.rawData.data.set(9,m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242);
		this.rawData.data.set(10,m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243);
		this.rawData.data.set(11,m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244);
		this.rawData.data.set(12,m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241);
		this.rawData.data.set(13,m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242);
		this.rawData.data.set(14,m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243);
		this.rawData.data.set(15,m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244);
	}
	,appendRotation: function(degrees,axis,pivotPoint) {
		var tz = 0;
		var ty = tz;
		var tx = ty;
		if(pivotPoint != null) {
			tx = pivotPoint.x;
			ty = pivotPoint.y;
			tz = pivotPoint.z;
		}
		var radian = degrees * $hx_exports.Math.PI / 180;
		var cos = $hx_exports.Math.cos(radian);
		var sin = $hx_exports.Math.sin(radian);
		var x = axis.x;
		var y = axis.y;
		var z = axis.z;
		var x2 = x * x;
		var y2 = y * y;
		var z2 = z * z;
		var ls = x2 + y2 + z2;
		if(ls != 0) {
			var l = $hx_exports.Math.sqrt(ls);
			x /= l;
			y /= l;
			z /= l;
			x2 /= ls;
			y2 /= ls;
			z2 /= ls;
		}
		var ccos = 1 - cos;
		var m = new openfl_geom_Matrix3D();
		var d = m.rawData;
		d.data.set(0,x2 + (y2 + z2) * cos);
		d.data.set(1,x * y * ccos + z * sin);
		d.data.set(2,x * z * ccos - y * sin);
		d.data.set(4,x * y * ccos - z * sin);
		d.data.set(5,y2 + (x2 + z2) * cos);
		d.data.set(6,y * z * ccos + x * sin);
		d.data.set(8,x * z * ccos + y * sin);
		d.data.set(9,y * z * ccos - x * sin);
		d.data.set(10,z2 + (x2 + y2) * cos);
		d.data.set(12,(tx * (y2 + z2) - x * (ty * y + tz * z)) * ccos + (ty * z - tz * y) * sin);
		d.data.set(13,(ty * (x2 + z2) - y * (tx * x + tz * z)) * ccos + (tz * x - tx * z) * sin);
		d.data.set(14,(tz * (x2 + y2) - z * (tx * x + ty * y)) * ccos + (tx * y - ty * x) * sin);
		this.append(m);
	}
	,appendScale: function(xScale,yScale,zScale) {
		var a = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
		var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vector.data.set(i,a[i]);
		}
		this.append(new openfl_geom_Matrix3D(vector));
	}
	,appendTranslation: function(x,y,z) {
		var _g = this.rawData;
		var value = _g.data.get(12) + x;
		_g.data.set(12,value);
		var _g1 = this.rawData;
		var value1 = _g1.data.get(13) + y;
		_g1.data.set(13,value1);
		var _g2 = this.rawData;
		var value2 = _g2.data.get(14) + z;
		_g2.data.set(14,value2);
	}
	,clone: function() {
		return new openfl_geom_Matrix3D(new openfl__$Vector_AbstractVector(this.rawData.data.copy()));
	}
	,copyColumnFrom: function(column,vector3D) {
		switch(column) {
		case 0:
			this.rawData.data.set(0,vector3D.x);
			this.rawData.data.set(1,vector3D.y);
			this.rawData.data.set(2,vector3D.z);
			this.rawData.data.set(3,vector3D.w);
			break;
		case 1:
			this.rawData.data.set(4,vector3D.x);
			this.rawData.data.set(5,vector3D.y);
			this.rawData.data.set(6,vector3D.z);
			this.rawData.data.set(7,vector3D.w);
			break;
		case 2:
			this.rawData.data.set(8,vector3D.x);
			this.rawData.data.set(9,vector3D.y);
			this.rawData.data.set(10,vector3D.z);
			this.rawData.data.set(11,vector3D.w);
			break;
		case 3:
			this.rawData.data.set(12,vector3D.x);
			this.rawData.data.set(13,vector3D.y);
			this.rawData.data.set(14,vector3D.z);
			this.rawData.data.set(15,vector3D.w);
			break;
		default:
		}
	}
	,copyColumnTo: function(column,vector3D) {
		switch(column) {
		case 0:
			vector3D.x = this.rawData.data.get(0);
			vector3D.y = this.rawData.data.get(1);
			vector3D.z = this.rawData.data.get(2);
			vector3D.w = this.rawData.data.get(3);
			break;
		case 1:
			vector3D.x = this.rawData.data.get(4);
			vector3D.y = this.rawData.data.get(5);
			vector3D.z = this.rawData.data.get(6);
			vector3D.w = this.rawData.data.get(7);
			break;
		case 2:
			vector3D.x = this.rawData.data.get(8);
			vector3D.y = this.rawData.data.get(9);
			vector3D.z = this.rawData.data.get(10);
			vector3D.w = this.rawData.data.get(11);
			break;
		case 3:
			vector3D.x = this.rawData.data.get(12);
			vector3D.y = this.rawData.data.get(13);
			vector3D.z = this.rawData.data.get(14);
			vector3D.w = this.rawData.data.get(15);
			break;
		default:
		}
	}
	,copyFrom: function(other) {
		this.rawData = new openfl__$Vector_AbstractVector(other.rawData.data.copy());
	}
	,copyRawDataFrom: function(vector,index,transpose) {
		if(transpose == null) {
			transpose = false;
		}
		if(index == null) {
			index = 0;
		}
		if(transpose) {
			this.transpose();
		}
		var length = vector.data.get_length() - index;
		var _g1 = 0;
		var _g = length;
		while(_g1 < _g) {
			var i = _g1++;
			var this1 = this.rawData;
			var value = vector.data.get(i + index);
			this1.data.set(i,value);
		}
		if(transpose) {
			this.transpose();
		}
	}
	,copyRawDataTo: function(vector,index,transpose) {
		if(transpose == null) {
			transpose = false;
		}
		if(index == null) {
			index = 0;
		}
		if(transpose) {
			this.transpose();
		}
		var _g1 = 0;
		var _g = this.rawData.data.get_length();
		while(_g1 < _g) {
			var i = _g1++;
			var value = this.rawData.data.get(i);
			vector.data.set(i + index,value);
		}
		if(transpose) {
			this.transpose();
		}
	}
	,copyRowFrom: function(row,vector3D) {
		switch(row) {
		case 0:
			this.rawData.data.set(0,vector3D.x);
			this.rawData.data.set(4,vector3D.y);
			this.rawData.data.set(8,vector3D.z);
			this.rawData.data.set(12,vector3D.w);
			break;
		case 1:
			this.rawData.data.set(1,vector3D.x);
			this.rawData.data.set(5,vector3D.y);
			this.rawData.data.set(9,vector3D.z);
			this.rawData.data.set(13,vector3D.w);
			break;
		case 2:
			this.rawData.data.set(2,vector3D.x);
			this.rawData.data.set(6,vector3D.y);
			this.rawData.data.set(10,vector3D.z);
			this.rawData.data.set(14,vector3D.w);
			break;
		case 3:
			this.rawData.data.set(3,vector3D.x);
			this.rawData.data.set(7,vector3D.y);
			this.rawData.data.set(11,vector3D.z);
			this.rawData.data.set(15,vector3D.w);
			break;
		default:
		}
	}
	,copyRowTo: function(row,vector3D) {
		switch(row) {
		case 0:
			vector3D.x = this.rawData.data.get(0);
			vector3D.y = this.rawData.data.get(4);
			vector3D.z = this.rawData.data.get(8);
			vector3D.w = this.rawData.data.get(12);
			break;
		case 1:
			vector3D.x = this.rawData.data.get(1);
			vector3D.y = this.rawData.data.get(5);
			vector3D.z = this.rawData.data.get(9);
			vector3D.w = this.rawData.data.get(13);
			break;
		case 2:
			vector3D.x = this.rawData.data.get(2);
			vector3D.y = this.rawData.data.get(6);
			vector3D.z = this.rawData.data.get(10);
			vector3D.w = this.rawData.data.get(14);
			break;
		case 3:
			vector3D.x = this.rawData.data.get(3);
			vector3D.y = this.rawData.data.get(7);
			vector3D.z = this.rawData.data.get(11);
			vector3D.w = this.rawData.data.get(15);
			break;
		default:
		}
	}
	,copyToMatrix3D: function(other) {
		other.rawData = new openfl__$Vector_AbstractVector(this.rawData.data.copy());
	}
	,decompose: function(orientationStyle) {
		if(orientationStyle == null) {
			orientationStyle = 1;
		}
		var vec = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		var m = this.clone();
		var mr = new openfl__$Vector_AbstractVector(m.rawData.data.copy());
		var pos = new openfl_geom_Vector3D(mr.data.get(12),mr.data.get(13),mr.data.get(14));
		mr.data.set(12,0);
		mr.data.set(13,0);
		mr.data.set(14,0);
		var scale = new openfl_geom_Vector3D();
		scale.x = $hx_exports.Math.sqrt(mr.data.get(0) * mr.data.get(0) + mr.data.get(1) * mr.data.get(1) + mr.data.get(2) * mr.data.get(2));
		scale.y = $hx_exports.Math.sqrt(mr.data.get(4) * mr.data.get(4) + mr.data.get(5) * mr.data.get(5) + mr.data.get(6) * mr.data.get(6));
		scale.z = $hx_exports.Math.sqrt(mr.data.get(8) * mr.data.get(8) + mr.data.get(9) * mr.data.get(9) + mr.data.get(10) * mr.data.get(10));
		if(mr.data.get(0) * (mr.data.get(5) * mr.data.get(10) - mr.data.get(6) * mr.data.get(9)) - mr.data.get(1) * (mr.data.get(4) * mr.data.get(10) - mr.data.get(6) * mr.data.get(8)) + mr.data.get(2) * (mr.data.get(4) * mr.data.get(9) - mr.data.get(5) * mr.data.get(8)) < 0) {
			scale.z = -scale.z;
		}
		var _g = mr;
		var value = _g.data.get(0) / scale.x;
		_g.data.set(0,value);
		var _g1 = mr;
		var value1 = _g1.data.get(1) / scale.x;
		_g1.data.set(1,value1);
		var _g2 = mr;
		var value2 = _g2.data.get(2) / scale.x;
		_g2.data.set(2,value2);
		var _g3 = mr;
		var value3 = _g3.data.get(4) / scale.y;
		_g3.data.set(4,value3);
		var _g4 = mr;
		var value4 = _g4.data.get(5) / scale.y;
		_g4.data.set(5,value4);
		var _g5 = mr;
		var value5 = _g5.data.get(6) / scale.y;
		_g5.data.set(6,value5);
		var _g6 = mr;
		var value6 = _g6.data.get(8) / scale.z;
		_g6.data.set(8,value6);
		var _g7 = mr;
		var value7 = _g7.data.get(9) / scale.z;
		_g7.data.set(9,value7);
		var _g8 = mr;
		var value8 = _g8.data.get(10) / scale.z;
		_g8.data.set(10,value8);
		var rot = new openfl_geom_Vector3D();
		switch(orientationStyle) {
		case 0:
			rot.w = $hx_exports.Math.acos((mr.data.get(0) + mr.data.get(5) + mr.data.get(10) - 1) / 2);
			var len = $hx_exports.Math.sqrt((mr.data.get(6) - mr.data.get(9)) * (mr.data.get(6) - mr.data.get(9)) + (mr.data.get(8) - mr.data.get(2)) * (mr.data.get(8) - mr.data.get(2)) + (mr.data.get(1) - mr.data.get(4)) * (mr.data.get(1) - mr.data.get(4)));
			if(len != 0) {
				rot.x = (mr.data.get(6) - mr.data.get(9)) / len;
				rot.y = (mr.data.get(8) - mr.data.get(2)) / len;
				rot.z = (mr.data.get(1) - mr.data.get(4)) / len;
			} else {
				rot.x = rot.y = rot.z = 0;
			}
			break;
		case 1:
			rot.y = $hx_exports.Math.asin(-mr.data.get(2));
			if(mr.data.get(2) != 1 && mr.data.get(2) != -1) {
				rot.x = $hx_exports.Math.atan2(mr.data.get(6),mr.data.get(10));
				rot.z = $hx_exports.Math.atan2(mr.data.get(1),mr.data.get(0));
			} else {
				rot.z = 0;
				rot.x = $hx_exports.Math.atan2(mr.data.get(4),mr.data.get(5));
			}
			break;
		case 2:
			var tr = mr.data.get(0) + mr.data.get(5) + mr.data.get(10);
			if(tr > 0) {
				rot.w = $hx_exports.Math.sqrt(1 + tr) / 2;
				rot.x = (mr.data.get(6) - mr.data.get(9)) / (4 * rot.w);
				rot.y = (mr.data.get(8) - mr.data.get(2)) / (4 * rot.w);
				rot.z = (mr.data.get(1) - mr.data.get(4)) / (4 * rot.w);
			} else if(mr.data.get(0) > mr.data.get(5) && mr.data.get(0) > mr.data.get(10)) {
				rot.x = $hx_exports.Math.sqrt(1 + mr.data.get(0) - mr.data.get(5) - mr.data.get(10)) / 2;
				rot.w = (mr.data.get(6) - mr.data.get(9)) / (4 * rot.x);
				rot.y = (mr.data.get(1) + mr.data.get(4)) / (4 * rot.x);
				rot.z = (mr.data.get(8) + mr.data.get(2)) / (4 * rot.x);
			} else if(mr.data.get(5) > mr.data.get(10)) {
				rot.y = $hx_exports.Math.sqrt(1 + mr.data.get(5) - mr.data.get(0) - mr.data.get(10)) / 2;
				rot.x = (mr.data.get(1) + mr.data.get(4)) / (4 * rot.y);
				rot.w = (mr.data.get(8) - mr.data.get(2)) / (4 * rot.y);
				rot.z = (mr.data.get(6) + mr.data.get(9)) / (4 * rot.y);
			} else {
				rot.z = $hx_exports.Math.sqrt(1 + mr.data.get(10) - mr.data.get(0) - mr.data.get(5)) / 2;
				rot.x = (mr.data.get(8) + mr.data.get(2)) / (4 * rot.z);
				rot.y = (mr.data.get(6) + mr.data.get(9)) / (4 * rot.z);
				rot.w = (mr.data.get(1) - mr.data.get(4)) / (4 * rot.z);
			}
			break;
		}
		vec.data.push(pos);
		vec.data.push(rot);
		vec.data.push(scale);
		return vec;
	}
	,deltaTransformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl_geom_Vector3D(x * this.rawData.data.get(0) + y * this.rawData.data.get(4) + z * this.rawData.data.get(8) + this.rawData.data.get(3),x * this.rawData.data.get(1) + y * this.rawData.data.get(5) + z * this.rawData.data.get(9) + this.rawData.data.get(7),x * this.rawData.data.get(2) + y * this.rawData.data.get(6) + z * this.rawData.data.get(10) + this.rawData.data.get(11),0);
	}
	,identity: function() {
		var a = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
		var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vector.data.set(i,a[i]);
		}
		this.rawData = vector;
	}
	,interpolateTo: function(toMat,percent) {
		var _g = 0;
		while(_g < 16) {
			var i = _g++;
			var this1 = this.rawData;
			var value = this.rawData.data.get(i) + (toMat.rawData.data.get(i) - this.rawData.data.get(i)) * percent;
			this1.data.set(i,value);
		}
	}
	,invert: function() {
		var d = this.get_determinant();
		var invertable = $hx_exports.Math.abs(d) > 0.00000000001;
		if(invertable) {
			d = 1 / d;
			var m11 = this.rawData.data.get(0);
			var m21 = this.rawData.data.get(4);
			var m31 = this.rawData.data.get(8);
			var m41 = this.rawData.data.get(12);
			var m12 = this.rawData.data.get(1);
			var m22 = this.rawData.data.get(5);
			var m32 = this.rawData.data.get(9);
			var m42 = this.rawData.data.get(13);
			var m13 = this.rawData.data.get(2);
			var m23 = this.rawData.data.get(6);
			var m33 = this.rawData.data.get(10);
			var m43 = this.rawData.data.get(14);
			var m14 = this.rawData.data.get(3);
			var m24 = this.rawData.data.get(7);
			var m34 = this.rawData.data.get(11);
			var m44 = this.rawData.data.get(15);
			this.rawData.data.set(0,d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24)));
			this.rawData.data.set(1,-d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14)));
			this.rawData.data.set(2,d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14)));
			this.rawData.data.set(3,-d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14)));
			this.rawData.data.set(4,-d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24)));
			this.rawData.data.set(5,d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14)));
			this.rawData.data.set(6,-d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14)));
			this.rawData.data.set(7,d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14)));
			this.rawData.data.set(8,d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24)));
			this.rawData.data.set(9,-d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14)));
			this.rawData.data.set(10,d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14)));
			this.rawData.data.set(11,-d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14)));
			this.rawData.data.set(12,-d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23)));
			this.rawData.data.set(13,d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13)));
			this.rawData.data.set(14,-d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13)));
			this.rawData.data.set(15,d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13)));
		}
		return invertable;
	}
	,pointAt: function(pos,at,up) {
		if(at == null) {
			at = new openfl_geom_Vector3D(0,0,-1);
		}
		if(up == null) {
			up = new openfl_geom_Vector3D(0,-1,0);
		}
		var dir = at.subtract(pos);
		var vup = up.clone();
		dir.normalize();
		vup.normalize();
		var dir2 = dir.clone();
		dir2.scaleBy(vup.dotProduct(dir));
		vup = vup.subtract(dir2);
		if(vup.get_length() > 0) {
			vup.normalize();
		} else if(dir.x != 0) {
			vup = new openfl_geom_Vector3D(-dir.y,dir.x,0);
		} else {
			vup = new openfl_geom_Vector3D(1,0,0);
		}
		var right = vup.crossProduct(dir);
		right.normalize();
		this.rawData.data.set(0,right.x);
		this.rawData.data.set(4,right.y);
		this.rawData.data.set(8,right.z);
		this.rawData.data.set(12,0.0);
		this.rawData.data.set(1,vup.x);
		this.rawData.data.set(5,vup.y);
		this.rawData.data.set(9,vup.z);
		this.rawData.data.set(13,0.0);
		this.rawData.data.set(2,dir.x);
		this.rawData.data.set(6,dir.y);
		this.rawData.data.set(10,dir.z);
		this.rawData.data.set(14,0.0);
		this.rawData.data.set(3,pos.x);
		this.rawData.data.set(7,pos.y);
		this.rawData.data.set(11,pos.z);
		this.rawData.data.set(15,1.0);
	}
	,prepend: function(rhs) {
		var m111 = rhs.rawData.data.get(0);
		var m121 = rhs.rawData.data.get(4);
		var m131 = rhs.rawData.data.get(8);
		var m141 = rhs.rawData.data.get(12);
		var m112 = rhs.rawData.data.get(1);
		var m122 = rhs.rawData.data.get(5);
		var m132 = rhs.rawData.data.get(9);
		var m142 = rhs.rawData.data.get(13);
		var m113 = rhs.rawData.data.get(2);
		var m123 = rhs.rawData.data.get(6);
		var m133 = rhs.rawData.data.get(10);
		var m143 = rhs.rawData.data.get(14);
		var m114 = rhs.rawData.data.get(3);
		var m124 = rhs.rawData.data.get(7);
		var m134 = rhs.rawData.data.get(11);
		var m144 = rhs.rawData.data.get(15);
		var m211 = this.rawData.data.get(0);
		var m221 = this.rawData.data.get(4);
		var m231 = this.rawData.data.get(8);
		var m241 = this.rawData.data.get(12);
		var m212 = this.rawData.data.get(1);
		var m222 = this.rawData.data.get(5);
		var m232 = this.rawData.data.get(9);
		var m242 = this.rawData.data.get(13);
		var m213 = this.rawData.data.get(2);
		var m223 = this.rawData.data.get(6);
		var m233 = this.rawData.data.get(10);
		var m243 = this.rawData.data.get(14);
		var m214 = this.rawData.data.get(3);
		var m224 = this.rawData.data.get(7);
		var m234 = this.rawData.data.get(11);
		var m244 = this.rawData.data.get(15);
		this.rawData.data.set(0,m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241);
		this.rawData.data.set(1,m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242);
		this.rawData.data.set(2,m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243);
		this.rawData.data.set(3,m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244);
		this.rawData.data.set(4,m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241);
		this.rawData.data.set(5,m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242);
		this.rawData.data.set(6,m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243);
		this.rawData.data.set(7,m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244);
		this.rawData.data.set(8,m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241);
		this.rawData.data.set(9,m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242);
		this.rawData.data.set(10,m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243);
		this.rawData.data.set(11,m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244);
		this.rawData.data.set(12,m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241);
		this.rawData.data.set(13,m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242);
		this.rawData.data.set(14,m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243);
		this.rawData.data.set(15,m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244);
	}
	,prependRotation: function(degrees,axis,pivotPoint) {
		var tz = 0;
		var ty = tz;
		var tx = ty;
		if(pivotPoint != null) {
			tx = pivotPoint.x;
			ty = pivotPoint.y;
			tz = pivotPoint.z;
		}
		var radian = degrees * $hx_exports.Math.PI / 180;
		var cos = $hx_exports.Math.cos(radian);
		var sin = $hx_exports.Math.sin(radian);
		var x = axis.x;
		var y = axis.y;
		var z = axis.z;
		var x2 = x * x;
		var y2 = y * y;
		var z2 = z * z;
		var ls = x2 + y2 + z2;
		if(ls != 0) {
			var l = $hx_exports.Math.sqrt(ls);
			x /= l;
			y /= l;
			z /= l;
			x2 /= ls;
			y2 /= ls;
			z2 /= ls;
		}
		var ccos = 1 - cos;
		var m = new openfl_geom_Matrix3D();
		var d = m.rawData;
		d.data.set(0,x2 + (y2 + z2) * cos);
		d.data.set(1,x * y * ccos + z * sin);
		d.data.set(2,x * z * ccos - y * sin);
		d.data.set(4,x * y * ccos - z * sin);
		d.data.set(5,y2 + (x2 + z2) * cos);
		d.data.set(6,y * z * ccos + x * sin);
		d.data.set(8,x * z * ccos + y * sin);
		d.data.set(9,y * z * ccos - x * sin);
		d.data.set(10,z2 + (x2 + y2) * cos);
		d.data.set(12,(tx * (y2 + z2) - x * (ty * y + tz * z)) * ccos + (ty * z - tz * y) * sin);
		d.data.set(13,(ty * (x2 + z2) - y * (tx * x + tz * z)) * ccos + (tz * x - tx * z) * sin);
		d.data.set(14,(tz * (x2 + y2) - z * (tx * x + ty * y)) * ccos + (tx * y - ty * x) * sin);
		this.prepend(m);
	}
	,prependScale: function(xScale,yScale,zScale) {
		var a = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
		var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vector.data.set(i,a[i]);
		}
		this.prepend(new openfl_geom_Matrix3D(vector));
	}
	,prependTranslation: function(x,y,z) {
		var m = new openfl_geom_Matrix3D();
		m.set_position(new openfl_geom_Vector3D(x,y,z));
		this.prepend(m);
	}
	,recompose: function(components,orientationStyle) {
		if(components.data.get_length() < 3 || components.data.get(2).x == 0 || components.data.get(2).y == 0 || components.data.get(2).z == 0) {
			return false;
		}
		if(orientationStyle == null) {
			orientationStyle = 1;
		}
		this.identity();
		var scale = [];
		scale[0] = scale[1] = scale[2] = components.data.get(2).x;
		scale[4] = scale[5] = scale[6] = components.data.get(2).y;
		scale[8] = scale[9] = scale[10] = components.data.get(2).z;
		if(orientationStyle == null) {
			var x = components.data.get(1).x;
			var y = components.data.get(1).y;
			var z = components.data.get(1).z;
			var w = components.data.get(1).w;
			if(orientationStyle == 0) {
				x *= $hx_exports.Math.sin(w / 2);
				y *= $hx_exports.Math.sin(w / 2);
				z *= $hx_exports.Math.sin(w / 2);
				w = $hx_exports.Math.cos(w / 2);
			}
			this.rawData.data.set(0,(1 - 2 * y * y - 2 * z * z) * scale[0]);
			this.rawData.data.set(1,(2 * x * y + 2 * w * z) * scale[1]);
			this.rawData.data.set(2,(2 * x * z - 2 * w * y) * scale[2]);
			this.rawData.data.set(3,0);
			this.rawData.data.set(4,(2 * x * y - 2 * w * z) * scale[4]);
			this.rawData.data.set(5,(1 - 2 * x * x - 2 * z * z) * scale[5]);
			this.rawData.data.set(6,(2 * y * z + 2 * w * x) * scale[6]);
			this.rawData.data.set(7,0);
			this.rawData.data.set(8,(2 * x * z + 2 * w * y) * scale[8]);
			this.rawData.data.set(9,(2 * y * z - 2 * w * x) * scale[9]);
			this.rawData.data.set(10,(1 - 2 * x * x - 2 * y * y) * scale[10]);
			this.rawData.data.set(11,0);
			var this1 = this.rawData;
			var value = components.data.get(0).x;
			this1.data.set(12,value);
			var this2 = this.rawData;
			var value1 = components.data.get(0).y;
			this2.data.set(13,value1);
			var this3 = this.rawData;
			var value2 = components.data.get(0).z;
			this3.data.set(14,value2);
			this.rawData.data.set(15,1);
		} else if(orientationStyle == 1) {
			var cx = $hx_exports.Math.cos(components.data.get(1).x);
			var cy = $hx_exports.Math.cos(components.data.get(1).y);
			var cz = $hx_exports.Math.cos(components.data.get(1).z);
			var sx = $hx_exports.Math.sin(components.data.get(1).x);
			var sy = $hx_exports.Math.sin(components.data.get(1).y);
			var sz = $hx_exports.Math.sin(components.data.get(1).z);
			this.rawData.data.set(0,cy * cz * scale[0]);
			this.rawData.data.set(1,cy * sz * scale[1]);
			this.rawData.data.set(2,-sy * scale[2]);
			this.rawData.data.set(3,0);
			this.rawData.data.set(4,(sx * sy * cz - cx * sz) * scale[4]);
			this.rawData.data.set(5,(sx * sy * sz + cx * cz) * scale[5]);
			this.rawData.data.set(6,sx * cy * scale[6]);
			this.rawData.data.set(7,0);
			this.rawData.data.set(8,(cx * sy * cz + sx * sz) * scale[8]);
			this.rawData.data.set(9,(cx * sy * sz - sx * cz) * scale[9]);
			this.rawData.data.set(10,cx * cy * scale[10]);
			this.rawData.data.set(11,0);
			var this4 = this.rawData;
			var value3 = components.data.get(0).x;
			this4.data.set(12,value3);
			var this5 = this.rawData;
			var value4 = components.data.get(0).y;
			this5.data.set(13,value4);
			var this6 = this.rawData;
			var value5 = components.data.get(0).z;
			this6.data.set(14,value5);
			this.rawData.data.set(15,1);
		} else {
			var x1 = components.data.get(1).x;
			var y1 = components.data.get(1).y;
			var z1 = components.data.get(1).z;
			var w1 = components.data.get(1).w;
			if(orientationStyle == 0) {
				x1 *= $hx_exports.Math.sin(w1 / 2);
				y1 *= $hx_exports.Math.sin(w1 / 2);
				z1 *= $hx_exports.Math.sin(w1 / 2);
				w1 = $hx_exports.Math.cos(w1 / 2);
			}
			this.rawData.data.set(0,(1 - 2 * y1 * y1 - 2 * z1 * z1) * scale[0]);
			this.rawData.data.set(1,(2 * x1 * y1 + 2 * w1 * z1) * scale[1]);
			this.rawData.data.set(2,(2 * x1 * z1 - 2 * w1 * y1) * scale[2]);
			this.rawData.data.set(3,0);
			this.rawData.data.set(4,(2 * x1 * y1 - 2 * w1 * z1) * scale[4]);
			this.rawData.data.set(5,(1 - 2 * x1 * x1 - 2 * z1 * z1) * scale[5]);
			this.rawData.data.set(6,(2 * y1 * z1 + 2 * w1 * x1) * scale[6]);
			this.rawData.data.set(7,0);
			this.rawData.data.set(8,(2 * x1 * z1 + 2 * w1 * y1) * scale[8]);
			this.rawData.data.set(9,(2 * y1 * z1 - 2 * w1 * x1) * scale[9]);
			this.rawData.data.set(10,(1 - 2 * x1 * x1 - 2 * y1 * y1) * scale[10]);
			this.rawData.data.set(11,0);
			var this7 = this.rawData;
			var value6 = components.data.get(0).x;
			this7.data.set(12,value6);
			var this8 = this.rawData;
			var value7 = components.data.get(0).y;
			this8.data.set(13,value7);
			var this9 = this.rawData;
			var value8 = components.data.get(0).z;
			this9.data.set(14,value8);
			this.rawData.data.set(15,1);
		}
		if(components.data.get(2).x == 0) {
			this.rawData.data.set(0,1e-15);
		}
		if(components.data.get(2).y == 0) {
			this.rawData.data.set(5,1e-15);
		}
		if(components.data.get(2).z == 0) {
			this.rawData.data.set(10,1e-15);
		}
		return !(components.data.get(2).x == 0 || components.data.get(2).y == 0 || components.data.get(2).y == 0);
	}
	,transformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl_geom_Vector3D(x * this.rawData.data.get(0) + y * this.rawData.data.get(4) + z * this.rawData.data.get(8) + this.rawData.data.get(12),x * this.rawData.data.get(1) + y * this.rawData.data.get(5) + z * this.rawData.data.get(9) + this.rawData.data.get(13),x * this.rawData.data.get(2) + y * this.rawData.data.get(6) + z * this.rawData.data.get(10) + this.rawData.data.get(14),x * this.rawData.data.get(3) + y * this.rawData.data.get(7) + z * this.rawData.data.get(11) + this.rawData.data.get(15));
	}
	,transformVectors: function(vin,vout) {
		var i = 0;
		var x;
		var y;
		var z;
		while(i + 3 <= vin.data.get_length()) {
			x = vin.data.get(i);
			y = vin.data.get(i + 1);
			z = vin.data.get(i + 2);
			var value = x * this.rawData.data.get(0) + y * this.rawData.data.get(4) + z * this.rawData.data.get(8) + this.rawData.data.get(12);
			vout.data.set(i,value);
			var value1 = x * this.rawData.data.get(1) + y * this.rawData.data.get(5) + z * this.rawData.data.get(9) + this.rawData.data.get(13);
			vout.data.set(i + 1,value1);
			var value2 = x * this.rawData.data.get(2) + y * this.rawData.data.get(6) + z * this.rawData.data.get(10) + this.rawData.data.get(14);
			vout.data.set(i + 2,value2);
			i += 3;
		}
	}
	,transpose: function() {
		var oRawData = new openfl__$Vector_AbstractVector(this.rawData.data.copy());
		var this1 = this.rawData;
		var value = oRawData.data.get(4);
		this1.data.set(1,value);
		var this2 = this.rawData;
		var value1 = oRawData.data.get(8);
		this2.data.set(2,value1);
		var this3 = this.rawData;
		var value2 = oRawData.data.get(12);
		this3.data.set(3,value2);
		var this4 = this.rawData;
		var value3 = oRawData.data.get(1);
		this4.data.set(4,value3);
		var this5 = this.rawData;
		var value4 = oRawData.data.get(9);
		this5.data.set(6,value4);
		var this6 = this.rawData;
		var value5 = oRawData.data.get(13);
		this6.data.set(7,value5);
		var this7 = this.rawData;
		var value6 = oRawData.data.get(2);
		this7.data.set(8,value6);
		var this8 = this.rawData;
		var value7 = oRawData.data.get(6);
		this8.data.set(9,value7);
		var this9 = this.rawData;
		var value8 = oRawData.data.get(14);
		this9.data.set(11,value8);
		var this10 = this.rawData;
		var value9 = oRawData.data.get(3);
		this10.data.set(12,value9);
		var this11 = this.rawData;
		var value10 = oRawData.data.get(7);
		this11.data.set(13,value10);
		var this12 = this.rawData;
		var value11 = oRawData.data.get(11);
		this12.data.set(14,value11);
	}
	,get_determinant: function() {
		return (this.rawData.data.get(0) * this.rawData.data.get(5) - this.rawData.data.get(4) * this.rawData.data.get(1)) * (this.rawData.data.get(10) * this.rawData.data.get(15) - this.rawData.data.get(14) * this.rawData.data.get(11)) - (this.rawData.data.get(0) * this.rawData.data.get(9) - this.rawData.data.get(8) * this.rawData.data.get(1)) * (this.rawData.data.get(6) * this.rawData.data.get(15) - this.rawData.data.get(14) * this.rawData.data.get(7)) + (this.rawData.data.get(0) * this.rawData.data.get(13) - this.rawData.data.get(12) * this.rawData.data.get(1)) * (this.rawData.data.get(6) * this.rawData.data.get(11) - this.rawData.data.get(10) * this.rawData.data.get(7)) + (this.rawData.data.get(4) * this.rawData.data.get(9) - this.rawData.data.get(8) * this.rawData.data.get(5)) * (this.rawData.data.get(2) * this.rawData.data.get(15) - this.rawData.data.get(14) * this.rawData.data.get(3)) - (this.rawData.data.get(4) * this.rawData.data.get(13) - this.rawData.data.get(12) * this.rawData.data.get(5)) * (this.rawData.data.get(2) * this.rawData.data.get(11) - this.rawData.data.get(10) * this.rawData.data.get(3)) + (this.rawData.data.get(8) * this.rawData.data.get(13) - this.rawData.data.get(12) * this.rawData.data.get(9)) * (this.rawData.data.get(2) * this.rawData.data.get(7) - this.rawData.data.get(6) * this.rawData.data.get(3));
	}
	,get_position: function() {
		return new openfl_geom_Vector3D(this.rawData.data.get(12),this.rawData.data.get(13),this.rawData.data.get(14));
	}
	,set_position: function(val) {
		this.rawData.data.set(12,val.x);
		this.rawData.data.set(13,val.y);
		this.rawData.data.set(14,val.z);
		return val;
	}
	,__class__: openfl_geom_Matrix3D
	,__properties__: {set_position:"set_position",get_position:"get_position",get_determinant:"get_determinant"}
};
var openfl_geom__$Orientation3D_Orientation3D_$Impl_$ = $hx_exports["openfl"]["geom"]["Orientation3D"] = {};
$hxClasses["openfl.geom._Orientation3D.Orientation3D_Impl_"] = openfl_geom__$Orientation3D_Orientation3D_$Impl_$;
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.__name__ = ["openfl","geom","_Orientation3D","Orientation3D_Impl_"];
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.fromString = function(value) {
	switch(value) {
	case "axisAngle":
		return 0;
	case "eulerAngles":
		return 1;
	case "quaternion":
		return 2;
	default:
		return null;
	}
};
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "axisAngle";
	case 1:
		return "eulerAngles";
	case 2:
		return "quaternion";
	default:
		return null;
	}
};
var openfl_geom_PerspectiveProjection = $hx_exports["openfl"]["geom"]["PerspectiveProjection"] = function() {
	this.__fieldOfView = 0;
	this.focalLength = 0;
	this.matrix3D = new openfl_geom_Matrix3D();
	this.projectionCenter = new openfl_geom_Point(openfl_Lib.get_current().stage.stageWidth / 2,openfl_Lib.get_current().stage.stageHeight / 2);
};
$hxClasses["openfl.geom.PerspectiveProjection"] = openfl_geom_PerspectiveProjection;
openfl_geom_PerspectiveProjection.__name__ = ["openfl","geom","PerspectiveProjection"];
openfl_geom_PerspectiveProjection.prototype = {
	focalLength: null
	,projectionCenter: null
	,__fieldOfView: null
	,matrix3D: null
	,toMatrix3D: function() {
		if(this.projectionCenter == null) {
			return null;
		}
		var _mp = this.matrix3D.rawData;
		_mp.data.set(0,this.focalLength);
		_mp.data.set(5,this.focalLength);
		_mp.data.set(11,1.0);
		_mp.data.set(15,0);
		return this.matrix3D;
	}
	,get_fieldOfView: function() {
		return this.__fieldOfView;
	}
	,set_fieldOfView: function(fieldOfView) {
		var p_nFovY = fieldOfView * 0.01745329251994329577;
		this.__fieldOfView = p_nFovY;
		var cotan = 1 / $hx_exports.Math.tan(p_nFovY / 2);
		this.focalLength = openfl_Lib.get_current().stage.stageWidth * (openfl_Lib.get_current().stage.stageWidth / openfl_Lib.get_current().stage.stageHeight) / 2 * cotan;
		return this.__fieldOfView;
	}
	,__class__: openfl_geom_PerspectiveProjection
	,__properties__: {set_fieldOfView:"set_fieldOfView",get_fieldOfView:"get_fieldOfView"}
};
var openfl_geom_Transform = $hx_exports["openfl"]["geom"]["Transform"] = function(displayObject) {
	this.__colorTransform = new openfl_geom_ColorTransform();
	this.concatenatedColorTransform = new openfl_geom_ColorTransform();
	this.pixelBounds = new openfl_geom_Rectangle();
	this.__displayObject = displayObject;
	this.__hasMatrix = true;
};
$hxClasses["openfl.geom.Transform"] = openfl_geom_Transform;
openfl_geom_Transform.__name__ = ["openfl","geom","Transform"];
openfl_geom_Transform.prototype = {
	concatenatedColorTransform: null
	,pixelBounds: null
	,__colorTransform: null
	,__displayObject: null
	,__hasMatrix: null
	,__hasMatrix3D: null
	,get_colorTransform: function() {
		return this.__colorTransform;
	}
	,set_colorTransform: function(value) {
		if(!this.__colorTransform.__equals(value)) {
			this.__colorTransform = value;
			if(value != null) {
				this.__displayObject.set_alpha(value.alphaMultiplier);
			}
			this.__displayObject.__setRenderDirty();
		}
		return this.__colorTransform;
	}
	,get_concatenatedMatrix: function() {
		if(this.__hasMatrix) {
			return this.__displayObject.__getWorldTransform().clone();
		}
		return null;
	}
	,get_matrix: function() {
		if(this.__hasMatrix) {
			return this.__displayObject.__transform.clone();
		}
		return null;
	}
	,set_matrix: function(value) {
		if(value == null) {
			this.__hasMatrix = false;
			return null;
		}
		this.__hasMatrix = true;
		this.__hasMatrix3D = false;
		if(this.__displayObject != null) {
			this.__setTransform(value.a,value.b,value.c,value.d,value.tx,value.ty);
		}
		return value;
	}
	,get_matrix3D: function() {
		if(this.__hasMatrix3D) {
			var matrix = this.__displayObject.__transform;
			var a = [matrix.a,matrix.b,0.0,0.0,matrix.c,matrix.d,0.0,0.0,0.0,0.0,1.0,0.0,matrix.tx,matrix.ty,0.0,1.0];
			var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
			var _g1 = 0;
			var _g = a.length;
			while(_g1 < _g) {
				var i = _g1++;
				vector.data.set(i,a[i]);
			}
			return new openfl_geom_Matrix3D(vector);
		}
		return null;
	}
	,set_matrix3D: function(value) {
		if(value == null) {
			this.__hasMatrix3D = false;
			return null;
		}
		this.__hasMatrix = false;
		this.__hasMatrix3D = true;
		this.__setTransform(value.rawData.data.get(0),value.rawData.data.get(1),value.rawData.data.get(5),value.rawData.data.get(6),value.rawData.data.get(12),value.rawData.data.get(13));
		return value;
	}
	,__setTransform: function(a,b,c,d,tx,ty) {
		if(this.__displayObject != null) {
			var scaleX = 0.0;
			var scaleY = 0.0;
			if(b == 0) {
				scaleX = a;
			} else {
				scaleX = $hx_exports.Math.sqrt(a * a + b * b);
			}
			if(c == 0) {
				scaleY = a;
			} else {
				scaleY = $hx_exports.Math.sqrt(c * c + d * d);
			}
			this.__displayObject.__scaleX = scaleX;
			this.__displayObject.__scaleY = scaleY;
			var rotation = 180 / $hx_exports.Math.PI * $hx_exports.Math.atan2(d,c) - 90;
			if(rotation != this.__displayObject.__rotation) {
				this.__displayObject.__rotation = rotation;
				var radians = rotation * ($hx_exports.Math.PI / 180);
				this.__displayObject.__rotationSine = $hx_exports.Math.sin(radians);
				this.__displayObject.__rotationCosine = $hx_exports.Math.cos(radians);
			}
			this.__displayObject.__transform.a = a;
			this.__displayObject.__transform.b = b;
			this.__displayObject.__transform.c = c;
			this.__displayObject.__transform.d = d;
			this.__displayObject.__transform.tx = tx;
			this.__displayObject.__transform.ty = ty;
			this.__displayObject.__setTransformDirty();
		}
	}
	,__class__: openfl_geom_Transform
	,__properties__: {set_matrix3D:"set_matrix3D",get_matrix3D:"get_matrix3D",set_matrix:"set_matrix",get_matrix:"get_matrix",get_concatenatedMatrix:"get_concatenatedMatrix",set_colorTransform:"set_colorTransform",get_colorTransform:"get_colorTransform"}
};
var openfl_geom_Utils3D = $hx_exports["openfl"]["geom"]["Utils3D"] = function() { };
$hxClasses["openfl.geom.Utils3D"] = openfl_geom_Utils3D;
openfl_geom_Utils3D.__name__ = ["openfl","geom","Utils3D"];
openfl_geom_Utils3D.projectVector = function(m,v) {
	var n = m.rawData;
	var l_oProj = new openfl_geom_Vector3D();
	l_oProj.x = v.x * n.data.get(0) + v.y * n.data.get(4) + v.z * n.data.get(8) + n.data.get(12);
	l_oProj.y = v.x * n.data.get(1) + v.y * n.data.get(5) + v.z * n.data.get(9) + n.data.get(13);
	l_oProj.z = v.x * n.data.get(2) + v.y * n.data.get(6) + v.z * n.data.get(10) + n.data.get(14);
	var w = v.x * n.data.get(3) + v.y * n.data.get(7) + v.z * n.data.get(11) + n.data.get(15);
	l_oProj.z /= w;
	l_oProj.x /= w;
	l_oProj.y /= w;
	return l_oProj;
};
openfl_geom_Utils3D.projectVectors = function(m,verts,projectedVerts,uvts) {
	if(verts.data.get_length() % 3 != 0) {
		return;
	}
	var n = m.rawData;
	var x;
	var y;
	var z;
	var w;
	var x1;
	var y1;
	var z1;
	var w1;
	var i = 0;
	while(i < verts.data.get_length()) {
		x = verts.data.get(i);
		y = verts.data.get(i + 1);
		z = verts.data.get(i + 2);
		w = 1;
		x1 = x * n.data.get(0) + y * n.data.get(4) + z * n.data.get(8) + w * n.data.get(12);
		y1 = x * n.data.get(1) + y * n.data.get(5) + z * n.data.get(9) + w * n.data.get(13);
		z1 = x * n.data.get(2) + y * n.data.get(6) + z * n.data.get(10) + w * n.data.get(14);
		w1 = x * n.data.get(3) + y * n.data.get(7) + z * n.data.get(11) + w * n.data.get(15);
		projectedVerts.data.push(x1 / w1);
		projectedVerts.data.push(y1 / w1);
		uvts.data.set(i + 2,1 / w1);
		i += 3;
	}
};
var openfl_geom_Vector3D = $hx_exports["openfl"]["geom"]["Vector3D"] = function(x,y,z,w) {
	if(w == null) {
		w = 0;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["openfl.geom.Vector3D"] = openfl_geom_Vector3D;
openfl_geom_Vector3D.__name__ = ["openfl","geom","Vector3D"];
openfl_geom_Vector3D.__properties__ = {get_Z_AXIS:"get_Z_AXIS",get_Y_AXIS:"get_Y_AXIS",get_X_AXIS:"get_X_AXIS"};
openfl_geom_Vector3D.angleBetween = function(a,b) {
	var la = a.get_length();
	var lb = b.get_length();
	var dot = a.dotProduct(b);
	if(la != 0) {
		dot /= la;
	}
	if(lb != 0) {
		dot /= lb;
	}
	return $hx_exports.Math.acos(dot);
};
openfl_geom_Vector3D.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return $hx_exports.Math.sqrt(x * x + y * y + z * z);
};
openfl_geom_Vector3D.get_X_AXIS = function() {
	return new openfl_geom_Vector3D(1,0,0);
};
openfl_geom_Vector3D.get_Y_AXIS = function() {
	return new openfl_geom_Vector3D(0,1,0);
};
openfl_geom_Vector3D.get_Z_AXIS = function() {
	return new openfl_geom_Vector3D(0,0,1);
};
openfl_geom_Vector3D.prototype = {
	w: null
	,x: null
	,y: null
	,z: null
	,add: function(a) {
		return new openfl_geom_Vector3D(this.x + a.x,this.y + a.y,this.z + a.z);
	}
	,clone: function() {
		return new openfl_geom_Vector3D(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector3D) {
		this.x = sourceVector3D.x;
		this.y = sourceVector3D.y;
		this.z = sourceVector3D.z;
	}
	,crossProduct: function(a) {
		return new openfl_geom_Vector3D(this.y * a.z - this.z * a.y,this.z * a.x - this.x * a.z,this.x * a.y - this.y * a.x,1);
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) {
			allFour = false;
		}
		if(this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z) {
			if(!(!allFour)) {
				return this.w == toCompare.w;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) {
			allFour = false;
		}
		if($hx_exports.Math.abs(this.x - toCompare.x) < tolerance && $hx_exports.Math.abs(this.y - toCompare.y) < tolerance && $hx_exports.Math.abs(this.z - toCompare.z) < tolerance) {
			if(!(!allFour)) {
				return $hx_exports.Math.abs(this.w - toCompare.w) < tolerance;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = this.get_length();
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a) {
		return new openfl_geom_Vector3D(this.x - a.x,this.y - a.y,this.z - a.z);
	}
	,toString: function() {
		return "Vector3D(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return $hx_exports.Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: openfl_geom_Vector3D
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
var openfl_media_ID3Info = $hx_exports["openfl"]["media"]["ID3Info"] = function() {
};
$hxClasses["openfl.media.ID3Info"] = openfl_media_ID3Info;
openfl_media_ID3Info.__name__ = ["openfl","media","ID3Info"];
openfl_media_ID3Info.prototype = {
	album: null
	,artist: null
	,comment: null
	,genre: null
	,songName: null
	,track: null
	,year: null
	,__class__: openfl_media_ID3Info
};
var openfl_media_Sound = $hx_exports["openfl"]["media"]["Sound"] = function(stream,context) {
	openfl_events_EventDispatcher.call(this,this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.isBuffering = false;
	this.url = null;
	if(stream != null) {
		this.load(stream,context);
	}
};
$hxClasses["openfl.media.Sound"] = openfl_media_Sound;
openfl_media_Sound.__name__ = ["openfl","media","Sound"];
openfl_media_Sound.fromAudioBuffer = function(buffer) {
	var sound = new openfl_media_Sound();
	sound.__buffer = buffer;
	return sound;
};
openfl_media_Sound.fromFile = function(path) {
	return openfl_media_Sound.fromAudioBuffer($hx_exports.lime.media.AudioBuffer.fromFile(path));
};
openfl_media_Sound.loadFromFile = function(path) {
	return $hx_exports.lime.media.AudioBuffer.loadFromFile(path).then(function(audioBuffer) {
		return $hx_exports.lime.app.Future.withValue(openfl_media_Sound.fromAudioBuffer(audioBuffer));
	});
};
openfl_media_Sound.loadFromFiles = function(paths) {
	return $hx_exports.lime.media.AudioBuffer.loadFromFiles(paths).then(function(audioBuffer) {
		return $hx_exports.lime.app.Future.withValue(openfl_media_Sound.fromAudioBuffer(audioBuffer));
	});
};
openfl_media_Sound.__super__ = openfl_events_EventDispatcher;
openfl_media_Sound.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,isBuffering: null
	,url: null
	,spriteKey: null
	,__buffer: null
	,close: function() {
		if(this.__buffer != null) {
			this.__buffer.dispose();
		}
	}
	,triggerLoadEvent: function() {
		this.AudioBuffer_onURLLoad(this.__buffer);
	}
	,load: function(stream,context) {
		var _gthis = this;
		this.url = stream.url;
		var defaultLibrary = $hx_exports.lime.utils.Assets.getLibrary("default");
		if(defaultLibrary != null && defaultLibrary.cachedAudioBuffers.exists(this.url)) {
			this.AudioBuffer_onURLLoad(defaultLibrary.cachedAudioBuffers.get(this.url));
		} else {
			$hx_exports.lime.media.AudioBuffer.loadFromFile(this.url).onComplete($bind(this,this.AudioBuffer_onURLLoad)).onError(function(_) {
				_gthis.AudioBuffer_onURLLoad(null);
			});
		}
	}
	,loadCompressedDataFromByteArray: function(bytes,bytesLength) {
		if(bytes == null || bytesLength <= 0) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
			return;
		}
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(bytes) > bytesLength) {
			var this1 = new openfl_utils_ByteArrayData(bytesLength);
			var copy = this1;
			copy.writeBytes(bytes,0,bytesLength);
			bytes = copy;
		}
		this.__buffer = $hx_exports.lime.media.AudioBuffer.fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes));
		if(this.__buffer == null) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
		} else {
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,loadPCMFromByteArray: function(bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) {
			sampleRate = 44100;
		}
		if(stereo == null) {
			stereo = true;
		}
		if(format == null) {
			format = "float";
		}
		if(bytes == null) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
			return;
		}
		var audioBuffer = new $hx_exports.lime.media.AudioBuffer();
		audioBuffer.bitsPerSample = format == "float" ? 32 : 16;
		audioBuffer.channels = stereo ? 2 : 1;
		var buffer = openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer(bytes);
		var this1;
		if(buffer != null) {
			this1 = new Uint8Array(buffer,0);
		} else {
			this1 = null;
		}
		audioBuffer.data = this1;
		audioBuffer.sampleRate = Std.int(sampleRate);
		this.__buffer = audioBuffer;
		this.dispatchEvent(new openfl_events_Event("complete"));
	}
	,play: function(startTime,loops,sndTransform) {
		if(loops == null) {
			loops = 0;
		}
		if(startTime == null) {
			startTime = 0.0;
		}
		if(openfl_media_SoundMixer.__soundChannels.length >= 32) {
			return null;
		}
		if(sndTransform == null) {
			sndTransform = new openfl_media_SoundTransform();
		} else {
			sndTransform = sndTransform.clone();
		}
		var pan = openfl_media_SoundMixer.__soundTransform.pan + sndTransform.pan;
		if(pan > 1) {
			pan = 1;
		}
		if(pan < -1) {
			pan = -1;
		}
		var volume = openfl_media_SoundMixer.__soundTransform.volume * sndTransform.volume;
		var source = new $hx_exports.lime.media.AudioSource(this.__buffer);
		source.offset = Std.int(startTime);
		if(loops > 1) {
			source.set_loops(loops - 1);
		}
		source.set_gain(volume);
		var position = source.get_position();
		position.x = pan;
		position.z = -1 * $hx_exports.Math.sqrt(1 - $hx_exports.Math.pow(pan,2));
		source.set_position(position);
		return new openfl_media_SoundChannel(source,sndTransform,this.spriteKey);
	}
	,get_id3: function() {
		return new openfl_media_ID3Info();
	}
	,get_length: function() {
		if(this.__buffer != null) {
			return Std.int(this.__buffer.get_src().duration() * 1000);
		}
		return 0;
	}
	,AudioBuffer_onURLLoad: function(buffer) {
		if(buffer == null) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
		} else {
			this.__buffer = buffer;
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,__class__: openfl_media_Sound
	,__properties__: {get_length:"get_length",get_id3:"get_id3"}
});
var openfl_media_SoundChannel = $hx_exports["openfl"]["media"]["SoundChannel"] = function(source,soundTransform,spriteKey) {
	openfl_events_EventDispatcher.call(this,this);
	this.leftPeak = 1;
	this.rightPeak = 1;
	if(soundTransform != null) {
		this.__soundTransform = soundTransform;
	} else {
		this.__soundTransform = new openfl_media_SoundTransform();
	}
	if(spriteKey != null) {
		this.__spriteKey = spriteKey;
	}
	if(source != null) {
		this.__source = source;
		this.__source.onComplete.add($bind(this,this.source_onComplete));
		this.__isValid = true;
		this.__source.play(spriteKey);
	}
	openfl_media_SoundMixer.__registerSoundChannel(this);
};
$hxClasses["openfl.media.SoundChannel"] = openfl_media_SoundChannel;
openfl_media_SoundChannel.__name__ = ["openfl","media","SoundChannel"];
openfl_media_SoundChannel.__super__ = openfl_events_EventDispatcher;
openfl_media_SoundChannel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	leftPeak: null
	,rightPeak: null
	,__isValid: null
	,__soundTransform: null
	,__source: null
	,__spriteKey: null
	,stop: function() {
		openfl_media_SoundMixer.__unregisterSoundChannel(this);
		if(!this.__isValid) {
			return;
		}
		this.__source.stop();
		this.__dispose();
	}
	,__dispose: function() {
		if(!this.__isValid) {
			return;
		}
		this.__source.onComplete.remove($bind(this,this.source_onComplete));
		this.__source.dispose();
		this.__isValid = false;
	}
	,__updateTransform: function() {
		this.set_soundTransform(this.get_soundTransform());
	}
	,get_position: function() {
		if(!this.__isValid) {
			return 0;
		}
		return this.__source.get_currentTime() + this.__source.offset;
	}
	,set_position: function(value) {
		if(!this.__isValid) {
			return 0;
		}
		this.__source.set_currentTime(Std.int(value) - this.__source.offset);
		return value;
	}
	,get_soundTransform: function() {
		return this.__soundTransform.clone();
	}
	,set_soundTransform: function(value) {
		if(value != null) {
			this.__soundTransform.pan = value.pan;
			this.__soundTransform.volume = value.volume;
			var pan = openfl_media_SoundMixer.__soundTransform.pan + this.__soundTransform.pan;
			if(pan < -1) {
				pan = -1;
			}
			if(pan > 1) {
				pan = 1;
			}
			var volume = openfl_media_SoundMixer.__soundTransform.volume * this.__soundTransform.volume;
			if(this.__isValid) {
				this.__source.set_gain(volume);
				var position = this.__source.get_position();
				position.x = pan;
				position.z = -1 * $hx_exports.Math.sqrt(1 - $hx_exports.Math.pow(pan,2));
				this.__source.set_position(position);
				return value;
			}
		}
		return value;
	}
	,source_onComplete: function() {
		openfl_media_SoundMixer.__unregisterSoundChannel(this);
		this.__dispose();
		this.dispatchEvent(new openfl_events_Event("soundComplete"));
	}
	,__class__: openfl_media_SoundChannel
	,__properties__: {set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform",set_position:"set_position",get_position:"get_position"}
});
var openfl_media_SoundLoaderContext = $hx_exports["openfl"]["media"]["SoundLoaderContext"] = function(bufferTime,checkPolicyFile) {
	if(checkPolicyFile == null) {
		checkPolicyFile = false;
	}
	if(bufferTime == null) {
		bufferTime = 1000;
	}
	this.bufferTime = bufferTime;
	this.checkPolicyFile = checkPolicyFile;
};
$hxClasses["openfl.media.SoundLoaderContext"] = openfl_media_SoundLoaderContext;
openfl_media_SoundLoaderContext.__name__ = ["openfl","media","SoundLoaderContext"];
openfl_media_SoundLoaderContext.prototype = {
	bufferTime: null
	,checkPolicyFile: null
	,__class__: openfl_media_SoundLoaderContext
};
var openfl_media_SoundTransform = $hx_exports["openfl"]["media"]["SoundTransform"] = function(vol,panning) {
	if(panning == null) {
		panning = 0;
	}
	if(vol == null) {
		vol = 1;
	}
	this.volume = vol;
	this.pan = panning;
	this.leftToLeft = 0;
	this.leftToRight = 0;
	this.rightToLeft = 0;
	this.rightToRight = 0;
};
$hxClasses["openfl.media.SoundTransform"] = openfl_media_SoundTransform;
openfl_media_SoundTransform.__name__ = ["openfl","media","SoundTransform"];
openfl_media_SoundTransform.prototype = {
	leftToLeft: null
	,leftToRight: null
	,pan: null
	,rightToLeft: null
	,rightToRight: null
	,volume: null
	,clone: function() {
		return new openfl_media_SoundTransform(this.volume,this.pan);
	}
	,__class__: openfl_media_SoundTransform
};
var openfl_media_SoundMixer = $hx_exports["openfl"]["media"]["SoundMixer"] = function() { };
$hxClasses["openfl.media.SoundMixer"] = openfl_media_SoundMixer;
openfl_media_SoundMixer.__name__ = ["openfl","media","SoundMixer"];
openfl_media_SoundMixer.__properties__ = {set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform"};
openfl_media_SoundMixer.bufferTime = null;
openfl_media_SoundMixer.areSoundsInaccessible = function() {
	return false;
};
openfl_media_SoundMixer.stopAll = function() {
	var _g = 0;
	var _g1 = openfl_media_SoundMixer.__soundChannels;
	while(_g < _g1.length) {
		var channel = _g1[_g];
		++_g;
		channel.stop();
	}
};
openfl_media_SoundMixer.__registerSoundChannel = function(soundChannel) {
	openfl_media_SoundMixer.__soundChannels.push(soundChannel);
};
openfl_media_SoundMixer.__unregisterSoundChannel = function(soundChannel) {
	$hx_exports.HxOverrides.remove(openfl_media_SoundMixer.__soundChannels,soundChannel);
};
openfl_media_SoundMixer.get_soundTransform = function() {
	return openfl_media_SoundMixer.__soundTransform;
};
openfl_media_SoundMixer.set_soundTransform = function(value) {
	openfl_media_SoundMixer.__soundTransform = value.clone();
	var _g = 0;
	var _g1 = openfl_media_SoundMixer.__soundChannels;
	while(_g < _g1.length) {
		var channel = _g1[_g];
		++_g;
		channel.__updateTransform();
	}
	return value;
};
var openfl_media_SoundSprite = $hx_exports["openfl"]["media"]["SoundSprite"] = function(assetKey,spritePaths,spriteIndex,preload) {
	if(preload == null) {
		preload = false;
	}
	this.__spriteIndex = new haxe_ds_StringMap();
	this.children = new haxe_ds_StringMap();
	var _gthis = this;
	this.spritePaths = spritePaths;
	$hx_exports.haxe.Log.trace("Requesting files associated with this soundsprite...",{ fileName : "SoundSprite.hx", lineNumber : 31, className : "openfl.media.SoundSprite", methodName : "new"});
	if(this.__bufferFuture == null) {
		this.buffer = $hx_exports.lime.media.AudioBuffer.makeSprite(spritePaths,spriteIndex,preload);
		this.__bufferFuture = $hx_exports.lime.media.AudioBuffer.loadFromFiles(spritePaths,this.buffer);
		this.__bufferFuture.onComplete(function(a) {
			$hx_exports.haxe.Log.trace("bufferFuture loaded; setting this.buffer.",{ fileName : "SoundSprite.hx", lineNumber : 36, className : "openfl.media.SoundSprite", methodName : "new"});
			_gthis.buffer = a;
		});
	}
};
$hxClasses["openfl.media.SoundSprite"] = openfl_media_SoundSprite;
openfl_media_SoundSprite.__name__ = ["openfl","media","SoundSprite"];
openfl_media_SoundSprite.prepSpriteData = function(spritePart) {
	var secToMsStart = spritePart.msStart;
	var secToMsEnd = spritePart.msEnd;
	return [secToMsStart,secToMsEnd - secToMsStart];
};
openfl_media_SoundSprite.prototype = {
	buffer: null
	,spritePaths: null
	,children: null
	,assetKey: null
	,__bufferFuture: null
	,__spriteIndex: null
	,makeSound: function(spritePart) {
		var key = spritePart.spriteKey;
		var sound = openfl_media_Sound.fromAudioBuffer(this.buffer);
		this.children.set(key,[spritePart,sound]);
		return sound;
	}
	,getIndex: function() {
		return this.__spriteIndex;
	}
	,__class__: openfl_media_SoundSprite
};
var openfl_media_Video = $hx_exports["openfl"]["media"]["Video"] = function(width,height) {
	if(height == null) {
		height = 240;
	}
	if(width == null) {
		width = 320;
	}
	openfl_display_DisplayObject.call(this);
	this.__width = width;
	this.__height = height;
	this.smoothing = false;
	this.deblocking = 0;
};
$hxClasses["openfl.media.Video"] = openfl_media_Video;
openfl_media_Video.__name__ = ["openfl","media","Video"];
openfl_media_Video.__interfaces__ = [openfl_display_IShaderDrawable];
openfl_media_Video.__super__ = openfl_display_DisplayObject;
openfl_media_Video.prototype = $extend(openfl_display_DisplayObject.prototype,{
	deblocking: null
	,shader: null
	,smoothing: null
	,__active: null
	,__buffer: null
	,__bufferAlpha: null
	,__bufferColorTransform: null
	,__bufferContext: null
	,__bufferData: null
	,__dirty: null
	,__height: null
	,__stream: null
	,__texture: null
	,__textureTime: null
	,__width: null
	,attachNetStream: function(netStream) {
		this.__stream = netStream;
		if(this.__stream != null) {
			this.__stream.__video.play();
		}
	}
	,clear: function() {
	}
	,__enterFrame: function(deltaTime) {
		if(this.__renderable && this.__stream != null) {
			this.__setRenderDirty();
		}
	}
	,__getBounds: function(rect,matrix) {
		var bounds = openfl_geom_Rectangle.__pool.get();
		bounds.setTo(0,0,this.__width,this.__height);
		bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__getBuffer: function(gl,alpha,colorTransform) {
		if(this.__buffer == null || this.__bufferContext != gl) {
			var uvWidth = 1;
			var uvHeight = 1;
			var this1 = new Float32Array(104);
			this.__bufferData = this1;
			this.__bufferData[0] = this.get_width();
			this.__bufferData[1] = this.get_height();
			this.__bufferData[3] = uvWidth;
			this.__bufferData[4] = uvHeight;
			this.__bufferData[27] = this.get_height();
			this.__bufferData[30] = uvHeight;
			this.__bufferData[52] = this.get_width();
			this.__bufferData[55] = uvWidth;
			var _g = 0;
			while(_g < 4) {
				var i = _g++;
				this.__bufferData[26 * i + 5] = alpha;
				if(colorTransform != null) {
					this.__bufferData[26 * i + 6] = colorTransform.redMultiplier;
					this.__bufferData[26 * i + 11] = colorTransform.greenMultiplier;
					this.__bufferData[26 * i + 16] = colorTransform.blueMultiplier;
					this.__bufferData[26 * i + 21] = colorTransform.alphaMultiplier;
					this.__bufferData[26 * i + 22] = colorTransform.redOffset / 255;
					this.__bufferData[26 * i + 23] = colorTransform.greenOffset / 255;
					this.__bufferData[26 * i + 24] = colorTransform.blueOffset / 255;
					this.__bufferData[26 * i + 25] = colorTransform.alphaOffset / 255;
				} else {
					this.__bufferData[26 * i + 6] = 1;
					this.__bufferData[26 * i + 11] = 1;
					this.__bufferData[26 * i + 16] = 1;
					this.__bufferData[26 * i + 21] = 1;
				}
			}
			this.__bufferAlpha = alpha;
			this.__bufferColorTransform = colorTransform != null ? colorTransform.__clone() : null;
			this.__bufferContext = gl;
			this.__buffer = gl.createBuffer();
			gl.bindBuffer(gl.ARRAY_BUFFER,this.__buffer);
			gl.bufferData(gl.ARRAY_BUFFER,this.__bufferData.byteLength,$hx_$exports_lime_utils_DataPointer.fromArrayBufferView(this.__bufferData),gl.STATIC_DRAW);
		} else {
			if(this.__bufferAlpha != alpha) {
				var _g1 = 0;
				while(_g1 < 4) {
					var i1 = _g1++;
					this.__bufferData[26 * i1 + 5] = alpha;
				}
			}
			if(this.__bufferColorTransform == null && colorTransform != null || this.__bufferColorTransform != null && !this.__bufferColorTransform.__equals(colorTransform)) {
				if(colorTransform != null) {
					this.__bufferColorTransform = colorTransform.__clone();
					var _g2 = 0;
					while(_g2 < 4) {
						var i2 = _g2++;
						this.__bufferData[26 * i2 + 6] = colorTransform.redMultiplier;
						this.__bufferData[26 * i2 + 11] = colorTransform.greenMultiplier;
						this.__bufferData[26 * i2 + 16] = colorTransform.blueMultiplier;
						this.__bufferData[26 * i2 + 21] = colorTransform.alphaMultiplier;
						this.__bufferData[26 * i2 + 22] = colorTransform.redOffset / 255;
						this.__bufferData[26 * i2 + 23] = colorTransform.greenOffset / 255;
						this.__bufferData[26 * i2 + 24] = colorTransform.blueOffset / 255;
						this.__bufferData[26 * i2 + 25] = colorTransform.alphaOffset / 255;
					}
				} else {
					var _g3 = 0;
					while(_g3 < 4) {
						var i3 = _g3++;
						this.__bufferData[26 * i3 + 6] = 1;
						this.__bufferData[26 * i3 + 11] = 1;
						this.__bufferData[26 * i3 + 16] = 1;
						this.__bufferData[26 * i3 + 21] = 1;
						this.__bufferData[26 * i3 + 22] = 0;
						this.__bufferData[26 * i3 + 23] = 0;
						this.__bufferData[26 * i3 + 24] = 0;
						this.__bufferData[26 * i3 + 25] = 0;
					}
				}
			}
			gl.bindBuffer(gl.ARRAY_BUFFER,this.__buffer);
			gl.bufferData(gl.ARRAY_BUFFER,this.__bufferData.byteLength,$hx_$exports_lime_utils_DataPointer.fromArrayBufferView(this.__bufferData),gl.STATIC_DRAW);
		}
		return this.__buffer;
	}
	,__getTexture: function(gl) {
		if(this.__stream == null) {
			return null;
		}
		if(this.__texture == null) {
			this.__texture = gl.createTexture();
			gl.bindTexture(gl.TEXTURE_2D,this.__texture);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);
			this.__textureTime = -1;
		}
		if(this.__stream.__video.currentTime != this.__textureTime) {
			var internalFormat = gl.RGBA;
			var format = gl.RGBA;
			gl.bindTexture(gl.TEXTURE_2D,this.__texture);
			gl.texImage2DWEBGL(gl.TEXTURE_2D,0,internalFormat,format,gl.UNSIGNED_BYTE,this.__stream.__video);
			this.__textureTime = this.__stream.__video.currentTime;
		}
		return this.__texture;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		this.__getRenderTransform();
		var px = this.__renderTransform.__transformInverseX(x,y);
		var py = this.__renderTransform.__transformInverseY(x,y);
		if(px > 0 && py > 0 && px <= this.__width && py <= this.__height) {
			if(stack != null && !interactiveOnly) {
				stack.push(hitObject);
			}
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		var point = openfl_geom_Point.__pool.get();
		point.setTo(x,y);
		this.__globalToLocal(point,point);
		var hit = point.x > 0 && point.y > 0 && point.x <= this.__width && point.y <= this.__height;
		openfl_geom_Point.__pool.release(point);
		return hit;
	}
	,__renderCanvas: function(renderSession) {
		openfl__$internal_renderer_canvas_CanvasVideo.render(this,renderSession);
	}
	,__renderDOM: function(renderSession) {
		openfl__$internal_renderer_dom_DOMVideo.render(this,renderSession);
	}
	,__renderGL: function(renderSession) {
		openfl__$internal_renderer_opengl_GLVideo.render(this,renderSession);
	}
	,__renderGLMask: function(renderSession) {
		openfl__$internal_renderer_opengl_GLVideo.renderMask(this,renderSession);
	}
	,get_height: function() {
		return this.__height * this.get_scaleY();
	}
	,set_height: function(value) {
		if(this.get_scaleY() != 1 || value != this.__height) {
			this.__setTransformDirty();
			this.__dirty = true;
		}
		this.set_scaleY(1);
		return this.__height = value;
	}
	,get_videoHeight: function() {
		if(this.__stream != null) {
			return Std.int(this.__stream.__video.videoHeight);
		}
		return 0;
	}
	,get_videoWidth: function() {
		if(this.__stream != null) {
			return Std.int(this.__stream.__video.videoWidth);
		}
		return 0;
	}
	,get_width: function() {
		return this.__width * this.__scaleX;
	}
	,set_width: function(value) {
		if(this.__scaleX != 1 || this.__width != value) {
			this.__setTransformDirty();
			this.__dirty = true;
		}
		this.set_scaleX(1);
		return this.__width = value;
	}
	,__class__: openfl_media_Video
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{get_videoWidth:"get_videoWidth",get_videoHeight:"get_videoHeight"})
});
var openfl_net_FileFilter = $hx_exports["openfl"]["net"]["FileFilter"] = function(description,extension,macType) {
	this.description = description;
	this.extension = extension;
	this.macType = macType;
};
$hxClasses["openfl.net.FileFilter"] = openfl_net_FileFilter;
openfl_net_FileFilter.__name__ = ["openfl","net","FileFilter"];
openfl_net_FileFilter.prototype = {
	description: null
	,extension: null
	,macType: null
	,__class__: openfl_net_FileFilter
};
var openfl_net_FileReference = $hx_exports["openfl"]["net"]["FileReference"] = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.net.FileReference"] = openfl_net_FileReference;
openfl_net_FileReference.__name__ = ["openfl","net","FileReference"];
openfl_net_FileReference.__super__ = openfl_events_EventDispatcher;
openfl_net_FileReference.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	creationDate: null
	,creator: null
	,data: null
	,modificationDate: null
	,name: null
	,size: null
	,type: null
	,__data: null
	,__path: null
	,__urlLoader: null
	,browse: function(typeFilter) {
		this.__data = null;
		this.__path = null;
		return false;
	}
	,cancel: function() {
		if(this.__urlLoader != null) {
			this.__urlLoader.close();
		}
	}
	,download: function(request,defaultFileName) {
		this.__data = null;
		this.__path = null;
		this.__urlLoader = new openfl_net_URLLoader();
		this.__urlLoader.addEventListener("complete",$bind(this,this.urlLoader_onComplete));
		this.__urlLoader.addEventListener("ioError",$bind(this,this.urlLoader_onIOError));
		this.__urlLoader.addEventListener("progress",$bind(this,this.urlLoader_onProgress));
		this.__urlLoader.load(request);
		var saveFileDialog = new $hx_exports.lime.ui.FileDialog();
		saveFileDialog.onCancel.add($bind(this,this.saveFileDialog_onCancel));
		saveFileDialog.onSelect.add($bind(this,this.saveFileDialog_onSelect));
		saveFileDialog.browse(lime_ui_FileDialogType.SAVE,defaultFileName != null ? $hx_exports.haxe.io.Path.extension(defaultFileName) : null,defaultFileName);
	}
	,load: function() {
	}
	,save: function(data,defaultFileName) {
		this.__data = null;
		this.__path = null;
		if(data == null) {
			return;
		}
	}
	,upload: function(request,uploadDataFieldName,testUpload) {
		if(testUpload == null) {
			testUpload = false;
		}
		if(uploadDataFieldName == null) {
			uploadDataFieldName = "Filedata";
		}
		openfl__$internal_Lib.notImplemented({ fileName : "FileReference.hx", lineNumber : 158, className : "openfl.net.FileReference", methodName : "upload"});
	}
	,openFileDialog_onCancel: function() {
		this.dispatchEvent(new openfl_events_Event("cancel"));
	}
	,openFileDialog_onComplete: function() {
		this.dispatchEvent(new openfl_events_Event("complete"));
	}
	,openFileDialog_onSelect: function(path) {
		this.name = $hx_exports.haxe.io.Path.withoutDirectory(path);
		this.__path = path;
		this.dispatchEvent(new openfl_events_Event("select"));
	}
	,saveFileDialog_onCancel: function() {
		this.dispatchEvent(new openfl_events_Event("cancel"));
	}
	,saveFileDialog_onSelect: function(path) {
		this.dispatchEvent(new openfl_events_Event("select"));
	}
	,urlLoader_onComplete: function(event) {
		this.dispatchEvent(event);
	}
	,urlLoader_onIOError: function(event) {
		this.dispatchEvent(event);
	}
	,urlLoader_onProgress: function(event) {
		this.dispatchEvent(event);
	}
	,__class__: openfl_net_FileReference
});
var openfl_net_FileReferenceList = $hx_exports["openfl"]["net"]["FileReferenceList"] = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.net.FileReferenceList"] = openfl_net_FileReferenceList;
openfl_net_FileReferenceList.__name__ = ["openfl","net","FileReferenceList"];
openfl_net_FileReferenceList.__super__ = openfl_events_EventDispatcher;
openfl_net_FileReferenceList.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	fileList: null
	,browse: function(typeFilter) {
		return false;
	}
	,fileDialog_onCancel: function() {
		this.dispatchEvent(new openfl_events_Event("cancel"));
	}
	,fileDialog_onSelectMultiple: function(paths) {
		var fileReference;
		var fileInfo;
		var _g = 0;
		while(_g < paths.length) {
			var path = paths[_g];
			++_g;
			fileReference = new openfl_net_FileReference();
			fileReference.__path = path;
			fileReference.name = $hx_exports.haxe.io.Path.withoutDirectory(path);
			this.fileList.push(fileReference);
		}
		this.dispatchEvent(new openfl_events_Event("select"));
	}
	,__class__: openfl_net_FileReferenceList
});
var openfl_net_NetConnection = $hx_exports["openfl"]["net"]["NetConnection"] = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.net.NetConnection"] = openfl_net_NetConnection;
openfl_net_NetConnection.__name__ = ["openfl","net","NetConnection"];
openfl_net_NetConnection.__super__ = openfl_events_EventDispatcher;
openfl_net_NetConnection.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	connect: function(command,_,_1,_2,_3,_4) {
		if(command != null) {
			throw new js__$Boot_HaxeError("Error: Can only connect in \"HTTP streaming\" mode");
		}
		this.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,true,{ code : "NetConnection.Connect.Success"}));
	}
	,__class__: openfl_net_NetConnection
});
var openfl_net_NetStream = $hx_exports["openfl"]["net"]["NetStream"] = function(connection,peerID) {
	openfl_events_EventDispatcher.call(this);
	this.__connection = connection;
	this.__video = $hx_exports.js.Browser.get_document().createElement("video");
	this.__video.setAttribute("playsinline","");
	this.__video.setAttribute("webkit-playsinline","");
	this.__video.addEventListener("error",$bind(this,this.video_onError),false);
	this.__video.addEventListener("waiting",$bind(this,this.video_onWaiting),false);
	this.__video.addEventListener("ended",$bind(this,this.video_onEnd),false);
	this.__video.addEventListener("pause",$bind(this,this.video_onPause),false);
	this.__video.addEventListener("seeking",$bind(this,this.video_onSeeking),false);
	this.__video.addEventListener("playing",$bind(this,this.video_onPlaying),false);
	this.__video.addEventListener("timeupdate",$bind(this,this.video_onTimeUpdate),false);
	this.__video.addEventListener("loadstart",$bind(this,this.video_onLoadStart),false);
	this.__video.addEventListener("stalled",$bind(this,this.video_onStalled),false);
	this.__video.addEventListener("durationchanged",$bind(this,this.video_onDurationChanged),false);
	this.__video.addEventListener("canplay",$bind(this,this.video_onCanPlay),false);
	this.__video.addEventListener("canplaythrough",$bind(this,this.video_onCanPlayThrough),false);
	this.__video.addEventListener("loadedmetadata",$bind(this,this.video_onLoadMetaData),false);
	this.__video.addEventListener("progress",$bind(this,this.video_onProgress),false);
};
$hxClasses["openfl.net.NetStream"] = openfl_net_NetStream;
openfl_net_NetStream.__name__ = ["openfl","net","NetStream"];
openfl_net_NetStream.__super__ = openfl_events_EventDispatcher;
openfl_net_NetStream.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	audioCodec: null
	,bufferLength: null
	,bufferTime: null
	,bytesLoaded: null
	,bytesTotal: null
	,checkPolicyFile: null
	,client: null
	,currentFPS: null
	,decodedFrames: null
	,liveDelay: null
	,objectEncoding: null
	,soundTransform: null
	,time: null
	,videoCode: null
	,loadPercentage: null
	,__connection: null
	,__timer: null
	,__video: null
	,close: function() {
		this.__video.pause();
		this.__video.src = "";
		this.time = 0;
	}
	,pause: function() {
		this.__video.pause();
	}
	,play: function(url,_,_1,_2,_3,_4) {
		this.__video.src = url;
		this.__video.play();
	}
	,requestVideoStatus: function() {
		var _gthis = this;
		if(this.__timer == null) {
			this.__timer = new $hx_exports.haxe.Timer(1);
		}
		this.__timer.run = function() {
			if(_gthis.__video.paused) {
				_gthis.__playStatus("NetStream.Play.pause");
			} else {
				_gthis.__playStatus("NetStream.Play.playing");
			}
			_gthis.__timer.stop();
		};
	}
	,resume: function() {
		this.__video.play();
	}
	,seek: function(time) {
		if(time < 0) {
			time = 0;
		} else if(time > this.__video.duration) {
			time = this.__video.duration;
		}
		this.__video.currentTime = time;
	}
	,togglePause: function() {
		if(this.__video.paused) {
			this.__video.play();
		} else {
			this.__video.pause();
		}
	}
	,__playStatus: function(code) {
		if(this.client != null) {
			try {
				var handler = this.client.onPlayStatus;
				handler({ code : code, duration : this.__video.duration, position : this.__video.currentTime, speed : this.__video.playbackRate, start : this.__video.startTime});
			} catch( e ) {
			}
		}
	}
	,video_onCanPlay: function(event) {
		this.__playStatus("NetStream.Play.canplay");
	}
	,video_onCanPlayThrough: function(event) {
		this.__playStatus("NetStream.Play.canplaythrough");
	}
	,video_onDurationChanged: function(event) {
		this.__playStatus("NetStream.Play.durationchanged");
	}
	,video_onEnd: function(event) {
		this.__connection.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,false,{ code : "NetStream.Play.Stop"}));
		this.__playStatus("NetStream.Play.Complete");
	}
	,video_onError: function(event) {
		this.__connection.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,false,{ code : "NetStream.Play.Stop"}));
		this.__playStatus("NetStream.Play.error");
	}
	,video_onLoadMetaData: function(event) {
		if(this.client != null) {
			try {
				var handler = this.client.onMetaData;
				handler({ width : this.__video.videoWidth, height : this.__video.videoHeight, duration : this.__video.duration});
			} catch( e ) {
			}
		}
	}
	,video_onLoadStart: function(event) {
		this.__playStatus("NetStream.Play.loadstart");
	}
	,video_onPause: function(event) {
		this.__playStatus("NetStream.Play.pause");
	}
	,video_onPlaying: function(event) {
		this.__connection.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,false,{ code : "NetStream.Play.Start"}));
		this.__playStatus("NetStream.Play.playing");
	}
	,video_onSeeking: function(event) {
		this.__playStatus("NetStream.Play.seeking");
	}
	,video_onStalled: function(event) {
		this.__playStatus("NetStream.Play.stalled");
	}
	,video_onTimeUpdate: function(event) {
		this.time = this.__video.currentTime;
		this.__playStatus("NetStream.Play.timeupdate");
	}
	,video_onWaiting: function(event) {
		this.__playStatus("NetStream.Play.waiting");
	}
	,video_onProgress: function(event) {
		this.__playStatus("NetStream.Play.progress");
	}
	,get_speed: function() {
		return this.__video.playbackRate;
	}
	,set_speed: function(value) {
		return this.__video.playbackRate = value;
	}
	,get_loadPercentage: function() {
		var bf = this.__video.buffered;
		if(bf.length > 0) {
			var range = 0;
			var time = this.__video.currentTime;
			while(!(bf.start(range) <= time && time <= bf.end(range))) ++range;
			var loadStartPercentage = bf.start(range) / this.__video.duration;
			var loadEndPercentage = bf.end(range) / this.__video.duration;
			return loadEndPercentage - loadStartPercentage;
		} else {
			return 0;
		}
	}
	,__class__: openfl_net_NetStream
	,__properties__: {get_loadPercentage:"get_loadPercentage",set_speed:"set_speed",get_speed:"get_speed"}
});
var openfl_net_SharedObject = $hx_exports["openfl"]["net"]["SharedObject"] = function() {
	openfl_events_EventDispatcher.call(this);
	this.client = this;
	this.objectEncoding = 3;
};
$hxClasses["openfl.net.SharedObject"] = openfl_net_SharedObject;
openfl_net_SharedObject.__name__ = ["openfl","net","SharedObject"];
openfl_net_SharedObject.__sharedObjects = null;
openfl_net_SharedObject.getLocal = function(name,localPath,secure) {
	if(secure == null) {
		secure = false;
	}
	var illegalValues = [" ","~","%","&","\\",";",":","\"","'",",","<",">","?","#"];
	var allowed = true;
	if(name == null || name == "") {
		allowed = false;
	} else {
		var _g = 0;
		while(_g < illegalValues.length) {
			var value = illegalValues[_g];
			++_g;
			if(name.indexOf(value) > -1) {
				allowed = false;
				break;
			}
		}
	}
	if(!allowed) {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("Error #2134: Cannot create SharedObject."));
	}
	if(localPath == null) {
		localPath = $hx_exports.js.Browser.get_window().location.href;
	}
	if(openfl_net_SharedObject.__sharedObjects == null) {
		openfl_net_SharedObject.__sharedObjects = new haxe_ds_StringMap();
		openfl__$internal_Lib.application.onExit.add(openfl_net_SharedObject.application_onExit);
	}
	var id = localPath + "/" + name;
	if(!openfl_net_SharedObject.__sharedObjects.exists(id)) {
		var sharedObject = new openfl_net_SharedObject();
		sharedObject.data = { };
		sharedObject.__localPath = localPath;
		sharedObject.__name = name;
		var encodedData = null;
		try {
			var storage = $hx_exports.js.Browser.getLocalStorage();
			if(storage != null) {
				encodedData = storage.getItem(localPath + ":" + name);
			}
		} catch( e ) {
		}
		if(encodedData != null && encodedData != "") {
			try {
				var unserializer = new haxe_Unserializer(encodedData);
				unserializer.setResolver({ resolveEnum : Type.resolveEnum, resolveClass : openfl_net_SharedObject.__resolveClass});
				sharedObject.data = unserializer.unserialize();
			} catch( e1 ) {
			}
		}
		openfl_net_SharedObject.__sharedObjects.set(id,sharedObject);
	}
	return openfl_net_SharedObject.__sharedObjects.get(id);
};
openfl_net_SharedObject.getRemote = function(name,remotePath,persistence,secure) {
	if(secure == null) {
		secure = false;
	}
	if(persistence == null) {
		persistence = false;
	}
	openfl__$internal_Lib.notImplemented({ fileName : "SharedObject.hx", lineNumber : 269, className : "openfl.net.SharedObject", methodName : "getRemote"});
	return null;
};
openfl_net_SharedObject.__getPath = function(localPath,name) {
	var path = $hx_exports.lime.system.System.get_applicationStorageDirectory() + "/" + localPath + "/";
	name = $hx_exports.StringTools.replace(name,"//","/");
	name = $hx_exports.StringTools.replace(name,"//","/");
	if($hx_exports.StringTools.startsWith(name,"/")) {
		name = $hx_exports.HxOverrides.substr(name,1,null);
	}
	if($hx_exports.StringTools.endsWith(name,"/")) {
		name = name.substring(0,name.length - 1);
	}
	if(name.indexOf("/") > -1) {
		var split = name.split("/");
		name = "";
		var _g1 = 0;
		var _g = split.length - 1;
		while(_g1 < _g) {
			var i = _g1++;
			name += "#" + split[i] + "/";
		}
		name += split[split.length - 1];
	}
	return path + name + ".sol";
};
openfl_net_SharedObject.__mkdir = function(directory) {
};
openfl_net_SharedObject.__resolveClass = function(name) {
	if(name != null) {
		if($hx_exports.StringTools.startsWith(name,"neash.")) {
			name = $hx_exports.StringTools.replace(name,"neash.","openfl.");
		}
		if($hx_exports.StringTools.startsWith(name,"native.")) {
			name = $hx_exports.StringTools.replace(name,"native.","openfl.");
		}
		if($hx_exports.StringTools.startsWith(name,"flash.")) {
			name = $hx_exports.StringTools.replace(name,"flash.","openfl.");
		}
		if($hx_exports.StringTools.startsWith(name,"openfl._v2.")) {
			name = $hx_exports.StringTools.replace(name,"openfl._v2.","openfl.");
		}
		if($hx_exports.StringTools.startsWith(name,"openfl._legacy.")) {
			name = $hx_exports.StringTools.replace(name,"openfl._legacy.","openfl.");
		}
		return Type.resolveClass(name);
	}
	return null;
};
openfl_net_SharedObject.application_onExit = function(_) {
	var sharedObject = openfl_net_SharedObject.__sharedObjects.iterator();
	while(sharedObject.hasNext()) {
		var sharedObject1 = sharedObject.next();
		sharedObject1.flush();
	}
};
openfl_net_SharedObject.__super__ = openfl_events_EventDispatcher;
openfl_net_SharedObject.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	client: null
	,data: null
	,fps: null
	,objectEncoding: null
	,__localPath: null
	,__name: null
	,clear: function() {
		this.data = { };
		try {
			var storage = $hx_exports.js.Browser.getLocalStorage();
			if(storage != null) {
				storage.removeItem(this.__localPath + ":" + this.__name);
			}
		} catch( e ) {
		}
	}
	,close: function() {
	}
	,connect: function(myConnection,params) {
		openfl__$internal_Lib.notImplemented({ fileName : "SharedObject.hx", lineNumber : 105, className : "openfl.net.SharedObject", methodName : "connect"});
	}
	,flush: function(minDiskSpace) {
		if(minDiskSpace == null) {
			minDiskSpace = 0;
		}
		if(Reflect.fields(this.data).length == 0) {
			return 0;
		}
		var encodedData = haxe_Serializer.run(this.data);
		try {
			var storage = $hx_exports.js.Browser.getLocalStorage();
			if(storage != null) {
				storage.removeItem(this.__localPath + ":" + this.__name);
				storage.setItem(this.__localPath + ":" + this.__name,encodedData);
			}
		} catch( e ) {
			return 1;
		}
		return 0;
	}
	,send: function(args) {
		openfl__$internal_Lib.notImplemented({ fileName : "SharedObject.hx", lineNumber : 278, className : "openfl.net.SharedObject", methodName : "send"});
	}
	,setDirty: function(propertyName) {
	}
	,setProperty: function(propertyName,value) {
		if(this.data != null) {
			Reflect.setField(this.data,propertyName,value);
		}
	}
	,get_size: function() {
		try {
			var d = haxe_Serializer.run(this.data);
			return $hx_exports.haxe.io.Bytes.ofString(d).length;
		} catch( e ) {
			return 0;
		}
	}
	,__class__: openfl_net_SharedObject
	,__properties__: {get_size:"get_size"}
});
var openfl_net__$SharedObjectFlushStatus_SharedObjectFlushStatus_$Impl_$ = $hx_exports["openfl"]["net"]["SharedObjectFlushStatus"] = {};
$hxClasses["openfl.net._SharedObjectFlushStatus.SharedObjectFlushStatus_Impl_"] = openfl_net__$SharedObjectFlushStatus_SharedObjectFlushStatus_$Impl_$;
openfl_net__$SharedObjectFlushStatus_SharedObjectFlushStatus_$Impl_$.__name__ = ["openfl","net","_SharedObjectFlushStatus","SharedObjectFlushStatus_Impl_"];
openfl_net__$SharedObjectFlushStatus_SharedObjectFlushStatus_$Impl_$.fromString = function(value) {
	switch(value) {
	case "flushed":
		return 0;
	case "pending":
		return 1;
	default:
		return null;
	}
};
openfl_net__$SharedObjectFlushStatus_SharedObjectFlushStatus_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "flushed";
	case 1:
		return "pending";
	default:
		return null;
	}
};
var openfl_utils_IDataOutput = $hx_exports["openfl"]["utils"]["IDataOutput"] = function() { };
$hxClasses["openfl.utils.IDataOutput"] = openfl_utils_IDataOutput;
openfl_utils_IDataOutput.__name__ = ["openfl","utils","IDataOutput"];
openfl_utils_IDataOutput.prototype = {
	get_endian: null
	,set_endian: null
	,objectEncoding: null
	,writeBoolean: null
	,writeByte: null
	,writeBytes: null
	,writeDouble: null
	,writeFloat: null
	,writeInt: null
	,writeMultiByte: null
	,writeShort: null
	,writeUTF: null
	,writeUTFBytes: null
	,writeUnsignedInt: null
	,__class__: openfl_utils_IDataOutput
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian"}
};
var openfl_utils_IDataInput = $hx_exports["openfl"]["utils"]["IDataInput"] = function() { };
$hxClasses["openfl.utils.IDataInput"] = openfl_utils_IDataInput;
openfl_utils_IDataInput.__name__ = ["openfl","utils","IDataInput"];
openfl_utils_IDataInput.prototype = {
	get_bytesAvailable: null
	,get_endian: null
	,set_endian: null
	,objectEncoding: null
	,readBoolean: null
	,readByte: null
	,readBytes: null
	,readDouble: null
	,readFloat: null
	,readInt: null
	,readMultiByte: null
	,readShort: null
	,readUnsignedByte: null
	,readUnsignedInt: null
	,readUnsignedShort: null
	,readUTF: null
	,readUTFBytes: null
	,__class__: openfl_utils_IDataInput
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
};
var openfl_net_Socket = $hx_exports["openfl"]["net"]["Socket"] = function(host,port) {
	if(port == null) {
		port = 0;
	}
	openfl_events_EventDispatcher.call(this);
	this.set_endian(0);
	this.timeout = 20000;
	this.__buffer = $hx_exports.haxe.io.Bytes.alloc(4096);
	if(port > 0 && port < 65535) {
		this.connect(host,port);
	}
};
$hxClasses["openfl.net.Socket"] = openfl_net_Socket;
openfl_net_Socket.__name__ = ["openfl","net","Socket"];
openfl_net_Socket.__interfaces__ = [openfl_utils_IDataOutput,openfl_utils_IDataInput];
openfl_net_Socket.__super__ = openfl_events_EventDispatcher;
openfl_net_Socket.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	objectEncoding: null
	,secure: null
	,timeout: null
	,__buffer: null
	,__connected: null
	,__endian: null
	,__host: null
	,__input: null
	,__inputBuffer: null
	,__output: null
	,__port: null
	,__socket: null
	,__timestamp: null
	,connect: function(host,port) {
		if(port == null) {
			port = 0;
		}
		if(this.__socket != null) {
			this.close();
		}
		if(port < 0 || port > 65535) {
			throw new js__$Boot_HaxeError(new openfl_errors_SecurityError("Invalid socket port number specified."));
		}
		this.__timestamp = $hx_exports.haxe.Timer.stamp();
		this.__host = host;
		this.__port = port;
		var this1 = new openfl_utils_ByteArrayData(0);
		this.__output = this1;
		this.__output.set_endian(this.__endian);
		var this2 = new openfl_utils_ByteArrayData(0);
		this.__input = this2;
		this.__input.set_endian(this.__endian);
		var this3 = new openfl_utils_ByteArrayData(0);
		this.__inputBuffer = this3;
		this.__inputBuffer.set_endian(this.__endian);
		if($hx_exports.js.Browser.get_location().protocol == "https:") {
			this.secure = true;
		}
		var schema = this.secure ? "wss" : "ws";
		var urlReg = new $hx_exports.EReg("^(.*://)?([A-Za-z0-9\\-\\.]+)/?(.*)","g");
		urlReg.match(host);
		var __webHost = urlReg.matched(2);
		var __webPath = urlReg.matched(3);
		this.__socket = new WebSocket(schema + "://" + __webHost + ":" + port + "/" + __webPath);
		this.__socket.binaryType = "arraybuffer";
		this.__socket.onopen = $bind(this,this.socket_onOpen);
		this.__socket.onmessage = $bind(this,this.socket_onMessage);
		this.__socket.onclose = $bind(this,this.socket_onClose);
		this.__socket.onerror = $bind(this,this.socket_onError);
		openfl__$internal_Lib.current.addEventListener("enterFrame",$bind(this,this.this_onEnterFrame));
	}
	,close: function() {
		if(this.__socket != null) {
			this.__cleanSocket();
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
	}
	,flush: function() {
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.__output) > 0) {
			try {
				var buffer = openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer(this.__output);
				if(buffer.byteLength > openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.__output)) {
					buffer = buffer.slice(0,openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.__output));
				}
				this.__socket.send(buffer);
				var this1 = new openfl_utils_ByteArrayData(0);
				this.__output = this1;
				this.__output.set_endian(this.__endian);
			} catch( e ) {
				throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
			}
		}
	}
	,readBoolean: function() {
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		return this.__input.readBoolean();
	}
	,readByte: function() {
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		return this.__input.readByte();
	}
	,readBytes: function(bytes,offset,length) {
		if(length == null) {
			length = 0;
		}
		if(offset == null) {
			offset = 0;
		}
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		this.__input.readBytes(bytes,offset,length);
	}
	,readDouble: function() {
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		return this.__input.readDouble();
	}
	,readFloat: function() {
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		return this.__input.readFloat();
	}
	,readInt: function() {
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		return this.__input.readInt();
	}
	,readMultiByte: function(length,charSet) {
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		return this.__input.readMultiByte(length,charSet);
	}
	,readShort: function() {
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		return this.__input.readShort();
	}
	,readUnsignedByte: function() {
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		return this.__input.readUnsignedByte();
	}
	,readUnsignedInt: function() {
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		return this.__input.readUnsignedInt();
	}
	,readUnsignedShort: function() {
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		return this.__input.readUnsignedShort();
	}
	,readUTF: function() {
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		return this.__input.readUTF();
	}
	,readUTFBytes: function(length) {
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		return this.__input.readUTFBytes(length);
	}
	,writeBoolean: function(value) {
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		this.__output.writeBoolean(value);
	}
	,writeByte: function(value) {
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		this.__output.writeByte(value);
	}
	,writeBytes: function(bytes,offset,length) {
		if(length == null) {
			length = 0;
		}
		if(offset == null) {
			offset = 0;
		}
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		this.__output.writeBytes(bytes,offset,length);
	}
	,writeDouble: function(value) {
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		this.__output.writeDouble(value);
	}
	,writeFloat: function(value) {
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		this.__output.writeFloat(value);
	}
	,writeInt: function(value) {
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		this.__output.writeInt(value);
	}
	,writeMultiByte: function(value,charSet) {
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		this.__output.writeUTFBytes(value);
	}
	,writeShort: function(value) {
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		this.__output.writeShort(value);
	}
	,writeUnsignedInt: function(value) {
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		this.__output.writeUnsignedInt(value);
	}
	,writeUTF: function(value) {
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		this.__output.writeUTF(value);
	}
	,writeUTFBytes: function(value) {
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		this.__output.writeUTFBytes(value);
	}
	,__cleanSocket: function() {
		try {
			this.__socket.close();
		} catch( e ) {
		}
		this.__socket = null;
		this.__connected = false;
		openfl__$internal_Lib.current.removeEventListener("enterFrame",$bind(this,this.this_onEnterFrame));
	}
	,socket_onClose: function(_) {
		this.dispatchEvent(new openfl_events_Event("close"));
	}
	,socket_onError: function(e) {
		this.dispatchEvent(new openfl_events_Event("ioError"));
	}
	,socket_onMessage: function(msg) {
		if(typeof(msg.data) == "string") {
			this.__inputBuffer.position = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.__inputBuffer);
			var cachePosition = this.__inputBuffer.position;
			this.__inputBuffer.writeUTFBytes(msg.data);
			this.__inputBuffer.position = cachePosition;
		} else {
			var newData = openfl_utils__$ByteArray_ByteArray_$Impl_$.fromArrayBuffer(msg.data);
			newData.readBytes(this.__inputBuffer,openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.__inputBuffer));
		}
		if(_$UInt_UInt_$Impl_$.gt(this.__inputBuffer.get_bytesAvailable(),0)) {
			var this1 = new openfl_utils_ByteArrayData(0);
			var newInput = this1;
			var newDataLength = this.__inputBuffer.get_bytesAvailable();
			this.__input.readBytes(newInput,0,this.__input.get_bytesAvailable());
			this.__inputBuffer.position = 0;
			this.__inputBuffer.readBytes(newInput,newInput.position,openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.__inputBuffer));
			newInput.position = 0;
			this.__input = newInput;
			this.__input.set_endian(this.__endian);
			this.__inputBuffer.clear();
			this.dispatchEvent(new openfl_events_ProgressEvent("socketData",false,false,_$UInt_UInt_$Impl_$.toFloat(newDataLength),0));
		}
	}
	,socket_onOpen: function(_) {
		this.__connected = true;
		this.dispatchEvent(new openfl_events_Event("connect"));
	}
	,this_onEnterFrame: function(event) {
		if(this.__socket != null) {
			this.flush();
		}
	}
	,get_bytesAvailable: function() {
		return this.__input.get_bytesAvailable();
	}
	,get_bytesPending: function() {
		return openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.__output);
	}
	,get_connected: function() {
		return this.__connected;
	}
	,get_endian: function() {
		return this.__endian;
	}
	,set_endian: function(value) {
		this.__endian = value;
		if(this.__input != null) {
			this.__input.set_endian(value);
		}
		if(this.__inputBuffer != null) {
			this.__inputBuffer.set_endian(value);
		}
		if(this.__output != null) {
			this.__output.set_endian(value);
		}
		return this.__endian;
	}
	,__class__: openfl_net_Socket
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian",get_connected:"get_connected",get_bytesPending:"get_bytesPending",get_bytesAvailable:"get_bytesAvailable"}
});
var openfl_net_URLLoader = $hx_exports["openfl"]["net"]["URLLoader"] = function(request) {
	openfl_events_EventDispatcher.call(this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.dataFormat = 1;
	if(request != null) {
		this.load(request);
	}
};
$hxClasses["openfl.net.URLLoader"] = openfl_net_URLLoader;
openfl_net_URLLoader.__name__ = ["openfl","net","URLLoader"];
openfl_net_URLLoader.__super__ = openfl_events_EventDispatcher;
openfl_net_URLLoader.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,data: null
	,dataFormat: null
	,__httpRequest: null
	,close: function() {
		if(this.__httpRequest != null) {
			this.__httpRequest.cancel();
		}
	}
	,load: function(request) {
		var _gthis = this;
		if(this.dataFormat == 0) {
			var httpRequest = new lime_net__$HTTPRequest_$openfl_$utils_$ByteArray();
			this.__prepareRequest(httpRequest,request);
			httpRequest.load().onProgress($bind(this,this.httpRequest_onProgress)).onError($bind(this,this.httpRequest_onError)).onComplete(function(data) {
				_gthis.__dispatchStatus();
				_gthis.data = data;
				var event = new openfl_events_Event("complete");
				_gthis.dispatchEvent(event);
			});
		} else {
			var httpRequest1 = new lime_net__$HTTPRequest_$String();
			this.__prepareRequest(httpRequest1,request);
			httpRequest1.load().onProgress($bind(this,this.httpRequest_onProgress)).onError($bind(this,this.httpRequest_onError)).onComplete(function(data1) {
				_gthis.__dispatchStatus();
				_gthis.data = data1;
				var event1 = new openfl_events_Event("complete");
				_gthis.dispatchEvent(event1);
			});
		}
	}
	,__dispatchStatus: function() {
		var event = new openfl_events_HTTPStatusEvent("httpStatus",false,false,this.__httpRequest.responseStatus);
		event.responseURL = this.__httpRequest.uri;
		var headers = [];
		if(this.__httpRequest.enableResponseHeaders && this.__httpRequest.responseHeaders != null) {
			var _g = 0;
			var _g1 = this.__httpRequest.responseHeaders;
			while(_g < _g1.length) {
				var header = _g1[_g];
				++_g;
				headers.push(new openfl_net_URLRequestHeader(header.name,header.value));
			}
		}
		event.responseHeaders = headers;
		this.dispatchEvent(event);
	}
	,__prepareRequest: function(httpRequest,request) {
		this.__httpRequest = httpRequest;
		this.__httpRequest.uri = request.url;
		var _g = request.method;
		var tmp;
		switch(_g) {
		case "DELETE":
			tmp = "DELETE";
			break;
		case "HEAD":
			tmp = "HEAD";
			break;
		case "OPTIONS":
			tmp = "OPTIONS";
			break;
		case "POST":
			tmp = "POST";
			break;
		case "PUT":
			tmp = "PUT";
			break;
		default:
			tmp = "GET";
		}
		this.__httpRequest.method = tmp;
		if(request.data != null) {
			if(Std.is(request.data,openfl_net_URLVariables)) {
				var fields = Reflect.fields(request.data);
				var _g1 = 0;
				while(_g1 < fields.length) {
					var field = fields[_g1];
					++_g1;
					this.__httpRequest.formData.set(field,Reflect.field(request.data,field));
				}
			} else if(Std.is(request.data,$hx_exports.haxe.io.Bytes)) {
				this.__httpRequest.data = request.data;
			} else {
				this.__httpRequest.data = $hx_exports.haxe.io.Bytes.ofString(Std.string(request.data));
			}
		}
		this.__httpRequest.contentType = request.contentType;
		if(request.requestHeaders != null) {
			var _g11 = 0;
			var _g2 = request.requestHeaders;
			while(_g11 < _g2.length) {
				var header = _g2[_g11];
				++_g11;
				this.__httpRequest.headers.push(new lime_net_HTTPRequestHeader(header.name,header.value));
			}
		}
		this.__httpRequest.followRedirects = request.followRedirects;
		this.__httpRequest.timeout = Std.int(request.idleTimeout);
		this.__httpRequest.withCredentials = request.manageCookies;
		var userAgent = request.userAgent;
		if(userAgent == null) {
			userAgent = "Mozilla/5.0 (Windows; U; en) AppleWebKit/420+ (KHTML, like Gecko) OpenFL/1.0";
		}
		this.__httpRequest.userAgent = request.userAgent;
		this.__httpRequest.enableResponseHeaders = true;
	}
	,httpRequest_onError: function(error) {
		this.__dispatchStatus();
		if(error == 403) {
			var event = new openfl_events_SecurityErrorEvent("securityError");
			event.text = Std.string(error);
			this.dispatchEvent(event);
		} else {
			var event1 = new openfl_events_IOErrorEvent("ioError");
			event1.text = Std.string(error);
			this.dispatchEvent(event1);
		}
	}
	,httpRequest_onProgress: function(bytesLoaded,bytesTotal) {
		var event = new openfl_events_ProgressEvent("progress");
		event.bytesLoaded = bytesLoaded;
		event.bytesTotal = bytesTotal;
		this.dispatchEvent(event);
	}
	,__class__: openfl_net_URLLoader
});
var openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$ = $hx_exports["openfl"]["net"]["URLLoaderDataFormat"] = {};
$hxClasses["openfl.net._URLLoaderDataFormat.URLLoaderDataFormat_Impl_"] = openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$;
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.__name__ = ["openfl","net","_URLLoaderDataFormat","URLLoaderDataFormat_Impl_"];
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.fromString = function(value) {
	switch(value) {
	case "binary":
		return 0;
	case "text":
		return 1;
	case "variables":
		return 2;
	default:
		return null;
	}
};
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "binary";
	case 1:
		return "text";
	case 2:
		return "variables";
	default:
		return null;
	}
};
var openfl_net_URLRequest = $hx_exports["openfl"]["net"]["URLRequest"] = function(url) {
	if(url != null) {
		this.url = url;
	}
	this.contentType = null;
	this.followRedirects = openfl_net_URLRequestDefaults.followRedirects;
	this.idleTimeout = openfl_net_URLRequestDefaults.idleTimeout > 0 ? openfl_net_URLRequestDefaults.idleTimeout : 30000;
	this.manageCookies = openfl_net_URLRequestDefaults.manageCookies;
	this.method = "GET";
	this.requestHeaders = [];
	this.userAgent = openfl_net_URLRequestDefaults.userAgent;
};
$hxClasses["openfl.net.URLRequest"] = openfl_net_URLRequest;
openfl_net_URLRequest.__name__ = ["openfl","net","URLRequest"];
openfl_net_URLRequest.prototype = {
	contentType: null
	,data: null
	,followRedirects: null
	,idleTimeout: null
	,manageCookies: null
	,method: null
	,requestHeaders: null
	,url: null
	,userAgent: null
	,__class__: openfl_net_URLRequest
};
var openfl_net_URLRequestDefaults = $hx_exports["openfl"]["net"]["URLRequestDefaults"] = function() { };
$hxClasses["openfl.net.URLRequestDefaults"] = openfl_net_URLRequestDefaults;
openfl_net_URLRequestDefaults.__name__ = ["openfl","net","URLRequestDefaults"];
openfl_net_URLRequestDefaults.userAgent = null;
var openfl_net_URLRequestHeader = $hx_exports["openfl"]["net"]["URLRequestHeader"] = function(name,value) {
	if(value == null) {
		value = "";
	}
	if(name == null) {
		name = "";
	}
	this.name = name;
	this.value = value;
};
$hxClasses["openfl.net.URLRequestHeader"] = openfl_net_URLRequestHeader;
openfl_net_URLRequestHeader.__name__ = ["openfl","net","URLRequestHeader"];
openfl_net_URLRequestHeader.prototype = {
	name: null
	,value: null
	,__class__: openfl_net_URLRequestHeader
};
var openfl_net_URLStream = $hx_exports["openfl"]["net"]["URLStream"] = function() {
	openfl_events_EventDispatcher.call(this);
	this.__loader = new openfl_net_URLLoader();
	this.__loader.dataFormat = 0;
};
$hxClasses["openfl.net.URLStream"] = openfl_net_URLStream;
openfl_net_URLStream.__name__ = ["openfl","net","URLStream"];
openfl_net_URLStream.__interfaces__ = [openfl_utils_IDataInput];
openfl_net_URLStream.__super__ = openfl_events_EventDispatcher;
openfl_net_URLStream.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	objectEncoding: null
	,__data: null
	,__loader: null
	,close: function() {
		this.__removeEventListeners();
		this.__data = null;
	}
	,load: function(request) {
		this.__removeEventListeners();
		this.__addEventListeners();
		this.__loader.load(request);
	}
	,readBoolean: function() {
		return this.__data.readBoolean();
	}
	,readByte: function() {
		return this.__data.readByte();
	}
	,readBytes: function(bytes,offset,length) {
		if(length == null) {
			length = 0;
		}
		if(offset == null) {
			offset = 0;
		}
		this.__data.readBytes(bytes,offset,length);
	}
	,readDouble: function() {
		return this.__data.readDouble();
	}
	,readFloat: function() {
		return this.__data.readFloat();
	}
	,readInt: function() {
		return this.__data.readInt();
	}
	,readMultiByte: function(length,charSet) {
		return this.__data.readMultiByte(length,charSet);
	}
	,readObject: function() {
		return null;
	}
	,readShort: function() {
		return this.__data.readShort();
	}
	,readUnsignedByte: function() {
		return this.__data.readUnsignedByte();
	}
	,readUnsignedInt: function() {
		return this.__data.readUnsignedInt();
	}
	,readUnsignedShort: function() {
		return this.__data.readUnsignedShort();
	}
	,readUTF: function() {
		return this.__data.readUTF();
	}
	,readUTFBytes: function(length) {
		return this.__data.readUTFBytes(length);
	}
	,__addEventListeners: function() {
		this.__loader.addEventListener("complete",$bind(this,this.loader_onComplete));
		this.__loader.addEventListener("ioError",$bind(this,this.loader_onIOError));
		this.__loader.addEventListener("securityError",$bind(this,this.loader_onSecurityError));
		this.__loader.addEventListener("progress",$bind(this,this.loader_onProgressEvent));
	}
	,__removeEventListeners: function() {
		this.__loader.removeEventListener("complete",$bind(this,this.loader_onComplete));
		this.__loader.removeEventListener("ioError",$bind(this,this.loader_onIOError));
		this.__loader.removeEventListener("securityError",$bind(this,this.loader_onSecurityError));
		this.__loader.removeEventListener("progress",$bind(this,this.loader_onProgressEvent));
	}
	,loader_onComplete: function(event) {
		this.__removeEventListeners();
		this.__data = this.__loader.data;
		this.dispatchEvent(new openfl_events_ProgressEvent("progress",false,false,this.__loader.bytesLoaded,this.__loader.bytesTotal));
		this.dispatchEvent(new openfl_events_Event("complete"));
	}
	,loader_onIOError: function(event) {
		this.__removeEventListeners();
		this.dispatchEvent(event);
	}
	,loader_onSecurityError: function(event) {
		this.__removeEventListeners();
		this.dispatchEvent(event);
	}
	,loader_onProgressEvent: function(event) {
		this.__data = this.__loader.data;
		this.dispatchEvent(event);
	}
	,get_bytesAvailable: function() {
		if(this.__data != null) {
			return openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.__data) - this.__data.position;
		}
		return 0;
	}
	,get_connected: function() {
		return false;
	}
	,get_endian: function() {
		return this.__data.get_endian();
	}
	,set_endian: function(value) {
		return this.__data.set_endian(value);
	}
	,__class__: openfl_net_URLStream
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian",get_connected:"get_connected",get_bytesAvailable:"get_bytesAvailable"}
});
var openfl_net_URLVariables = $hx_exports["openfl"]["net"]["URLVariables"] = function(source) {
	if(source != null) {
		this.decode(source);
	}
};
$hxClasses["openfl.net.URLVariables"] = openfl_net_URLVariables;
openfl_net_URLVariables.__name__ = ["openfl","net","URLVariables"];
openfl_net_URLVariables.prototype = {
	decode: function(source) {
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			Reflect.deleteField(this,f);
		}
		var fields1 = source.split(";").join("&").split("&");
		var _g1 = 0;
		while(_g1 < fields1.length) {
			var f1 = fields1[_g1];
			++_g1;
			var eq = f1.indexOf("=");
			if(eq > 0) {
				Reflect.setField(this,$hx_exports.StringTools.urlDecode($hx_exports.HxOverrides.substr(f1,0,eq)),$hx_exports.StringTools.urlDecode($hx_exports.HxOverrides.substr(f1,eq + 1,null)));
			} else if(eq != 0) {
				Reflect.setField(this,$hx_exports.StringTools.urlDecode(f1),"");
			}
		}
	}
	,toString: function() {
		var result = [];
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			result.push($hx_exports.StringTools.urlEncode(f) + "=" + $hx_exports.StringTools.urlEncode(Reflect.field(this,f)));
		}
		return result.join("&");
	}
	,__class__: openfl_net_URLVariables
};
var openfl_net_XMLSocket = $hx_exports["openfl"]["net"]["XMLSocket"] = function(host,port) {
	if(port == null) {
		port = 80;
	}
	openfl_events_EventDispatcher.call(this);
	if(host != null) {
		this.connect(host,port);
	}
};
$hxClasses["openfl.net.XMLSocket"] = openfl_net_XMLSocket;
openfl_net_XMLSocket.__name__ = ["openfl","net","XMLSocket"];
openfl_net_XMLSocket.__super__ = openfl_events_EventDispatcher;
openfl_net_XMLSocket.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	connected: null
	,timeout: null
	,__socket: null
	,close: function() {
		this.__socket.removeEventListener("close",$bind(this,this.__onClose));
		this.__socket.removeEventListener("connect",$bind(this,this.__onConnect));
		this.__socket.removeEventListener("ioError",$bind(this,this.__onError));
		this.__socket.removeEventListener("socketData",$bind(this,this.__onSocketData));
		this.__socket.close();
	}
	,connect: function(host,port) {
		this.connected = false;
		this.__socket = new openfl_net_Socket();
		this.__socket.addEventListener("close",$bind(this,this.__onClose));
		this.__socket.addEventListener("connect",$bind(this,this.__onConnect));
		this.__socket.addEventListener("ioError",$bind(this,this.__onError));
		this.__socket.addEventListener("socketData",$bind(this,this.__onSocketData));
		this.__socket.connect(host,port);
	}
	,send: function(object) {
		this.__socket.writeUTFBytes(Std.string(object));
		this.__socket.writeByte(0);
		this.__socket.flush();
	}
	,__onClose: function(_) {
		this.connected = false;
		this.dispatchEvent(new openfl_events_Event("close"));
	}
	,__onConnect: function(_) {
		this.connected = true;
		this.dispatchEvent(new openfl_events_Event("connect"));
	}
	,__onError: function(_) {
		this.dispatchEvent(new openfl_events_Event("ioError"));
	}
	,__onSocketData: function(_) {
		this.dispatchEvent(new openfl_events_DataEvent("data",false,false,this.__socket.readUTFBytes(this.__socket.get_bytesAvailable())));
	}
	,__class__: openfl_net_XMLSocket
});
var openfl_printing_PrintJob = $hx_exports["openfl"]["printing"]["PrintJob"] = function() {
};
$hxClasses["openfl.printing.PrintJob"] = openfl_printing_PrintJob;
openfl_printing_PrintJob.__name__ = ["openfl","printing","PrintJob"];
openfl_printing_PrintJob.prototype = {
	orientation: null
	,pageHeight: null
	,pageWidth: null
	,paperHeight: null
	,paperWidth: null
	,__bitmapData: null
	,__started: null
	,addPage: function(sprite,printArea,options,frameNum) {
		if(frameNum == null) {
			frameNum = 0;
		}
		if(!this.__started) {
			return;
		}
		if(printArea == null) {
			printArea = sprite.getBounds(sprite);
		}
		var bitmapData = new openfl_display_BitmapData($hx_exports.Math.ceil(printArea.width),$hx_exports.Math.ceil(printArea.height),true,0);
		bitmapData.draw(sprite);
		this.__bitmapData.push(bitmapData);
	}
	,send: function() {
		if(!this.__started) {
			return;
		}
		var $window = $hx_exports.js.Browser.get_window().open("","","width=500,height=500");
		if($window != null) {
			var style = $window.document.createElement("style");
			style.innerText = "@media all {\n\t\t\t\t\t.page-break\t{ display: none; }\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@media print {\n\t\t\t\t\t.page-break\t{ display: block; page-break-before: always; }\n\t\t\t\t}";
			$window.document.head.appendChild(style);
			var div;
			var image;
			var bitmapData;
			var _g1 = 0;
			var _g = this.__bitmapData.length;
			while(_g1 < _g) {
				var i = _g1++;
				bitmapData = this.__bitmapData[i];
				$hx_exports.lime.graphics.utils.ImageCanvasUtil.sync(bitmapData.image,false);
				if(bitmapData.image.buffer.__srcCanvas != null) {
					if(i > 0) {
						div = $window.document.createElement("div");
						div.className = "page-break";
						$window.document.body.appendChild(div);
					}
					image = new Image();
					image.src = bitmapData.image.buffer.__srcCanvas.toDataURL("image/png");
					$window.document.body.appendChild(image);
				}
			}
			$hx_exports.haxe.Timer.delay(function() {
				$window.focus();
				$window.print();
			},500);
		}
	}
	,start: function() {
		if(openfl_printing_PrintJob.isSupported) {
			this.__started = true;
			this.__bitmapData = [];
			return true;
		}
		return false;
	}
	,__class__: openfl_printing_PrintJob
};
var openfl_printing_PrintJobOptions = $hx_exports["openfl"]["printing"]["PrintJobOptions"] = function(printAsBitmap) {
	if(printAsBitmap == null) {
		printAsBitmap = false;
	}
	this.printAsBitmap = printAsBitmap;
};
$hxClasses["openfl.printing.PrintJobOptions"] = openfl_printing_PrintJobOptions;
openfl_printing_PrintJobOptions.__name__ = ["openfl","printing","PrintJobOptions"];
openfl_printing_PrintJobOptions.prototype = {
	printAsBitmap: null
	,__class__: openfl_printing_PrintJobOptions
};
var openfl_printing__$PrintJobOrientation_PrintJobOrientation_$Impl_$ = $hx_exports["openfl"]["printing"]["PrintJobOrientation"] = {};
$hxClasses["openfl.printing._PrintJobOrientation.PrintJobOrientation_Impl_"] = openfl_printing__$PrintJobOrientation_PrintJobOrientation_$Impl_$;
openfl_printing__$PrintJobOrientation_PrintJobOrientation_$Impl_$.__name__ = ["openfl","printing","_PrintJobOrientation","PrintJobOrientation_Impl_"];
openfl_printing__$PrintJobOrientation_PrintJobOrientation_$Impl_$.fromString = function(value) {
	switch(value) {
	case "landscape":
		return 0;
	case "portrait":
		return 1;
	default:
		return null;
	}
};
openfl_printing__$PrintJobOrientation_PrintJobOrientation_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "landscape";
	case 1:
		return "portrait";
	default:
		return null;
	}
};
var openfl_profiler_Telemetry = $hx_exports["openfl"]["profiler"]["Telemetry"] = function() { };
$hxClasses["openfl.profiler.Telemetry"] = openfl_profiler_Telemetry;
openfl_profiler_Telemetry.__name__ = ["openfl","profiler","Telemetry"];
openfl_profiler_Telemetry.__properties__ = {get_connected:"get_connected"};
openfl_profiler_Telemetry.registerCommandHandler = function(commandName,handler) {
	return false;
};
openfl_profiler_Telemetry.sendMetric = function(metric,value) {
};
openfl_profiler_Telemetry.sendSpanMetric = function(metric,startSpanMarker,value) {
};
openfl_profiler_Telemetry.unregisterCommandHandler = function(commandName) {
	return false;
};
openfl_profiler_Telemetry.__advanceFrame = function() {
};
openfl_profiler_Telemetry.__endTiming = function(name) {
};
openfl_profiler_Telemetry.__initialize = function() {
};
openfl_profiler_Telemetry.__rewindStack = function(stack) {
};
openfl_profiler_Telemetry.__startTiming = function(name) {
};
openfl_profiler_Telemetry.__unwindStack = function() {
	return "";
};
openfl_profiler_Telemetry.get_connected = function() {
	return false;
};
var openfl_sensors_Accelerometer = $hx_exports["openfl"]["sensors"]["Accelerometer"] = function() {
	openfl_events_EventDispatcher.call(this);
	openfl_sensors_Accelerometer.initialize();
	this.__interval = 0;
	this.__muted = false;
	this.setRequestedUpdateInterval(openfl_sensors_Accelerometer.defaultInterval);
};
$hxClasses["openfl.sensors.Accelerometer"] = openfl_sensors_Accelerometer;
openfl_sensors_Accelerometer.__name__ = ["openfl","sensors","Accelerometer"];
openfl_sensors_Accelerometer.__properties__ = {get_isSupported:"get_isSupported"};
openfl_sensors_Accelerometer.initialize = function() {
	if(!openfl_sensors_Accelerometer.initialized) {
		var sensors = $hx_exports.lime.system.Sensor.getSensors(lime_system_SensorType.ACCELEROMETER);
		if(sensors.length > 0) {
			sensors[0].onUpdate.add(openfl_sensors_Accelerometer.accelerometer_onUpdate);
			openfl_sensors_Accelerometer.supported = true;
		}
		openfl_sensors_Accelerometer.initialized = true;
	}
};
openfl_sensors_Accelerometer.accelerometer_onUpdate = function(x,y,z) {
	openfl_sensors_Accelerometer.currentX = x;
	openfl_sensors_Accelerometer.currentY = y;
	openfl_sensors_Accelerometer.currentZ = z;
};
openfl_sensors_Accelerometer.get_isSupported = function() {
	openfl_sensors_Accelerometer.initialize();
	return openfl_sensors_Accelerometer.supported;
};
openfl_sensors_Accelerometer.__super__ = openfl_events_EventDispatcher;
openfl_sensors_Accelerometer.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__interval: null
	,__muted: null
	,__timer: null
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		openfl_events_EventDispatcher.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
		this.update();
	}
	,setRequestedUpdateInterval: function(interval) {
		this.__interval = interval;
		if(this.__interval < 0) {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError());
		} else if(this.__interval == 0) {
			this.__interval = openfl_sensors_Accelerometer.defaultInterval;
		}
		if(this.__timer != null) {
			this.__timer.stop();
			this.__timer = null;
		}
		if(openfl_sensors_Accelerometer.supported && !this.get_muted()) {
			this.__timer = new $hx_exports.haxe.Timer(this.__interval);
			this.__timer.run = $bind(this,this.update);
		}
	}
	,update: function() {
		var event = new openfl_events_AccelerometerEvent("update");
		event.timestamp = $hx_exports.haxe.Timer.stamp();
		event.accelerationX = openfl_sensors_Accelerometer.currentX;
		event.accelerationY = openfl_sensors_Accelerometer.currentY;
		event.accelerationZ = openfl_sensors_Accelerometer.currentZ;
		this.dispatchEvent(event);
	}
	,get_muted: function() {
		return this.__muted;
	}
	,set_muted: function(value) {
		this.__muted = value;
		this.setRequestedUpdateInterval(this.__interval);
		return value;
	}
	,__class__: openfl_sensors_Accelerometer
	,__properties__: {set_muted:"set_muted",get_muted:"get_muted"}
});
var openfl_system_ApplicationDomain = $hx_exports["openfl"]["system"]["ApplicationDomain"] = function(parentDomain) {
	if(parentDomain != null) {
		this.parentDomain = parentDomain;
	} else {
		this.parentDomain = openfl_system_ApplicationDomain.currentDomain;
	}
};
$hxClasses["openfl.system.ApplicationDomain"] = openfl_system_ApplicationDomain;
openfl_system_ApplicationDomain.__name__ = ["openfl","system","ApplicationDomain"];
openfl_system_ApplicationDomain.prototype = {
	parentDomain: null
	,getDefinition: function(name) {
		return Type.resolveClass(name);
	}
	,hasDefinition: function(name) {
		return Type.resolveClass(name) != null;
	}
	,__class__: openfl_system_ApplicationDomain
};
var openfl_system_Capabilities = $hx_exports["openfl"]["system"]["Capabilities"] = function() { };
$hxClasses["openfl.system.Capabilities"] = openfl_system_Capabilities;
openfl_system_Capabilities.__name__ = ["openfl","system","Capabilities"];
openfl_system_Capabilities.__properties__ = {get_version:"get_version",get_screenResolutionY:"get_screenResolutionY",get_screenResolutionX:"get_screenResolutionX",get_screenDPI:"get_screenDPI",get_pixelAspectRatio:"get_pixelAspectRatio",get_os:"get_os",get_manufacturer:"get_manufacturer",get_language:"get_language",get_cpuArchitecture:"get_cpuArchitecture"};
openfl_system_Capabilities.hasMultiChannelAudio = function(type) {
	return false;
};
openfl_system_Capabilities.get_cpuArchitecture = function() {
	return "x86";
};
openfl_system_Capabilities.get_language = function() {
	var language = $hx_$exports_lime_system_Locale.get_language($hx_$exports_lime_system_Locale.get_currentLocale());
	if(language != null) {
		language = language.toLowerCase();
		switch(language) {
		case "cs":case "da":case "de":case "en":case "es":case "fi":case "fr":case "hu":case "it":case "ja":case "ko":case "nb":case "nl":case "pl":case "pt":case "ru":case "sv":case "tr":
			return language;
		case "zh":
			var region = $hx_$exports_lime_system_Locale.get_region($hx_$exports_lime_system_Locale.get_currentLocale());
			if(region != null) {
				var _g = region.toUpperCase();
				switch(_g) {
				case "HANT":case "TW":
					return "zh-TW";
				default:
				}
			}
			return "zh-CN";
		default:
			return "xu";
		}
	}
	return "en";
};
openfl_system_Capabilities.get_manufacturer = function() {
	return "OpenFL HTML5";
};
openfl_system_Capabilities.get_os = function() {
	return "HTML5";
};
openfl_system_Capabilities.get_pixelAspectRatio = function() {
	return 1;
};
openfl_system_Capabilities.get_screenDPI = function() {
	var $window = openfl__$internal_Lib.application != null ? openfl__$internal_Lib.application.get_window() : null;
	var screenDPI = openfl_system_Capabilities.__standardDensities[0];
	if($window != null) {
		var display = $window.get_display();
		if(display != null) {
			var actual = display.dpi;
			var closestValue = screenDPI;
			var closestDifference = $hx_exports.Math.abs(actual - screenDPI);
			var difference;
			var _g = 0;
			var _g1 = openfl_system_Capabilities.__standardDensities;
			while(_g < _g1.length) {
				var density = _g1[_g];
				++_g;
				difference = $hx_exports.Math.abs(actual - density);
				if(difference < closestDifference) {
					closestDifference = difference;
					closestValue = density;
				}
			}
			screenDPI = closestValue;
		}
	}
	return screenDPI;
};
openfl_system_Capabilities.get_screenResolutionX = function() {
	var stage = openfl__$internal_Lib.current.stage;
	var resolutionX = 0;
	if(stage.window != null) {
		var display = stage.window.get_display();
		if(display != null) {
			resolutionX = display.currentMode.width;
		}
	}
	if(resolutionX > 0) {
		return resolutionX;
	}
	return stage.stageWidth;
};
openfl_system_Capabilities.get_screenResolutionY = function() {
	var stage = openfl__$internal_Lib.current.stage;
	var resolutionY = 0;
	if(stage.window != null) {
		var display = stage.window.get_display();
		if(display != null) {
			resolutionY = display.currentMode.height;
		}
	}
	if(resolutionY > 0) {
		return resolutionY;
	}
	return stage.stageHeight;
};
openfl_system_Capabilities.get_version = function() {
	var value = "WEB";
	return value;
};
var openfl_system_LoaderContext = $hx_exports["openfl"]["system"]["LoaderContext"] = function(checkPolicyFile,applicationDomain,securityDomain) {
	if(checkPolicyFile == null) {
		checkPolicyFile = false;
	}
	this.checkPolicyFile = checkPolicyFile;
	this.securityDomain = securityDomain;
	this.applicationDomain = applicationDomain;
	this.allowCodeImport = true;
	this.allowLoadBytesCodeExecution = true;
};
$hxClasses["openfl.system.LoaderContext"] = openfl_system_LoaderContext;
openfl_system_LoaderContext.__name__ = ["openfl","system","LoaderContext"];
openfl_system_LoaderContext.prototype = {
	allowCodeImport: null
	,allowLoadBytesCodeExecution: null
	,applicationDomain: null
	,checkPolicyFile: null
	,securityDomain: null
	,__class__: openfl_system_LoaderContext
};
var openfl_system_Security = $hx_exports["openfl"]["system"]["Security"] = function() { };
$hxClasses["openfl.system.Security"] = openfl_system_Security;
openfl_system_Security.__name__ = ["openfl","system","Security"];
openfl_system_Security.disableAVM1Loading = null;
openfl_system_Security.exactSettings = null;
openfl_system_Security.sandboxType = null;
openfl_system_Security.allowDomain = function(p1,p2,p3,p4,p5) {
};
openfl_system_Security.allowInsecureDomain = function(p1,p2,p3,p4,p5) {
};
openfl_system_Security.loadPolicyFile = function(url) {
};
var openfl_system_SecurityDomain = $hx_exports["openfl"]["system"]["SecurityDomain"] = function() {
};
$hxClasses["openfl.system.SecurityDomain"] = openfl_system_SecurityDomain;
openfl_system_SecurityDomain.__name__ = ["openfl","system","SecurityDomain"];
openfl_system_SecurityDomain.prototype = {
	__class__: openfl_system_SecurityDomain
};
var openfl_system_System = $hx_exports["openfl"]["system"]["System"] = function() { };
$hxClasses["openfl.system.System"] = openfl_system_System;
openfl_system_System.__name__ = ["openfl","system","System"];
openfl_system_System.__properties__ = {get_vmVersion:"get_vmVersion",get_totalMemory:"get_totalMemory"};
openfl_system_System.exit = function(code) {
	$hx_exports.lime.system.System.exit(code);
};
openfl_system_System.gc = function() {
};
openfl_system_System.pause = function() {
	openfl__$internal_Lib.notImplemented({ fileName : "System.hx", lineNumber : 52, className : "openfl.system.System", methodName : "pause"});
};
openfl_system_System.resume = function() {
	openfl__$internal_Lib.notImplemented({ fileName : "System.hx", lineNumber : 59, className : "openfl.system.System", methodName : "resume"});
};
openfl_system_System.setClipboard = function(string) {
	$hx_exports.lime.system.Clipboard.set_text(string);
};
openfl_system_System.get_totalMemory = function() {
	return (window.performance && window.performance.memory) ? window.performance.memory.usedJSHeapSize : 0;
};
openfl_system_System.get_vmVersion = function() {
	return "1.0.0";
};
var openfl_system__$TouchscreenType_TouchscreenType_$Impl_$ = $hx_exports["openfl"]["system"]["TouchscreenType"] = {};
$hxClasses["openfl.system._TouchscreenType.TouchscreenType_Impl_"] = openfl_system__$TouchscreenType_TouchscreenType_$Impl_$;
openfl_system__$TouchscreenType_TouchscreenType_$Impl_$.__name__ = ["openfl","system","_TouchscreenType","TouchscreenType_Impl_"];
openfl_system__$TouchscreenType_TouchscreenType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "finger":
		return 0;
	case "none":
		return 1;
	case "stylus":
		return 2;
	default:
		return null;
	}
};
openfl_system__$TouchscreenType_TouchscreenType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "finger";
	case 1:
		return "none";
	case 2:
		return "stylus";
	default:
		return null;
	}
};
var openfl_text__$AntiAliasType_AntiAliasType_$Impl_$ = $hx_exports["openfl"]["text"]["AntiAliasType"] = {};
$hxClasses["openfl.text._AntiAliasType.AntiAliasType_Impl_"] = openfl_text__$AntiAliasType_AntiAliasType_$Impl_$;
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.__name__ = ["openfl","text","_AntiAliasType","AntiAliasType_Impl_"];
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "advanced":
		return 0;
	case "normal":
		return 1;
	default:
		return null;
	}
};
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "advanced";
	case 1:
		return "normal";
	default:
		return null;
	}
};
var openfl_text_Font = $hx_exports["openfl"]["text"]["Font"] = function(name) {
	$hx_exports.lime.text.Font.call(this,name);
};
$hxClasses["openfl.text.Font"] = openfl_text_Font;
openfl_text_Font.__name__ = ["openfl","text","Font"];
openfl_text_Font.enumerateFonts = function(enumerateDeviceFonts) {
	if(enumerateDeviceFonts == null) {
		enumerateDeviceFonts = false;
	}
	return openfl_text_Font.__registeredFonts;
};
openfl_text_Font.fromBytes = function(bytes) {
	var font = new openfl_text_Font();
	font.__fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes));
	return font;
};
openfl_text_Font.fromFile = function(path) {
	var font = new openfl_text_Font();
	font.__fromFile(path);
	return font;
};
openfl_text_Font.registerFont = function(font) {
	var instance = js_Boot.__cast(Type.createInstance(font,[]) , openfl_text_Font);
	if(instance != null) {
		openfl_text_Font.__registeredFonts.push(instance);
		openfl_text_Font.__fontByName.set(instance.name,instance);
	}
};
openfl_text_Font.__fromLimeFont = function(value) {
	var font = new openfl_text_Font();
	font.name = value.name;
	font.src = value.src;
	return font;
};
openfl_text_Font.__super__ = $hx_exports.lime.text.Font;
openfl_text_Font.prototype = $extend($hx_exports.lime.text.Font.prototype,{
	fontStyle: null
	,fontType: null
	,__initialized: null
	,__initialize: function() {
		return this.__initialized;
	}
	,get_fontName: function() {
		return this.name;
	}
	,set_fontName: function(value) {
		return this.name = value;
	}
	,__class__: openfl_text_Font
	,__properties__: $extend($hx_exports.lime.text.Font.prototype.__properties__,{set_fontName:"set_fontName",get_fontName:"get_fontName"})
});
var openfl_text__$FontStyle_FontStyle_$Impl_$ = $hx_exports["openfl"]["text"]["FontStyle"] = {};
$hxClasses["openfl.text._FontStyle.FontStyle_Impl_"] = openfl_text__$FontStyle_FontStyle_$Impl_$;
openfl_text__$FontStyle_FontStyle_$Impl_$.__name__ = ["openfl","text","_FontStyle","FontStyle_Impl_"];
openfl_text__$FontStyle_FontStyle_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bold":
		return 0;
	case "boldItalic":
		return 1;
	case "italic":
		return 2;
	case "regular":
		return 3;
	default:
		return null;
	}
};
openfl_text__$FontStyle_FontStyle_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bold";
	case 1:
		return "boldItalic";
	case 2:
		return "italic";
	case 3:
		return "regular";
	default:
		return null;
	}
};
var openfl_text__$FontType_FontType_$Impl_$ = $hx_exports["openfl"]["text"]["FontType"] = {};
$hxClasses["openfl.text._FontType.FontType_Impl_"] = openfl_text__$FontType_FontType_$Impl_$;
openfl_text__$FontType_FontType_$Impl_$.__name__ = ["openfl","text","_FontType","FontType_Impl_"];
openfl_text__$FontType_FontType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "device":
		return 0;
	case "embedded":
		return 1;
	case "embeddedCFF":
		return 2;
	default:
		return null;
	}
};
openfl_text__$FontType_FontType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "device";
	case 1:
		return "embedded";
	case 2:
		return "embeddedCFF";
	default:
		return null;
	}
};
var openfl_text__$GridFitType_GridFitType_$Impl_$ = $hx_exports["openfl"]["text"]["GridFitType"] = {};
$hxClasses["openfl.text._GridFitType.GridFitType_Impl_"] = openfl_text__$GridFitType_GridFitType_$Impl_$;
openfl_text__$GridFitType_GridFitType_$Impl_$.__name__ = ["openfl","text","_GridFitType","GridFitType_Impl_"];
openfl_text__$GridFitType_GridFitType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "none":
		return 0;
	case "pixel":
		return 1;
	case "subpixel":
		return 2;
	default:
		return null;
	}
};
openfl_text__$GridFitType_GridFitType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "none";
	case 1:
		return "pixel";
	case 2:
		return "subpixel";
	default:
		return null;
	}
};
var openfl_text_StaticText = $hx_exports["openfl"]["text"]["StaticText"] = function() {
	openfl_display_DisplayObject.call(this);
	this.__graphics = new openfl_display_Graphics(this);
};
$hxClasses["openfl.text.StaticText"] = openfl_text_StaticText;
openfl_text_StaticText.__name__ = ["openfl","text","StaticText"];
openfl_text_StaticText.__super__ = openfl_display_DisplayObject;
openfl_text_StaticText.prototype = $extend(openfl_display_DisplayObject.prototype,{
	text: null
	,__class__: openfl_text_StaticText
});
var openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$ = $hx_exports["openfl"]["text"]["TextFieldAutoSize"] = {};
$hxClasses["openfl.text._TextFieldAutoSize.TextFieldAutoSize_Impl_"] = openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.__name__ = ["openfl","text","_TextFieldAutoSize","TextFieldAutoSize_Impl_"];
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.fromString = function(value) {
	switch(value) {
	case "center":
		return 0;
	case "left":
		return 1;
	case "none":
		return 2;
	case "right":
		return 3;
	default:
		return null;
	}
};
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "center";
	case 1:
		return "left";
	case 2:
		return "none";
	case 3:
		return "right";
	default:
		return null;
	}
};
var openfl_text__$TextFieldType_TextFieldType_$Impl_$ = $hx_exports["openfl"]["text"]["TextFieldType"] = {};
$hxClasses["openfl.text._TextFieldType.TextFieldType_Impl_"] = openfl_text__$TextFieldType_TextFieldType_$Impl_$;
openfl_text__$TextFieldType_TextFieldType_$Impl_$.__name__ = ["openfl","text","_TextFieldType","TextFieldType_Impl_"];
openfl_text__$TextFieldType_TextFieldType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "dynamic":
		return 0;
	case "input":
		return 1;
	default:
		return null;
	}
};
openfl_text__$TextFieldType_TextFieldType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "dynamic";
	case 1:
		return "input";
	default:
		return null;
	}
};
var openfl_text_TextFormat = $hx_exports["openfl"]["text"]["TextFormat"] = function(font,size,color,bold,italic,underline,url,target,align,leftMargin,rightMargin,indent,leading) {
	this.font = font;
	this.size = size;
	this.color = color;
	this.bold = bold;
	this.italic = italic;
	this.underline = underline;
	this.url = url;
	this.target = target;
	this.align = align;
	this.leftMargin = leftMargin;
	this.rightMargin = rightMargin;
	this.indent = indent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextFormat"] = openfl_text_TextFormat;
openfl_text_TextFormat.__name__ = ["openfl","text","TextFormat"];
openfl_text_TextFormat.prototype = {
	align: null
	,blockIndent: null
	,bold: null
	,bullet: null
	,color: null
	,font: null
	,indent: null
	,italic: null
	,kerning: null
	,leading: null
	,leftMargin: null
	,letterSpacing: null
	,rightMargin: null
	,size: null
	,tabStops: null
	,target: null
	,underline: null
	,url: null
	,__ascent: null
	,__descent: null
	,clone: function() {
		var newFormat = new openfl_text_TextFormat(this.font,this.size,this.color,this.bold,this.italic,this.underline,this.url,this.target);
		newFormat.align = this.align;
		newFormat.leftMargin = this.leftMargin;
		newFormat.rightMargin = this.rightMargin;
		newFormat.indent = this.indent;
		newFormat.leading = this.leading;
		newFormat.blockIndent = this.blockIndent;
		newFormat.bullet = this.bullet;
		newFormat.kerning = this.kerning;
		newFormat.letterSpacing = this.letterSpacing;
		newFormat.tabStops = this.tabStops;
		newFormat.__ascent = this.__ascent;
		newFormat.__descent = this.__descent;
		return newFormat;
	}
	,__merge: function(format) {
		if(format.font != null) {
			this.font = format.font;
		}
		if(format.size != null) {
			this.size = format.size;
		}
		if(format.color != null) {
			this.color = format.color;
		}
		if(format.bold != null) {
			this.bold = format.bold;
		}
		if(format.italic != null) {
			this.italic = format.italic;
		}
		if(format.underline != null) {
			this.underline = format.underline;
		}
		if(format.url != null && format.url != "") {
			this.url = format.url;
		}
		if(format.url == "" && this.url == null) {
			this.url = "";
		}
		if(format.target != null) {
			this.target = format.target;
		}
		if(format.align != null) {
			this.align = format.align;
		}
		if(format.leftMargin != null) {
			this.leftMargin = format.leftMargin;
		}
		if(format.rightMargin != null) {
			this.rightMargin = format.rightMargin;
		}
		if(format.indent != null) {
			this.indent = format.indent;
		}
		if(format.leading != null) {
			this.leading = format.leading;
		}
		if(format.blockIndent != null) {
			this.blockIndent = format.blockIndent;
		}
		if(format.bullet != null) {
			this.bullet = format.bullet;
		}
		if(format.kerning != null) {
			this.kerning = format.kerning;
		}
		if(format.letterSpacing != null) {
			this.letterSpacing = format.letterSpacing;
		}
		if(format.tabStops != null) {
			this.tabStops = format.tabStops;
		}
		if(format.__ascent != null) {
			this.__ascent = format.__ascent;
		}
		if(format.__descent != null) {
			this.__descent = format.__descent;
		}
	}
	,__class__: openfl_text_TextFormat
};
var openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$ = $hx_exports["openfl"]["text"]["TextFormatAlign"] = {};
$hxClasses["openfl.text._TextFormatAlign.TextFormatAlign_Impl_"] = openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.__name__ = ["openfl","text","_TextFormatAlign","TextFormatAlign_Impl_"];
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.fromString = function(value) {
	switch(value) {
	case "center":
		return 0;
	case "end":
		return 1;
	case "justify":
		return 2;
	case "left":
		return 3;
	case "right":
		return 4;
	case "start":
		return 5;
	default:
		return null;
	}
};
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "center";
	case 1:
		return "end";
	case 2:
		return "justify";
	case 3:
		return "left";
	case 4:
		return "right";
	case 5:
		return "start";
	default:
		return null;
	}
};
var openfl_text_TextLineMetrics = $hx_exports["openfl"]["text"]["TextLineMetrics"] = function(x,width,height,ascent,descent,leading) {
	this.x = x;
	this.width = width;
	this.height = height;
	this.ascent = ascent;
	this.descent = descent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextLineMetrics"] = openfl_text_TextLineMetrics;
openfl_text_TextLineMetrics.__name__ = ["openfl","text","TextLineMetrics"];
openfl_text_TextLineMetrics.prototype = {
	ascent: null
	,descent: null
	,height: null
	,leading: null
	,width: null
	,x: null
	,__class__: openfl_text_TextLineMetrics
};
var openfl_ui_GameInput = $hx_exports["openfl"]["ui"]["GameInput"] = function() {
	openfl_events_EventDispatcher.call(this);
	openfl_ui_GameInput.__instances.push(this);
};
$hxClasses["openfl.ui.GameInput"] = openfl_ui_GameInput;
openfl_ui_GameInput.__name__ = ["openfl","ui","GameInput"];
openfl_ui_GameInput.getDeviceAt = function(index) {
	if(index >= 0 && index < openfl_ui_GameInput.__deviceList.length) {
		return openfl_ui_GameInput.__deviceList[index];
	}
	return null;
};
openfl_ui_GameInput.__getDevice = function(gamepad) {
	if(gamepad == null) {
		return null;
	}
	if(!openfl_ui_GameInput.__devices.exists(gamepad)) {
		var device = new openfl_ui_GameInputDevice(gamepad.get_guid(),gamepad.get_name());
		openfl_ui_GameInput.__deviceList.push(device);
		openfl_ui_GameInput.__devices.set(gamepad,device);
		openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
	}
	return openfl_ui_GameInput.__devices.get(gamepad);
};
openfl_ui_GameInput.__onGamepadAxisMove = function(gamepad,axis,value) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__axis.exists(axis)) {
			var control;
			switch(axis) {
			case 0:
				control = "LEFT_X";
				break;
			case 1:
				control = "LEFT_Y";
				break;
			case 2:
				control = "RIGHT_X";
				break;
			case 3:
				control = "RIGHT_Y";
				break;
			case 4:
				control = "TRIGGER_LEFT";
				break;
			case 5:
				control = "TRIGGER_RIGHT";
				break;
			default:
				control = "UNKNOWN (" + axis + ")";
			}
			var control1 = new openfl_ui_GameInputControl(device,"AXIS_" + control,-1,1);
			device.__axis.set(axis,control1);
			device.__controls.push(control1);
		}
		var control2 = device.__axis.get(axis);
		control2.value = value;
		control2.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadButtonDown = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__button.exists(button)) {
			var control;
			switch(button) {
			case 0:
				control = "A";
				break;
			case 1:
				control = "B";
				break;
			case 2:
				control = "X";
				break;
			case 3:
				control = "Y";
				break;
			case 4:
				control = "BACK";
				break;
			case 5:
				control = "GUIDE";
				break;
			case 6:
				control = "START";
				break;
			case 7:
				control = "LEFT_STICK";
				break;
			case 8:
				control = "RIGHT_STICK";
				break;
			case 9:
				control = "LEFT_SHOULDER";
				break;
			case 10:
				control = "RIGHT_SHOULDER";
				break;
			case 11:
				control = "DPAD_UP";
				break;
			case 12:
				control = "DPAD_DOWN";
				break;
			case 13:
				control = "DPAD_LEFT";
				break;
			case 14:
				control = "DPAD_RIGHT";
				break;
			default:
				control = "UNKNOWN (" + button + ")";
			}
			var control1 = new openfl_ui_GameInputControl(device,"BUTTON_" + control,0,1);
			device.__button.set(button,control1);
			device.__controls.push(control1);
		}
		var control2 = device.__button.get(button);
		control2.value = 1;
		control2.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadButtonUp = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__button.exists(button)) {
			var control;
			switch(button) {
			case 0:
				control = "A";
				break;
			case 1:
				control = "B";
				break;
			case 2:
				control = "X";
				break;
			case 3:
				control = "Y";
				break;
			case 4:
				control = "BACK";
				break;
			case 5:
				control = "GUIDE";
				break;
			case 6:
				control = "START";
				break;
			case 7:
				control = "LEFT_STICK";
				break;
			case 8:
				control = "RIGHT_STICK";
				break;
			case 9:
				control = "LEFT_SHOULDER";
				break;
			case 10:
				control = "RIGHT_SHOULDER";
				break;
			case 11:
				control = "DPAD_UP";
				break;
			case 12:
				control = "DPAD_DOWN";
				break;
			case 13:
				control = "DPAD_LEFT";
				break;
			case 14:
				control = "DPAD_RIGHT";
				break;
			default:
				control = "UNKNOWN (" + button + ")";
			}
			var control1 = new openfl_ui_GameInputControl(device,"BUTTON_" + control,0,1);
			device.__button.set(button,control1);
			device.__controls.push(control1);
		}
		var control2 = device.__button.get(button);
		control2.value = 0;
		control2.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadConnect = function(gamepad) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	var _g = 0;
	var _g1 = openfl_ui_GameInput.__instances;
	while(_g < _g1.length) {
		var instance = _g1[_g];
		++_g;
		instance.dispatchEvent(new openfl_events_GameInputEvent("deviceAdded",null,null,device));
	}
};
openfl_ui_GameInput.__onGamepadDisconnect = function(gamepad) {
	var device = openfl_ui_GameInput.__devices.get(gamepad);
	if(device != null) {
		if(openfl_ui_GameInput.__devices.exists(gamepad)) {
			$hx_exports.HxOverrides.remove(openfl_ui_GameInput.__deviceList,openfl_ui_GameInput.__devices.get(gamepad));
			openfl_ui_GameInput.__devices.remove(gamepad);
		}
		openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
		var _g = 0;
		var _g1 = openfl_ui_GameInput.__instances;
		while(_g < _g1.length) {
			var instance = _g1[_g];
			++_g;
			instance.dispatchEvent(new openfl_events_GameInputEvent("deviceRemoved",null,null,device));
		}
	}
};
openfl_ui_GameInput.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInput.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		openfl_events_EventDispatcher.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
		if(type == "deviceAdded") {
			var _g = 0;
			var _g1 = openfl_ui_GameInput.__deviceList;
			while(_g < _g1.length) {
				var device = _g1[_g];
				++_g;
				this.dispatchEvent(new openfl_events_GameInputEvent("deviceAdded",null,null,device));
			}
		}
	}
	,__class__: openfl_ui_GameInput
});
var openfl_ui_GameInputControl = $hx_exports["openfl"]["ui"]["GameInputControl"] = function(device,id,minValue,maxValue,value) {
	if(value == null) {
		value = 0;
	}
	openfl_events_EventDispatcher.call(this);
	this.device = device;
	this.id = id;
	this.minValue = minValue;
	this.maxValue = maxValue;
	this.value = value;
};
$hxClasses["openfl.ui.GameInputControl"] = openfl_ui_GameInputControl;
openfl_ui_GameInputControl.__name__ = ["openfl","ui","GameInputControl"];
openfl_ui_GameInputControl.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInputControl.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	device: null
	,id: null
	,maxValue: null
	,minValue: null
	,value: null
	,__class__: openfl_ui_GameInputControl
});
var openfl_ui_GameInputDevice = $hx_exports["openfl"]["ui"]["GameInputDevice"] = function(id,name) {
	this.__controls = [];
	this.__button = new $hx_exports.haxe.ds.IntMap();
	this.__axis = new $hx_exports.haxe.ds.IntMap();
	this.id = id;
	this.name = name;
	var control;
	var _g = 0;
	while(_g < 6) {
		var i = _g++;
		control = new openfl_ui_GameInputControl(this,"AXIS_" + i,-1,1);
		this.__axis.set(i,control);
		this.__controls.push(control);
	}
	var _g1 = 0;
	while(_g1 < 15) {
		var i1 = _g1++;
		control = new openfl_ui_GameInputControl(this,"BUTTON_" + i1,0,1);
		this.__button.set(i1,control);
		this.__controls.push(control);
	}
};
$hxClasses["openfl.ui.GameInputDevice"] = openfl_ui_GameInputDevice;
openfl_ui_GameInputDevice.__name__ = ["openfl","ui","GameInputDevice"];
openfl_ui_GameInputDevice.prototype = {
	enabled: null
	,id: null
	,name: null
	,sampleInterval: null
	,__axis: null
	,__button: null
	,__controls: null
	,__gamepad: null
	,getCachedSamples: function(data,append) {
		if(append == null) {
			append = false;
		}
		return 0;
	}
	,getControlAt: function(i) {
		if(i >= 0 && i < this.__controls.length) {
			return this.__controls[i];
		}
		return null;
	}
	,startCachingSamples: function(numSamples,controls) {
	}
	,stopCachingSamples: function() {
	}
	,get_numControls: function() {
		return this.__controls.length;
	}
	,__class__: openfl_ui_GameInputDevice
	,__properties__: {get_numControls:"get_numControls"}
};
var openfl_ui_Keyboard = $hx_exports["openfl"]["ui"]["Keyboard"] = function() { };
$hxClasses["openfl.ui.Keyboard"] = openfl_ui_Keyboard;
openfl_ui_Keyboard.__name__ = ["openfl","ui","Keyboard"];
openfl_ui_Keyboard.capsLock = null;
openfl_ui_Keyboard.numLock = null;
openfl_ui_Keyboard.isAccessible = function() {
	return false;
};
openfl_ui_Keyboard.__convertKeyCode = function(key) {
	switch(key) {
	case 8:
		return 8;
	case 9:
		return 9;
	case 13:
		return 13;
	case 27:
		return 27;
	case 32:
		return 32;
	case 33:
		return 49;
	case 34:
		return 222;
	case 35:
		return 51;
	case 36:
		return 52;
	case 37:
		return 53;
	case 38:
		return 55;
	case 39:
		return 222;
	case 40:
		return 57;
	case 41:
		return 48;
	case 42:
		return 56;
	case 44:
		return 188;
	case 45:
		return 189;
	case 46:
		return 190;
	case 47:
		return 191;
	case 48:
		return 48;
	case 49:
		return 49;
	case 50:
		return 50;
	case 51:
		return 51;
	case 52:
		return 52;
	case 53:
		return 53;
	case 54:
		return 54;
	case 55:
		return 55;
	case 56:
		return 56;
	case 57:
		return 57;
	case 58:
		return 186;
	case 59:
		return 186;
	case 60:
		return 60;
	case 61:
		return 187;
	case 62:
		return 190;
	case 63:
		return 191;
	case 64:
		return 50;
	case 91:
		return 219;
	case 92:
		return 220;
	case 93:
		return 221;
	case 94:
		return 54;
	case 95:
		return 189;
	case 96:
		return 192;
	case 97:
		return 65;
	case 98:
		return 66;
	case 99:
		return 67;
	case 100:
		return 68;
	case 101:
		return 69;
	case 102:
		return 70;
	case 103:
		return 71;
	case 104:
		return 72;
	case 105:
		return 73;
	case 106:
		return 74;
	case 107:
		return 75;
	case 108:
		return 76;
	case 109:
		return 77;
	case 110:
		return 78;
	case 111:
		return 79;
	case 112:
		return 80;
	case 113:
		return 81;
	case 114:
		return 82;
	case 115:
		return 83;
	case 116:
		return 84;
	case 117:
		return 85;
	case 118:
		return 86;
	case 119:
		return 87;
	case 120:
		return 88;
	case 121:
		return 89;
	case 122:
		return 90;
	case 127:
		return 46;
	case 1073741881:
		return 20;
	case 1073741882:
		return 112;
	case 1073741883:
		return 113;
	case 1073741884:
		return 114;
	case 1073741885:
		return 115;
	case 1073741886:
		return 116;
	case 1073741887:
		return 117;
	case 1073741888:
		return 118;
	case 1073741889:
		return 119;
	case 1073741890:
		return 120;
	case 1073741891:
		return 121;
	case 1073741892:
		return 122;
	case 1073741893:
		return 123;
	case 1073741894:
		return 301;
	case 1073741895:
		return 145;
	case 1073741896:
		return 19;
	case 1073741897:
		return 45;
	case 1073741898:
		return 36;
	case 1073741899:
		return 33;
	case 1073741901:
		return 35;
	case 1073741902:
		return 34;
	case 1073741903:
		return 39;
	case 1073741904:
		return 37;
	case 1073741905:
		return 40;
	case 1073741906:
		return 38;
	case 1073741907:
		return 144;
	case 1073741908:
		return 111;
	case 1073741909:
		return 106;
	case 1073741910:
		return 109;
	case 1073741911:
		return 107;
	case 1073741912:
		return 108;
	case 1073741913:
		return 97;
	case 1073741914:
		return 98;
	case 1073741915:
		return 99;
	case 1073741916:
		return 100;
	case 1073741917:
		return 101;
	case 1073741918:
		return 102;
	case 1073741919:
		return 103;
	case 1073741920:
		return 104;
	case 1073741921:
		return 105;
	case 1073741922:
		return 96;
	case 1073741923:
		return 110;
	case 1073741925:
		return 302;
	case 1073741928:
		return 124;
	case 1073741929:
		return 125;
	case 1073741930:
		return 126;
	case 1073741982:
		return 13;
	case 1073742044:
		return 110;
	case 1073742048:
		return 17;
	case 1073742049:
		return 16;
	case 1073742050:
		return 18;
	case 1073742051:
		return 15;
	case 1073742052:
		return 17;
	case 1073742053:
		return 16;
	case 1073742054:
		return 18;
	case 1073742055:
		return 15;
	default:
		return key;
	}
};
openfl_ui_Keyboard.__getCharCode = function(key,shift) {
	if(shift == null) {
		shift = false;
	}
	if(!shift) {
		switch(key) {
		case 8:
			return 8;
		case 9:
			return 9;
		case 13:
			return 13;
		case 27:
			return 27;
		case 32:
			return 32;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		}
		if(key >= 48 && key <= 57) {
			return key - 48 + 48;
		}
		if(key >= 65 && key <= 90) {
			return key - 65 + 97;
		}
	} else {
		switch(key) {
		case 48:
			return 41;
		case 49:
			return 33;
		case 50:
			return 64;
		case 51:
			return 35;
		case 52:
			return 36;
		case 53:
			return 37;
		case 54:
			return 94;
		case 55:
			return 38;
		case 56:
			return 42;
		case 57:
			return 40;
		case 186:
			return 58;
		case 187:
			return 43;
		case 188:
			return 60;
		case 189:
			return 95;
		case 190:
			return 62;
		case 191:
			return 63;
		case 192:
			return 126;
		case 219:
			return 123;
		case 220:
			return 124;
		case 221:
			return 125;
		case 222:
			return 34;
		}
		if(key >= 65 && key <= 90) {
			return key - 65 + 65;
		}
	}
	if(key >= 96 && key <= 105) {
		return key - 96 + 48;
	}
	switch(key) {
	case 8:
		return 8;
	case 13:
		return 13;
	case 46:
		return 127;
	case 106:
		return 42;
	case 107:
		return 43;
	case 108:
		return 44;
	case 110:
		return 45;
	case 111:
		return 46;
	}
	return 0;
};
openfl_ui_Keyboard.__getKeyLocation = function(key) {
	switch(key) {
	case 1073741908:case 1073741909:case 1073741910:case 1073741911:case 1073741912:case 1073741913:case 1073741914:case 1073741915:case 1073741916:case 1073741917:case 1073741918:case 1073741919:case 1073741920:case 1073741921:case 1073741922:case 1073741923:case 1073742044:
		return 3;
	case 1073742048:case 1073742049:case 1073742050:case 1073742051:
		return 1;
	case 1073742052:case 1073742053:case 1073742054:case 1073742055:
		return 2;
	default:
		return 0;
	}
};
var openfl_ui_Mouse = $hx_exports["openfl"]["ui"]["Mouse"] = function() { };
$hxClasses["openfl.ui.Mouse"] = openfl_ui_Mouse;
openfl_ui_Mouse.__name__ = ["openfl","ui","Mouse"];
openfl_ui_Mouse.__properties__ = {set_cursor:"set_cursor",get_cursor:"get_cursor"};
openfl_ui_Mouse.hide = function() {
	$hx_exports.lime.ui.Mouse.hide();
};
openfl_ui_Mouse.show = function() {
	$hx_exports.lime.ui.Mouse.show();
};
openfl_ui_Mouse.get_cursor = function() {
	return openfl_ui_Mouse.__cursor;
};
openfl_ui_Mouse.set_cursor = function(value) {
	switch(value) {
	case "arrow":
		$hx_exports.lime.ui.Mouse.set_cursor(lime_ui_MouseCursor.ARROW);
		break;
	case "button":
		$hx_exports.lime.ui.Mouse.set_cursor(lime_ui_MouseCursor.POINTER);
		break;
	case "crosshair":
		$hx_exports.lime.ui.Mouse.set_cursor(lime_ui_MouseCursor.CROSSHAIR);
		break;
	case "custom":
		$hx_exports.lime.ui.Mouse.set_cursor(lime_ui_MouseCursor.CUSTOM);
		break;
	case "hand":
		$hx_exports.lime.ui.Mouse.set_cursor(lime_ui_MouseCursor.MOVE);
		break;
	case "ibeam":
		$hx_exports.lime.ui.Mouse.set_cursor(lime_ui_MouseCursor.TEXT);
		break;
	case "resize_nesw":
		$hx_exports.lime.ui.Mouse.set_cursor(lime_ui_MouseCursor.RESIZE_NESW);
		break;
	case "resize_ns":
		$hx_exports.lime.ui.Mouse.set_cursor(lime_ui_MouseCursor.RESIZE_NS);
		break;
	case "resize_nwse":
		$hx_exports.lime.ui.Mouse.set_cursor(lime_ui_MouseCursor.RESIZE_NWSE);
		break;
	case "resize_we":
		$hx_exports.lime.ui.Mouse.set_cursor(lime_ui_MouseCursor.RESIZE_WE);
		break;
	case "wait":
		$hx_exports.lime.ui.Mouse.set_cursor(lime_ui_MouseCursor.WAIT);
		break;
	case "waitarrow":
		$hx_exports.lime.ui.Mouse.set_cursor(lime_ui_MouseCursor.WAIT_ARROW);
		break;
	default:
	}
	return openfl_ui_Mouse.__cursor = value;
};
var openfl_ui__$MouseCursor_MouseCursor_$Impl_$ = $hx_exports["openfl"]["ui"]["MouseCursor"] = {};
$hxClasses["openfl.ui._MouseCursor.MouseCursor_Impl_"] = openfl_ui__$MouseCursor_MouseCursor_$Impl_$;
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.__name__ = ["openfl","ui","_MouseCursor","MouseCursor_Impl_"];
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.fromLimeCursor = function(cursor) {
	switch(cursor[1]) {
	case 0:
		return "arrow";
	case 1:
		return "crosshair";
	case 2:
		return "auto";
	case 3:
		return "hand";
	case 4:
		return "button";
	case 5:
		return "resize_nesw";
	case 6:
		return "resize_nwse";
	case 7:
		return "resize_nwse";
	case 8:
		return "resize_we";
	case 9:
		return "ibeam";
	case 10:
		return "wait";
	case 11:
		return "waitarrow";
	case 12:
		return "custom";
	}
};
var openfl_ui_Multitouch = $hx_exports["openfl"]["ui"]["Multitouch"] = function() { };
$hxClasses["openfl.ui.Multitouch"] = openfl_ui_Multitouch;
openfl_ui_Multitouch.__name__ = ["openfl","ui","Multitouch"];
openfl_ui_Multitouch.__properties__ = {get_supportsTouchEvents:"get_supportsTouchEvents"};
openfl_ui_Multitouch.inputMode = null;
openfl_ui_Multitouch.maxTouchPoints = null;
openfl_ui_Multitouch.supportedGestures = null;
openfl_ui_Multitouch.supportsGestureEvents = null;
openfl_ui_Multitouch.get_supportsTouchEvents = function() {
	if(('ontouchstart' in document.documentElement) || (window.DocumentTouch && document instanceof DocumentTouch)) {
		return true;
	}
	return false;
};
var openfl_ui__$MultitouchInputMode_MultitouchInputMode_$Impl_$ = $hx_exports["openfl"]["ui"]["MultitouchInputMode"] = {};
$hxClasses["openfl.ui._MultitouchInputMode.MultitouchInputMode_Impl_"] = openfl_ui__$MultitouchInputMode_MultitouchInputMode_$Impl_$;
openfl_ui__$MultitouchInputMode_MultitouchInputMode_$Impl_$.__name__ = ["openfl","ui","_MultitouchInputMode","MultitouchInputMode_Impl_"];
openfl_ui__$MultitouchInputMode_MultitouchInputMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "gesture":
		return 0;
	case "none":
		return 1;
	case "touchPoint":
		return 2;
	default:
		return null;
	}
};
openfl_ui__$MultitouchInputMode_MultitouchInputMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "gesture";
	case 1:
		return "none";
	case 2:
		return "touchPoint";
	default:
		return null;
	}
};
var openfl_utils_AGALMiniAssembler = $hx_exports["openfl"]["utils"]["AGALMiniAssembler"] = function(debugging) {
	if(debugging == null) {
		debugging = false;
	}
	this.debugEnabled = false;
	this.debugEnabled = debugging;
	if(!openfl_utils_AGALMiniAssembler.initialized) {
		openfl_utils_AGALMiniAssembler.init();
	}
};
$hxClasses["openfl.utils.AGALMiniAssembler"] = openfl_utils_AGALMiniAssembler;
openfl_utils_AGALMiniAssembler.__name__ = ["openfl","utils","AGALMiniAssembler"];
openfl_utils_AGALMiniAssembler.init = function() {
	openfl_utils_AGALMiniAssembler.initialized = true;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("mov",2,0,0);
	this1.set("mov",v);
	var this2 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v1 = new openfl_utils__$AGALMiniAssembler_OpCode("add",3,1,0);
	this2.set("add",v1);
	var this3 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v2 = new openfl_utils__$AGALMiniAssembler_OpCode("sub",3,2,0);
	this3.set("sub",v2);
	var this4 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v3 = new openfl_utils__$AGALMiniAssembler_OpCode("mul",3,3,0);
	this4.set("mul",v3);
	var this5 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v4 = new openfl_utils__$AGALMiniAssembler_OpCode("div",3,4,0);
	this5.set("div",v4);
	var this6 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v5 = new openfl_utils__$AGALMiniAssembler_OpCode("rcp",2,5,0);
	this6.set("rcp",v5);
	var this7 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v6 = new openfl_utils__$AGALMiniAssembler_OpCode("min",3,6,0);
	this7.set("min",v6);
	var this8 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v7 = new openfl_utils__$AGALMiniAssembler_OpCode("max",3,7,0);
	this8.set("max",v7);
	var this9 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v8 = new openfl_utils__$AGALMiniAssembler_OpCode("frc",2,8,0);
	this9.set("frc",v8);
	var this10 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v9 = new openfl_utils__$AGALMiniAssembler_OpCode("sqt",2,9,0);
	this10.set("sqt",v9);
	var this11 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v10 = new openfl_utils__$AGALMiniAssembler_OpCode("rsq",2,10,0);
	this11.set("rsq",v10);
	var this12 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v11 = new openfl_utils__$AGALMiniAssembler_OpCode("pow",3,11,0);
	this12.set("pow",v11);
	var this13 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v12 = new openfl_utils__$AGALMiniAssembler_OpCode("log",2,12,0);
	this13.set("log",v12);
	var this14 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v13 = new openfl_utils__$AGALMiniAssembler_OpCode("exp",2,13,0);
	this14.set("exp",v13);
	var this15 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v14 = new openfl_utils__$AGALMiniAssembler_OpCode("nrm",2,14,0);
	this15.set("nrm",v14);
	var this16 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v15 = new openfl_utils__$AGALMiniAssembler_OpCode("sin",2,15,0);
	this16.set("sin",v15);
	var this17 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v16 = new openfl_utils__$AGALMiniAssembler_OpCode("cos",2,16,0);
	this17.set("cos",v16);
	var this18 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v17 = new openfl_utils__$AGALMiniAssembler_OpCode("crs",3,17,0);
	this18.set("crs",v17);
	var this19 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v18 = new openfl_utils__$AGALMiniAssembler_OpCode("dp3",3,18,0);
	this19.set("dp3",v18);
	var this20 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v19 = new openfl_utils__$AGALMiniAssembler_OpCode("dp4",3,19,0);
	this20.set("dp4",v19);
	var this21 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v20 = new openfl_utils__$AGALMiniAssembler_OpCode("abs",2,20,0);
	this21.set("abs",v20);
	var this22 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v21 = new openfl_utils__$AGALMiniAssembler_OpCode("neg",2,21,0);
	this22.set("neg",v21);
	var this23 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v22 = new openfl_utils__$AGALMiniAssembler_OpCode("sat",2,22,0);
	this23.set("sat",v22);
	var this24 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v23 = new openfl_utils__$AGALMiniAssembler_OpCode("m33",3,23,16);
	this24.set("m33",v23);
	var this25 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v24 = new openfl_utils__$AGALMiniAssembler_OpCode("m44",3,24,16);
	this25.set("m44",v24);
	var this26 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v25 = new openfl_utils__$AGALMiniAssembler_OpCode("m34",3,25,16);
	this26.set("m34",v25);
	var this27 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v26 = new openfl_utils__$AGALMiniAssembler_OpCode("ddx",2,26,288);
	this27.set("ddx",v26);
	var this28 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v27 = new openfl_utils__$AGALMiniAssembler_OpCode("ddy",2,27,288);
	this28.set("ddy",v27);
	var this29 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v28 = new openfl_utils__$AGALMiniAssembler_OpCode("ife",2,28,897);
	this29.set("ife",v28);
	var this30 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v29 = new openfl_utils__$AGALMiniAssembler_OpCode("ine",2,29,897);
	this30.set("ine",v29);
	var this31 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v30 = new openfl_utils__$AGALMiniAssembler_OpCode("ifg",2,30,897);
	this31.set("ifg",v30);
	var this32 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v31 = new openfl_utils__$AGALMiniAssembler_OpCode("ifl",2,31,897);
	this32.set("ifl",v31);
	var this33 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v32 = new openfl_utils__$AGALMiniAssembler_OpCode("els",0,32,1921);
	this33.set("els",v32);
	var this34 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v33 = new openfl_utils__$AGALMiniAssembler_OpCode("eif",0,33,1409);
	this34.set("eif",v33);
	var this35 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v34 = new openfl_utils__$AGALMiniAssembler_OpCode("kil",1,39,160);
	this35.set("kil",v34);
	var this36 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v35 = new openfl_utils__$AGALMiniAssembler_OpCode("tex",3,40,40);
	this36.set("tex",v35);
	var this37 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v36 = new openfl_utils__$AGALMiniAssembler_OpCode("sge",3,41,0);
	this37.set("sge",v36);
	var this38 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v37 = new openfl_utils__$AGALMiniAssembler_OpCode("slt",3,42,0);
	this38.set("slt",v37);
	var this39 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v38 = new openfl_utils__$AGALMiniAssembler_OpCode("sgn",2,43,0);
	this39.set("sgn",v38);
	var this40 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v39 = new openfl_utils__$AGALMiniAssembler_OpCode("seq",3,44,0);
	this40.set("seq",v39);
	var this41 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v40 = new openfl_utils__$AGALMiniAssembler_OpCode("sne",3,45,0);
	this41.set("sne",v40);
	var this42 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v41 = new openfl_utils__$AGALMiniAssembler_Sampler("rgba",8,0);
	this42.set("rgba",v41);
	var this43 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v42 = new openfl_utils__$AGALMiniAssembler_Sampler("compressed",8,1);
	this43.set("compressed",v42);
	var this44 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v43 = new openfl_utils__$AGALMiniAssembler_Sampler("compressedalpha",8,2);
	this44.set("compressedalpha",v43);
	var this45 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v44 = new openfl_utils__$AGALMiniAssembler_Sampler("dxt1",8,1);
	this45.set("dxt1",v44);
	var this46 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v45 = new openfl_utils__$AGALMiniAssembler_Sampler("dxt5",8,2);
	this46.set("dxt5",v45);
	var this47 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v46 = new openfl_utils__$AGALMiniAssembler_Sampler("video",8,3);
	this47.set("video",v46);
	var this48 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v47 = new openfl_utils__$AGALMiniAssembler_Sampler("2d",12,0);
	this48.set("2d",v47);
	var this49 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v48 = new openfl_utils__$AGALMiniAssembler_Sampler("3d",12,2);
	this49.set("3d",v48);
	var this50 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v49 = new openfl_utils__$AGALMiniAssembler_Sampler("cube",12,1);
	this50.set("cube",v49);
	var this51 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v50 = new openfl_utils__$AGALMiniAssembler_Sampler("mipnearest",24,1);
	this51.set("mipnearest",v50);
	var this52 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v51 = new openfl_utils__$AGALMiniAssembler_Sampler("miplinear",24,2);
	this52.set("miplinear",v51);
	var this53 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v52 = new openfl_utils__$AGALMiniAssembler_Sampler("mipnone",24,0);
	this53.set("mipnone",v52);
	var this54 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v53 = new openfl_utils__$AGALMiniAssembler_Sampler("nomip",24,0);
	this54.set("nomip",v53);
	var this55 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v54 = new openfl_utils__$AGALMiniAssembler_Sampler("nearest",28,0);
	this55.set("nearest",v54);
	var this56 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v55 = new openfl_utils__$AGALMiniAssembler_Sampler("linear",28,1);
	this56.set("linear",v55);
	var this57 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v56 = new openfl_utils__$AGALMiniAssembler_Sampler("anisotropic2x",28,2);
	this57.set("anisotropic2x",v56);
	var this58 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v57 = new openfl_utils__$AGALMiniAssembler_Sampler("anisotropic4x",28,3);
	this58.set("anisotropic4x",v57);
	var this59 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v58 = new openfl_utils__$AGALMiniAssembler_Sampler("anisotropic8x",28,4);
	this59.set("anisotropic8x",v58);
	var this60 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v59 = new openfl_utils__$AGALMiniAssembler_Sampler("anisotropic16x",28,5);
	this60.set("anisotropic16x",v59);
	var this61 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v60 = new openfl_utils__$AGALMiniAssembler_Sampler("centroid",16,1);
	this61.set("centroid",v60);
	var this62 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v61 = new openfl_utils__$AGALMiniAssembler_Sampler("single",16,2);
	this62.set("single",v61);
	var this63 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v62 = new openfl_utils__$AGALMiniAssembler_Sampler("ignoresampler",16,4);
	this63.set("ignoresampler",v62);
	var this64 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v63 = new openfl_utils__$AGALMiniAssembler_Sampler("repeat",20,1);
	this64.set("repeat",v63);
	var this65 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v64 = new openfl_utils__$AGALMiniAssembler_Sampler("wrap",20,1);
	this65.set("wrap",v64);
	var this66 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v65 = new openfl_utils__$AGALMiniAssembler_Sampler("clamp",20,0);
	this66.set("clamp",v65);
	var this67 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v66 = new openfl_utils__$AGALMiniAssembler_Sampler("clamp_u_repeat_v",20,2);
	this67.set("clamp_u_repeat_v",v66);
	var this68 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v67 = new openfl_utils__$AGALMiniAssembler_Sampler("repeat_u_clamp_v",20,3);
	this68.set("repeat_u_clamp_v",v67);
};
openfl_utils_AGALMiniAssembler.prototype = {
	agalcode: null
	,error: null
	,verbose: null
	,debugEnabled: null
	,assemble2: function(context3D,version,vertexSource,fragmentSource) {
		var agalVertex = this.assemble("vertex",vertexSource,version);
		var agalFragment = this.assemble("fragment",fragmentSource,version);
		var program = context3D.createProgram();
		program.upload(agalVertex,agalFragment);
		return program;
	}
	,assemble: function(mode,source,version,ignoreLimits) {
		if(ignoreLimits == null) {
			ignoreLimits = false;
		}
		if(version == null) {
			version = 1;
		}
		var start = openfl_Lib.getTimer();
		var this1 = new openfl_utils_ByteArrayData(0);
		this.agalcode = this1;
		this.error = "";
		var isFrag = false;
		if(mode == "fragment") {
			isFrag = true;
		} else if(mode != "vertex") {
			this.error = "ERROR: mode needs to be \"" + "fragment" + "\" or \"" + "vertex" + "\" but is \"" + mode + "\".";
		}
		this.agalcode.set_endian(1);
		this.agalcode.writeByte(160);
		this.agalcode.writeUnsignedInt(version);
		this.agalcode.writeByte(161);
		this.agalcode.writeByte(isFrag ? 1 : 0);
		this.initregmap(version,ignoreLimits);
		var lines = $hx_exports.StringTools.replace(source,"\r","\n").split("\n");
		var nest = 0;
		var nops = 0;
		var lng = lines.length;
		var reg1 = new $hx_exports.EReg("<.*>","g");
		var reg2 = new $hx_exports.EReg("([\\w\\.\\-\\+]+)","gi");
		var reg3 = new $hx_exports.EReg("^\\w{3}","ig");
		var reg4 = new $hx_exports.EReg("vc\\[([vofi][acostdip]?[d]?)(\\d*)?(\\.[xyzw](\\+\\d{1,3})?)?\\](\\.[xyzw]{1,4})?|([vofi][acostdip]?[d]?)(\\d*)?(\\.[xyzw]{1,4})?","gi");
		var reg5 = new $hx_exports.EReg("\\[.*\\]","ig");
		var reg6 = new $hx_exports.EReg("^\\b[A-Za-z]{1,3}","ig");
		var reg7 = new $hx_exports.EReg("\\d+","");
		var reg8 = new $hx_exports.EReg("(\\.[xyzw]{1,4})","");
		var reg9 = new $hx_exports.EReg("[A-Za-z]{1,3}","ig");
		var reg10 = new $hx_exports.EReg("(\\.[xyzw]{1,1})","");
		var reg11 = new $hx_exports.EReg("\\+\\d{1,3}","ig");
		var i = 0;
		while(i < lng && this.error == "") {
			var line = $hx_exports.StringTools.trim(lines[i]);
			var startcomment = line.indexOf("//");
			if(startcomment != -1) {
				line = $hx_exports.HxOverrides.substr(line,0,startcomment);
			}
			var optsi = reg1.match(line) ? reg1.matchedPos().pos : -1;
			var opts = null;
			if(optsi != -1) {
				opts = this.match($hx_exports.HxOverrides.substr(line,optsi,null),reg2);
				line = $hx_exports.HxOverrides.substr(line,0,optsi);
			}
			var opCode = null;
			var opFound = null;
			if(reg3.match(line)) {
				opCode = reg3.matched(0);
				opFound = openfl_utils_AGALMiniAssembler.OPMAP.get(opCode);
			}
			if(opFound == null) {
				if(line.length >= 3) {
					$hx_exports.haxe.Log.trace("warning: bad line " + i + ": " + lines[i],{ fileName : "AGALMiniAssembler.hx", lineNumber : 284, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
				}
				++i;
				continue;
			}
			if(this.debugEnabled) {
				$hx_exports.haxe.Log.trace(opFound,{ fileName : "AGALMiniAssembler.hx", lineNumber : 296, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
			}
			if(opFound == null) {
				if(line.length >= 3) {
					$hx_exports.haxe.Log.trace("warning: bad line " + i + ": " + lines[i],{ fileName : "AGALMiniAssembler.hx", lineNumber : 304, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
				}
				++i;
				continue;
			}
			line = $hx_exports.HxOverrides.substr(line,line.indexOf(opFound.name) + opFound.name.length,null);
			if((opFound.flags & 256) != 0 && version < 2) {
				this.error = "error: opcode requires version 2.";
				break;
			}
			if((opFound.flags & 64) != 0 && isFrag) {
				this.error = "error: opcode is only allowed in vertex programs.";
				break;
			}
			if((opFound.flags & 32) != 0 && !isFrag) {
				this.error = "error: opcode is only allowed in fragment programs.";
				break;
			}
			if(this.verbose) {
				$hx_exports.haxe.Log.trace("emit opcode=" + Std.string(opFound),{ fileName : "AGALMiniAssembler.hx", lineNumber : 338, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
			}
			this.agalcode.writeUnsignedInt(opFound.emitCode);
			++nops;
			if(nops > 4096) {
				this.error = "error: too many opcodes. maximum is " + 4096 + ".";
				break;
			}
			var regs = this.match(line,reg4);
			if(regs.length != opFound.numRegister) {
				this.error = "error: wrong number of operands. found " + regs.length + " but expected " + opFound.numRegister + ".";
				break;
			}
			var badreg = false;
			var pad = 160;
			var regLength = regs.length;
			var _g1 = 0;
			var _g = regLength;
			while(_g1 < _g) {
				var j = _g1++;
				var isRelative = false;
				var relreg = this.match(regs[j],reg5);
				if(relreg.length > 0) {
					regs[j] = $hx_exports.StringTools.replace(regs[j],relreg[0],"0");
					if(this.verbose) {
						$hx_exports.haxe.Log.trace("IS REL",{ fileName : "AGALMiniAssembler.hx", lineNumber : 377, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
					}
					isRelative = true;
				}
				var res = this.match(regs[j],reg6);
				if(res.length == 0) {
					this.error = "error: could not parse operand " + j + " (" + regs[j] + ").";
					badreg = true;
					break;
				}
				var regFound = openfl_utils_AGALMiniAssembler.REGMAP.get(res[0]);
				if(this.debugEnabled) {
					$hx_exports.haxe.Log.trace(regFound,{ fileName : "AGALMiniAssembler.hx", lineNumber : 399, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
				}
				if(regFound == null) {
					this.error = "error: could not find register name for operand " + j + " (" + regs[j] + ").";
					badreg = true;
					break;
				}
				if(isFrag) {
					if((regFound.flags & 32) == 0) {
						this.error = "error: register operand " + j + " (" + regs[j] + ") only allowed in vertex programs.";
						badreg = true;
						break;
					}
					if(isRelative) {
						this.error = "error: register operand " + j + " (" + regs[j] + ") relative adressing not allowed in fragment programs.";
						badreg = true;
						break;
					}
				} else if((regFound.flags & 64) == 0) {
					this.error = "error: register operand " + j + " (" + regs[j] + ") only allowed in fragment programs.";
					badreg = true;
					break;
				}
				regs[j] = $hx_exports.HxOverrides.substr(regs[j],regs[j].indexOf(regFound.name) + regFound.name.length,null);
				var idxmatch = isRelative ? this.match(relreg[0],reg7) : this.match(regs[j],reg7);
				var regidx = 0;
				if(idxmatch.length > 0) {
					regidx = Std.parseInt(idxmatch[0]);
				}
				if(_$UInt_UInt_$Impl_$.gt(regidx,regFound.range)) {
					this.error = "error: register operand " + j + " (" + regs[j] + ") index exceeds limit of " + Std.string(_$UInt_UInt_$Impl_$.toFloat(regFound.range + 1)) + ".";
					badreg = true;
					break;
				}
				var regmask = 0;
				var maskmatch = this.match(regs[j],reg8);
				var isDest = j == 0 && (opFound.flags & 128) == 0;
				var isSampler = j == 2 && (opFound.flags & 8) != 0;
				var reltype = 0;
				var relsel = 0;
				var reloffset = 0;
				if(isDest && isRelative) {
					this.error = "error: relative can not be destination";
					badreg = true;
					break;
				}
				if(maskmatch.length > 0) {
					regmask = 0;
					var cv = 0;
					var maskLength = maskmatch[0].length;
					var k = 1;
					while(k < maskLength) {
						cv = $hx_exports.HxOverrides.cca(maskmatch[0],k) - 120;
						if(_$UInt_UInt_$Impl_$.gt(cv,2)) {
							cv = 3;
						}
						if(isDest) {
							regmask |= 1 << cv;
						} else {
							regmask = regmask | cv << (k - 1 << 1);
						}
						++k;
					}
					if(!isDest) {
						while(k <= 4) {
							regmask = regmask | cv << (k - 1 << 1);
							++k;
						}
					}
				} else {
					regmask = isDest ? 15 : 228;
				}
				if(isRelative) {
					var relname = this.match(relreg[0],reg9);
					var regFoundRel = openfl_utils_AGALMiniAssembler.REGMAP.get(relname[0]);
					if(regFoundRel == null) {
						this.error = "error: bad index register";
						badreg = true;
						break;
					}
					reltype = regFoundRel.emitCode;
					var selmatch = this.match(relreg[0],reg10);
					if(selmatch.length == 0) {
						this.error = "error: bad index register select";
						badreg = true;
						break;
					}
					relsel = $hx_exports.HxOverrides.cca(selmatch[0],1) - 120;
					if(_$UInt_UInt_$Impl_$.gt(relsel,2)) {
						relsel = 3;
					}
					var relofs = this.match(relreg[0],reg11);
					if(relofs.length > 0) {
						reloffset = Std.parseInt(relofs[0]);
					}
					if(reloffset < 0 || reloffset > 255) {
						this.error = "error: index offset " + reloffset + " out of bounds. [0..255]";
						badreg = true;
						break;
					}
					if(this.verbose) {
						$hx_exports.haxe.Log.trace("RELATIVE: type=" + reltype + "==" + relname[0] + " sel=" + Std.string(_$UInt_UInt_$Impl_$.toFloat(relsel)) + "==" + selmatch[0] + " idx=" + Std.string(_$UInt_UInt_$Impl_$.toFloat(regidx)) + " offset=" + reloffset,{ fileName : "AGALMiniAssembler.hx", lineNumber : 574, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
					}
				}
				if(this.verbose) {
					$hx_exports.haxe.Log.trace("  emit argcode=" + Std.string(regFound) + "[" + Std.string(_$UInt_UInt_$Impl_$.toFloat(regidx)) + "][" + regmask + "]",{ fileName : "AGALMiniAssembler.hx", lineNumber : 582, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
				}
				if(isDest) {
					this.agalcode.writeShort(regidx);
					this.agalcode.writeByte(regmask);
					this.agalcode.writeByte(regFound.emitCode);
					pad -= 32;
				} else if(isSampler) {
					if(this.verbose) {
						$hx_exports.haxe.Log.trace("  emit sampler",{ fileName : "AGALMiniAssembler.hx", lineNumber : 599, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
					}
					var samplerbits = 5;
					var optsLength = opts == null ? 0 : opts.length;
					var bias = 0.0;
					var _g3 = 0;
					var _g2 = optsLength;
					while(_g3 < _g2) {
						var k1 = _g3++;
						if(this.verbose) {
							$hx_exports.haxe.Log.trace("    opt: " + opts[k1],{ fileName : "AGALMiniAssembler.hx", lineNumber : 611, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
						}
						var optfound = openfl_utils_AGALMiniAssembler.SAMPLEMAP.get(opts[k1]);
						if(optfound == null) {
							bias = Std.parseFloat(opts[k1]);
							if(this.verbose) {
								$hx_exports.haxe.Log.trace("    bias: " + bias,{ fileName : "AGALMiniAssembler.hx", lineNumber : 625, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
							}
						} else {
							if(optfound.flag != 16) {
								samplerbits &= ~(15 << optfound.flag);
							}
							samplerbits = samplerbits | optfound.mask << optfound.flag;
						}
					}
					this.agalcode.writeShort(regidx);
					this.agalcode.writeByte(Std.int(bias * 8.0));
					this.agalcode.writeByte(0);
					this.agalcode.writeUnsignedInt(samplerbits);
					if(this.verbose) {
						$hx_exports.haxe.Log.trace("    bits: " + (samplerbits - 5),{ fileName : "AGALMiniAssembler.hx", lineNumber : 650, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
					}
					pad -= 64;
				} else {
					if(j == 0) {
						this.agalcode.writeUnsignedInt(0);
						pad -= 32;
					}
					this.agalcode.writeShort(regidx);
					this.agalcode.writeByte(reloffset);
					this.agalcode.writeByte(regmask);
					this.agalcode.writeByte(regFound.emitCode);
					this.agalcode.writeByte(reltype);
					this.agalcode.writeShort(isRelative ? relsel | 32768 : 0);
					pad -= 64;
				}
			}
			var j1 = 0;
			while(j1 < pad) {
				this.agalcode.writeByte(0);
				j1 += 8;
			}
			if(badreg) {
				break;
			}
			++i;
		}
		if(this.error != "") {
			this.error += "\n  at line " + i + " " + lines[i];
			openfl_utils__$ByteArray_ByteArray_$Impl_$.set_length(this.agalcode,0);
			$hx_exports.haxe.Log.trace(this.error,{ fileName : "AGALMiniAssembler.hx", lineNumber : 703, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
		}
		if(this.debugEnabled) {
			var dbgLine = "generated bytecode:";
			var agalLength = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.agalcode);
			var _g11 = 0;
			var _g4 = agalLength;
			while(_g11 < _g4) {
				var index = _g11++;
				if(index % 16 == 0) {
					dbgLine += "\n";
				}
				if(index % 4 == 0) {
					dbgLine += " ";
				}
				var byteStr = $hx_exports.StringTools.hex(this.agalcode.get(index),2);
				if(byteStr.length < 2) {
					byteStr = "0" + byteStr;
				}
				dbgLine += byteStr;
			}
			$hx_exports.haxe.Log.trace(dbgLine,{ fileName : "AGALMiniAssembler.hx", lineNumber : 739, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
		}
		if(this.verbose) {
			$hx_exports.haxe.Log.trace("AGALMiniAssembler.assemble time: " + (openfl_Lib.getTimer() - start) / 1000 + "s",{ fileName : "AGALMiniAssembler.hx", lineNumber : 745, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
		}
		return this.agalcode;
	}
	,initregmap: function(version,ignorelimits) {
		var this1 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v = new openfl_utils__$AGALMiniAssembler_Register("va","vertex attribute",0,ignorelimits ? 1024 : version == 1 || version == 2 ? 7 : 15,66);
		this1.set("va",v);
		var this2 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v1 = new openfl_utils__$AGALMiniAssembler_Register("vc","vertex constant",1,ignorelimits ? 1024 : version == 1 ? 127 : 249,66);
		this2.set("vc",v1);
		var this3 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v2 = new openfl_utils__$AGALMiniAssembler_Register("vt","vertex temporary",2,ignorelimits ? 1024 : version == 1 ? 7 : 25,67);
		this3.set("vt",v2);
		var this4 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v3 = new openfl_utils__$AGALMiniAssembler_Register("vo","vertex output",3,ignorelimits ? 1024 : 0,65);
		this4.set("vo",v3);
		var this5 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v4 = new openfl_utils__$AGALMiniAssembler_Register("vi","varying",4,ignorelimits ? 1024 : version == 1 ? 7 : 9,99);
		this5.set("vi",v4);
		var this6 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v5 = new openfl_utils__$AGALMiniAssembler_Register("fc","fragment constant",1,ignorelimits ? 1024 : version == 1 ? 27 : version == 2 ? 63 : 199,34);
		this6.set("fc",v5);
		var this7 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v6 = new openfl_utils__$AGALMiniAssembler_Register("ft","fragment temporary",2,ignorelimits ? 1024 : version == 1 ? 7 : 25,35);
		this7.set("ft",v6);
		var this8 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v7 = new openfl_utils__$AGALMiniAssembler_Register("fs","texture sampler",5,ignorelimits ? 1024 : 7,34);
		this8.set("fs",v7);
		var this9 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v8 = new openfl_utils__$AGALMiniAssembler_Register("fo","fragment output",3,ignorelimits ? 1024 : version == 1 ? 0 : 3,33);
		this9.set("fo",v8);
		var this10 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v9 = new openfl_utils__$AGALMiniAssembler_Register("fd","fragment depth output",6,ignorelimits ? 1024 : version == 1 ? -1 : 0,33);
		this10.set("fd",v9);
		var this11 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v10 = new openfl_utils__$AGALMiniAssembler_Register("iid","instance id",7,ignorelimits ? 1024 : 0,66);
		this11.set("iid",v10);
		var this12 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v11 = openfl_utils_AGALMiniAssembler.REGMAP.get("vo");
		this12.set("op",v11);
		var this13 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v12 = openfl_utils_AGALMiniAssembler.REGMAP.get("vi");
		this13.set("i",v12);
		var this14 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v13 = openfl_utils_AGALMiniAssembler.REGMAP.get("vi");
		this14.set("v",v13);
		var this15 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v14 = openfl_utils_AGALMiniAssembler.REGMAP.get("fo");
		this15.set("oc",v14);
		var this16 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v15 = openfl_utils_AGALMiniAssembler.REGMAP.get("fd");
		this16.set("od",v15);
		var this17 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v16 = openfl_utils_AGALMiniAssembler.REGMAP.get("vi");
		this17.set("fi",v16);
	}
	,match: function(value,reg) {
		var matches = [];
		var index = 0;
		var match;
		while(reg.matchSub(value,index)) {
			match = reg.matched(0);
			matches.push(match);
			index = reg.matchedPos().pos + match.length;
		}
		return matches;
	}
	,__class__: openfl_utils_AGALMiniAssembler
};
var openfl_utils__$AGALMiniAssembler_OpCode = function(name,numRegister,emitCode,flags) {
	this.name = name;
	this.numRegister = numRegister;
	this.emitCode = emitCode;
	this.flags = flags;
};
$hxClasses["openfl.utils._AGALMiniAssembler.OpCode"] = openfl_utils__$AGALMiniAssembler_OpCode;
openfl_utils__$AGALMiniAssembler_OpCode.__name__ = ["openfl","utils","_AGALMiniAssembler","OpCode"];
openfl_utils__$AGALMiniAssembler_OpCode.prototype = {
	emitCode: null
	,flags: null
	,name: null
	,numRegister: null
	,toString: function() {
		return "[OpCode name=\"" + this.name + "\", numRegister=" + this.numRegister + ", emitCode=" + this.emitCode + ", flags=" + this.flags + "]";
	}
	,__class__: openfl_utils__$AGALMiniAssembler_OpCode
};
var openfl_utils__$AGALMiniAssembler_Register = function(name,longName,emitCode,range,flags) {
	this.name = name;
	this.longName = longName;
	this.emitCode = emitCode;
	this.range = range;
	this.flags = flags;
};
$hxClasses["openfl.utils._AGALMiniAssembler.Register"] = openfl_utils__$AGALMiniAssembler_Register;
openfl_utils__$AGALMiniAssembler_Register.__name__ = ["openfl","utils","_AGALMiniAssembler","Register"];
openfl_utils__$AGALMiniAssembler_Register.prototype = {
	emitCode: null
	,name: null
	,longName: null
	,flags: null
	,range: null
	,toString: function() {
		return "[Register name=\"" + this.name + "\", longName=\"" + this.longName + "\", emitCode=" + Std.string(_$UInt_UInt_$Impl_$.toFloat(this.emitCode)) + ", range=" + Std.string(_$UInt_UInt_$Impl_$.toFloat(this.range)) + ", flags=" + Std.string(_$UInt_UInt_$Impl_$.toFloat(this.flags)) + "]";
	}
	,__class__: openfl_utils__$AGALMiniAssembler_Register
};
var openfl_utils__$AGALMiniAssembler_Sampler = function(name,flag,mask) {
	this.name = name;
	this.flag = flag;
	this.mask = mask;
};
$hxClasses["openfl.utils._AGALMiniAssembler.Sampler"] = openfl_utils__$AGALMiniAssembler_Sampler;
openfl_utils__$AGALMiniAssembler_Sampler.__name__ = ["openfl","utils","_AGALMiniAssembler","Sampler"];
openfl_utils__$AGALMiniAssembler_Sampler.prototype = {
	flag: null
	,mask: null
	,name: null
	,toString: function() {
		return "[Sampler name=\"" + this.name + "\", flag=\"" + Std.string(_$UInt_UInt_$Impl_$.toFloat(this.flag)) + "\", mask=" + Std.string(_$UInt_UInt_$Impl_$.toFloat(this.mask)) + "]";
	}
	,__class__: openfl_utils__$AGALMiniAssembler_Sampler
};
var openfl_utils_IAssetCache = $hx_exports["openfl"]["utils"]["IAssetCache"] = function() { };
$hxClasses["openfl.utils.IAssetCache"] = openfl_utils_IAssetCache;
openfl_utils_IAssetCache.__name__ = ["openfl","utils","IAssetCache"];
openfl_utils_IAssetCache.prototype = {
	get_enabled: null
	,set_enabled: null
	,clear: null
	,getBitmapData: null
	,getFont: null
	,getSound: null
	,hasBitmapData: null
	,hasFont: null
	,hasSound: null
	,removeBitmapData: null
	,removeFont: null
	,removeSound: null
	,setBitmapData: null
	,setFont: null
	,setSound: null
	,__class__: openfl_utils_IAssetCache
	,__properties__: {set_enabled:"set_enabled",get_enabled:"get_enabled"}
};
var openfl_utils_AssetCache = $hx_exports["openfl"]["utils"]["AssetCache"] = function() {
	this.__enabled = true;
	this.bitmapData = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.sound = new haxe_ds_StringMap();
};
$hxClasses["openfl.utils.AssetCache"] = openfl_utils_AssetCache;
openfl_utils_AssetCache.__name__ = ["openfl","utils","AssetCache"];
openfl_utils_AssetCache.__interfaces__ = [openfl_utils_IAssetCache];
openfl_utils_AssetCache.prototype = {
	bitmapData: null
	,font: null
	,sound: null
	,__enabled: null
	,clear: function(prefix) {
		if(prefix == null) {
			this.bitmapData = new haxe_ds_StringMap();
			this.font = new haxe_ds_StringMap();
			this.sound = new haxe_ds_StringMap();
		} else {
			var keys = this.bitmapData.keys();
			var key = keys;
			while(key.hasNext()) {
				var key1 = key.next();
				if($hx_exports.StringTools.startsWith(key1,prefix)) {
					this.removeBitmapData(key1);
				}
			}
			var keys1 = this.font.keys();
			var key2 = keys1;
			while(key2.hasNext()) {
				var key3 = key2.next();
				if($hx_exports.StringTools.startsWith(key3,prefix)) {
					this.removeFont(key3);
				}
			}
			var keys2 = this.sound.keys();
			var key4 = keys2;
			while(key4.hasNext()) {
				var key5 = key4.next();
				if($hx_exports.StringTools.startsWith(key5,prefix)) {
					this.removeSound(key5);
				}
			}
		}
	}
	,getBitmapData: function(id) {
		return this.bitmapData.get(id);
	}
	,getFont: function(id) {
		return this.font.get(id);
	}
	,getSound: function(id) {
		return this.sound.get(id);
	}
	,hasBitmapData: function(id) {
		return this.bitmapData.exists(id);
	}
	,hasFont: function(id) {
		return this.font.exists(id);
	}
	,hasSound: function(id) {
		return this.sound.exists(id);
	}
	,removeBitmapData: function(id) {
		$hx_exports.lime.utils.Assets.cache.image.remove(id);
		return this.bitmapData.remove(id);
	}
	,removeFont: function(id) {
		$hx_exports.lime.utils.Assets.cache.font.remove(id);
		return this.font.remove(id);
	}
	,removeSound: function(id) {
		$hx_exports.lime.utils.Assets.cache.audio.remove(id);
		return this.sound.remove(id);
	}
	,setBitmapData: function(id,bitmapData) {
		this.bitmapData.set(id,bitmapData);
	}
	,setFont: function(id,font) {
		this.font.set(id,font);
	}
	,setSound: function(id,sound) {
		this.sound.set(id,sound);
	}
	,get_enabled: function() {
		return this.__enabled;
	}
	,set_enabled: function(value) {
		return this.__enabled = value;
	}
	,__class__: openfl_utils_AssetCache
	,__properties__: {set_enabled:"set_enabled",get_enabled:"get_enabled"}
};
var openfl_utils_Assets = $hx_exports["openfl"]["utils"]["Assets"] = function() { };
$hxClasses["openfl.utils.Assets"] = openfl_utils_Assets;
openfl_utils_Assets.__name__ = ["openfl","utils","Assets"];
openfl_utils_Assets.addEventListener = function(type,listener,useCapture,priority,useWeakReference) {
	if(useWeakReference == null) {
		useWeakReference = false;
	}
	if(priority == null) {
		priority = 0;
	}
	if(useCapture == null) {
		useCapture = false;
	}
	if(!$hx_exports.lime.utils.Assets.onChange.has(openfl_utils_Assets.LimeAssets_onChange)) {
		$hx_exports.lime.utils.Assets.onChange.add(openfl_utils_Assets.LimeAssets_onChange);
	}
	openfl_utils_Assets.dispatcher.addEventListener(type,listener,useCapture,priority,useWeakReference);
};
openfl_utils_Assets.dispatchEvent = function(event) {
	return openfl_utils_Assets.dispatcher.dispatchEvent(event);
};
openfl_utils_Assets.exists = function(id,type) {
	return $hx_exports.lime.utils.Assets.exists(id,type);
};
openfl_utils_Assets.getBitmapData = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_utils_Assets.cache.get_enabled() && openfl_utils_Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl_utils_Assets.cache.getBitmapData(id);
		if(openfl_utils_Assets.isValidBitmapData(bitmapData)) {
			return bitmapData;
		}
	}
	var image = $hx_exports.lime.utils.Assets.getImage(id,false);
	if(image != null) {
		var bitmapData1 = openfl_display_BitmapData.fromImage(image);
		if(useCache && openfl_utils_Assets.cache.get_enabled()) {
			openfl_utils_Assets.cache.setBitmapData(id,bitmapData1);
		}
		return bitmapData1;
	}
	return null;
};
openfl_utils_Assets.getBytes = function(id) {
	return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes($hx_exports.lime.utils.Assets.getBytes(id));
};
openfl_utils_Assets.getFont = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_utils_Assets.cache.get_enabled() && openfl_utils_Assets.cache.hasFont(id)) {
		return openfl_utils_Assets.cache.getFont(id);
	}
	var limeFont = $hx_exports.lime.utils.Assets.getFont(id,false);
	if(limeFont != null) {
		var font = openfl_text_Font.__fromLimeFont(limeFont);
		if(useCache && openfl_utils_Assets.cache.get_enabled()) {
			openfl_utils_Assets.cache.setFont(id,font);
		}
		return font;
	}
	return new openfl_text_Font();
};
openfl_utils_Assets.getLibrary = function(name) {
	return $hx_exports.lime.utils.Assets.getLibrary(name);
};
openfl_utils_Assets.getMovieClip = function(id) {
	var libraryName;
	var symbolName;
	if(-1 == id.indexOf(":")) {
		symbolName = id;
		libraryName = openfl_utils_Assets.libraryByLastLoadedSymbolName.get(symbolName);
	} else {
		libraryName = id.substring(0,id.indexOf(":"));
		symbolName = $hx_exports.HxOverrides.substr(id,id.indexOf(":") + 1,null);
	}
	var limeLibrary = openfl_utils_Assets.getLibrary(libraryName);
	if(limeLibrary != null) {
		if(Std.is(limeLibrary,openfl_utils_AssetLibrary)) {
			var library = limeLibrary;
			if(library.exists(symbolName,"MOVIE_CLIP")) {
				if(library.isLocal(symbolName,"MOVIE_CLIP")) {
					return library.getMovieClip(symbolName);
				} else {
					$hx_exports.lime.utils.Log.error("MovieClip asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 190, className : "openfl.utils.Assets", methodName : "getMovieClip"});
					return null;
				}
			}
		}
		$hx_exports.lime.utils.Log.error("There is no MovieClip asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 199, className : "openfl.utils.Assets", methodName : "getMovieClip"});
	} else {
		$hx_exports.lime.utils.Log.error("There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 203, className : "openfl.utils.Assets", methodName : "getMovieClip"});
	}
	return null;
};
openfl_utils_Assets.getMusic = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return openfl_utils_Assets.getSound(id,useCache);
};
openfl_utils_Assets.getPath = function(id) {
	return $hx_exports.lime.utils.Assets.getPath(id);
};
openfl_utils_Assets.getSound = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_utils_Assets.cache.get_enabled() && openfl_utils_Assets.cache.hasSound(id)) {
		var sound = openfl_utils_Assets.cache.getSound(id);
		if(openfl_utils_Assets.isValidSound(sound)) {
			return sound;
		}
	}
	var buffer = $hx_exports.lime.utils.Assets.getAudioBuffer(id,false);
	if(buffer != null) {
		var sound1 = openfl_media_Sound.fromAudioBuffer(buffer);
		if(useCache && openfl_utils_Assets.cache.get_enabled()) {
			openfl_utils_Assets.cache.setSound(id,sound1);
		}
		return sound1;
	}
	return null;
};
openfl_utils_Assets.getText = function(id) {
	return $hx_exports.lime.utils.Assets.getText(id);
};
openfl_utils_Assets.hasEventListener = function(type) {
	return openfl_utils_Assets.dispatcher.hasEventListener(type);
};
openfl_utils_Assets.hasLibrary = function(name) {
	return $hx_exports.lime.utils.Assets.hasLibrary(name);
};
openfl_utils_Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_utils_Assets.cache.get_enabled()) {
		if(type == "IMAGE" || type == null) {
			if(openfl_utils_Assets.cache.hasBitmapData(id)) {
				return true;
			}
		}
		if(type == "FONT" || type == null) {
			if(openfl_utils_Assets.cache.hasFont(id)) {
				return true;
			}
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			if(openfl_utils_Assets.cache.hasSound(id)) {
				return true;
			}
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = $hx_exports.HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = openfl_utils_Assets.getLibrary(libraryName);
	if(library != null) {
		return library.isLocal(symbolName,type);
	}
	return false;
};
openfl_utils_Assets.isValidBitmapData = function(bitmapData) {
	return bitmapData != null && bitmapData.image != null;
};
openfl_utils_Assets.isValidSound = function(sound) {
	return true;
};
openfl_utils_Assets.list = function(type) {
	return $hx_exports.lime.utils.Assets.list(type);
};
openfl_utils_Assets.loadBitmapData = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache == null) {
		useCache = true;
	}
	var promise = new $hx_exports.lime.app.Promise();
	if(useCache && openfl_utils_Assets.cache.get_enabled() && openfl_utils_Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl_utils_Assets.cache.getBitmapData(id);
		if(openfl_utils_Assets.isValidBitmapData(bitmapData)) {
			promise.complete(bitmapData);
			return promise.future;
		}
	}
	$hx_exports.lime.utils.Assets.loadImage(id,false).onComplete(function(image) {
		if(image != null) {
			var bitmapData1 = openfl_display_BitmapData.fromImage(image);
			if(useCache && openfl_utils_Assets.cache.get_enabled()) {
				openfl_utils_Assets.cache.setBitmapData(id,bitmapData1);
			}
			promise.complete(bitmapData1);
		} else {
			promise.error("[Assets] Could not load Image \"" + id + "\"");
		}
	}).onError($bind(promise,promise.error)).onProgress($bind(promise,promise.progress));
	return promise.future;
};
openfl_utils_Assets.loadBytes = function(id) {
	var promise = new $hx_exports.lime.app.Promise();
	var future = $hx_exports.lime.utils.Assets.loadBytes(id);
	future.onComplete(function(bytes) {
		promise.complete(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes));
	});
	future.onProgress(function(progress,total) {
		promise.progress(progress,total);
	});
	future.onError(function(msg) {
		promise.error(msg);
	});
	return promise.future;
};
openfl_utils_Assets.loadFont = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache == null) {
		useCache = true;
	}
	var promise = new $hx_exports.lime.app.Promise();
	if(useCache && openfl_utils_Assets.cache.get_enabled() && openfl_utils_Assets.cache.hasFont(id)) {
		var tmp = openfl_utils_Assets.cache.getFont(id);
		promise.complete(tmp);
		return promise.future;
	}
	$hx_exports.lime.utils.Assets.loadFont(id).onComplete(function(limeFont) {
		var font = openfl_text_Font.__fromLimeFont(limeFont);
		if(useCache && openfl_utils_Assets.cache.get_enabled()) {
			openfl_utils_Assets.cache.setFont(id,font);
		}
		promise.complete(font);
	}).onError($bind(promise,promise.error)).onProgress($bind(promise,promise.progress));
	return promise.future;
};
openfl_utils_Assets.loadLibrary = function(name) {
	var future = $hx_exports.lime.utils.Assets.loadLibrary(name);
	return future;
};
openfl_utils_Assets.loadMusic = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache == null) {
		useCache = true;
	}
	var future = new $hx_exports.lime.app.Future(function() {
		return openfl_utils_Assets.getMusic(id,useCache);
	});
	return future;
};
openfl_utils_Assets.loadMovieClip = function(id) {
	var promise = new $hx_exports.lime.app.Promise();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = $hx_exports.HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var limeLibrary = openfl_utils_Assets.getLibrary(libraryName);
	if(limeLibrary != null) {
		if(Std.is(limeLibrary,openfl_utils_AssetLibrary)) {
			var library = limeLibrary;
			if(library.exists(symbolName,"MOVIE_CLIP")) {
				promise.completeWith(library.loadMovieClip(symbolName));
				return promise.future;
			}
		}
		promise.error("[Assets] There is no MovieClip asset with an ID of \"" + id + "\"");
	} else {
		promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
	}
	return promise.future;
};
openfl_utils_Assets.loadSound = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache == null) {
		useCache = true;
	}
	var promise = new $hx_exports.lime.app.Promise();
	$hx_exports.lime.utils.Assets.loadAudioBuffer(id,useCache).onComplete(function(buffer) {
		if(buffer != null) {
			var sound = openfl_media_Sound.fromAudioBuffer(buffer);
			if(useCache && openfl_utils_Assets.cache.get_enabled()) {
				openfl_utils_Assets.cache.setSound(id,sound);
			}
			promise.complete(sound);
		} else {
			promise.error("[Assets] Could not load Sound \"" + id + "\"");
		}
	}).onError($bind(promise,promise.error)).onProgress($bind(promise,promise.progress));
	return promise.future;
};
openfl_utils_Assets.loadText = function(id) {
	var future = $hx_exports.lime.utils.Assets.loadText(id);
	return future;
};
openfl_utils_Assets.registerLibrary = function(name,library) {
	$hx_exports.lime.utils.Assets.registerLibrary(name,library);
	var _library = library;
	var symbol = _library.swf.symbols.iterator();
	while(symbol.hasNext()) {
		var symbol1 = symbol.next();
		if(symbol1.className != "" && Std.is(symbol1,openfl__$internal_symbols_SpriteSymbol)) {
			openfl_utils_Assets.libraryByLastLoadedSymbolName.set(symbol1.className,name);
		}
	}
};
openfl_utils_Assets.removeEventListener = function(type,listener,capture) {
	if(capture == null) {
		capture = false;
	}
	openfl_utils_Assets.dispatcher.removeEventListener(type,listener,capture);
};
openfl_utils_Assets.resolveClass = function(name) {
	return Type.resolveClass(name);
};
openfl_utils_Assets.resolveEnum = function(name) {
	var value = Type.resolveEnum(name);
	return value;
};
openfl_utils_Assets.unloadLibrary = function(name) {
	$hx_exports.lime.utils.Assets.unloadLibrary(name);
};
openfl_utils_Assets.LimeAssets_onChange = function() {
	openfl_utils_Assets.dispatchEvent(new openfl_events_Event("change"));
};
var openfl_utils__$ByteArray_ByteArray_$Impl_$ = $hx_exports["openfl"]["utils"]["ByteArray"] = {};
$hxClasses["openfl.utils._ByteArray.ByteArray_Impl_"] = openfl_utils__$ByteArray_ByteArray_$Impl_$;
openfl_utils__$ByteArray_ByteArray_$Impl_$.__name__ = ["openfl","utils","_ByteArray","ByteArray_Impl_"];
openfl_utils__$ByteArray_ByteArray_$Impl_$.__properties__ = {set_length:"set_length",get_length:"get_length"};
openfl_utils__$ByteArray_ByteArray_$Impl_$.defaultObjectEncoding = null;
openfl_utils__$ByteArray_ByteArray_$Impl_$._new = function(length) {
	if(length == null) {
		length = 0;
	}
	var this1 = new openfl_utils_ByteArrayData(length);
	return this1;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.get = function(this1,index) {
	return this1.get(index);
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.set = function(this1,index,value) {
	this1.__resize(index + 1);
	this1.set(index,value);
	return value;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromArrayBuffer = function(buffer) {
	if(buffer == null) {
		return null;
	}
	return openfl_utils_ByteArrayData.fromBytes($hx_exports.haxe.io.Bytes.ofData(buffer));
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	if(Std.is(bytes,openfl_utils_ByteArrayData)) {
		return bytes;
	} else {
		return openfl_utils_ByteArrayData.fromBytes(bytes);
	}
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytesData = function(bytesData) {
	if(bytesData == null) {
		return null;
	}
	return openfl_utils_ByteArrayData.fromBytes($hx_exports.haxe.io.Bytes.ofData(bytesData));
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromFile = function(path) {
	return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes($hx_$exports_lime_utils_Bytes.fromFile(path));
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.loadFromBytes = function(bytes) {
	return $hx_$exports_lime_utils_Bytes.loadFromBytes(bytes).then(function(limeBytes) {
		var byteArray = openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(limeBytes);
		return $hx_exports.lime.app.Future.withValue(byteArray);
	});
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.loadFromFile = function(path) {
	return $hx_$exports_lime_utils_Bytes.loadFromFile(path).then(function(limeBytes) {
		var byteArray = openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(limeBytes);
		return $hx_exports.lime.app.Future.withValue(byteArray);
	});
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromLimeBytes = function(bytes) {
	return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes);
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer = function(byteArray) {
	return byteArray.getData();
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytePointer = function(byteArray) {
	$hx_$exports_lime_utils_BytePointer.set(openfl_utils__$ByteArray_ByteArray_$Impl_$.__bytePointer,byteArray,null,null,byteArray.position);
	return openfl_utils__$ByteArray_ByteArray_$Impl_$.__bytePointer;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes = function(byteArray) {
	return byteArray;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytesData = function(byteArray) {
	return byteArray.getData();
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toLimeBytes = function(byteArray) {
	return openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(byteArray)));
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length = function(this1) {
	return this1.length;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.set_length = function(this1,value) {
	if(value > 0) {
		this1.__resize(value);
		if(value < this1.position) {
			this1.position = value;
		}
	}
	this1.length = value;
	return value;
};
var openfl_utils_ByteArrayData = $hx_exports["openfl"]["utils"]["ByteArrayData"] = function(length) {
	if(length == null) {
		length = 0;
	}
	var bytes = $hx_exports.haxe.io.Bytes.alloc(length);
	$hx_exports.haxe.io.Bytes.call(this,bytes.b.buffer);
	this.__length = length;
	if(openfl_utils_ByteArrayData.__defaultEndian == null) {
		if($hx_exports.lime.system.System.get_endianness() == lime_system_Endian.LITTLE_ENDIAN) {
			openfl_utils_ByteArrayData.__defaultEndian = 1;
		} else {
			openfl_utils_ByteArrayData.__defaultEndian = 0;
		}
	}
	this.set_endian(openfl_utils_ByteArrayData.__defaultEndian);
	this.position = 0;
};
$hxClasses["openfl.utils.ByteArrayData"] = openfl_utils_ByteArrayData;
openfl_utils_ByteArrayData.__name__ = ["openfl","utils","ByteArrayData"];
openfl_utils_ByteArrayData.__interfaces__ = [openfl_utils_IDataOutput,openfl_utils_IDataInput];
openfl_utils_ByteArrayData.fromBytes = function(bytes) {
	var result = new openfl_utils_ByteArrayData();
	result.__fromBytes(bytes);
	return result;
};
openfl_utils_ByteArrayData.__super__ = $hx_exports.haxe.io.Bytes;
openfl_utils_ByteArrayData.prototype = $extend($hx_exports.haxe.io.Bytes.prototype,{
	objectEncoding: null
	,position: null
	,__endian: null
	,__length: null
	,clear: function() {
		this.length = 0;
		this.position = 0;
	}
	,compress: function(algorithm) {
		if(algorithm == null) {
			algorithm = 2;
		}
		if(this.__length > this.length) {
			var cacheLength = this.length;
			this.length = this.__length;
			var data = $hx_exports.haxe.io.Bytes.alloc(cacheLength);
			data.blit(0,this,0,cacheLength);
			this.__setData(data);
			this.length = cacheLength;
		}
		var bytes;
		switch(algorithm) {
		case 0:
			bytes = $hx_exports.lime.utils.compress.Deflate.compress(this);
			break;
		case 1:
			bytes = $hx_exports.lime.utils.compress.LZMA.compress(this);
			break;
		default:
			bytes = $hx_exports.lime.utils.compress.Zlib.compress(this);
		}
		if(bytes != null) {
			this.__setData(bytes);
			this.length = this.__length;
			this.position = this.length;
		}
	}
	,deflate: function() {
		this.compress(0);
	}
	,inflate: function() {
		this.uncompress(0);
	}
	,readBoolean: function() {
		if(this.position < this.length) {
			return this.get(this.position++) != 0;
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		}
	}
	,readByte: function() {
		var value = this.readUnsignedByte();
		if((value & 128) != 0) {
			return value - 256;
		} else {
			return value;
		}
	}
	,readBytes: function(bytes,offset,length) {
		if(length == null) {
			length = 0;
		}
		if(offset == null) {
			offset = 0;
		}
		if(length == 0) {
			length = this.length - this.position;
		}
		if(this.position + length > this.length) {
			throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		}
		if(bytes.length < offset + length) {
			bytes.__resize(offset + length);
		}
		bytes.blit(offset,this,this.position,length);
		this.position += length;
	}
	,readDouble: function() {
		var ch1 = this.readInt();
		var ch2 = this.readInt();
		if(this.get_endian() == 1) {
			return $hx_exports.haxe.io.FPHelper.i64ToDouble(ch1,ch2);
		} else {
			return $hx_exports.haxe.io.FPHelper.i64ToDouble(ch2,ch1);
		}
	}
	,readFloat: function() {
		return $hx_exports.haxe.io.FPHelper.i32ToFloat(this.readInt());
	}
	,readInt: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var ch3 = this.readUnsignedByte();
		var ch4 = this.readUnsignedByte();
		if(this.get_endian() == 1) {
			return ch4 << 24 | ch3 << 16 | ch2 << 8 | ch1;
		} else {
			return ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4;
		}
	}
	,readMultiByte: function(length,charSet) {
		return this.readUTFBytes(length);
	}
	,readShort: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var value;
		if(this.get_endian() == 1) {
			value = ch2 << 8 | ch1;
		} else {
			value = ch1 << 8 | ch2;
		}
		if((value & 32768) != 0) {
			return value - 65536;
		} else {
			return value;
		}
	}
	,readUnsignedByte: function() {
		if(this.position < this.length) {
			return this.get(this.position++);
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		}
	}
	,readUnsignedInt: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var ch3 = this.readUnsignedByte();
		var ch4 = this.readUnsignedByte();
		if(this.get_endian() == 1) {
			return ch4 << 24 | ch3 << 16 | ch2 << 8 | ch1;
		} else {
			return ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4;
		}
	}
	,readUnsignedShort: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		if(this.get_endian() == 1) {
			return (ch2 << 8) + ch1;
		} else {
			return ch1 << 8 | ch2;
		}
	}
	,readUTF: function() {
		var bytesCount = this.readUnsignedShort();
		return this.readUTFBytes(bytesCount);
	}
	,readUTFBytes: function(length) {
		if(this.position + length > this.length) {
			throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		}
		this.position += length;
		return this.getString(this.position - length,length);
	}
	,uncompress: function(algorithm) {
		if(algorithm == null) {
			algorithm = 2;
		}
		if(this.__length > this.length) {
			var cacheLength = this.length;
			this.length = this.__length;
			var data = $hx_exports.haxe.io.Bytes.alloc(cacheLength);
			data.blit(0,this,0,cacheLength);
			this.__setData(data);
			this.length = cacheLength;
		}
		var bytes;
		switch(algorithm) {
		case 0:
			bytes = $hx_exports.lime.utils.compress.Deflate.decompress(this);
			break;
		case 1:
			bytes = $hx_exports.lime.utils.compress.LZMA.decompress(this);
			break;
		default:
			bytes = $hx_exports.lime.utils.compress.Zlib.decompress(this);
		}
		if(bytes != null) {
			this.__setData(bytes);
			this.length = this.__length;
		}
		this.position = 0;
	}
	,writeBoolean: function(value) {
		this.writeByte(value ? 1 : 0);
	}
	,writeByte: function(value) {
		this.__resize(this.position + 1);
		this.set(this.position++,value & 255);
	}
	,writeBytes: function(bytes,offset,length) {
		if(length == null) {
			length = 0;
		}
		if(offset == null) {
			offset = 0;
		}
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(bytes) == 0) {
			return;
		}
		if(length == 0) {
			length = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(bytes) - offset;
		}
		this.__resize(this.position + length);
		this.blit(this.position,bytes,offset,length);
		this.position = this.position + length;
	}
	,writeDouble: function(value) {
		var int64 = $hx_exports.haxe.io.FPHelper.doubleToI64(value);
		if(this.get_endian() == 1) {
			this.writeInt(int64.low);
			this.writeInt(int64.high);
		} else {
			this.writeInt(int64.high);
			this.writeInt(int64.low);
		}
	}
	,writeFloat: function(value) {
		if(this.get_endian() == 1) {
			this.__resize(this.position + 4);
			this.setFloat(this.position,value);
			this.position += 4;
		} else {
			var int = $hx_exports.haxe.io.FPHelper.floatToI32(value);
			this.writeInt(int);
		}
	}
	,writeInt: function(value) {
		this.__resize(this.position + 4);
		if(this.get_endian() == 1) {
			this.set(this.position++,value & 255);
			this.set(this.position++,value >> 8 & 255);
			this.set(this.position++,value >> 16 & 255);
			this.set(this.position++,value >> 24 & 255);
		} else {
			this.set(this.position++,value >> 24 & 255);
			this.set(this.position++,value >> 16 & 255);
			this.set(this.position++,value >> 8 & 255);
			this.set(this.position++,value & 255);
		}
	}
	,writeMultiByte: function(value,charSet) {
		this.writeUTFBytes(value);
	}
	,writeShort: function(value) {
		this.__resize(this.position + 2);
		if(this.get_endian() == 1) {
			this.set(this.position++,value);
			this.set(this.position++,value >> 8);
		} else {
			this.set(this.position++,value >> 8);
			this.set(this.position++,value);
		}
	}
	,writeUnsignedInt: function(value) {
		this.writeInt(value);
	}
	,writeUTF: function(value) {
		var bytes = $hx_exports.haxe.io.Bytes.ofString(value);
		this.writeShort(bytes.length);
		this.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes));
	}
	,writeUTFBytes: function(value) {
		var bytes = $hx_exports.haxe.io.Bytes.ofString(value);
		this.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes($hx_exports.haxe.io.Bytes.ofString(value)));
	}
	,__fromBytes: function(bytes) {
		this.__setData(bytes);
		this.length = bytes.length;
	}
	,__resize: function(size) {
		if(size > this.__length) {
			var bytes = $hx_exports.haxe.io.Bytes.alloc((size + 1) * 3 >> 1);
			var cacheLength = this.length;
			this.length = this.__length;
			bytes.blit(0,this,0,this.__length);
			this.length = cacheLength;
			this.__setData(bytes);
		}
		if(this.length < size) {
			this.length = size;
		}
	}
	,__setData: function(bytes) {
		this.b = bytes.b;
		this.__length = bytes.length;
		this.data = bytes.data;
	}
	,get_bytesAvailable: function() {
		return this.length - this.position;
	}
	,get_endian: function() {
		return this.__endian;
	}
	,set_endian: function(value) {
		return this.__endian = value;
	}
	,__class__: openfl_utils_ByteArrayData
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
});
var openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$ = $hx_exports["openfl"]["utils"]["CompressionAlgorithm"] = {};
$hxClasses["openfl.utils._CompressionAlgorithm.CompressionAlgorithm_Impl_"] = openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$;
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.__name__ = ["openfl","utils","_CompressionAlgorithm","CompressionAlgorithm_Impl_"];
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.fromString = function(value) {
	switch(value) {
	case "deflate":
		return 0;
	case "lzma":
		return 1;
	case "zlib":
		return 2;
	default:
		return null;
	}
};
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "deflate";
	case 1:
		return "lzma";
	case 2:
		return "zlib";
	default:
		return null;
	}
};
var openfl_utils__$Dictionary_Dictionary_$Impl_$ = $hx_exports["openfl"]["utils"]["Dictionary"] = {};
$hxClasses["openfl.utils._Dictionary.Dictionary_Impl_"] = openfl_utils__$Dictionary_Dictionary_$Impl_$;
openfl_utils__$Dictionary_Dictionary_$Impl_$.__name__ = ["openfl","utils","_Dictionary","Dictionary_Impl_"];
openfl_utils__$Dictionary_Dictionary_$Impl_$.exists = function(this1,key) {
	return this1.exists(key);
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.get = function(this1,key) {
	return this1.get(key);
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.remove = function(this1,key) {
	return this1.remove(key);
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.set = function(this1,key,value) {
	this1.set(key,value);
	return value;
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.iterator = function(this1) {
	return this1.keys();
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.each = function(this1) {
	return this1.iterator();
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.toStringMap = function(t,weakKeys) {
	return new haxe_ds_StringMap();
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.toIntMap = function(t,weakKeys) {
	return new $hx_exports.haxe.ds.IntMap();
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.toFloatMap = function(t,weakKeys) {
	return new openfl_utils__$Dictionary_FloatMap();
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.toEnumValueMapMap = function(t,weakKeys) {
	return new $hx_exports.haxe.ds.EnumValueMap();
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.toObjectMap = function(t,weakKeys) {
	return new $hx_exports.haxe.ds.ObjectMap();
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.toUtilsObjectMap = function(t,weakKeys) {
	return new openfl_utils__$Dictionary_UtilsObjectMap();
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.toClassMap = function(t,weakKeys) {
	return new openfl_utils__$Dictionary_ClassMap();
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.fromStringMap = function(map) {
	return map;
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.fromIntMap = function(map) {
	return map;
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.fromFloatMap = function(map) {
	return map;
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.fromObjectMap = function(map) {
	return map;
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.fromUtilsObjectMap = function(map) {
	return map;
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.fromClassMap = function(map) {
	return map;
};
var openfl_utils__$Dictionary_ClassMap = function() {
	this.types = new haxe_ds_StringMap();
	this.values = new haxe_ds_StringMap();
};
$hxClasses["openfl.utils._Dictionary.ClassMap"] = openfl_utils__$Dictionary_ClassMap;
openfl_utils__$Dictionary_ClassMap.__name__ = ["openfl","utils","_Dictionary","ClassMap"];
openfl_utils__$Dictionary_ClassMap.__interfaces__ = [haxe_IMap];
openfl_utils__$Dictionary_ClassMap.prototype = {
	types: null
	,values: null
	,copy: function() {
		var copied = new openfl_utils__$Dictionary_ClassMap();
		var key = this.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			copied.set(key1,this.get(key1));
		}
		return copied;
	}
	,exists: function(key) {
		return this.types.exists(Type.getClassName(key));
	}
	,get: function(key) {
		return this.values.get(Type.getClassName(key));
	}
	,keys: function() {
		return this.types.iterator();
	}
	,iterator: function() {
		return this.values.iterator();
	}
	,remove: function(key) {
		var name = Type.getClassName(key);
		if(!this.types.remove(name)) {
			return this.values.remove(name);
		} else {
			return true;
		}
	}
	,set: function(key,value) {
		var name = Type.getClassName(key);
		this.types.set(name,key);
		this.values.set(name,value);
	}
	,toString: function() {
		return this.values.toString();
	}
	,__class__: openfl_utils__$Dictionary_ClassMap
};
var openfl_utils__$Dictionary_FloatMap = function() {
	this.floatKeys = [];
	this.values = [];
};
$hxClasses["openfl.utils._Dictionary.FloatMap"] = openfl_utils__$Dictionary_FloatMap;
openfl_utils__$Dictionary_FloatMap.__name__ = ["openfl","utils","_Dictionary","FloatMap"];
openfl_utils__$Dictionary_FloatMap.__interfaces__ = [haxe_IMap];
openfl_utils__$Dictionary_FloatMap.prototype = {
	floatKeys: null
	,values: null
	,copy: function() {
		var copied = new openfl_utils__$Dictionary_FloatMap();
		var key = this.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			copied.set(key1,this.get(key1));
		}
		return copied;
	}
	,exists: function(key) {
		return this.indexOf(key) > -1;
	}
	,get: function(key) {
		var ind = this.indexOf(key);
		if(ind > -1) {
			return this.values[ind];
		} else {
			return null;
		}
	}
	,keys: function() {
		return $hx_exports.HxOverrides.iter(this.floatKeys.slice());
	}
	,iterator: function() {
		return $hx_exports.HxOverrides.iter(this.values.slice());
	}
	,remove: function(key) {
		var ind = this.indexOf(key);
		if(ind > -1) {
			this.floatKeys.splice(ind,1);
			this.values.splice(ind,1);
			return true;
		}
		return false;
	}
	,set: function(key,value) {
		this.insertSorted(key,value);
	}
	,indexOf: function(key) {
		var len = this.floatKeys.length;
		var startIndex = 0;
		var endIndex = len - 1;
		if(len == 0) {
			return -1;
		}
		var midIndex = 0;
		while(startIndex < endIndex) {
			midIndex = $hx_exports.Math.floor((startIndex + endIndex) / 2);
			if(this.floatKeys[midIndex] == key) {
				return midIndex;
			} else if(this.floatKeys[midIndex] > key) {
				endIndex = midIndex - 1;
			} else {
				startIndex = midIndex + 1;
			}
		}
		if(this.floatKeys[startIndex] == key) {
			return startIndex;
		} else {
			return -1;
		}
	}
	,insertSorted: function(key,value) {
		var len = this.floatKeys.length;
		var startIndex = 0;
		var endIndex = len - 1;
		if(len == 0) {
			this.floatKeys.push(key);
			this.values.push(value);
			return;
		}
		var midIndex = 0;
		while(startIndex < endIndex) {
			midIndex = $hx_exports.Math.floor((startIndex + endIndex) / 2);
			if(this.floatKeys[midIndex] == key) {
				this.values[midIndex] = value;
				return;
			} else if(this.floatKeys[midIndex] > key) {
				endIndex = midIndex - 1;
			} else {
				startIndex = midIndex + 1;
			}
		}
		if(this.floatKeys[startIndex] > key) {
			this.floatKeys.splice(startIndex,0,key);
			this.values.splice(startIndex,0,value);
		} else if(this.floatKeys[startIndex] < key) {
			this.floatKeys.splice(startIndex + 1,0,key);
			this.values.splice(startIndex + 1,0,value);
		} else {
			this.values[startIndex] = value;
		}
	}
	,toString: function() {
		return this.values.toString();
	}
	,__class__: openfl_utils__$Dictionary_FloatMap
};
var openfl_utils__$Dictionary_UtilsObjectMap = function() {
	this.map = new $hx_exports.haxe.ds.ObjectMap();
};
$hxClasses["openfl.utils._Dictionary.UtilsObjectMap"] = openfl_utils__$Dictionary_UtilsObjectMap;
openfl_utils__$Dictionary_UtilsObjectMap.__name__ = ["openfl","utils","_Dictionary","UtilsObjectMap"];
openfl_utils__$Dictionary_UtilsObjectMap.__interfaces__ = [haxe_IMap];
openfl_utils__$Dictionary_UtilsObjectMap.prototype = {
	map: null
	,copy: function() {
		var copied = new openfl_utils__$Dictionary_UtilsObjectMap();
		var key = this.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			copied.set(key1,this.get(key1));
		}
		return copied;
	}
	,exists: function(key) {
		return this.map.exists(key);
	}
	,get: function(key) {
		return this.map.get(key);
	}
	,keys: function() {
		return this.map.keys();
	}
	,iterator: function() {
		return this.map.iterator();
	}
	,remove: function(key) {
		return this.map.remove(key);
	}
	,set: function(key,value) {
		this.map.set(key,value);
	}
	,toString: function() {
		return this.map.toString();
	}
	,__class__: openfl_utils__$Dictionary_UtilsObjectMap
};
var openfl_utils__$Endian_Endian_$Impl_$ = $hx_exports["openfl"]["utils"]["Endian"] = {};
$hxClasses["openfl.utils._Endian.Endian_Impl_"] = openfl_utils__$Endian_Endian_$Impl_$;
openfl_utils__$Endian_Endian_$Impl_$.__name__ = ["openfl","utils","_Endian","Endian_Impl_"];
openfl_utils__$Endian_Endian_$Impl_$.fromLimeEndian = function(value) {
	switch(value[1]) {
	case 0:
		return 1;
	case 1:
		return 0;
	}
};
openfl_utils__$Endian_Endian_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bigEndian":
		return 0;
	case "littleEndian":
		return 1;
	default:
		return null;
	}
};
openfl_utils__$Endian_Endian_$Impl_$.toLimeEndian = function(value) {
	switch(value) {
	case 0:
		return lime_system_Endian.BIG_ENDIAN;
	case 1:
		return lime_system_Endian.LITTLE_ENDIAN;
	default:
		return null;
	}
};
openfl_utils__$Endian_Endian_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bigEndian";
	case 1:
		return "littleEndian";
	default:
		return null;
	}
};
var openfl_utils_IExternalizable = $hx_exports["openfl"]["utils"]["IExternalizable"] = function() { };
$hxClasses["openfl.utils.IExternalizable"] = openfl_utils_IExternalizable;
openfl_utils_IExternalizable.__name__ = ["openfl","utils","IExternalizable"];
openfl_utils_IExternalizable.prototype = {
	readExternal: null
	,writeExternal: null
	,__class__: openfl_utils_IExternalizable
};
var openfl_utils__$Object_Object_$Impl_$ = $hx_exports["openfl"]["utils"]["Object"] = {};
$hxClasses["openfl.utils._Object.Object_Impl_"] = openfl_utils__$Object_Object_$Impl_$;
openfl_utils__$Object_Object_$Impl_$.__name__ = ["openfl","utils","_Object","Object_Impl_"];
openfl_utils__$Object_Object_$Impl_$._new = function() {
	var this1 = { };
	return this1;
};
openfl_utils__$Object_Object_$Impl_$.hasOwnProperty = function(this1,name) {
	if(this1 != null) {
		return Reflect.hasField(this1,name);
	} else {
		return false;
	}
};
openfl_utils__$Object_Object_$Impl_$.isPrototypeOf = function(this1,theClass) {
	var c = Type.getClass(this1);
	while(c != null) {
		if(c == theClass) {
			return true;
		}
		c = Type.getSuperClass(c);
	}
	return false;
};
openfl_utils__$Object_Object_$Impl_$.iterator = function(this1) {
	var fields = Reflect.fields(this1);
	if(fields == null) {
		fields = [];
	}
	return $hx_exports.HxOverrides.iter(fields);
};
openfl_utils__$Object_Object_$Impl_$.propertyIsEnumerable = function(this1,name) {
	if(this1 != null && Reflect.hasField(this1,name)) {
		return Std.is(Reflect.field(this1,name),haxe_lang_Iterable);
	} else {
		return false;
	}
};
openfl_utils__$Object_Object_$Impl_$.toLocaleString = function(this1) {
	return Std.string(this1);
};
openfl_utils__$Object_Object_$Impl_$.toString = function(this1) {
	return Std.string(this1);
};
openfl_utils__$Object_Object_$Impl_$.valueOf = function(this1) {
	return this1;
};
openfl_utils__$Object_Object_$Impl_$.__get = function(this1,key) {
	return Reflect.field(this1,key);
};
openfl_utils__$Object_Object_$Impl_$.__set = function(this1,key,value) {
	Reflect.setField(this1,key,value);
	return value;
};
var haxe_lang_Iterator = function() { };
$hxClasses["haxe.lang.Iterator"] = haxe_lang_Iterator;
haxe_lang_Iterator.__name__ = ["haxe","lang","Iterator"];
haxe_lang_Iterator.prototype = {
	hasNext: null
	,next: null
	,__class__: haxe_lang_Iterator
};
var haxe_lang_Iterable = function() { };
$hxClasses["haxe.lang.Iterable"] = haxe_lang_Iterable;
haxe_lang_Iterable.__name__ = ["haxe","lang","Iterable"];
haxe_lang_Iterable.prototype = {
	iterator: null
	,__class__: haxe_lang_Iterable
};
var openfl_utils_Timer = $hx_exports["openfl"]["utils"]["Timer"] = function(delay,repeatCount) {
	if(repeatCount == null) {
		repeatCount = 0;
	}
	if(isNaN(delay) || delay < 0) {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("The delay specified is negative or not a finite number"));
	}
	openfl_events_EventDispatcher.call(this);
	this.__delay = delay;
	this.__repeatCount = repeatCount;
	this.running = false;
	this.currentCount = 0;
};
$hxClasses["openfl.utils.Timer"] = openfl_utils_Timer;
openfl_utils_Timer.__name__ = ["openfl","utils","Timer"];
openfl_utils_Timer.__super__ = openfl_events_EventDispatcher;
openfl_utils_Timer.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	currentCount: null
	,running: null
	,__delay: null
	,__repeatCount: null
	,__timer: null
	,__timerID: null
	,reset: function() {
		if(this.running) {
			this.stop();
		}
		this.currentCount = 0;
	}
	,start: function() {
		if(!this.running) {
			this.running = true;
			this.__timerID = $hx_exports.js.Browser.get_window().setInterval($bind(this,this.timer_onTimer),Std.int(this.__delay));
		}
	}
	,stop: function() {
		this.running = false;
		if(this.__timerID != null) {
			$hx_exports.js.Browser.get_window().clearInterval(this.__timerID);
			this.__timerID = null;
		}
	}
	,get_delay: function() {
		return this.__delay;
	}
	,set_delay: function(value) {
		this.__delay = value;
		if(this.running) {
			this.stop();
			this.start();
		}
		return this.__delay;
	}
	,get_repeatCount: function() {
		return this.__repeatCount;
	}
	,set_repeatCount: function(v) {
		if(this.running && v != 0 && v <= this.currentCount) {
			this.stop();
		}
		return this.__repeatCount = v;
	}
	,timer_onTimer: function() {
		this.currentCount++;
		if(this.__repeatCount > 0 && this.currentCount >= this.__repeatCount) {
			this.stop();
			this.dispatchEvent(new openfl_events_TimerEvent("timer"));
			this.dispatchEvent(new openfl_events_TimerEvent("timerComplete"));
		} else {
			this.dispatchEvent(new openfl_events_TimerEvent("timer"));
		}
	}
	,__class__: openfl_utils_Timer
	,__properties__: {set_repeatCount:"set_repeatCount",get_repeatCount:"get_repeatCount",set_delay:"set_delay",get_delay:"get_delay"}
});
var openfl_utils_TouchData = $hx_exports["openfl"]["utils"]["TouchData"] = function() {
	this.rollOutStack = [];
};
$hxClasses["openfl.utils.TouchData"] = openfl_utils_TouchData;
openfl_utils_TouchData.__name__ = ["openfl","utils","TouchData"];
openfl_utils_TouchData.prototype = {
	touch: null
	,touchDownTarget: null
	,touchOverTarget: null
	,rollOutStack: null
	,reset: function() {
		this.touch = null;
		this.touchDownTarget = null;
		this.touchOverTarget = null;
		this.rollOutStack.splice(0,this.rollOutStack.length);
	}
	,__class__: openfl_utils_TouchData
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
function $arrayPush(x) { this.push(x); }
$hxClasses["Math"] = $hx_exports.Math;
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = ["String"];
$hxClasses["Array"] = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = ["Date"];
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
var __map_reserved = {};
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var DataView = $global.DataView || js_html_compat_DataView;
var Float32Array = $global.Float32Array || js_html_compat_Float32Array._new;
var Float64Array = $global.Float64Array || ($global.Float32Array ? 'notsupported' : null) || js_html_compat_Float64Array._new;
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
var this1 = new Uint32Array(256);
$hx_$exports_lime_math_color_RGBA.__alpha16 = this1;
var _g = 0;
while(_g < 256) {
	var i = _g++;
	$hx_$exports_lime_math_color_RGBA.__alpha16[i] = $hx_exports.Math.ceil(i * 257.003921568627447);
}
var this2 = new Uint8Array(510);
$hx_$exports_lime_math_color_RGBA.__clamp = this2;
var _g1 = 0;
while(_g1 < 255) {
	var i1 = _g1++;
	$hx_$exports_lime_math_color_RGBA.__clamp[i1] = i1;
}
var _g11 = 255;
var _g2 = 511;
while(_g11 < _g2) {
	var i2 = _g11++;
	$hx_$exports_lime_math_color_RGBA.__clamp[i2] = 255;
}
openfl__$internal_renderer_canvas_CanvasGraphics.hitTestCanvas = $hx_exports.js.Browser.get_document().createElement("canvas");
openfl__$internal_renderer_canvas_CanvasGraphics.hitTestContext = openfl__$internal_renderer_canvas_CanvasGraphics.hitTestCanvas.getContext("2d");
Object.defineProperties(openfl_display_MovieClip.prototype,{ "currentFrame" : { get : function () { return this.get_currentFrame (); }}, "currentFrameLabel" : { get : function () { return this.get_currentFrameLabel (); }}, "currentLabel" : { get : function () { return this.get_currentLabel (); }}, "currentLabels" : { get : function () { return this.get_currentLabels (); }}, "framesLoaded" : { get : function () { return this.get_framesLoaded (); }}, "isPlaying" : { get : function () { return this.get_isPlaying (); }}, "totalFrames" : { get : function () { return this.get_totalFrames (); }}});
openfl_ui_Multitouch.maxTouchPoints = 2;
openfl_ui_Multitouch.supportedGestures = null;
openfl_ui_Multitouch.supportsGestureEvents = false;
openfl_ui_Multitouch.inputMode = 2;
haxe__$Int32_Int32_$Impl_$._mul = $hx_exports.Math.imul != null ? $hx_exports.Math.imul : function(a,b) {
	return a * (b & 65535) + (a * (b >>> 16) << 16 | 0) | 0;
};
haxe_Serializer.USE_CACHE = false;
haxe_Serializer.USE_ENUM_INDEX = false;
haxe_Serializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Serializer.BASE64_CODES = null;
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Unserializer.CODES = null;
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = $hx_exports.haxe.io.Bytes.ofString(haxe_crypto_Base64.CHARS);
js_Boot.__toStr = ({ }).toString;
js_html_compat_Float32Array.BYTES_PER_ELEMENT = 4;
js_html_compat_Float64Array.BYTES_PER_ELEMENT = 8;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
$hx_$exports_lime_graphics_cairo_CairoFTFontFace.FT_LOAD_FORCE_AUTOHINT = 32;
$hx_$exports_lime_graphics_opengl_WebGL2Context.__tempPointer = (function($this) {
	var $r;
	var this1 = new lime_utils_BytePointerData(null,0);
	$r = this1;
	return $r;
}(this));
$hx_$exports_lime_math_ColorMatrix.__identity = [1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0];
$hx_$exports_lime_math_Matrix4.__identity = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
$hx_$exports_lime_text_TextDirection.INVALID = 0;
$hx_$exports_lime_text_TextDirection.LEFT_TO_RIGHT = 4;
$hx_$exports_lime_text_TextDirection.RIGHT_TO_LEFT = 5;
$hx_$exports_lime_text_TextDirection.TOP_TO_BOTTOM = 6;
$hx_$exports_lime_text_TextDirection.BOTTOM_TO_TOP = 7;
$hx_$exports_lime_text_TextScript.COMMON = "Zyyy";
$hx_$exports_lime_text_TextScript.INHERITED = "Zinh";
$hx_$exports_lime_text_TextScript.UNKNOWN = "Zzzz";
$hx_$exports_lime_text_TextScript.ARABIC = "Arab";
$hx_$exports_lime_text_TextScript.ARMENIAN = "Armn";
$hx_$exports_lime_text_TextScript.BENGALI = "Beng";
$hx_$exports_lime_text_TextScript.CYRILLIC = "Cyrl";
$hx_$exports_lime_text_TextScript.DEVANAGARI = "Deva";
$hx_$exports_lime_text_TextScript.GEORGIAN = "Geor";
$hx_$exports_lime_text_TextScript.GREEK = "Grek";
$hx_$exports_lime_text_TextScript.GUJARATI = "Gujr";
$hx_$exports_lime_text_TextScript.GURMUKHI = "Guru";
$hx_$exports_lime_text_TextScript.HANGUL = "Hang";
$hx_$exports_lime_text_TextScript.HAN = "Hani";
$hx_$exports_lime_text_TextScript.HEBREW = "Hebr";
$hx_$exports_lime_text_TextScript.HIRAGANA = "Hira";
$hx_$exports_lime_text_TextScript.KANNADA = "Knda";
$hx_$exports_lime_text_TextScript.KATAKANA = "Kana";
$hx_$exports_lime_text_TextScript.LAO = "Laoo";
$hx_$exports_lime_text_TextScript.LATIN = "Latn";
$hx_$exports_lime_text_TextScript.MALAYALAM = "Mlym";
$hx_$exports_lime_text_TextScript.ORIYA = "Orya";
$hx_$exports_lime_text_TextScript.TAMIL = "Taml";
$hx_$exports_lime_text_TextScript.TELUGA = "Telu";
$hx_$exports_lime_text_TextScript.THAI = "Thai";
$hx_$exports_lime_text_TextScript.TIBETAN = "Tibt";
$hx_$exports_lime_text_TextScript.BOPOMOFO = "Bopo";
$hx_$exports_lime_text_TextScript.BRAILLE = "Brai";
$hx_$exports_lime_text_TextScript.CANADIAN_SYLLABICS = "Cans";
$hx_$exports_lime_text_TextScript.CHEROKEE = "Cher";
$hx_$exports_lime_text_TextScript.ETHIOPIC = "Ethi";
$hx_$exports_lime_text_TextScript.KHMER = "Khmr";
$hx_$exports_lime_text_TextScript.MONGOLIAN = "Mong";
$hx_$exports_lime_text_TextScript.MYANMAR = "Mymr";
$hx_$exports_lime_text_TextScript.OGHAM = "Ogam";
$hx_$exports_lime_text_TextScript.RUNIC = "Runr";
$hx_$exports_lime_text_TextScript.SINHALA = "Sinh";
$hx_$exports_lime_text_TextScript.SYRIAC = "Syrc";
$hx_$exports_lime_text_TextScript.THAANA = "Thaa";
$hx_$exports_lime_text_TextScript.YI = "Yiii";
$hx_$exports_lime_text_TextScript.DESERET = "Dsrt";
$hx_$exports_lime_text_TextScript.GOTHIC = "Goth";
$hx_$exports_lime_text_TextScript.OLD_ITALIC = "Ital";
$hx_$exports_lime_text_TextScript.BUHID = "Buhd";
$hx_$exports_lime_text_TextScript.HANUNOO = "Hano";
$hx_$exports_lime_text_TextScript.TAGALOG = "Tglg";
$hx_$exports_lime_text_TextScript.TAGBANWA = "Tagb";
$hx_$exports_lime_text_TextScript.CYPRIOT = "Cprt";
$hx_$exports_lime_text_TextScript.LIMBU = "Limb";
$hx_$exports_lime_text_TextScript.LINEAR_B = "Linb";
$hx_$exports_lime_text_TextScript.OSMANYA = "Osma";
$hx_$exports_lime_text_TextScript.SHAVIAN = "Shaw";
$hx_$exports_lime_text_TextScript.TAI_LE = "Tale";
$hx_$exports_lime_text_TextScript.UGARITIC = "Ugar";
$hx_$exports_lime_text_TextScript.BUGINESE = "Bugi";
$hx_$exports_lime_text_TextScript.COPTIC = "Copt";
$hx_$exports_lime_text_TextScript.GLAGOLITIC = "Glag";
$hx_$exports_lime_text_TextScript.KHAROSHTHI = "Khar";
$hx_$exports_lime_text_TextScript.NEW_TAI_LUE = "Talu";
$hx_$exports_lime_text_TextScript.OLD_PERSIAN = "Xpeo";
$hx_$exports_lime_text_TextScript.SYLOTI_NAGRI = "Sylo";
$hx_$exports_lime_text_TextScript.TIFINAGH = "Tfng";
$hx_$exports_lime_text_TextScript.BALINESE = "Bali";
$hx_$exports_lime_text_TextScript.CUNEIFORM = "Xsux";
$hx_$exports_lime_text_TextScript.NKO = "Nkoo";
$hx_$exports_lime_text_TextScript.PHAGS_PA = "Phag";
$hx_$exports_lime_text_TextScript.PHOENICIAN = "Phnx";
$hx_$exports_lime_text_TextScript.CARIAN = "Cari";
$hx_$exports_lime_text_TextScript.CHAM = "Cham";
$hx_$exports_lime_text_TextScript.KAYAH_LI = "Kali";
$hx_$exports_lime_text_TextScript.LEPCHA = "Lepc";
$hx_$exports_lime_text_TextScript.LYCIAN = "Lyci";
$hx_$exports_lime_text_TextScript.LYDIAN = "Lydi";
$hx_$exports_lime_text_TextScript.OL_CHIKI = "Olck";
$hx_$exports_lime_text_TextScript.REJANG = "Rjng";
$hx_$exports_lime_text_TextScript.SAURASHTRA = "Saur";
$hx_$exports_lime_text_TextScript.SUNDANESE = "Sund";
$hx_$exports_lime_text_TextScript.VAI = "Vaii";
$hx_$exports_lime_text_TextScript.AVESTAN = "Avst";
$hx_$exports_lime_text_TextScript.BAMUM = "Bamu";
$hx_$exports_lime_text_TextScript.EGYPTIAN_HIEROGLYPHS = "Egyp";
$hx_$exports_lime_text_TextScript.IMPERIAL_ARAMAIC = "Armi";
$hx_$exports_lime_text_TextScript.INSCRIPTIONAL_PAHLAVI = "Phli";
$hx_$exports_lime_text_TextScript.INSCRIPTIONAL_PARTHIAN = "Prti";
$hx_$exports_lime_text_TextScript.JAVANESE = "Java";
$hx_$exports_lime_text_TextScript.KAITHI = "Kthi";
$hx_$exports_lime_text_TextScript.LISU = "Lisu";
$hx_$exports_lime_text_TextScript.MEETEI_MAYEK = "Mtei";
$hx_$exports_lime_text_TextScript.OLD_SOUTH_ARABIAN = "Sarb";
$hx_$exports_lime_text_TextScript.OLD_TURKIC = "Orkh";
$hx_$exports_lime_text_TextScript.SAMARITAN = "Samr";
$hx_$exports_lime_text_TextScript.TAI_THAM = "Lana";
$hx_$exports_lime_text_TextScript.TAI_VIET = "Tavt";
$hx_$exports_lime_text_TextScript.BATAK = "Batk";
$hx_$exports_lime_text_TextScript.BRAHMI = "Brah";
$hx_$exports_lime_text_TextScript.MANDAIC = "Mand";
$hx_$exports_lime_text_TextScript.CHAKMA = "Cakm";
$hx_$exports_lime_text_TextScript.MEROITIC_CURSIVE = "Merc";
$hx_$exports_lime_text_TextScript.MEROITIC_HIEROGLYPHS = "Mero";
$hx_$exports_lime_text_TextScript.MIAO = "Plrd";
$hx_$exports_lime_text_TextScript.SHARADA = "Shrd";
$hx_$exports_lime_text_TextScript.SORA_SOMPENG = "Sora";
$hx_$exports_lime_text_TextScript.TAKRI = "Takr";
$hx_$exports_lime_text_TextScript.BASSA_VAH = "Bass";
$hx_$exports_lime_text_TextScript.CAUCASIAN_ALBANIAN = "Aghb";
$hx_$exports_lime_text_TextScript.DUPLOYAN = "Dupl";
$hx_$exports_lime_text_TextScript.ELBASAN = "Elba";
$hx_$exports_lime_text_TextScript.GRANTHA = "Gran";
$hx_$exports_lime_text_TextScript.KHOJKI = "Khoj";
$hx_$exports_lime_text_TextScript.KHUDAWADI = "Sind";
$hx_$exports_lime_text_TextScript.LINEAR_A = "Lina";
$hx_$exports_lime_text_TextScript.MAHAJANI = "Mahj";
$hx_$exports_lime_text_TextScript.MANICHAEAN = "Mani";
$hx_$exports_lime_text_TextScript.MENDE_KIKAKUI = "Mend";
$hx_$exports_lime_text_TextScript.MODI = "Modi";
$hx_$exports_lime_text_TextScript.MRO = "Mroo";
$hx_$exports_lime_text_TextScript.NABATAEAN = "Nbat";
$hx_$exports_lime_text_TextScript.OLD_NORTH_ARABIAN = "Narb";
$hx_$exports_lime_text_TextScript.OLD_PERMIC = "Perm";
$hx_$exports_lime_text_TextScript.PAHAWH_HMONG = "Hmng";
$hx_$exports_lime_text_TextScript.PALMYRENE = "Palm";
$hx_$exports_lime_text_TextScript.PAU_CIN_HAU = "Pauc";
$hx_$exports_lime_text_TextScript.PSALTER_PAHLAVI = "Phlp";
$hx_$exports_lime_text_TextScript.SIDDHAM = "Sidd";
$hx_$exports_lime_text_TextScript.TIRHUTA = "Tirh";
$hx_$exports_lime_text_TextScript.WARANG_CITI = "Wara";
$hx_$exports_lime_ui_GamepadAxis.LEFT_X = 0;
$hx_$exports_lime_ui_GamepadAxis.LEFT_Y = 1;
$hx_$exports_lime_ui_GamepadAxis.RIGHT_X = 2;
$hx_$exports_lime_ui_GamepadAxis.RIGHT_Y = 3;
$hx_$exports_lime_ui_GamepadAxis.TRIGGER_LEFT = 4;
$hx_$exports_lime_ui_GamepadAxis.TRIGGER_RIGHT = 5;
$hx_$exports_lime_ui_GamepadButton.A = 0;
$hx_$exports_lime_ui_GamepadButton.B = 1;
$hx_$exports_lime_ui_GamepadButton.X = 2;
$hx_$exports_lime_ui_GamepadButton.Y = 3;
$hx_$exports_lime_ui_GamepadButton.BACK = 4;
$hx_$exports_lime_ui_GamepadButton.GUIDE = 5;
$hx_$exports_lime_ui_GamepadButton.START = 6;
$hx_$exports_lime_ui_GamepadButton.LEFT_STICK = 7;
$hx_$exports_lime_ui_GamepadButton.RIGHT_STICK = 8;
$hx_$exports_lime_ui_GamepadButton.LEFT_SHOULDER = 9;
$hx_$exports_lime_ui_GamepadButton.RIGHT_SHOULDER = 10;
$hx_$exports_lime_ui_GamepadButton.DPAD_UP = 11;
$hx_$exports_lime_ui_GamepadButton.DPAD_DOWN = 12;
$hx_$exports_lime_ui_GamepadButton.DPAD_LEFT = 13;
$hx_$exports_lime_ui_GamepadButton.DPAD_RIGHT = 14;
$hx_$exports_lime_ui_JoystickHatPosition.CENTER = 0;
$hx_$exports_lime_ui_JoystickHatPosition.DOWN = 4;
$hx_$exports_lime_ui_JoystickHatPosition.LEFT = 8;
$hx_$exports_lime_ui_JoystickHatPosition.RIGHT = 2;
$hx_$exports_lime_ui_JoystickHatPosition.UP = 1;
$hx_$exports_lime_ui_JoystickHatPosition.DOWN_LEFT = 12;
$hx_$exports_lime_ui_JoystickHatPosition.DOWN_RIGHT = 6;
$hx_$exports_lime_ui_JoystickHatPosition.UP_LEFT = 9;
$hx_$exports_lime_ui_JoystickHatPosition.UP_RIGHT = 3;
$hx_$exports_lime_ui_KeyCode.UNKNOWN = 0;
$hx_$exports_lime_ui_KeyCode.BACKSPACE = 8;
$hx_$exports_lime_ui_KeyCode.TAB = 9;
$hx_$exports_lime_ui_KeyCode.RETURN = 13;
$hx_$exports_lime_ui_KeyCode.ESCAPE = 27;
$hx_$exports_lime_ui_KeyCode.SPACE = 32;
$hx_$exports_lime_ui_KeyCode.EXCLAMATION = 33;
$hx_$exports_lime_ui_KeyCode.QUOTE = 34;
$hx_$exports_lime_ui_KeyCode.HASH = 35;
$hx_$exports_lime_ui_KeyCode.DOLLAR = 36;
$hx_$exports_lime_ui_KeyCode.PERCENT = 37;
$hx_$exports_lime_ui_KeyCode.AMPERSAND = 38;
$hx_$exports_lime_ui_KeyCode.SINGLE_QUOTE = 39;
$hx_$exports_lime_ui_KeyCode.LEFT_PARENTHESIS = 40;
$hx_$exports_lime_ui_KeyCode.RIGHT_PARENTHESIS = 41;
$hx_$exports_lime_ui_KeyCode.ASTERISK = 42;
$hx_$exports_lime_ui_KeyCode.PLUS = 43;
$hx_$exports_lime_ui_KeyCode.COMMA = 44;
$hx_$exports_lime_ui_KeyCode.MINUS = 45;
$hx_$exports_lime_ui_KeyCode.PERIOD = 46;
$hx_$exports_lime_ui_KeyCode.SLASH = 47;
$hx_$exports_lime_ui_KeyCode.NUMBER_0 = 48;
$hx_$exports_lime_ui_KeyCode.NUMBER_1 = 49;
$hx_$exports_lime_ui_KeyCode.NUMBER_2 = 50;
$hx_$exports_lime_ui_KeyCode.NUMBER_3 = 51;
$hx_$exports_lime_ui_KeyCode.NUMBER_4 = 52;
$hx_$exports_lime_ui_KeyCode.NUMBER_5 = 53;
$hx_$exports_lime_ui_KeyCode.NUMBER_6 = 54;
$hx_$exports_lime_ui_KeyCode.NUMBER_7 = 55;
$hx_$exports_lime_ui_KeyCode.NUMBER_8 = 56;
$hx_$exports_lime_ui_KeyCode.NUMBER_9 = 57;
$hx_$exports_lime_ui_KeyCode.COLON = 58;
$hx_$exports_lime_ui_KeyCode.SEMICOLON = 59;
$hx_$exports_lime_ui_KeyCode.LESS_THAN = 60;
$hx_$exports_lime_ui_KeyCode.EQUALS = 61;
$hx_$exports_lime_ui_KeyCode.GREATER_THAN = 62;
$hx_$exports_lime_ui_KeyCode.QUESTION = 63;
$hx_$exports_lime_ui_KeyCode.AT = 64;
$hx_$exports_lime_ui_KeyCode.LEFT_BRACKET = 91;
$hx_$exports_lime_ui_KeyCode.BACKSLASH = 92;
$hx_$exports_lime_ui_KeyCode.RIGHT_BRACKET = 93;
$hx_$exports_lime_ui_KeyCode.CARET = 94;
$hx_$exports_lime_ui_KeyCode.UNDERSCORE = 95;
$hx_$exports_lime_ui_KeyCode.GRAVE = 96;
$hx_$exports_lime_ui_KeyCode.A = 97;
$hx_$exports_lime_ui_KeyCode.B = 98;
$hx_$exports_lime_ui_KeyCode.C = 99;
$hx_$exports_lime_ui_KeyCode.D = 100;
$hx_$exports_lime_ui_KeyCode.E = 101;
$hx_$exports_lime_ui_KeyCode.F = 102;
$hx_$exports_lime_ui_KeyCode.G = 103;
$hx_$exports_lime_ui_KeyCode.H = 104;
$hx_$exports_lime_ui_KeyCode.I = 105;
$hx_$exports_lime_ui_KeyCode.J = 106;
$hx_$exports_lime_ui_KeyCode.K = 107;
$hx_$exports_lime_ui_KeyCode.L = 108;
$hx_$exports_lime_ui_KeyCode.M = 109;
$hx_$exports_lime_ui_KeyCode.N = 110;
$hx_$exports_lime_ui_KeyCode.O = 111;
$hx_$exports_lime_ui_KeyCode.P = 112;
$hx_$exports_lime_ui_KeyCode.Q = 113;
$hx_$exports_lime_ui_KeyCode.R = 114;
$hx_$exports_lime_ui_KeyCode.S = 115;
$hx_$exports_lime_ui_KeyCode.T = 116;
$hx_$exports_lime_ui_KeyCode.U = 117;
$hx_$exports_lime_ui_KeyCode.V = 118;
$hx_$exports_lime_ui_KeyCode.W = 119;
$hx_$exports_lime_ui_KeyCode.X = 120;
$hx_$exports_lime_ui_KeyCode.Y = 121;
$hx_$exports_lime_ui_KeyCode.Z = 122;
$hx_$exports_lime_ui_KeyCode.DELETE = 127;
$hx_$exports_lime_ui_KeyCode.CAPS_LOCK = 1073741881;
$hx_$exports_lime_ui_KeyCode.F1 = 1073741882;
$hx_$exports_lime_ui_KeyCode.F2 = 1073741883;
$hx_$exports_lime_ui_KeyCode.F3 = 1073741884;
$hx_$exports_lime_ui_KeyCode.F4 = 1073741885;
$hx_$exports_lime_ui_KeyCode.F5 = 1073741886;
$hx_$exports_lime_ui_KeyCode.F6 = 1073741887;
$hx_$exports_lime_ui_KeyCode.F7 = 1073741888;
$hx_$exports_lime_ui_KeyCode.F8 = 1073741889;
$hx_$exports_lime_ui_KeyCode.F9 = 1073741890;
$hx_$exports_lime_ui_KeyCode.F10 = 1073741891;
$hx_$exports_lime_ui_KeyCode.F11 = 1073741892;
$hx_$exports_lime_ui_KeyCode.F12 = 1073741893;
$hx_$exports_lime_ui_KeyCode.PRINT_SCREEN = 1073741894;
$hx_$exports_lime_ui_KeyCode.SCROLL_LOCK = 1073741895;
$hx_$exports_lime_ui_KeyCode.PAUSE = 1073741896;
$hx_$exports_lime_ui_KeyCode.INSERT = 1073741897;
$hx_$exports_lime_ui_KeyCode.HOME = 1073741898;
$hx_$exports_lime_ui_KeyCode.PAGE_UP = 1073741899;
$hx_$exports_lime_ui_KeyCode.END = 1073741901;
$hx_$exports_lime_ui_KeyCode.PAGE_DOWN = 1073741902;
$hx_$exports_lime_ui_KeyCode.RIGHT = 1073741903;
$hx_$exports_lime_ui_KeyCode.LEFT = 1073741904;
$hx_$exports_lime_ui_KeyCode.DOWN = 1073741905;
$hx_$exports_lime_ui_KeyCode.UP = 1073741906;
$hx_$exports_lime_ui_KeyCode.NUM_LOCK = 1073741907;
$hx_$exports_lime_ui_KeyCode.NUMPAD_DIVIDE = 1073741908;
$hx_$exports_lime_ui_KeyCode.NUMPAD_MULTIPLY = 1073741909;
$hx_$exports_lime_ui_KeyCode.NUMPAD_MINUS = 1073741910;
$hx_$exports_lime_ui_KeyCode.NUMPAD_PLUS = 1073741911;
$hx_$exports_lime_ui_KeyCode.NUMPAD_ENTER = 1073741912;
$hx_$exports_lime_ui_KeyCode.NUMPAD_1 = 1073741913;
$hx_$exports_lime_ui_KeyCode.NUMPAD_2 = 1073741914;
$hx_$exports_lime_ui_KeyCode.NUMPAD_3 = 1073741915;
$hx_$exports_lime_ui_KeyCode.NUMPAD_4 = 1073741916;
$hx_$exports_lime_ui_KeyCode.NUMPAD_5 = 1073741917;
$hx_$exports_lime_ui_KeyCode.NUMPAD_6 = 1073741918;
$hx_$exports_lime_ui_KeyCode.NUMPAD_7 = 1073741919;
$hx_$exports_lime_ui_KeyCode.NUMPAD_8 = 1073741920;
$hx_$exports_lime_ui_KeyCode.NUMPAD_9 = 1073741921;
$hx_$exports_lime_ui_KeyCode.NUMPAD_0 = 1073741922;
$hx_$exports_lime_ui_KeyCode.NUMPAD_PERIOD = 1073741923;
$hx_$exports_lime_ui_KeyCode.APPLICATION = 1073741925;
$hx_$exports_lime_ui_KeyCode.POWER = 1073741926;
$hx_$exports_lime_ui_KeyCode.NUMPAD_EQUALS = 1073741927;
$hx_$exports_lime_ui_KeyCode.F13 = 1073741928;
$hx_$exports_lime_ui_KeyCode.F14 = 1073741929;
$hx_$exports_lime_ui_KeyCode.F15 = 1073741930;
$hx_$exports_lime_ui_KeyCode.F16 = 1073741931;
$hx_$exports_lime_ui_KeyCode.F17 = 1073741932;
$hx_$exports_lime_ui_KeyCode.F18 = 1073741933;
$hx_$exports_lime_ui_KeyCode.F19 = 1073741934;
$hx_$exports_lime_ui_KeyCode.F20 = 1073741935;
$hx_$exports_lime_ui_KeyCode.F21 = 1073741936;
$hx_$exports_lime_ui_KeyCode.F22 = 1073741937;
$hx_$exports_lime_ui_KeyCode.F23 = 1073741938;
$hx_$exports_lime_ui_KeyCode.F24 = 1073741939;
$hx_$exports_lime_ui_KeyCode.EXECUTE = 1073741940;
$hx_$exports_lime_ui_KeyCode.HELP = 1073741941;
$hx_$exports_lime_ui_KeyCode.MENU = 1073741942;
$hx_$exports_lime_ui_KeyCode.SELECT = 1073741943;
$hx_$exports_lime_ui_KeyCode.STOP = 1073741944;
$hx_$exports_lime_ui_KeyCode.AGAIN = 1073741945;
$hx_$exports_lime_ui_KeyCode.UNDO = 1073741946;
$hx_$exports_lime_ui_KeyCode.CUT = 1073741947;
$hx_$exports_lime_ui_KeyCode.COPY = 1073741948;
$hx_$exports_lime_ui_KeyCode.PASTE = 1073741949;
$hx_$exports_lime_ui_KeyCode.FIND = 1073741950;
$hx_$exports_lime_ui_KeyCode.MUTE = 1073741951;
$hx_$exports_lime_ui_KeyCode.VOLUME_UP = 1073741952;
$hx_$exports_lime_ui_KeyCode.VOLUME_DOWN = 1073741953;
$hx_$exports_lime_ui_KeyCode.NUMPAD_COMMA = 1073741957;
$hx_$exports_lime_ui_KeyCode.ALT_ERASE = 1073741977;
$hx_$exports_lime_ui_KeyCode.SYSTEM_REQUEST = 1073741978;
$hx_$exports_lime_ui_KeyCode.CANCEL = 1073741979;
$hx_$exports_lime_ui_KeyCode.CLEAR = 1073741980;
$hx_$exports_lime_ui_KeyCode.PRIOR = 1073741981;
$hx_$exports_lime_ui_KeyCode.RETURN2 = 1073741982;
$hx_$exports_lime_ui_KeyCode.SEPARATOR = 1073741983;
$hx_$exports_lime_ui_KeyCode.OUT = 1073741984;
$hx_$exports_lime_ui_KeyCode.OPER = 1073741985;
$hx_$exports_lime_ui_KeyCode.CLEAR_AGAIN = 1073741986;
$hx_$exports_lime_ui_KeyCode.CRSEL = 1073741987;
$hx_$exports_lime_ui_KeyCode.EXSEL = 1073741988;
$hx_$exports_lime_ui_KeyCode.NUMPAD_00 = 1073742000;
$hx_$exports_lime_ui_KeyCode.NUMPAD_000 = 1073742001;
$hx_$exports_lime_ui_KeyCode.THOUSAND_SEPARATOR = 1073742002;
$hx_$exports_lime_ui_KeyCode.DECIMAL_SEPARATOR = 1073742003;
$hx_$exports_lime_ui_KeyCode.CURRENCY_UNIT = 1073742004;
$hx_$exports_lime_ui_KeyCode.CURRENCY_SUBUNIT = 1073742005;
$hx_$exports_lime_ui_KeyCode.NUMPAD_LEFT_PARENTHESIS = 1073742006;
$hx_$exports_lime_ui_KeyCode.NUMPAD_RIGHT_PARENTHESIS = 1073742007;
$hx_$exports_lime_ui_KeyCode.NUMPAD_LEFT_BRACE = 1073742008;
$hx_$exports_lime_ui_KeyCode.NUMPAD_RIGHT_BRACE = 1073742009;
$hx_$exports_lime_ui_KeyCode.NUMPAD_TAB = 1073742010;
$hx_$exports_lime_ui_KeyCode.NUMPAD_BACKSPACE = 1073742011;
$hx_$exports_lime_ui_KeyCode.NUMPAD_A = 1073742012;
$hx_$exports_lime_ui_KeyCode.NUMPAD_B = 1073742013;
$hx_$exports_lime_ui_KeyCode.NUMPAD_C = 1073742014;
$hx_$exports_lime_ui_KeyCode.NUMPAD_D = 1073742015;
$hx_$exports_lime_ui_KeyCode.NUMPAD_E = 1073742016;
$hx_$exports_lime_ui_KeyCode.NUMPAD_F = 1073742017;
$hx_$exports_lime_ui_KeyCode.NUMPAD_XOR = 1073742018;
$hx_$exports_lime_ui_KeyCode.NUMPAD_POWER = 1073742019;
$hx_$exports_lime_ui_KeyCode.NUMPAD_PERCENT = 1073742020;
$hx_$exports_lime_ui_KeyCode.NUMPAD_LESS_THAN = 1073742021;
$hx_$exports_lime_ui_KeyCode.NUMPAD_GREATER_THAN = 1073742022;
$hx_$exports_lime_ui_KeyCode.NUMPAD_AMPERSAND = 1073742023;
$hx_$exports_lime_ui_KeyCode.NUMPAD_DOUBLE_AMPERSAND = 1073742024;
$hx_$exports_lime_ui_KeyCode.NUMPAD_VERTICAL_BAR = 1073742025;
$hx_$exports_lime_ui_KeyCode.NUMPAD_DOUBLE_VERTICAL_BAR = 1073742026;
$hx_$exports_lime_ui_KeyCode.NUMPAD_COLON = 1073742027;
$hx_$exports_lime_ui_KeyCode.NUMPAD_HASH = 1073742028;
$hx_$exports_lime_ui_KeyCode.NUMPAD_SPACE = 1073742029;
$hx_$exports_lime_ui_KeyCode.NUMPAD_AT = 1073742030;
$hx_$exports_lime_ui_KeyCode.NUMPAD_EXCLAMATION = 1073742031;
$hx_$exports_lime_ui_KeyCode.NUMPAD_MEM_STORE = 1073742032;
$hx_$exports_lime_ui_KeyCode.NUMPAD_MEM_RECALL = 1073742033;
$hx_$exports_lime_ui_KeyCode.NUMPAD_MEM_CLEAR = 1073742034;
$hx_$exports_lime_ui_KeyCode.NUMPAD_MEM_ADD = 1073742035;
$hx_$exports_lime_ui_KeyCode.NUMPAD_MEM_SUBTRACT = 1073742036;
$hx_$exports_lime_ui_KeyCode.NUMPAD_MEM_MULTIPLY = 1073742037;
$hx_$exports_lime_ui_KeyCode.NUMPAD_MEM_DIVIDE = 1073742038;
$hx_$exports_lime_ui_KeyCode.NUMPAD_PLUS_MINUS = 1073742039;
$hx_$exports_lime_ui_KeyCode.NUMPAD_CLEAR = 1073742040;
$hx_$exports_lime_ui_KeyCode.NUMPAD_CLEAR_ENTRY = 1073742041;
$hx_$exports_lime_ui_KeyCode.NUMPAD_BINARY = 1073742042;
$hx_$exports_lime_ui_KeyCode.NUMPAD_OCTAL = 1073742043;
$hx_$exports_lime_ui_KeyCode.NUMPAD_DECIMAL = 1073742044;
$hx_$exports_lime_ui_KeyCode.NUMPAD_HEXADECIMAL = 1073742045;
$hx_$exports_lime_ui_KeyCode.LEFT_CTRL = 1073742048;
$hx_$exports_lime_ui_KeyCode.LEFT_SHIFT = 1073742049;
$hx_$exports_lime_ui_KeyCode.LEFT_ALT = 1073742050;
$hx_$exports_lime_ui_KeyCode.LEFT_META = 1073742051;
$hx_$exports_lime_ui_KeyCode.RIGHT_CTRL = 1073742052;
$hx_$exports_lime_ui_KeyCode.RIGHT_SHIFT = 1073742053;
$hx_$exports_lime_ui_KeyCode.RIGHT_ALT = 1073742054;
$hx_$exports_lime_ui_KeyCode.RIGHT_META = 1073742055;
$hx_$exports_lime_ui_KeyCode.MODE = 1073742081;
$hx_$exports_lime_ui_KeyCode.AUDIO_NEXT = 1073742082;
$hx_$exports_lime_ui_KeyCode.AUDIO_PREVIOUS = 1073742083;
$hx_$exports_lime_ui_KeyCode.AUDIO_STOP = 1073742084;
$hx_$exports_lime_ui_KeyCode.AUDIO_PLAY = 1073742085;
$hx_$exports_lime_ui_KeyCode.AUDIO_MUTE = 1073742086;
$hx_$exports_lime_ui_KeyCode.MEDIA_SELECT = 1073742087;
$hx_$exports_lime_ui_KeyCode.WWW = 1073742088;
$hx_$exports_lime_ui_KeyCode.MAIL = 1073742089;
$hx_$exports_lime_ui_KeyCode.CALCULATOR = 1073742090;
$hx_$exports_lime_ui_KeyCode.COMPUTER = 1073742091;
$hx_$exports_lime_ui_KeyCode.APP_CONTROL_SEARCH = 1073742092;
$hx_$exports_lime_ui_KeyCode.APP_CONTROL_HOME = 1073742093;
$hx_$exports_lime_ui_KeyCode.APP_CONTROL_BACK = 1073742094;
$hx_$exports_lime_ui_KeyCode.APP_CONTROL_FORWARD = 1073742095;
$hx_$exports_lime_ui_KeyCode.APP_CONTROL_STOP = 1073742096;
$hx_$exports_lime_ui_KeyCode.APP_CONTROL_REFRESH = 1073742097;
$hx_$exports_lime_ui_KeyCode.APP_CONTROL_BOOKMARKS = 1073742098;
$hx_$exports_lime_ui_KeyCode.BRIGHTNESS_DOWN = 1073742099;
$hx_$exports_lime_ui_KeyCode.BRIGHTNESS_UP = 1073742100;
$hx_$exports_lime_ui_KeyCode.DISPLAY_SWITCH = 1073742101;
$hx_$exports_lime_ui_KeyCode.BACKLIGHT_TOGGLE = 1073742102;
$hx_$exports_lime_ui_KeyCode.BACKLIGHT_DOWN = 1073742103;
$hx_$exports_lime_ui_KeyCode.BACKLIGHT_UP = 1073742104;
$hx_$exports_lime_ui_KeyCode.EJECT = 1073742105;
$hx_$exports_lime_ui_KeyCode.SLEEP = 1073742106;
$hx_$exports_lime_ui_KeyModifier.NONE = 0;
$hx_$exports_lime_ui_KeyModifier.LEFT_SHIFT = 1;
$hx_$exports_lime_ui_KeyModifier.RIGHT_SHIFT = 2;
$hx_$exports_lime_ui_KeyModifier.LEFT_CTRL = 64;
$hx_$exports_lime_ui_KeyModifier.RIGHT_CTRL = 128;
$hx_$exports_lime_ui_KeyModifier.LEFT_ALT = 256;
$hx_$exports_lime_ui_KeyModifier.RIGHT_ALT = 512;
$hx_$exports_lime_ui_KeyModifier.LEFT_META = 1024;
$hx_$exports_lime_ui_KeyModifier.RIGHT_META = 2048;
$hx_$exports_lime_ui_KeyModifier.NUM_LOCK = 4096;
$hx_$exports_lime_ui_KeyModifier.CAPS_LOCK = 8192;
$hx_$exports_lime_ui_KeyModifier.MODE = 16384;
$hx_$exports_lime_ui_KeyModifier.CTRL = 192;
$hx_$exports_lime_ui_KeyModifier.SHIFT = 3;
$hx_$exports_lime_ui_KeyModifier.ALT = 768;
$hx_$exports_lime_ui_KeyModifier.META = 3072;
$hx_$exports_lime_ui_ScanCode.UNKNOWN = 0;
$hx_$exports_lime_ui_ScanCode.BACKSPACE = 42;
$hx_$exports_lime_ui_ScanCode.TAB = 43;
$hx_$exports_lime_ui_ScanCode.RETURN = 40;
$hx_$exports_lime_ui_ScanCode.ESCAPE = 41;
$hx_$exports_lime_ui_ScanCode.SPACE = 44;
$hx_$exports_lime_ui_ScanCode.SINGLE_QUOTE = 52;
$hx_$exports_lime_ui_ScanCode.COMMA = 54;
$hx_$exports_lime_ui_ScanCode.MINUS = 45;
$hx_$exports_lime_ui_ScanCode.PERIOD = 55;
$hx_$exports_lime_ui_ScanCode.SLASH = 56;
$hx_$exports_lime_ui_ScanCode.NUMBER_0 = 39;
$hx_$exports_lime_ui_ScanCode.NUMBER_1 = 30;
$hx_$exports_lime_ui_ScanCode.NUMBER_2 = 31;
$hx_$exports_lime_ui_ScanCode.NUMBER_3 = 32;
$hx_$exports_lime_ui_ScanCode.NUMBER_4 = 33;
$hx_$exports_lime_ui_ScanCode.NUMBER_5 = 34;
$hx_$exports_lime_ui_ScanCode.NUMBER_6 = 35;
$hx_$exports_lime_ui_ScanCode.NUMBER_7 = 36;
$hx_$exports_lime_ui_ScanCode.NUMBER_8 = 37;
$hx_$exports_lime_ui_ScanCode.NUMBER_9 = 38;
$hx_$exports_lime_ui_ScanCode.SEMICOLON = 51;
$hx_$exports_lime_ui_ScanCode.EQUALS = 46;
$hx_$exports_lime_ui_ScanCode.LEFT_BRACKET = 47;
$hx_$exports_lime_ui_ScanCode.BACKSLASH = 49;
$hx_$exports_lime_ui_ScanCode.RIGHT_BRACKET = 48;
$hx_$exports_lime_ui_ScanCode.GRAVE = 53;
$hx_$exports_lime_ui_ScanCode.A = 4;
$hx_$exports_lime_ui_ScanCode.B = 5;
$hx_$exports_lime_ui_ScanCode.C = 6;
$hx_$exports_lime_ui_ScanCode.D = 7;
$hx_$exports_lime_ui_ScanCode.E = 8;
$hx_$exports_lime_ui_ScanCode.F = 9;
$hx_$exports_lime_ui_ScanCode.G = 10;
$hx_$exports_lime_ui_ScanCode.H = 11;
$hx_$exports_lime_ui_ScanCode.I = 12;
$hx_$exports_lime_ui_ScanCode.J = 13;
$hx_$exports_lime_ui_ScanCode.K = 14;
$hx_$exports_lime_ui_ScanCode.L = 15;
$hx_$exports_lime_ui_ScanCode.M = 16;
$hx_$exports_lime_ui_ScanCode.N = 17;
$hx_$exports_lime_ui_ScanCode.O = 18;
$hx_$exports_lime_ui_ScanCode.P = 19;
$hx_$exports_lime_ui_ScanCode.Q = 20;
$hx_$exports_lime_ui_ScanCode.R = 21;
$hx_$exports_lime_ui_ScanCode.S = 22;
$hx_$exports_lime_ui_ScanCode.T = 23;
$hx_$exports_lime_ui_ScanCode.U = 24;
$hx_$exports_lime_ui_ScanCode.V = 25;
$hx_$exports_lime_ui_ScanCode.W = 26;
$hx_$exports_lime_ui_ScanCode.X = 27;
$hx_$exports_lime_ui_ScanCode.Y = 28;
$hx_$exports_lime_ui_ScanCode.Z = 29;
$hx_$exports_lime_ui_ScanCode.DELETE = 76;
$hx_$exports_lime_ui_ScanCode.CAPS_LOCK = 57;
$hx_$exports_lime_ui_ScanCode.F1 = 58;
$hx_$exports_lime_ui_ScanCode.F2 = 59;
$hx_$exports_lime_ui_ScanCode.F3 = 60;
$hx_$exports_lime_ui_ScanCode.F4 = 61;
$hx_$exports_lime_ui_ScanCode.F5 = 62;
$hx_$exports_lime_ui_ScanCode.F6 = 63;
$hx_$exports_lime_ui_ScanCode.F7 = 64;
$hx_$exports_lime_ui_ScanCode.F8 = 65;
$hx_$exports_lime_ui_ScanCode.F9 = 66;
$hx_$exports_lime_ui_ScanCode.F10 = 67;
$hx_$exports_lime_ui_ScanCode.F11 = 68;
$hx_$exports_lime_ui_ScanCode.F12 = 69;
$hx_$exports_lime_ui_ScanCode.PRINT_SCREEN = 70;
$hx_$exports_lime_ui_ScanCode.SCROLL_LOCK = 71;
$hx_$exports_lime_ui_ScanCode.PAUSE = 72;
$hx_$exports_lime_ui_ScanCode.INSERT = 73;
$hx_$exports_lime_ui_ScanCode.HOME = 74;
$hx_$exports_lime_ui_ScanCode.PAGE_UP = 75;
$hx_$exports_lime_ui_ScanCode.END = 77;
$hx_$exports_lime_ui_ScanCode.PAGE_DOWN = 78;
$hx_$exports_lime_ui_ScanCode.RIGHT = 79;
$hx_$exports_lime_ui_ScanCode.LEFT = 80;
$hx_$exports_lime_ui_ScanCode.DOWN = 81;
$hx_$exports_lime_ui_ScanCode.UP = 82;
$hx_$exports_lime_ui_ScanCode.NUM_LOCK = 83;
$hx_$exports_lime_ui_ScanCode.NUMPAD_DIVIDE = 84;
$hx_$exports_lime_ui_ScanCode.NUMPAD_MULTIPLY = 85;
$hx_$exports_lime_ui_ScanCode.NUMPAD_MINUS = 86;
$hx_$exports_lime_ui_ScanCode.NUMPAD_PLUS = 87;
$hx_$exports_lime_ui_ScanCode.NUMPAD_ENTER = 88;
$hx_$exports_lime_ui_ScanCode.NUMPAD_1 = 89;
$hx_$exports_lime_ui_ScanCode.NUMPAD_2 = 90;
$hx_$exports_lime_ui_ScanCode.NUMPAD_3 = 91;
$hx_$exports_lime_ui_ScanCode.NUMPAD_4 = 92;
$hx_$exports_lime_ui_ScanCode.NUMPAD_5 = 93;
$hx_$exports_lime_ui_ScanCode.NUMPAD_6 = 94;
$hx_$exports_lime_ui_ScanCode.NUMPAD_7 = 95;
$hx_$exports_lime_ui_ScanCode.NUMPAD_8 = 96;
$hx_$exports_lime_ui_ScanCode.NUMPAD_9 = 97;
$hx_$exports_lime_ui_ScanCode.NUMPAD_0 = 98;
$hx_$exports_lime_ui_ScanCode.NUMPAD_PERIOD = 99;
$hx_$exports_lime_ui_ScanCode.APPLICATION = 101;
$hx_$exports_lime_ui_ScanCode.POWER = 102;
$hx_$exports_lime_ui_ScanCode.NUMPAD_EQUALS = 103;
$hx_$exports_lime_ui_ScanCode.F13 = 104;
$hx_$exports_lime_ui_ScanCode.F14 = 105;
$hx_$exports_lime_ui_ScanCode.F15 = 106;
$hx_$exports_lime_ui_ScanCode.F16 = 107;
$hx_$exports_lime_ui_ScanCode.F17 = 108;
$hx_$exports_lime_ui_ScanCode.F18 = 109;
$hx_$exports_lime_ui_ScanCode.F19 = 110;
$hx_$exports_lime_ui_ScanCode.F20 = 111;
$hx_$exports_lime_ui_ScanCode.F21 = 112;
$hx_$exports_lime_ui_ScanCode.F22 = 113;
$hx_$exports_lime_ui_ScanCode.F23 = 114;
$hx_$exports_lime_ui_ScanCode.F24 = 115;
$hx_$exports_lime_ui_ScanCode.EXECUTE = 116;
$hx_$exports_lime_ui_ScanCode.HELP = 117;
$hx_$exports_lime_ui_ScanCode.MENU = 118;
$hx_$exports_lime_ui_ScanCode.SELECT = 119;
$hx_$exports_lime_ui_ScanCode.STOP = 120;
$hx_$exports_lime_ui_ScanCode.AGAIN = 121;
$hx_$exports_lime_ui_ScanCode.UNDO = 122;
$hx_$exports_lime_ui_ScanCode.CUT = 123;
$hx_$exports_lime_ui_ScanCode.COPY = 124;
$hx_$exports_lime_ui_ScanCode.PASTE = 125;
$hx_$exports_lime_ui_ScanCode.FIND = 126;
$hx_$exports_lime_ui_ScanCode.MUTE = 127;
$hx_$exports_lime_ui_ScanCode.VOLUME_UP = 128;
$hx_$exports_lime_ui_ScanCode.VOLUME_DOWN = 129;
$hx_$exports_lime_ui_ScanCode.NUMPAD_COMMA = 133;
$hx_$exports_lime_ui_ScanCode.ALT_ERASE = 153;
$hx_$exports_lime_ui_ScanCode.SYSTEM_REQUEST = 154;
$hx_$exports_lime_ui_ScanCode.CANCEL = 155;
$hx_$exports_lime_ui_ScanCode.CLEAR = 156;
$hx_$exports_lime_ui_ScanCode.PRIOR = 157;
$hx_$exports_lime_ui_ScanCode.RETURN2 = 158;
$hx_$exports_lime_ui_ScanCode.SEPARATOR = 159;
$hx_$exports_lime_ui_ScanCode.OUT = 160;
$hx_$exports_lime_ui_ScanCode.OPER = 161;
$hx_$exports_lime_ui_ScanCode.CLEAR_AGAIN = 162;
$hx_$exports_lime_ui_ScanCode.CRSEL = 163;
$hx_$exports_lime_ui_ScanCode.EXSEL = 164;
$hx_$exports_lime_ui_ScanCode.NUMPAD_00 = 176;
$hx_$exports_lime_ui_ScanCode.NUMPAD_000 = 177;
$hx_$exports_lime_ui_ScanCode.THOUSAND_SEPARATOR = 178;
$hx_$exports_lime_ui_ScanCode.DECIMAL_SEPARATOR = 179;
$hx_$exports_lime_ui_ScanCode.CURRENCY_UNIT = 180;
$hx_$exports_lime_ui_ScanCode.CURRENCY_SUBUNIT = 181;
$hx_$exports_lime_ui_ScanCode.NUMPAD_LEFT_PARENTHESIS = 182;
$hx_$exports_lime_ui_ScanCode.NUMPAD_RIGHT_PARENTHESIS = 183;
$hx_$exports_lime_ui_ScanCode.NUMPAD_LEFT_BRACE = 184;
$hx_$exports_lime_ui_ScanCode.NUMPAD_RIGHT_BRACE = 185;
$hx_$exports_lime_ui_ScanCode.NUMPAD_TAB = 186;
$hx_$exports_lime_ui_ScanCode.NUMPAD_BACKSPACE = 187;
$hx_$exports_lime_ui_ScanCode.NUMPAD_A = 188;
$hx_$exports_lime_ui_ScanCode.NUMPAD_B = 189;
$hx_$exports_lime_ui_ScanCode.NUMPAD_C = 190;
$hx_$exports_lime_ui_ScanCode.NUMPAD_D = 191;
$hx_$exports_lime_ui_ScanCode.NUMPAD_E = 192;
$hx_$exports_lime_ui_ScanCode.NUMPAD_F = 193;
$hx_$exports_lime_ui_ScanCode.NUMPAD_XOR = 194;
$hx_$exports_lime_ui_ScanCode.NUMPAD_POWER = 195;
$hx_$exports_lime_ui_ScanCode.NUMPAD_PERCENT = 196;
$hx_$exports_lime_ui_ScanCode.NUMPAD_LESS_THAN = 197;
$hx_$exports_lime_ui_ScanCode.NUMPAD_GREATER_THAN = 198;
$hx_$exports_lime_ui_ScanCode.NUMPAD_AMPERSAND = 199;
$hx_$exports_lime_ui_ScanCode.NUMPAD_DOUBLE_AMPERSAND = 200;
$hx_$exports_lime_ui_ScanCode.NUMPAD_VERTICAL_BAR = 201;
$hx_$exports_lime_ui_ScanCode.NUMPAD_DOUBLE_VERTICAL_BAR = 202;
$hx_$exports_lime_ui_ScanCode.NUMPAD_COLON = 203;
$hx_$exports_lime_ui_ScanCode.NUMPAD_HASH = 204;
$hx_$exports_lime_ui_ScanCode.NUMPAD_SPACE = 205;
$hx_$exports_lime_ui_ScanCode.NUMPAD_AT = 206;
$hx_$exports_lime_ui_ScanCode.NUMPAD_EXCLAMATION = 207;
$hx_$exports_lime_ui_ScanCode.NUMPAD_MEM_STORE = 208;
$hx_$exports_lime_ui_ScanCode.NUMPAD_MEM_RECALL = 209;
$hx_$exports_lime_ui_ScanCode.NUMPAD_MEM_CLEAR = 210;
$hx_$exports_lime_ui_ScanCode.NUMPAD_MEM_ADD = 211;
$hx_$exports_lime_ui_ScanCode.NUMPAD_MEM_SUBTRACT = 212;
$hx_$exports_lime_ui_ScanCode.NUMPAD_MEM_MULTIPLY = 213;
$hx_$exports_lime_ui_ScanCode.NUMPAD_MEM_DIVIDE = 214;
$hx_$exports_lime_ui_ScanCode.NUMPAD_PLUS_MINUS = 215;
$hx_$exports_lime_ui_ScanCode.NUMPAD_CLEAR = 216;
$hx_$exports_lime_ui_ScanCode.NUMPAD_CLEAR_ENTRY = 217;
$hx_$exports_lime_ui_ScanCode.NUMPAD_BINARY = 218;
$hx_$exports_lime_ui_ScanCode.NUMPAD_OCTAL = 219;
$hx_$exports_lime_ui_ScanCode.NUMPAD_DECIMAL = 220;
$hx_$exports_lime_ui_ScanCode.NUMPAD_HEXADECIMAL = 221;
$hx_$exports_lime_ui_ScanCode.LEFT_CTRL = 224;
$hx_$exports_lime_ui_ScanCode.LEFT_SHIFT = 225;
$hx_$exports_lime_ui_ScanCode.LEFT_ALT = 226;
$hx_$exports_lime_ui_ScanCode.LEFT_META = 227;
$hx_$exports_lime_ui_ScanCode.RIGHT_CTRL = 228;
$hx_$exports_lime_ui_ScanCode.RIGHT_SHIFT = 229;
$hx_$exports_lime_ui_ScanCode.RIGHT_ALT = 230;
$hx_$exports_lime_ui_ScanCode.RIGHT_META = 231;
$hx_$exports_lime_ui_ScanCode.MODE = 257;
$hx_$exports_lime_ui_ScanCode.AUDIO_NEXT = 258;
$hx_$exports_lime_ui_ScanCode.AUDIO_PREVIOUS = 259;
$hx_$exports_lime_ui_ScanCode.AUDIO_STOP = 260;
$hx_$exports_lime_ui_ScanCode.AUDIO_PLAY = 261;
$hx_$exports_lime_ui_ScanCode.AUDIO_MUTE = 262;
$hx_$exports_lime_ui_ScanCode.MEDIA_SELECT = 263;
$hx_$exports_lime_ui_ScanCode.WWW = 264;
$hx_$exports_lime_ui_ScanCode.MAIL = 265;
$hx_$exports_lime_ui_ScanCode.CALCULATOR = 266;
$hx_$exports_lime_ui_ScanCode.COMPUTER = 267;
$hx_$exports_lime_ui_ScanCode.APP_CONTROL_SEARCH = 268;
$hx_$exports_lime_ui_ScanCode.APP_CONTROL_HOME = 269;
$hx_$exports_lime_ui_ScanCode.APP_CONTROL_BACK = 270;
$hx_$exports_lime_ui_ScanCode.APP_CONTROL_FORWARD = 271;
$hx_$exports_lime_ui_ScanCode.APP_CONTROL_STOP = 272;
$hx_$exports_lime_ui_ScanCode.APP_CONTROL_REFRESH = 273;
$hx_$exports_lime_ui_ScanCode.APP_CONTROL_BOOKMARKS = 274;
$hx_$exports_lime_ui_ScanCode.BRIGHTNESS_DOWN = 275;
$hx_$exports_lime_ui_ScanCode.BRIGHTNESS_UP = 276;
$hx_$exports_lime_ui_ScanCode.DISPLAY_SWITCH = 277;
$hx_$exports_lime_ui_ScanCode.BACKLIGHT_TOGGLE = 278;
$hx_$exports_lime_ui_ScanCode.BACKLIGHT_DOWN = 279;
$hx_$exports_lime_ui_ScanCode.BACKLIGHT_UP = 280;
$hx_$exports_lime_ui_ScanCode.EJECT = 281;
$hx_$exports_lime_ui_ScanCode.SLEEP = 282;
$hx_$exports_lime_utils_Float32Array.BYTES_PER_ELEMENT = 4;
$hx_$exports_lime_utils_Float64Array.BYTES_PER_ELEMENT = 8;
$hx_$exports_lime_utils_Int16Array.BYTES_PER_ELEMENT = 2;
$hx_$exports_lime_utils_Int32Array.BYTES_PER_ELEMENT = 4;
$hx_$exports_lime_utils_Int8Array.BYTES_PER_ELEMENT = 1;
lime_utils__$Log_LogLevel_$Impl_$.NONE = 0;
lime_utils__$Log_LogLevel_$Impl_$.ERROR = 1;
lime_utils__$Log_LogLevel_$Impl_$.WARN = 2;
lime_utils__$Log_LogLevel_$Impl_$.INFO = 3;
lime_utils__$Log_LogLevel_$Impl_$.DEBUG = 4;
lime_utils__$Log_LogLevel_$Impl_$.VERBOSE = 5;
$hx_$exports_lime_utils_UInt16Array.BYTES_PER_ELEMENT = 2;
$hx_$exports_lime_utils_UInt32Array.BYTES_PER_ELEMENT = 4;
$hx_$exports_lime_utils_UInt8Array.BYTES_PER_ELEMENT = 1;
$hx_$exports_lime_utils_UInt8ClampedArray.BYTES_PER_ELEMENT = 1;
openfl_Lib.__sentWarnings = new haxe_ds_StringMap();
openfl__$internal_Lib.__sentWarnings = new haxe_ds_StringMap();
openfl__$internal_TouchData.__pool = new lime_utils_ObjectPool_$openfl_$_$internal_$TouchData(function() {
	return new openfl__$internal_TouchData();
},function(data) {
	data.reset();
});
openfl__$internal_renderer_DrawCommandBuffer.empty = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_cairo_CairoGraphics.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_cairo_CairoGraphics.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_cairo_CairoGraphics.fillCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_canvas_CanvasGraphics.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_canvas_CanvasGraphics.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_canvas_CanvasRenderer.scale = 1;
openfl__$internal_renderer_dom_DOMTextField.__regexColor = new $hx_exports.EReg("color=(\"#([^\"]+)\"|'#([^']+)')","i");
openfl__$internal_renderer_dom_DOMTextField.__regexFace = new $hx_exports.EReg("face=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_renderer_dom_DOMTextField.__regexFont = new $hx_exports.EReg("<font ([^>]+)>","gi");
openfl__$internal_renderer_dom_DOMTextField.__regexCloseFont = new $hx_exports.EReg("</font>","gi");
openfl__$internal_renderer_dom_DOMTextField.__regexSize = new $hx_exports.EReg("size=(\"([^\"]+)\"|'([^']+)')","i");
openfl_geom_Point.__pool = new lime_utils_ObjectPool_$openfl_$geom_$Point(function() {
	return new openfl_geom_Point();
},function(p) {
	p.setTo(0,0);
});
openfl_geom_Rectangle.__pool = new lime_utils_ObjectPool_$openfl_$geom_$Rectangle(function() {
	return new openfl_geom_Rectangle();
},function(r) {
	r.setTo(0,0,0,0);
});
openfl__$internal_renderer_flash_FlashTilemap.defaultColorTransform = new openfl_geom_ColorTransform();
openfl__$internal_renderer_flash_FlashTilemap.destPoint = new openfl_geom_Point();
openfl__$internal_renderer_flash_FlashTilemap.sourceRect = new openfl_geom_Rectangle();
openfl__$internal_renderer_opengl_GLMaskManager.maskShader = new openfl__$internal_renderer_opengl_GLMaskShader();
openfl__$internal_renderer_opengl_GLTilemap.__skippedTiles = new $hx_exports.haxe.ds.IntMap();
openfl__$internal_renderer_opengl_stats_GLStats.drawCallsCounters = (function($this) {
	var $r;
	var _g = new $hx_exports.haxe.ds.IntMap();
	_g.set(0,new openfl__$internal_renderer_opengl_stats_DrawCallCounter());
	_g.set(1,new openfl__$internal_renderer_opengl_stats_DrawCallCounter());
	$r = _g;
	return $r;
}(this));
openfl__$internal_stage3D_AGALConverter.limitedProfile = true;
openfl__$internal_stage3D_Context3DStateCache.FLOATS_PER_REGISTER = 4;
openfl__$internal_stage3D_Context3DStateCache.MAX_NUM_REGISTERS = 1024;
openfl__$internal_stage3D_Context3DStateCache.disableCache = true;
openfl__$internal_stage3D_GLUtils.debug = false;
openfl__$internal_stage3D_opengl_GLTextureBase.__supportsBGRA = null;
openfl__$internal_stage3D_opengl_GLTextureBase.__compressedTextureFormats = null;
openfl__$internal_swf_SWFLite.instances = new haxe_ds_StringMap();
openfl__$internal_text_HTMLParser.__regexAlign = new $hx_exports.EReg("align=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexBreakTag = new $hx_exports.EReg("<br\\s*/?>","gi");
openfl__$internal_text_HTMLParser.__regexBlockIndent = new $hx_exports.EReg("blockindent=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexColor = new $hx_exports.EReg("color=(\"#([^\"]+)\"|'#([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexEntities = [new $hx_exports.EReg("&quot;","g"),new $hx_exports.EReg("&apos;","g"),new $hx_exports.EReg("&amp;","g"),new $hx_exports.EReg("&lt;","g"),new $hx_exports.EReg("&gt;","g"),new $hx_exports.EReg("&nbsp;","g")];
openfl__$internal_text_HTMLParser.__regexFace = new $hx_exports.EReg("face=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexHTMLTag = new $hx_exports.EReg("<.*?>","g");
openfl__$internal_text_HTMLParser.__regexHref = new $hx_exports.EReg("href=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexIndent = new $hx_exports.EReg(" indent=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexLeading = new $hx_exports.EReg("leading=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexLeftMargin = new $hx_exports.EReg("leftmargin=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexRightMargin = new $hx_exports.EReg("rightmargin=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexSize = new $hx_exports.EReg("size=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexTabStops = new $hx_exports.EReg("tabstops=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_TextEngine.UTF8_TAB = 9;
openfl__$internal_text_TextEngine.UTF8_ENDLINE = 10;
openfl__$internal_text_TextEngine.UTF8_SPACE = 32;
openfl__$internal_text_TextEngine.UTF8_HYPHEN = 45;
openfl__$internal_text_TextEngine.__defaultFonts = new haxe_ds_StringMap();
openfl__$internal_utils_PerlinNoise.P = [151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180];
openfl_desktop__$ClipboardFormats_ClipboardFormats_$Impl_$.HTML_FORMAT = 0;
openfl_desktop__$ClipboardFormats_ClipboardFormats_$Impl_$.RICH_TEXT_FORMAT = 1;
openfl_desktop__$ClipboardFormats_ClipboardFormats_$Impl_$.TEXT_FORMAT = 2;
openfl_desktop__$ClipboardTransferMode_ClipboardTransferMode_$Impl_$.CLONE_ONLY = 0;
openfl_desktop__$ClipboardTransferMode_ClipboardTransferMode_$Impl_$.CLONE_PREFERRED = 1;
openfl_desktop__$ClipboardTransferMode_ClipboardTransferMode_$Impl_$.ORIGINAL_ONLY = 2;
openfl_desktop__$ClipboardTransferMode_ClipboardTransferMode_$Impl_$.ORIGINAL_PREFERRED = 3;
openfl_display_DisplayObject.__broadcastEvents = new haxe_ds_StringMap();
openfl_display_DisplayObject.__instanceCount = 0;
openfl_display_DisplayObject.__tempStack = new lime_utils_ObjectPool_$openfl_$Vector_$openfl_$display_$DisplayObject(function() {
	return openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
},function(stack) {
	stack.data.set_length(0);
});
openfl_display_BitmapData.__bufferStride = 26;
openfl_display_BitmapData.__supportsBGRA = null;
openfl_display_BitmapData.__tempVector = new $hx_exports.lime.math.Vector2();
openfl_display__$BlendMode_BlendMode_$Impl_$.ADD = 0;
openfl_display__$BlendMode_BlendMode_$Impl_$.ALPHA = 1;
openfl_display__$BlendMode_BlendMode_$Impl_$.DARKEN = 2;
openfl_display__$BlendMode_BlendMode_$Impl_$.DIFFERENCE = 3;
openfl_display__$BlendMode_BlendMode_$Impl_$.ERASE = 4;
openfl_display__$BlendMode_BlendMode_$Impl_$.HARDLIGHT = 5;
openfl_display__$BlendMode_BlendMode_$Impl_$.INVERT = 6;
openfl_display__$BlendMode_BlendMode_$Impl_$.LAYER = 7;
openfl_display__$BlendMode_BlendMode_$Impl_$.LIGHTEN = 8;
openfl_display__$BlendMode_BlendMode_$Impl_$.MULTIPLY = 9;
openfl_display__$BlendMode_BlendMode_$Impl_$.NORMAL = 10;
openfl_display__$BlendMode_BlendMode_$Impl_$.OVERLAY = 11;
openfl_display__$BlendMode_BlendMode_$Impl_$.SCREEN = 12;
openfl_display__$BlendMode_BlendMode_$Impl_$.SHADER = 13;
openfl_display__$BlendMode_BlendMode_$Impl_$.SUBTRACT = 14;
openfl_display__$CapsStyle_CapsStyle_$Impl_$.NONE = 0;
openfl_display__$CapsStyle_CapsStyle_$Impl_$.ROUND = 1;
openfl_display__$CapsStyle_CapsStyle_$Impl_$.SQUARE = 2;
openfl_display__$GradientType_GradientType_$Impl_$.LINEAR = 0;
openfl_display__$GradientType_GradientType_$Impl_$.RADIAL = 1;
openfl_display_Graphics.maxTextureHeight = null;
openfl_display_Graphics.maxTextureWidth = null;
openfl_display_GraphicsPath.SIN45 = 0.70710678118654752440084436210485;
openfl_display_GraphicsPath.TAN22 = 0.4142135623730950488016887242097;
openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.EVEN_ODD = 0;
openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.NON_ZERO = 1;
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.LINEAR_RGB = 0;
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.RGB = 1;
openfl_display__$JointStyle_JointStyle_$Impl_$.BEVEL = 0;
openfl_display__$JointStyle_JointStyle_$Impl_$.MITER = 1;
openfl_display__$JointStyle_JointStyle_$Impl_$.ROUND = 2;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.HORIZONTAL = 0;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.NONE = 1;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.NORMAL = 2;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.VERTICAL = 3;
openfl_display_LoaderInfo.__rootURL = $hx_exports.js.Browser.get_document().URL;
openfl_display_OpenGLView.CONTEXT_LOST = "glcontextlost";
openfl_display_OpenGLView.CONTEXT_RESTORED = "glcontextrestored";
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.ALWAYS = 0;
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.AUTO = 1;
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.NEVER = 2;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.BOOL = 0;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.BOOL2 = 1;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.BOOL3 = 2;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.BOOL4 = 3;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.FLOAT = 4;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.FLOAT2 = 5;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.FLOAT3 = 6;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.FLOAT4 = 7;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.INT = 8;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.INT2 = 9;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.INT3 = 10;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.INT4 = 11;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX2X2 = 12;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX2X3 = 13;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX2X4 = 14;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX3X2 = 15;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX3X3 = 16;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX3X4 = 17;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX4X2 = 18;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX4X3 = 19;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX4X4 = 20;
openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$.FAST = 0;
openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$.FULL = 1;
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.PAD = 0;
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.REFLECT = 1;
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.REPEAT = 2;
openfl_display_Stage.frameID = 1;
openfl_display__$StageAlign_StageAlign_$Impl_$.BOTTOM = 0;
openfl_display__$StageAlign_StageAlign_$Impl_$.BOTTOM_LEFT = 1;
openfl_display__$StageAlign_StageAlign_$Impl_$.BOTTOM_RIGHT = 2;
openfl_display__$StageAlign_StageAlign_$Impl_$.LEFT = 3;
openfl_display__$StageAlign_StageAlign_$Impl_$.RIGHT = 4;
openfl_display__$StageAlign_StageAlign_$Impl_$.TOP = 5;
openfl_display__$StageAlign_StageAlign_$Impl_$.TOP_LEFT = 6;
openfl_display__$StageAlign_StageAlign_$Impl_$.TOP_RIGHT = 7;
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.FULL_SCREEN = 0;
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.FULL_SCREEN_INTERACTIVE = 1;
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.NORMAL = 2;
openfl_display__$StageQuality_StageQuality_$Impl_$.BEST = 0;
openfl_display__$StageQuality_StageQuality_$Impl_$.HIGH = 1;
openfl_display__$StageQuality_StageQuality_$Impl_$.LOW = 2;
openfl_display__$StageQuality_StageQuality_$Impl_$.MEDIUM = 3;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.EXACT_FIT = 0;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.NO_BORDER = 1;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.NO_SCALE = 2;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.SHOW_ALL = 3;
openfl_geom_Matrix.__identity = new openfl_geom_Matrix();
openfl_geom_Matrix.__matrix3 = new $hx_exports.lime.math.Matrix3();
openfl_geom_Matrix.__pool = new lime_utils_ObjectPool_$openfl_$geom_$Matrix(function() {
	return new openfl_geom_Matrix();
},function(m) {
	m.identity();
});
openfl_display_Tile.__tempMatrix = new openfl_geom_Matrix();
openfl_display_TileArray.ID_INDEX = 0;
openfl_display_TileArray.RECT_INDEX = 1;
openfl_display_TileArray.MATRIX_INDEX = 5;
openfl_display_TileArray.ALPHA_INDEX = 11;
openfl_display_TileArray.COLOR_TRANSFORM_INDEX = 12;
openfl_display_TileArray.DATA_LENGTH = 21;
openfl_display_TileArray.SOURCE_DIRTY_INDEX = 0;
openfl_display_TileArray.MATRIX_DIRTY_INDEX = 1;
openfl_display_TileArray.ALPHA_DIRTY_INDEX = 2;
openfl_display_TileArray.COLOR_TRANSFORM_DIRTY_INDEX = 3;
openfl_display_TileArray.ALL_DIRTY_INDEX = 4;
openfl_display_TileArray.DIRTY_LENGTH = 5;
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.NEGATIVE = 0;
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.NONE = 1;
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.POSITIVE = 2;
openfl_display3D_Context3D.supportsVideoTexture = true;
openfl_display3D_Context3D.MAX_SAMPLERS = 8;
openfl_display3D_Context3D.MAX_ATTRIBUTES = 16;
openfl_display3D_Context3D.MAX_PROGRAM_REGISTERS = 128;
openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT = 0;
openfl_display3D_Context3D.DEPTH_STENCIL = 0;
openfl_display3D_Context3D.__stateCache = new openfl__$internal_stage3D_Context3DStateCache();
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.DRAW_CALLS = 0;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.COUNT_INDEX_BUFFER = 1;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.COUNT_VERTEX_BUFFER = 2;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.COUNT_TEXTURE = 3;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.COUNT_TEXTURE_COMPRESSED = 4;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.COUNT_PROGRAM = 5;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.MEM_INDEX_BUFFER = 6;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.MEM_VERTEX_BUFFER = 7;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.MEM_TEXTURE = 8;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.MEM_TEXTURE_COMPRESSED = 9;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.MEM_PROGRAM = 10;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.$length = 11;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.DESTINATION_ALPHA = 0;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.DESTINATION_COLOR = 1;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE = 2;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE_MINUS_DESTINATION_ALPHA = 3;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE_MINUS_DESTINATION_COLOR = 4;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE_MINUS_SOURCE_ALPHA = 5;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE_MINUS_SOURCE_COLOR = 6;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.SOURCE_ALPHA = 7;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.SOURCE_COLOR = 8;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ZERO = 9;
openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.DYNAMIC_DRAW = 0;
openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.STATIC_DRAW = 1;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.ALWAYS = 0;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.EQUAL = 1;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.GREATER = 2;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.GREATER_EQUAL = 3;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.LESS = 4;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.LESS_EQUAL = 5;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.NEVER = 6;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.NOT_EQUAL = 7;
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.MIPLINEAR = 0;
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.MIPNEAREST = 1;
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.MIPNONE = 2;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.BASELINE = 0;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.BASELINE_CONSTRAINED = 1;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.BASELINE_EXTENDED = 2;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.STANDARD = 3;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.STANDARD_CONSTRAINED = 4;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.STANDARD_EXTENDED = 5;
openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.FRAGMENT = 0;
openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.VERTEX = 1;
openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.AUTO = 0;
openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.SOFTWARE = 1;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.DECREMENT_SATURATE = 0;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.DECREMENT_WRAP = 1;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.INCREMENT_SATURATE = 2;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.INCREMENT_WRAP = 3;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.INVERT = 4;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.KEEP = 5;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.SET = 6;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.ZERO = 7;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.ANISOTROPIC16X = 0;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.ANISOTROPIC2X = 1;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.ANISOTROPIC4X = 2;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.ANISOTROPIC8X = 3;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.LINEAR = 4;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.NEAREST = 5;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.BGR_PACKED = 0;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.BGRA = 1;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.BGRA_PACKED = 2;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.COMPRESSED = 3;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.COMPRESSED_ALPHA = 4;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.RGBA_HALF_FLOAT = 5;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.BACK = 0;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.FRONT = 1;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.FRONT_AND_BACK = 2;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.NONE = 3;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.BYTES_4 = 0;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.FLOAT_1 = 1;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.FLOAT_2 = 2;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.FLOAT_3 = 3;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.FLOAT_4 = 4;
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.CLAMP = 0;
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.CLAMP_U_REPEAT_V = 1;
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.REPEAT = 2;
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.REPEAT_U_CLAMP_V = 3;
openfl_display3D_textures_Texture.__lowMemoryMode = false;
openfl_errors_Error.DEFAULT_TO_STRING = "Error";
openfl_events_Event.ACTIVATE = "activate";
openfl_events_Event.ADDED = "added";
openfl_events_Event.ADDED_TO_STAGE = "addedToStage";
openfl_events_Event.CANCEL = "cancel";
openfl_events_Event.CHANGE = "change";
openfl_events_Event.CLEAR = "clear";
openfl_events_Event.CLOSE = "close";
openfl_events_Event.COMPLETE = "complete";
openfl_events_Event.CONNECT = "connect";
openfl_events_Event.CONTEXT3D_CREATE = "context3DCreate";
openfl_events_Event.COPY = "copy";
openfl_events_Event.CUT = "cut";
openfl_events_Event.DEACTIVATE = "deactivate";
openfl_events_Event.ENTER_FRAME = "enterFrame";
openfl_events_Event.EXIT_FRAME = "exitFrame";
openfl_events_Event.FRAME_CONSTRUCTED = "frameConstructed";
openfl_events_Event.FRAME_LABEL = "frameLabel";
openfl_events_Event.FULLSCREEN = "fullScreen";
openfl_events_Event.ID3 = "id3";
openfl_events_Event.INIT = "init";
openfl_events_Event.MOUSE_LEAVE = "mouseLeave";
openfl_events_Event.OPEN = "open";
openfl_events_Event.PASTE = "paste";
openfl_events_Event.REMOVED = "removed";
openfl_events_Event.REMOVED_FROM_STAGE = "removedFromStage";
openfl_events_Event.RENDER = "render";
openfl_events_Event.RESIZE = "resize";
openfl_events_Event.SCROLL = "scroll";
openfl_events_Event.SELECT = "select";
openfl_events_Event.SELECT_ALL = "selectAll";
openfl_events_Event.SOUND_COMPLETE = "soundComplete";
openfl_events_Event.TAB_CHILDREN_CHANGE = "tabChildrenChange";
openfl_events_Event.TAB_ENABLED_CHANGE = "tabEnabledChange";
openfl_events_Event.TAB_INDEX_CHANGE = "tabIndexChange";
openfl_events_Event.TEXTURE_READY = "textureReady";
openfl_events_Event.UNLOAD = "unload";
openfl_events_AccelerometerEvent.UPDATE = "update";
openfl_events_ActivityEvent.ACTIVITY = "activity";
openfl_events_TextEvent.LINK = "link";
openfl_events_TextEvent.TEXT_INPUT = "textInput";
openfl_events_ErrorEvent.ERROR = "error";
openfl_events_AsyncErrorEvent.ASYNC_ERROR = "asyncError";
openfl_events_ContextMenuEvent.MENU_ITEM_SELECT = "menuItemSelect";
openfl_events_ContextMenuEvent.MENU_SELECT = "menuSelect";
openfl_events_DataEvent.DATA = "data";
openfl_events_DataEvent.UPLOAD_COMPLETE_DATA = "uploadCompleteData";
openfl_events_FocusEvent.FOCUS_IN = "focusIn";
openfl_events_FocusEvent.FOCUS_OUT = "focusOut";
openfl_events_FocusEvent.KEY_FOCUS_CHANGE = "keyFocusChange";
openfl_events_FocusEvent.MOUSE_FOCUS_CHANGE = "mouseFocusChange";
openfl_events_FullScreenEvent.FULL_SCREEN = "fullScreen";
openfl_events_FullScreenEvent.FULL_SCREEN_INTERACTIVE_ACCEPTED = "fullScreenInteractiveAccepted";
openfl_events_GameInputEvent.DEVICE_ADDED = "deviceAdded";
openfl_events_GameInputEvent.DEVICE_REMOVED = "deviceRemoved";
openfl_events_GameInputEvent.DEVICE_UNUSABLE = "deviceUnusable";
openfl_events_HTTPStatusEvent.HTTP_RESPONSE_STATUS = "httpResponseStatus";
openfl_events_HTTPStatusEvent.HTTP_STATUS = "httpStatus";
openfl_events_IOErrorEvent.IO_ERROR = "ioError";
openfl_events_KeyboardEvent.KEY_DOWN = "keyDown";
openfl_events_KeyboardEvent.KEY_UP = "keyUp";
openfl_events_MouseEvent.CLICK = "click";
openfl_events_MouseEvent.DOUBLE_CLICK = "doubleClick";
openfl_events_MouseEvent.MIDDLE_CLICK = "middleClick";
openfl_events_MouseEvent.MIDDLE_MOUSE_DOWN = "middleMouseDown";
openfl_events_MouseEvent.MIDDLE_MOUSE_UP = "middleMouseUp";
openfl_events_MouseEvent.MOUSE_DOWN = "mouseDown";
openfl_events_MouseEvent.MOUSE_MOVE = "mouseMove";
openfl_events_MouseEvent.MOUSE_OUT = "mouseOut";
openfl_events_MouseEvent.MOUSE_OVER = "mouseOver";
openfl_events_MouseEvent.MOUSE_UP = "mouseUp";
openfl_events_MouseEvent.MOUSE_WHEEL = "mouseWheel";
openfl_events_MouseEvent.RELEASE_OUTSIDE = "releaseOutside";
openfl_events_MouseEvent.RIGHT_CLICK = "rightClick";
openfl_events_MouseEvent.RIGHT_MOUSE_DOWN = "rightMouseDown";
openfl_events_MouseEvent.RIGHT_MOUSE_UP = "rightMouseUp";
openfl_events_MouseEvent.ROLL_OUT = "rollOut";
openfl_events_MouseEvent.ROLL_OVER = "rollOver";
openfl_events_NetStatusEvent.NET_STATUS = "netStatus";
openfl_events_ProgressEvent.PROGRESS = "progress";
openfl_events_ProgressEvent.SOCKET_DATA = "socketData";
openfl_events_SampleDataEvent.SAMPLE_DATA = "sampleData";
openfl_events_SecurityErrorEvent.SECURITY_ERROR = "securityError";
openfl_events_TimerEvent.TIMER = "timer";
openfl_events_TimerEvent.TIMER_COMPLETE = "timerComplete";
openfl_events_TouchEvent.TOUCH_BEGIN = "touchBegin";
openfl_events_TouchEvent.TOUCH_END = "touchEnd";
openfl_events_TouchEvent.TOUCH_MOVE = "touchMove";
openfl_events_TouchEvent.TOUCH_OUT = "touchOut";
openfl_events_TouchEvent.TOUCH_OVER = "touchOver";
openfl_events_TouchEvent.TOUCH_ROLL_OUT = "touchRollOut";
openfl_events_TouchEvent.TOUCH_ROLL_OVER = "touchRollOver";
openfl_events_TouchEvent.TOUCH_TAP = "touchTap";
openfl_events_UncaughtErrorEvent.UNCAUGHT_ERROR = "uncaughtError";
openfl_external_ExternalInterface.available = true;
openfl_external_ExternalInterface.marshallExceptions = false;
openfl_filters__$BitmapFilterType_BitmapFilterType_$Impl_$.FULL = 0;
openfl_filters__$BitmapFilterType_BitmapFilterType_$Impl_$.INNER = 1;
openfl_filters__$BitmapFilterType_BitmapFilterType_$Impl_$.OUTER = 2;
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.AXIS_ANGLE = 0;
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.EULER_ANGLES = 1;
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.QUATERNION = 2;
openfl_geom_PerspectiveProjection.TO_RADIAN = 0.01745329251994329577;
openfl_media_SoundMixer.MAX_ACTIVE_CHANNELS = 32;
openfl_media_SoundMixer.__soundChannels = [];
openfl_media_SoundMixer.__soundTransform = new openfl_media_SoundTransform();
openfl_media_Video.__bufferStride = 26;
openfl_net_NetConnection.CONNECT_SUCCESS = "NetConnection.Connect.Success";
openfl_net_SharedObject.defaultObjectEncoding = 3;
openfl_net__$SharedObjectFlushStatus_SharedObjectFlushStatus_$Impl_$.FLUSHED = 0;
openfl_net__$SharedObjectFlushStatus_SharedObjectFlushStatus_$Impl_$.PENDING = 1;
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.BINARY = 0;
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.TEXT = 1;
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.VARIABLES = 2;
openfl_net_URLRequestDefaults.followRedirects = true;
openfl_net_URLRequestDefaults.idleTimeout = 0;
openfl_net_URLRequestDefaults.manageCookies = false;
openfl_printing_PrintJob.isSupported = true;
openfl_printing__$PrintJobOrientation_PrintJobOrientation_$Impl_$.LANDSCAPE = 0;
openfl_printing__$PrintJobOrientation_PrintJobOrientation_$Impl_$.PORTRAIT = 1;
openfl_profiler_Telemetry.spanMarker = 0.0;
openfl_sensors_Accelerometer.currentX = 0.0;
openfl_sensors_Accelerometer.currentY = 1.0;
openfl_sensors_Accelerometer.currentZ = 0.0;
openfl_sensors_Accelerometer.defaultInterval = 34;
openfl_sensors_Accelerometer.initialized = false;
openfl_sensors_Accelerometer.supported = false;
openfl_system_ApplicationDomain.currentDomain = new openfl_system_ApplicationDomain(null);
openfl_system_Capabilities.avHardwareDisable = true;
openfl_system_Capabilities.hasAccessibility = false;
openfl_system_Capabilities.hasAudio = true;
openfl_system_Capabilities.hasAudioEncoder = false;
openfl_system_Capabilities.hasEmbeddedVideo = false;
openfl_system_Capabilities.hasIME = false;
openfl_system_Capabilities.hasMP3 = false;
openfl_system_Capabilities.hasPrinting = true;
openfl_system_Capabilities.hasScreenBroadcast = false;
openfl_system_Capabilities.hasScreenPlayback = false;
openfl_system_Capabilities.hasStreamingAudio = false;
openfl_system_Capabilities.hasStreamingVideo = false;
openfl_system_Capabilities.hasTLS = true;
openfl_system_Capabilities.hasVideoEncoder = true;
openfl_system_Capabilities.isDebugger = false;
openfl_system_Capabilities.isEmbeddedInAcrobat = false;
openfl_system_Capabilities.localFileReadDisable = false;
openfl_system_Capabilities.maxLevelIDC = 0;
openfl_system_Capabilities.playerType = "StandAlone";
openfl_system_Capabilities.screenColor = "color";
openfl_system_Capabilities.serverString = "";
openfl_system_Capabilities.supports32BitProcesses = false;
openfl_system_Capabilities.supports64BitProcesses = false;
openfl_system_Capabilities.touchscreenType = 0;
openfl_system_Capabilities.__standardDensities = [120,160,240,320,480,640,800,960];
openfl_system_Security.LOCAL_TRUSTED = "localTrusted";
openfl_system_Security.LOCAL_WITH_FILE = "localWithFile";
openfl_system_Security.LOCAL_WITH_NETWORK = "localWithNetwork";
openfl_system_Security.REMOTE = "remote";
openfl_system_SecurityDomain.currentDomain = new openfl_system_SecurityDomain();
openfl_system_System.useCodePage = false;
openfl_system__$TouchscreenType_TouchscreenType_$Impl_$.FINGER = 0;
openfl_system__$TouchscreenType_TouchscreenType_$Impl_$.NONE = 1;
openfl_system__$TouchscreenType_TouchscreenType_$Impl_$.STYLUS = 2;
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.ADVANCED = 0;
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.NORMAL = 1;
openfl_text_Font.__fontByName = new haxe_ds_StringMap();
openfl_text_Font.__registeredFonts = [];
openfl_text__$FontStyle_FontStyle_$Impl_$.BOLD = 0;
openfl_text__$FontStyle_FontStyle_$Impl_$.BOLD_ITALIC = 1;
openfl_text__$FontStyle_FontStyle_$Impl_$.ITALIC = 2;
openfl_text__$FontStyle_FontStyle_$Impl_$.REGULAR = 3;
openfl_text__$FontType_FontType_$Impl_$.DEVICE = 0;
openfl_text__$FontType_FontType_$Impl_$.EMBEDDED = 1;
openfl_text__$FontType_FontType_$Impl_$.EMBEDDED_CFF = 2;
openfl_text__$GridFitType_GridFitType_$Impl_$.NONE = 0;
openfl_text__$GridFitType_GridFitType_$Impl_$.PIXEL = 1;
openfl_text__$GridFitType_GridFitType_$Impl_$.SUBPIXEL = 2;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.CENTER = 0;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.LEFT = 1;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.NONE = 2;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.RIGHT = 3;
openfl_text__$TextFieldType_TextFieldType_$Impl_$.DYNAMIC = 0;
openfl_text__$TextFieldType_TextFieldType_$Impl_$.INPUT = 1;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.CENTER = 0;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.END = 1;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.JUSTIFY = 2;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.LEFT = 3;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.RIGHT = 4;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.START = 5;
openfl_ui_GameInput.isSupported = true;
openfl_ui_GameInput.numDevices = 0;
openfl_ui_GameInput.__deviceList = [];
openfl_ui_GameInput.__devices = new $hx_exports.haxe.ds.ObjectMap();
openfl_ui_GameInput.__instances = [];
openfl_ui_GameInputDevice.MAX_BUFFER_SIZE = 32000;
openfl_ui_Keyboard.NUMBER_0 = 48;
openfl_ui_Keyboard.NUMBER_1 = 49;
openfl_ui_Keyboard.NUMBER_2 = 50;
openfl_ui_Keyboard.NUMBER_3 = 51;
openfl_ui_Keyboard.NUMBER_4 = 52;
openfl_ui_Keyboard.NUMBER_5 = 53;
openfl_ui_Keyboard.NUMBER_6 = 54;
openfl_ui_Keyboard.NUMBER_7 = 55;
openfl_ui_Keyboard.NUMBER_8 = 56;
openfl_ui_Keyboard.NUMBER_9 = 57;
openfl_ui_Keyboard.A = 65;
openfl_ui_Keyboard.B = 66;
openfl_ui_Keyboard.C = 67;
openfl_ui_Keyboard.D = 68;
openfl_ui_Keyboard.E = 69;
openfl_ui_Keyboard.F = 70;
openfl_ui_Keyboard.G = 71;
openfl_ui_Keyboard.H = 72;
openfl_ui_Keyboard.I = 73;
openfl_ui_Keyboard.J = 74;
openfl_ui_Keyboard.K = 75;
openfl_ui_Keyboard.L = 76;
openfl_ui_Keyboard.M = 77;
openfl_ui_Keyboard.N = 78;
openfl_ui_Keyboard.O = 79;
openfl_ui_Keyboard.P = 80;
openfl_ui_Keyboard.Q = 81;
openfl_ui_Keyboard.R = 82;
openfl_ui_Keyboard.S = 83;
openfl_ui_Keyboard.T = 84;
openfl_ui_Keyboard.U = 85;
openfl_ui_Keyboard.V = 86;
openfl_ui_Keyboard.W = 87;
openfl_ui_Keyboard.X = 88;
openfl_ui_Keyboard.Y = 89;
openfl_ui_Keyboard.Z = 90;
openfl_ui_Keyboard.NUMPAD_0 = 96;
openfl_ui_Keyboard.NUMPAD_1 = 97;
openfl_ui_Keyboard.NUMPAD_2 = 98;
openfl_ui_Keyboard.NUMPAD_3 = 99;
openfl_ui_Keyboard.NUMPAD_4 = 100;
openfl_ui_Keyboard.NUMPAD_5 = 101;
openfl_ui_Keyboard.NUMPAD_6 = 102;
openfl_ui_Keyboard.NUMPAD_7 = 103;
openfl_ui_Keyboard.NUMPAD_8 = 104;
openfl_ui_Keyboard.NUMPAD_9 = 105;
openfl_ui_Keyboard.NUMPAD_MULTIPLY = 106;
openfl_ui_Keyboard.NUMPAD_ADD = 107;
openfl_ui_Keyboard.NUMPAD_ENTER = 108;
openfl_ui_Keyboard.NUMPAD_SUBTRACT = 109;
openfl_ui_Keyboard.NUMPAD_DECIMAL = 110;
openfl_ui_Keyboard.NUMPAD_DIVIDE = 111;
openfl_ui_Keyboard.F1 = 112;
openfl_ui_Keyboard.F2 = 113;
openfl_ui_Keyboard.F3 = 114;
openfl_ui_Keyboard.F4 = 115;
openfl_ui_Keyboard.F5 = 116;
openfl_ui_Keyboard.F6 = 117;
openfl_ui_Keyboard.F7 = 118;
openfl_ui_Keyboard.F8 = 119;
openfl_ui_Keyboard.F9 = 120;
openfl_ui_Keyboard.F10 = 121;
openfl_ui_Keyboard.F11 = 122;
openfl_ui_Keyboard.F12 = 123;
openfl_ui_Keyboard.F13 = 124;
openfl_ui_Keyboard.F14 = 125;
openfl_ui_Keyboard.F15 = 126;
openfl_ui_Keyboard.BACKSPACE = 8;
openfl_ui_Keyboard.TAB = 9;
openfl_ui_Keyboard.ALTERNATE = 18;
openfl_ui_Keyboard.ENTER = 13;
openfl_ui_Keyboard.COMMAND = 15;
openfl_ui_Keyboard.SHIFT = 16;
openfl_ui_Keyboard.CONTROL = 17;
openfl_ui_Keyboard.BREAK = 19;
openfl_ui_Keyboard.CAPS_LOCK = 20;
openfl_ui_Keyboard.NUMPAD = 21;
openfl_ui_Keyboard.ESCAPE = 27;
openfl_ui_Keyboard.SPACE = 32;
openfl_ui_Keyboard.PAGE_UP = 33;
openfl_ui_Keyboard.PAGE_DOWN = 34;
openfl_ui_Keyboard.END = 35;
openfl_ui_Keyboard.HOME = 36;
openfl_ui_Keyboard.LEFT = 37;
openfl_ui_Keyboard.RIGHT = 39;
openfl_ui_Keyboard.UP = 38;
openfl_ui_Keyboard.DOWN = 40;
openfl_ui_Keyboard.INSERT = 45;
openfl_ui_Keyboard.DELETE = 46;
openfl_ui_Keyboard.NUMLOCK = 144;
openfl_ui_Keyboard.SEMICOLON = 186;
openfl_ui_Keyboard.EQUAL = 187;
openfl_ui_Keyboard.COMMA = 188;
openfl_ui_Keyboard.MINUS = 189;
openfl_ui_Keyboard.PERIOD = 190;
openfl_ui_Keyboard.SLASH = 191;
openfl_ui_Keyboard.BACKQUOTE = 192;
openfl_ui_Keyboard.LEFTBRACKET = 219;
openfl_ui_Keyboard.BACKSLASH = 220;
openfl_ui_Keyboard.RIGHTBRACKET = 221;
openfl_ui_Keyboard.QUOTE = 222;
openfl_ui_Mouse.supportsCursor = true;
openfl_ui_Mouse.supportsNativeCursor = true;
openfl_ui_Mouse.__cursor = "auto";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.ARROW = "arrow";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.AUTO = "auto";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.BUTTON = "button";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.HAND = "hand";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.IBEAM = "ibeam";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.__CROSSHAIR = "crosshair";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.__CUSTOM = "custom";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.__MOVE = "move";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.__RESIZE_NESW = "resize_nesw";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.__RESIZE_NS = "resize_ns";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.__RESIZE_NWSE = "resize_nwse";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.__RESIZE_WE = "resize_we";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.__WAIT = "wait";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.__WAIT_ARROW = "waitarrow";
openfl_ui__$MultitouchInputMode_MultitouchInputMode_$Impl_$.GESTURE = 0;
openfl_ui__$MultitouchInputMode_MultitouchInputMode_$Impl_$.NONE = 1;
openfl_ui__$MultitouchInputMode_MultitouchInputMode_$Impl_$.TOUCH_POINT = 2;
openfl_utils_AGALMiniAssembler.OPMAP = new haxe_ds_StringMap();
openfl_utils_AGALMiniAssembler.REGMAP = new haxe_ds_StringMap();
openfl_utils_AGALMiniAssembler.SAMPLEMAP = new haxe_ds_StringMap();
openfl_utils_AGALMiniAssembler.MAX_NESTING = 4;
openfl_utils_AGALMiniAssembler.MAX_OPCODES = 4096;
openfl_utils_AGALMiniAssembler.FRAGMENT = "fragment";
openfl_utils_AGALMiniAssembler.VERTEX = "vertex";
openfl_utils_AGALMiniAssembler.SAMPLER_TYPE_SHIFT = 8;
openfl_utils_AGALMiniAssembler.SAMPLER_DIM_SHIFT = 12;
openfl_utils_AGALMiniAssembler.SAMPLER_SPECIAL_SHIFT = 16;
openfl_utils_AGALMiniAssembler.SAMPLER_REPEAT_SHIFT = 20;
openfl_utils_AGALMiniAssembler.SAMPLER_MIPMAP_SHIFT = 24;
openfl_utils_AGALMiniAssembler.SAMPLER_FILTER_SHIFT = 28;
openfl_utils_AGALMiniAssembler.REG_WRITE = 1;
openfl_utils_AGALMiniAssembler.REG_READ = 2;
openfl_utils_AGALMiniAssembler.REG_FRAG = 32;
openfl_utils_AGALMiniAssembler.REG_VERT = 64;
openfl_utils_AGALMiniAssembler.OP_SCALAR = 1;
openfl_utils_AGALMiniAssembler.OP_SPECIAL_TEX = 8;
openfl_utils_AGALMiniAssembler.OP_SPECIAL_MATRIX = 16;
openfl_utils_AGALMiniAssembler.OP_FRAG_ONLY = 32;
openfl_utils_AGALMiniAssembler.OP_VERT_ONLY = 64;
openfl_utils_AGALMiniAssembler.OP_NO_DEST = 128;
openfl_utils_AGALMiniAssembler.OP_VERSION2 = 256;
openfl_utils_AGALMiniAssembler.OP_INCNEST = 512;
openfl_utils_AGALMiniAssembler.OP_DECNEST = 1024;
openfl_utils_AGALMiniAssembler.MOV = "mov";
openfl_utils_AGALMiniAssembler.ADD = "add";
openfl_utils_AGALMiniAssembler.SUB = "sub";
openfl_utils_AGALMiniAssembler.MUL = "mul";
openfl_utils_AGALMiniAssembler.DIV = "div";
openfl_utils_AGALMiniAssembler.RCP = "rcp";
openfl_utils_AGALMiniAssembler.MIN = "min";
openfl_utils_AGALMiniAssembler.MAX = "max";
openfl_utils_AGALMiniAssembler.FRC = "frc";
openfl_utils_AGALMiniAssembler.SQT = "sqt";
openfl_utils_AGALMiniAssembler.RSQ = "rsq";
openfl_utils_AGALMiniAssembler.POW = "pow";
openfl_utils_AGALMiniAssembler.LOG = "log";
openfl_utils_AGALMiniAssembler.EXP = "exp";
openfl_utils_AGALMiniAssembler.NRM = "nrm";
openfl_utils_AGALMiniAssembler.SIN = "sin";
openfl_utils_AGALMiniAssembler.COS = "cos";
openfl_utils_AGALMiniAssembler.CRS = "crs";
openfl_utils_AGALMiniAssembler.DP3 = "dp3";
openfl_utils_AGALMiniAssembler.DP4 = "dp4";
openfl_utils_AGALMiniAssembler.ABS = "abs";
openfl_utils_AGALMiniAssembler.NEG = "neg";
openfl_utils_AGALMiniAssembler.SAT = "sat";
openfl_utils_AGALMiniAssembler.M33 = "m33";
openfl_utils_AGALMiniAssembler.M44 = "m44";
openfl_utils_AGALMiniAssembler.M34 = "m34";
openfl_utils_AGALMiniAssembler.DDX = "ddx";
openfl_utils_AGALMiniAssembler.DDY = "ddy";
openfl_utils_AGALMiniAssembler.IFE = "ife";
openfl_utils_AGALMiniAssembler.INE = "ine";
openfl_utils_AGALMiniAssembler.IFG = "ifg";
openfl_utils_AGALMiniAssembler.IFL = "ifl";
openfl_utils_AGALMiniAssembler.IEG = "ieg";
openfl_utils_AGALMiniAssembler.IEL = "iel";
openfl_utils_AGALMiniAssembler.ELS = "els";
openfl_utils_AGALMiniAssembler.EIF = "eif";
openfl_utils_AGALMiniAssembler.TED = "ted";
openfl_utils_AGALMiniAssembler.KIL = "kil";
openfl_utils_AGALMiniAssembler.TEX = "tex";
openfl_utils_AGALMiniAssembler.SGE = "sge";
openfl_utils_AGALMiniAssembler.SLT = "slt";
openfl_utils_AGALMiniAssembler.SGN = "sgn";
openfl_utils_AGALMiniAssembler.SEQ = "seq";
openfl_utils_AGALMiniAssembler.SNE = "sne";
openfl_utils_AGALMiniAssembler.VA = "va";
openfl_utils_AGALMiniAssembler.VC = "vc";
openfl_utils_AGALMiniAssembler.VT = "vt";
openfl_utils_AGALMiniAssembler.VO = "vo";
openfl_utils_AGALMiniAssembler.VI = "vi";
openfl_utils_AGALMiniAssembler.FC = "fc";
openfl_utils_AGALMiniAssembler.FT = "ft";
openfl_utils_AGALMiniAssembler.FS = "fs";
openfl_utils_AGALMiniAssembler.FO = "fo";
openfl_utils_AGALMiniAssembler.FD = "fd";
openfl_utils_AGALMiniAssembler.IID = "iid";
openfl_utils_AGALMiniAssembler.D2 = "2d";
openfl_utils_AGALMiniAssembler.D3 = "3d";
openfl_utils_AGALMiniAssembler.CUBE = "cube";
openfl_utils_AGALMiniAssembler.MIPNEAREST = "mipnearest";
openfl_utils_AGALMiniAssembler.MIPLINEAR = "miplinear";
openfl_utils_AGALMiniAssembler.MIPNONE = "mipnone";
openfl_utils_AGALMiniAssembler.NOMIP = "nomip";
openfl_utils_AGALMiniAssembler.NEAREST = "nearest";
openfl_utils_AGALMiniAssembler.LINEAR = "linear";
openfl_utils_AGALMiniAssembler.ANISOTROPIC2X = "anisotropic2x";
openfl_utils_AGALMiniAssembler.ANISOTROPIC4X = "anisotropic4x";
openfl_utils_AGALMiniAssembler.ANISOTROPIC8X = "anisotropic8x";
openfl_utils_AGALMiniAssembler.ANISOTROPIC16X = "anisotropic16x";
openfl_utils_AGALMiniAssembler.CENTROID = "centroid";
openfl_utils_AGALMiniAssembler.SINGLE = "single";
openfl_utils_AGALMiniAssembler.IGNORESAMPLER = "ignoresampler";
openfl_utils_AGALMiniAssembler.REPEAT = "repeat";
openfl_utils_AGALMiniAssembler.WRAP = "wrap";
openfl_utils_AGALMiniAssembler.CLAMP = "clamp";
openfl_utils_AGALMiniAssembler.REPEAT_U_CLAMP_V = "repeat_u_clamp_v";
openfl_utils_AGALMiniAssembler.CLAMP_U_REPEAT_V = "clamp_u_repeat_v";
openfl_utils_AGALMiniAssembler.RGBA = "rgba";
openfl_utils_AGALMiniAssembler.COMPRESSED = "compressed";
openfl_utils_AGALMiniAssembler.COMPRESSEDALPHA = "compressedalpha";
openfl_utils_AGALMiniAssembler.DXT1 = "dxt1";
openfl_utils_AGALMiniAssembler.DXT5 = "dxt5";
openfl_utils_AGALMiniAssembler.VIDEO = "video";
openfl_utils_AGALMiniAssembler.initialized = false;
openfl_utils_Assets.cache = new openfl_utils_AssetCache();
openfl_utils_Assets.dispatcher = new openfl_events_EventDispatcher();
openfl_utils_Assets.libraryByLastLoadedSymbolName = new haxe_ds_StringMap();
openfl_utils__$ByteArray_ByteArray_$Impl_$.__bytePointer = (function($this) {
	var $r;
	var this1 = new lime_utils_BytePointerData(null,0);
	$r = this1;
	return $r;
}(this));
openfl_utils_ByteArrayData.__defaultEndian = null;
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.DEFLATE = 0;
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.LZMA = 1;
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.ZLIB = 2;
openfl_utils__$Endian_Endian_$Impl_$.BIG_ENDIAN = 0;
openfl_utils__$Endian_Endian_$Impl_$.LITTLE_ENDIAN = 1;
openfl_utils_TouchData.__pool = new lime_utils_ObjectPool_$openfl_$utils_$TouchData(function() {
	return new openfl_utils_TouchData();
},function(data) {
	data.reset();
});
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
